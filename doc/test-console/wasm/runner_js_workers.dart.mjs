// Compiles a dart2wasm-generated main module from `source` which can then
// instantiatable via the `instantiate` method.
//
// `source` needs to be a `Response` object (or promise thereof) e.g. created
// via the `fetch()` JS API.
export async function compileStreaming(source) {
  const builtins = {builtins: ['js-string']};
  return new CompiledApp(
      await WebAssembly.compileStreaming(source, builtins), builtins);
}

// Compiles a dart2wasm-generated wasm modules from `bytes` which is then
// instantiatable via the `instantiate` method.
export async function compile(bytes) {
  const builtins = {builtins: ['js-string']};
  return new CompiledApp(await WebAssembly.compile(bytes, builtins), builtins);
}

// DEPRECATED: Please use `compile` or `compileStreaming` to get a compiled app,
// use `instantiate` method to get an instantiated app and then call
// `invokeMain` to invoke the main function.
export async function instantiate(modulePromise, importObjectPromise) {
  var moduleOrCompiledApp = await modulePromise;
  if (!(moduleOrCompiledApp instanceof CompiledApp)) {
    moduleOrCompiledApp = new CompiledApp(moduleOrCompiledApp);
  }
  const instantiatedApp = await moduleOrCompiledApp.instantiate(await importObjectPromise);
  return instantiatedApp.instantiatedModule;
}

// DEPRECATED: Please use `compile` or `compileStreaming` to get a compiled app,
// use `instantiate` method to get an instantiated app and then call
// `invokeMain` to invoke the main function.
export const invoke = (moduleInstance, ...args) => {
  moduleInstance.exports.$invokeMain(args);
}

class CompiledApp {
  constructor(module, builtins) {
    this.module = module;
    this.builtins = builtins;
  }

  // The second argument is an options object containing:
  // `loadDeferredWasm` is a JS function that takes a module name matching a
  //   wasm file produced by the dart2wasm compiler and returns the bytes to
  //   load the module. These bytes can be in either a format supported by
  //   `WebAssembly.compile` or `WebAssembly.compileStreaming`.
  async instantiate(additionalImports, {loadDeferredWasm, loadDynamicModule} = {}) {
    let dartInstance;

    // Prints to the console
    function printToConsole(value) {
      if (typeof dartPrint == "function") {
        dartPrint(value);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(value);
        return;
      }
      if (typeof print == "function") {
        print(value);
        return;
      }

      throw "Unable to print message: " + js;
    }

    // A special symbol attached to functions that wrap Dart functions.
    const jsWrappedDartFunctionSymbol = Symbol("JSWrappedDartFunction");

    function finalizeWrapper(dartFunction, wrapped) {
      wrapped.dartFunction = dartFunction;
      wrapped[jsWrappedDartFunctionSymbol] = true;
      return wrapped;
    }

    // Imports
    const dart2wasm = {
            _3: (o, t) => typeof o === t,
      _4: (o, c) => o instanceof c,
      _7: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._7(f,arguments.length,x0) }),
      _8: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._8(f,arguments.length,x0) }),
      _27: (o) => !!o,
      _36: () => new Array(),
      _37: x0 => new Array(x0),
      _39: x0 => x0.length,
      _41: (x0,x1) => x0[x1],
      _42: (x0,x1,x2) => x0[x1] = x2,
      _45: (x0,x1,x2) => new DataView(x0,x1,x2),
      _47: x0 => new Int8Array(x0),
      _48: (x0,x1,x2) => new Uint8Array(x0,x1,x2),
      _49: x0 => new Uint8Array(x0),
      _51: x0 => new Uint8ClampedArray(x0),
      _53: x0 => new Int16Array(x0),
      _55: x0 => new Uint16Array(x0),
      _57: x0 => new Int32Array(x0),
      _59: x0 => new Uint32Array(x0),
      _61: x0 => new Float32Array(x0),
      _63: x0 => new Float64Array(x0),
      _74: Date.now,
      _76: s => new Date(s * 1000).getTimezoneOffset() * 60,
      _78: () => {
        let stackString = new Error().stack.toString();
        let frames = stackString.split('\n');
        let drop = 2;
        if (frames[0] === 'Error') {
            drop += 1;
        }
        return frames.slice(drop).join('\n');
      },
      _79: () => typeof dartUseDateNowForTicks !== "undefined",
      _80: () => 1000 * performance.now(),
      _81: () => Date.now(),
      _82: () => {
        // On browsers return `globalThis.location.href`
        if (globalThis.location != null) {
          return globalThis.location.href;
        }
        return null;
      },
      _83: () => {
        return typeof process != "undefined" &&
               Object.prototype.toString.call(process) == "[object process]" &&
               process.platform == "win32"
      },
      _99: s => JSON.stringify(s),
      _100: s => printToConsole(s),
      _101: (o, p, r) => o.replaceAll(p, () => r),
      _102: (o, p, r) => o.replace(p, () => r),
      _103: Function.prototype.call.bind(String.prototype.toLowerCase),
      _104: s => s.toUpperCase(),
      _105: s => s.trim(),
      _107: s => s.trimRight(),
      _108: (string, times) => string.repeat(times),
      _109: Function.prototype.call.bind(String.prototype.indexOf),
      _110: (s, p, i) => s.lastIndexOf(p, i),
      _111: (string, token) => string.split(token),
      _112: Object.is,
      _113: (a, i) => a.push(i),
      _114: (a, i) => a.splice(i, 1)[0],
      _116: (a, l) => a.length = l,
      _117: a => a.pop(),
      _118: (a, i) => a.splice(i, 1),
      _119: (a, s) => a.join(s),
      _120: (a, s, e) => a.slice(s, e),
      _121: (a, s, e) => a.splice(s, e),
      _122: (a, b) => a == b ? 0 : (a > b ? 1 : -1),
      _123: a => a.length,
      _124: (a, l) => a.length = l,
      _125: (a, i) => a[i],
      _126: (a, i, v) => a[i] = v,
      _128: (o, offsetInBytes, lengthInBytes) => {
        var dst = new ArrayBuffer(lengthInBytes);
        new Uint8Array(dst).set(new Uint8Array(o, offsetInBytes, lengthInBytes));
        return new DataView(dst);
      },
      _129: (o, start, length) => new Uint8Array(o.buffer, o.byteOffset + start, length),
      _130: (o, start, length) => new Int8Array(o.buffer, o.byteOffset + start, length),
      _131: (o, start, length) => new Uint8ClampedArray(o.buffer, o.byteOffset + start, length),
      _132: (o, start, length) => new Uint16Array(o.buffer, o.byteOffset + start, length),
      _133: (o, start, length) => new Int16Array(o.buffer, o.byteOffset + start, length),
      _134: (o, start, length) => new Uint32Array(o.buffer, o.byteOffset + start, length),
      _135: (o, start, length) => new Int32Array(o.buffer, o.byteOffset + start, length),
      _138: (o, start, length) => new Float32Array(o.buffer, o.byteOffset + start, length),
      _139: (o, start, length) => new Float64Array(o.buffer, o.byteOffset + start, length),
      _140: (t, s) => t.set(s),
      _141: l => new DataView(new ArrayBuffer(l)),
      _142: (o) => new DataView(o.buffer, o.byteOffset, o.byteLength),
      _144: o => o.buffer,
      _145: o => o.byteOffset,
      _146: Function.prototype.call.bind(Object.getOwnPropertyDescriptor(DataView.prototype, 'byteLength').get),
      _147: (b, o) => new DataView(b, o),
      _148: (b, o, l) => new DataView(b, o, l),
      _149: Function.prototype.call.bind(DataView.prototype.getUint8),
      _150: Function.prototype.call.bind(DataView.prototype.setUint8),
      _151: Function.prototype.call.bind(DataView.prototype.getInt8),
      _152: Function.prototype.call.bind(DataView.prototype.setInt8),
      _153: Function.prototype.call.bind(DataView.prototype.getUint16),
      _154: Function.prototype.call.bind(DataView.prototype.setUint16),
      _155: Function.prototype.call.bind(DataView.prototype.getInt16),
      _156: Function.prototype.call.bind(DataView.prototype.setInt16),
      _157: Function.prototype.call.bind(DataView.prototype.getUint32),
      _158: Function.prototype.call.bind(DataView.prototype.setUint32),
      _159: Function.prototype.call.bind(DataView.prototype.getInt32),
      _160: Function.prototype.call.bind(DataView.prototype.setInt32),
      _165: Function.prototype.call.bind(DataView.prototype.getFloat32),
      _166: Function.prototype.call.bind(DataView.prototype.setFloat32),
      _167: Function.prototype.call.bind(DataView.prototype.getFloat64),
      _168: Function.prototype.call.bind(DataView.prototype.setFloat64),
      _169: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._169(f,arguments.length,x0) }),
      _186: o => Object.keys(o),
      _187: (ms, c) =>
      setTimeout(() => dartInstance.exports.$invokeCallback(c),ms),
      _188: (handle) => clearTimeout(handle),
      _189: (ms, c) =>
      setInterval(() => dartInstance.exports.$invokeCallback(c), ms),
      _190: (handle) => clearInterval(handle),
      _191: (c) =>
      queueMicrotask(() => dartInstance.exports.$invokeCallback(c)),
      _192: () => Date.now(),
      _193: x0 => new Worker(x0),
      _194: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._194(f,arguments.length,x0) }),
      _195: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._195(f,arguments.length,x0) }),
      _196: (x0,x1) => x0.postMessage(x1),
      _197: x0 => x0.terminate(),
      _198: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._198(f,arguments.length,x0) }),
      _199: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._199(f,arguments.length,x0) }),
      _200: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._200(f,arguments.length,x0) }),
      _201: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._201(f,arguments.length,x0) }),
      _202: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._202(f,arguments.length,x0) }),
      _203: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._203(f,arguments.length,x0) }),
      _204: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._204(f,arguments.length,x0) }),
      _205: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._205(f,arguments.length,x0) }),
      _206: (x0,x1) => x0.at(x1),
      _207: () => new MessageChannel(),
      _208: (x0,x1) => globalThis.Object.is(x0,x1),
      _209: x0 => globalThis.BigInt(x0),
      _210: () => new Set(),
      _211: (x0,x1) => x0.add(x1),
      _212: () => new Map(),
      _213: (x0,x1,x2) => x0.set(x1,x2),
      _214: (x0,x1) => x0.push(x1),
      _215: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._215(f,arguments.length,x0) }),
      _216: x0 => x0.close(),
      _217: (x0,x1) => x0.error(x1),
      _230: (x0,x1) => x0.createElement(x1),
      _232: (x0,x1) => x0.querySelector(x1),
      _233: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._233(f,arguments.length,x0) }),
      _234: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._234(f,arguments.length,x0) }),
      _235: (x0,x1,x2,x3) => x0.addEventListener(x1,x2,x3),
      _236: (x0,x1,x2,x3) => x0.removeEventListener(x1,x2,x3),
      _243: (x0,x1) => globalThis.fetch(x0,x1),
      _244: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._244(f,arguments.length,x0) }),
      _245: (x0,x1,x2) => x0.postMessage(x1,x2),
      _246: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._246(f,arguments.length,x0) }),
      _247: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._247(f,arguments.length,x0) }),
      _248: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._248(f,arguments.length,x0) }),
      _249: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._249(f,arguments.length,x0) }),
      _250: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._250(f,arguments.length,x0) }),
      _251: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._251(f,arguments.length,x0) }),
      _252: (x0,x1,x2) => x0.postMessage(x1,x2),
      _253: (x0,x1) => x0.postMessage(x1),
      _254: x0 => globalThis.URL.revokeObjectURL(x0),
      _255: x0 => ({type: x0}),
      _256: (x0,x1) => new Blob(x0,x1),
      _257: x0 => globalThis.URL.createObjectURL(x0),
      _258: x0 => x0.entries(),
      _259: x0 => x0.values(),
      _260: x0 => x0.toString(),
      _261: x0 => x0.length,
      _262: x0 => x0.byteLength,
      _263: x0 => x0.buffer,
      _264: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._264(f,arguments.length,x0) }),
      _265: (x0,x1) => x0.remove(x1),
      _266: (x0,x1) => x0.add(x1),
      _267: x0 => x0.scrollIntoView(),
      _268: (x0,x1) => x0.appendChild(x1),
      _269: (x0,x1,x2) => x0.scrollTo(x1,x2),
      _270: (x0,x1) => x0.getElementsByClassName(x1),
      _271: (x0,x1) => x0.item(x1),
      _273: (x0,x1,x2) => x0.postMessage(x1,x2),
      _285: (s, m) => {
        try {
          return new RegExp(s, m);
        } catch (e) {
          return String(e);
        }
      },
      _286: (x0,x1) => x0.exec(x1),
      _287: (x0,x1) => x0.test(x1),
      _288: x0 => x0.pop(),
      _290: o => o === undefined,
      _292: o => typeof o === 'function' && o[jsWrappedDartFunctionSymbol] === true,
      _294: o => {
        const proto = Object.getPrototypeOf(o);
        return proto === Object.prototype || proto === null;
      },
      _295: o => o instanceof RegExp,
      _296: (l, r) => l === r,
      _297: o => o,
      _298: o => o,
      _299: o => o,
      _300: b => !!b,
      _301: o => o.length,
      _303: (o, i) => o[i],
      _304: f => f.dartFunction,
      _305: () => ({}),
      _306: () => [],
      _308: () => globalThis,
      _310: (o, p) => p in o,
      _311: (o, p) => o[p],
      _312: (o, p, v) => o[p] = v,
      _313: (o, m, a) => o[m].apply(o, a),
      _315: o => String(o),
      _316: (p, s, f) => p.then(s, f),
      _317: o => {
        if (o === undefined) return 1;
        var type = typeof o;
        if (type === 'boolean') return 2;
        if (type === 'number') return 3;
        if (type === 'string') return 4;
        if (o instanceof Array) return 5;
        if (ArrayBuffer.isView(o)) {
          if (o instanceof Int8Array) return 6;
          if (o instanceof Uint8Array) return 7;
          if (o instanceof Uint8ClampedArray) return 8;
          if (o instanceof Int16Array) return 9;
          if (o instanceof Uint16Array) return 10;
          if (o instanceof Int32Array) return 11;
          if (o instanceof Uint32Array) return 12;
          if (o instanceof Float32Array) return 13;
          if (o instanceof Float64Array) return 14;
          if (o instanceof DataView) return 15;
        }
        if (o instanceof ArrayBuffer) return 16;
        return 17;
      },
      _318: o => [o],
      _319: (o0, o1) => [o0, o1],
      _320: (o0, o1, o2) => [o0, o1, o2],
      _321: (o0, o1, o2, o3) => [o0, o1, o2, o3],
      _322: (jsArray, jsArrayOffset, wasmArray, wasmArrayOffset, length) => {
        const getValue = dartInstance.exports.$wasmI8ArrayGet;
        for (let i = 0; i < length; i++) {
          jsArray[jsArrayOffset + i] = getValue(wasmArray, wasmArrayOffset + i);
        }
      },
      _324: (jsArray, jsArrayOffset, wasmArray, wasmArrayOffset, length) => {
        const getValue = dartInstance.exports.$wasmI16ArrayGet;
        for (let i = 0; i < length; i++) {
          jsArray[jsArrayOffset + i] = getValue(wasmArray, wasmArrayOffset + i);
        }
      },
      _326: (jsArray, jsArrayOffset, wasmArray, wasmArrayOffset, length) => {
        const getValue = dartInstance.exports.$wasmI32ArrayGet;
        for (let i = 0; i < length; i++) {
          jsArray[jsArrayOffset + i] = getValue(wasmArray, wasmArrayOffset + i);
        }
      },
      _328: (jsArray, jsArrayOffset, wasmArray, wasmArrayOffset, length) => {
        const getValue = dartInstance.exports.$wasmF32ArrayGet;
        for (let i = 0; i < length; i++) {
          jsArray[jsArrayOffset + i] = getValue(wasmArray, wasmArrayOffset + i);
        }
      },
      _332: x0 => new ArrayBuffer(x0),
      _333: s => {
        if (/[[\]{}()*+?.\\^$|]/.test(s)) {
            s = s.replace(/[[\]{}()*+?.\\^$|]/g, '\\$&');
        }
        return s;
      },
      _335: x0 => x0.index,
      _336: x0 => x0.groups,
      _337: x0 => x0.flags,
      _338: x0 => x0.multiline,
      _339: x0 => x0.ignoreCase,
      _340: x0 => x0.unicode,
      _341: x0 => x0.dotAll,
      _342: (x0,x1) => x0.lastIndex = x1,
      _344: (o, p) => o[p],
      _345: (o, p, v) => o[p] = v,
      _347: x0 => x0.random(),
      _348: (x0,x1) => x0.getRandomValues(x1),
      _349: () => globalThis.crypto,
      _350: () => globalThis.Math,
      _351: Function.prototype.call.bind(Number.prototype.toString),
      _352: Function.prototype.call.bind(BigInt.prototype.toString),
      _353: Function.prototype.call.bind(Number.prototype.toString),
      _473: x0 => x0.innerText,
      _597: (x0,x1) => x0.onscroll = x1,
      _2190: () => globalThis.window,
      _2234: x0 => x0.location,
      _2251: x0 => x0.parent,
      _2253: x0 => x0.navigator,
      _2527: x0 => x0.origin,
      _2536: x0 => x0.pathname,
      _2576: x0 => x0.message,
      _2577: x0 => x0.filename,
      _2578: x0 => x0.lineno,
      _2642: x0 => x0.userAgent,
      _2693: x0 => x0.data,
      _2723: x0 => x0.port1,
      _2724: x0 => x0.port2,
      _2727: (x0,x1) => x0.onmessage = x1,
      _2729: (x0,x1) => x0.onmessageerror = x1,
      _2795: (x0,x1) => x0.onmessage = x1,
      _2797: (x0,x1) => x0.onmessageerror = x1,
      _2799: (x0,x1) => x0.onerror = x1,
      _4803: x0 => x0.length,
      _4851: x0 => x0.parentElement,
      _4864: () => globalThis.document,
      _5284: x0 => x0.classList,
      _5290: x0 => x0.scrollTop,
      _5295: x0 => x0.scrollHeight,
      _5299: x0 => x0.clientHeight,
      _5305: (x0,x1) => x0.innerHTML = x1,
      _7332: x0 => x0.status,
      _7333: x0 => x0.ok,
      _11681: () => globalThis.console,

    };

    const baseImports = {
      dart2wasm: dart2wasm,
      Math: Math,
      Date: Date,
      Object: Object,
      Array: Array,
      Reflect: Reflect,
            s: [
        "Attempt to execute code removed by Dart AOT compiler (TFA)",
"Could not call main",
"null",
"Instance of '",
"'",
"Object?",
"Object",
"dynamic",
"void",
"Invalid top type kind",
"",
" (",
")",
": ",
"Invalid argument",
"(s)",
"0.0",
"-0.0",
"1.0",
"-1.0",
"NaN",
"-Infinity",
"Infinity",
"e",
".0",
"Infinity or NaN toInt",
"Unsupported operation: ",
"Invalid value",
"Type '",
"' is not a subtype of type '",
" in type cast",
"Null",
"Never",
": Not less than or equal to ",
": Not greater than or equal to ",
": Not in inclusive range ",
"..",
": Valid value range is empty",
": Only valid value is ",
"RangeError",
"minified:Class",
"<",
", ",
">",
"?",
"bool",
"BoxedBool",
"JSStringImpl",
"_BottomType",
"_TopType",
"_InterfaceTypeParameterType",
"_FunctionTypeParameterType",
"_FutureOrType",
"_InterfaceType",
"_AbstractFunctionType",
"_FunctionType",
"_AbstractRecordType",
"_RecordType",
"DefaultMap",
"_ConstMap",
"CompactLinkedIdentityHashMap",
"DefaultSet",
"_ConstSet",
"Record_0_label_tests",
"Record_2",
"Record_3",
"Record_0_digits_exception",
"Record_0_errors_success",
"Record_0_lazy_ref",
"Record_0_suite_zone",
"Record_4",
"Record_5",
"Record_6",
"Record_7",
"Record_8",
"Record_9",
"Endian",
"_HashMapKeyIterator",
"_HashMapValueIterator",
"_HashSetIterator",
"_HashMapEntry",
"CodeUnits",
"UnmodifiableListView",
"GrowableList",
"ModifiableFixedLengthList",
"ImmutableList",
"CastMap",
"ListMapView",
"_HashMap",
"_CustomHashMap",
"_IdentityHashMap",
"UnmodifiableMapView",
"_ListQueueIterator",
"UnionSet",
"_HashSet",
"_IdentityHashSet",
"_CustomHashSet",
"_HashSetEntry",
"MapEntry",
"_StringStackTrace",
"Stopwatch",
"DateTime",
"RuneIterator",
"StringBuffer",
"Duration",
"_Uri",
"_DataUri",
"UriData",
"_SimpleUri",
"_BigIntImpl",
"_Closure",
"_NamedParameterValue",
"_NamedParameter",
"_ModuleRtt",
"_Environment",
"_SuspendState",
"_SyncStarIterator",
"SquadronPlatformType",
"RunMode",
"TestState",
"Level",
"_Mode",
"Status",
"Result",
"Compiler",
"LateError",
"_AssertionErrorImpl",
"ArgumentError",
"IndexError",
"NoSuchMethodError",
"UnsupportedError",
"UnimplementedError",
"StateError",
"ConcurrentModificationError",
"_TypeError",
"_JavaScriptError",
"_TypeCheckVerificationError",
"JsonUnsupportedObjectError",
"JsonCyclicError",
"_Exception",
"FormatException",
"IntegerDivisionByZeroException",
"pragma",
"_Invocation",
"EmptyUnmodifiableSet",
"_CompactKeysIterable",
"_CompactValuesIterable",
"_CompactEntriesIterable",
"_CompactIterableImmutable",
"CastIterable",
"_EfficientLengthCastIterable",
"CastSet",
"CastQueue",
"CastList",
"SubListIterable",
"MappedListIterable",
"_ListIndicesIterable",
"ReversedListIterable",
"_GeneratorIterable",
"ListQueue",
"EmptyIterable",
"_HashMapKeyIterable",
"_HashMapValueIterable",
"MappedIterable",
"EfficientLengthMappedIterable",
"WhereIterable",
"ExpandIterable",
"TakeIterable",
"TakeWhileIterable",
"SkipIterable",
"EfficientLengthSkipIterable",
"SkipWhileIterable",
"FollowedByIterable",
"EfficientLengthFollowedByIterable",
"WhereTypeIterable",
"NonNullsIterable",
"_AllMatchesIterable",
"Runes",
"_SyncStarIterable",
"StringAllMatchesIterable",
"_StreamSinkWrapper",
"BoxedDouble",
"BoxedInt",
"_CompactIterator",
"_CompactEntriesIterator",
"_CompactIteratorImmutable",
"SentinelValue",
"TypeTest",
"CastIterator",
"ListIterator",
"MappedIterator",
"WhereIterator",
"ExpandIterator",
"TakeIterator",
"TakeWhileIterator",
"SkipIterator",
"SkipWhileIterator",
"EmptyIterator",
"FollowedByIterator",
"WhereTypeIterator",
"NonNullsIterator",
"Symbol",
"I8ByteData",
"_I16ByteData",
"_I32ByteData",
"_F32ByteData",
"_I8ByteBuffer",
"_I16ByteBuffer",
"_I32ByteBuffer",
"_F32ByteBuffer",
"I8List",
"U8List",
"U16List",
"U32List",
"F32List",
"_SlowU8List",
"_SlowU32List",
"ClassID",
"WasmConstCache",
"WasmArrayConstCache",
"AsyncError",
"StringAllMatchesIterator",
"_AsyncStreamController",
"_MultiStreamController",
"_SyncStreamController",
"_EventStream",
"_ControllerStream",
"_BroadcastStream",
"_MultiStream",
"_MapStream",
"_AsyncCallbackEntry",
"_Future",
"_FutureListener",
"_AsyncCompleter",
"_SyncCompleter",
"TimeoutException",
"_SyncBroadcastStreamController",
"_AsyncBroadcastStreamController",
"StringMatch",
"_GrowableListIterator",
"_FixedSizeListIterator",
"_JSFloat32ArrayIterator",
"_JSFloat64ArrayIterator",
"_JSUint8ArrayIterator",
"_JSInt8ArrayIterator",
"_JSUint16ArrayIterator",
"_JSInt16ArrayIterator",
"_JSUint32ArrayIterator",
"_JSInt32ArrayIterator",
"JSDataViewImpl",
"JSUint8ArrayImpl",
"JSInt8ArrayImpl",
"JSUint8ClampedArrayImpl",
"JSUint16ArrayImpl",
"JSInt16ArrayImpl",
"JSUint32ArrayImpl",
"JSInt32ArrayImpl",
"JSFloat32ArrayImpl",
"JSFloat64ArrayImpl",
"JSArrayBufferImpl",
"JSArrayImplIterator",
"JSArrayImpl",
"_AllMatchesIterator",
"_MatchImplementation",
"_TypedListIterator",
"_Utf8Decoder",
"_Utf8Encoder",
"JSSyntaxRegExp",
"_JsonStringStringifier",
"AsciiEncoder",
"Base64Encoder",
"JsonEncoder",
"Utf8Encoder",
"Utf8Decoder",
"Base64Codec",
"AsciiCodec",
"Latin1Codec",
"Utf8Codec",
"JsonCodec",
"_Base64Encoder",
"_SecureRandom",
"_ControllerSubscription",
"_BroadcastSubscription",
"_ForwardingStreamSubscription",
"JSValue",
"NullRejectionException",
"_FfiInlineArray",
"_FfiStructLayout",
"_Compound",
"Pointer",
"_OneShotTimer",
"_PeriodicTimer",
"_AsyncSuspendState",
"_CustomZone",
"_RootZone",
"_ZoneDelegate",
"_ZoneSpecification",
"_ZoneFunction",
"_StreamIterator",
"_DoneStreamSubscription",
"_PendingEvents",
"_DelayedDone",
"_DelayedData",
"_DelayedError",
"_Random",
"Trace",
"ConcurrencySettings",
"TokenType",
"IdentifierToken",
"Token",
"Scanner",
"Validator",
"_Line",
"_Highlight",
"Highlighter",
"Parser",
"IntersectionSelector",
"Evaluator",
"ConditionalNode",
"AndNode",
"OrNode",
"CastConverter",
"ContextAwareConverter",
"NumConverter",
"NotNode",
"VariableNode",
"SpanScanner",
"_SpanScannerState",
"_FileSpan",
"SourceSpanWithContext",
"SourceSpanFormatException",
"StringScannerException",
"FileLocation",
"SourceLocation",
"SourceFile",
"ParsedPath",
"None",
"BooleanSelectorImpl",
"All",
"DelegatingSet",
"UnmodifiableSetView",
"UnionSetController",
"QueueList",
"_CastQueueList",
"IterableSet",
"LiveSuiteController",
"_LiveSuite",
"SquadronService",
"Pool",
"PathException",
"PosixStyle",
"UrlStyle",
"WindowsStyle",
"Context",
"Runtime",
"OperatingSystem",
"PlatformSelector",
"Timeout",
"LazyTrace",
"LazyChain",
"PrintSink",
"SuiteConfiguration",
"RunnerSuiteController",
"ExpandedReporter",
"PluginEnvironment",
"Engine",
"UnicodeGlyphSet",
"LocalTest",
"SuitePlatform",
"RunnerSuite",
"ExceptionManager",
"SquadronCanceledException",
"SquadronCanceledExceptions",
"SquadronTimeoutException",
"SquadronError",
"WorkerException",
"TestException",
"TaskCanceledException",
"TaskTerminatedException",
"ErrorWorkerPool",
"IssuesWorkerPool",
"LocalClientWorkerPool",
"PrimeWorkerPool",
"TestWorkerPool",
"CacheWorker",
"ErrorWorker",
"InstallableWorker",
"IssuesWorker",
"LocalClientWorker",
"LogWorker",
"PrimeWorker",
"StreamingServiceWorker",
"TestWorker",
"PersonWorker",
"NotAWorker",
"MissingWorker",
"_WebLocalWorker",
"EntryPointUri",
"MarshalingContext",
"PersonMarshaler",
"FractionMarshaler",
"CityMarshaler",
"CountryMarshaler",
"PerfCounter",
"PerfCounterSnapshot",
"WorkerStat",
"_Stats",
"SequenceReplacement",
"HtmlLogger",
"TestContext",
"_WebChannel",
"_WebForwardChannel",
"LazyInPlaceList",
"LazyInPlaceMap",
"PoolWorker",
"WorkerStreamTask",
"WorkerValueTask",
"ForwardCompleter",
"ForwardStreamController",
"_WebWorkerChannel",
"TestEntryPoints",
"TestCancelledException",
"TestTimeOutException",
"TestResult",
"TestTimeout",
"PoolResource",
"TestSuite",
"WorkerRunner",
"LogEvent",
"_LogAllFilter",
"DevelopmentFilter",
"ProductionFilter",
"_NoLogOutput",
"NoOutput",
"_DummyPrinter",
"EmptyPrinter",
"InternalLogger",
"MemoryLogger",
"OutputEvent",
"DisconnectedChannel",
"ResultStream",
"EventBuffer",
"SquadronCancelationToken",
"CancelableToken",
"CompositeToken",
"TimeoutToken",
"CanceledException",
"TimeoutCanceledException",
"CanceledExceptions",
"ReleasedException",
"EventStreamProvider",
"_EventStreamSubscription",
"LocalServiceImpl",
"UnexpectedException",
"Fraction",
"CancelationTokenReference",
"TestHandle",
"OutstandingWork",
"OutsideTestException",
"State",
"Metadata",
"StringDescription",
"_Mismatch",
"_DeepMatcher",
"_IsNot",
"_AllOf",
"_AnyOf",
"TypeMatcher",
"_StringEqualsMatcher",
"_IsNaN",
"_Predicate",
"_EveryElement",
"_ContainsAll",
"_MatchesRegExp",
"Throws",
"_Empty",
"_NotEmpty",
"_IsNull",
"_IsNotNull",
"_IsTrue",
"_IsFalse",
"_HasLength",
"_Contains",
"Called",
"Reported",
"_OrderingMatcher",
"_Features",
"City",
"Country",
"Person",
"ClosedException",
"Invoker",
"_AsyncCounter",
"StackTraceFormatter",
"TestFailure",
"Chain",
"Frame",
"MessageType",
"Message",
"LiveTestController",
"Group",
"DuplicateTestNameException",
"Declarer",
"_StreamGroupState",
"StreamGroup",
"FutureGroup",
"DelegatingSink",
"AsyncMemoizer",
"UnparsedFrame",
"SerializationContext",
"CacheStat",
"WasmAnyRef",
"WasmEqRef",
"WasmStructRef",
"WasmArrayRef",
"WasmArray",
"ImmutableWasmArray",
"WasmExternRef",
"WasmFuncRef",
"WasmFunction",
"WasmI8",
"WasmI16",
"WasmI32",
"WasmI64",
"WasmF32",
"WasmF64",
"WasmVoid",
"WasmTable",
"num",
"double",
"int",
"_Type",
"_HashFieldBase",
"_HashBase",
"Float64List",
"Uint8ClampedList",
"ByteData",
"Int8List",
"Uint8List",
"Int16List",
"Uint16List",
"Int32List",
"Uint32List",
"Float32List",
"ByteBuffer",
"Function",
"Record",
"String",
"_TypedIntList",
"_TypedFloatList",
"TypedDataList",
"TypedData",
"_HashMapIterator",
"HashMap",
"HashSet",
"LinkedHashMap",
"LinkedHashSet",
"ListBase",
"UnmodifiableListBase",
"WasmListBase",
"_ModifiableList",
"MapBase",
"UnmodifiableMapBase",
"_UnmodifiableMapMixin",
"MapView",
"_QueueIterable",
"Queue",
"SetBase",
"_SetBase",
"Exception",
"Pattern",
"Match",
"Comparable",
"RegExp",
"RegExpMatch",
"_SetIterable",
"Set",
"Sink",
"StackTrace",
"StringSink",
"Uri",
"_PlatformUri",
"Enum",
"_TypeUniverse",
"_Enum",
"Error",
"AssertionError",
"TypeError",
"_Error",
"BigInt",
"Invocation",
"Iterable",
"_CastIterableBase",
"_CastListBase",
"EfficientLengthIterable",
"ListIterable",
"_HashMapIterable",
"Iterator",
"_ListIterable",
"List",
"Map",
"Type",
"Completer",
"_SetCreateIndexMixin",
"_ImmutableLinkedHashSetMixin",
"_UnmodifiableSetMixin",
"_EqualsAndHashCode",
"_OperatorEqualsAndHashCode",
"_IdenticalAndIdentityHashCode",
"_MapCreateIndexMixin",
"_ImmutableLinkedHashMapMixin",
"_LinkedHashMapMixin",
"_LinkedHashSetMixin",
"SystemHash",
"HideEfficientLengthIterable",
"IterableElementError",
"FixedLengthListMixin",
"UnmodifiableListMixin",
"Sort",
"Lists",
"WasmTypedDataBase",
"ByteDataBase",
"ByteBufferBase",
"_I64ByteBuffer",
"_F64ByteBuffer",
"WasmI8ArrayBase",
"WasmI16ArrayBase",
"_WasmI32ArrayBase",
"_WasmF32ArrayBase",
"_SlowListBase",
"_EventSink",
"_AddStreamState",
"_StreamControllerAddStreamState",
"_AsyncStreamControllerDispatch",
"_SyncStreamControllerDispatch",
"_StreamController",
"_StreamControllerBase",
"_StreamControllerLifecycle",
"_IntListMixin",
"_TypedIntListMixin",
"SynchronousStreamController",
"StreamController",
"MultiStreamController",
"StreamIterator",
"StreamTransformerBase",
"StreamTransformer",
"StreamSink",
"StreamConsumer",
"EventSink",
"StreamSubscription",
"Stream",
"_StreamImpl",
"_ForwardingStream",
"_AsyncRun",
"_Completer",
"Future",
"_BroadcastStreamController",
"_EventDispatch",
"StringUncheckedOperationsBase",
"_DoubleListMixin",
"_DoubleArrayIteratorBase",
"_UnmodifiableIntListMixin",
"_IntArrayIteratorBase",
"JSArrayBase",
"JSIntegerArrayBase",
"UnmodifiableJSUint8Array",
"JSFloatArrayBase",
"_TypedListCommonOperationsMixin",
"_JsonStringifier",
"Converter",
"_UnicodeSubsetEncoder",
"Codec",
"Encoding",
"_Base64Decoder",
"_BufferingStreamSubscription",
"Random",
"RangeErrorUtils",
"IndexErrorUtils",
"_TypedDoubleListMixin",
"_FfiAbiSpecificMapping",
"Struct",
"Union",
"SizedNativeType",
"NativeType",
"_Timer",
"_JSEventLoop",
"_Zone",
"Zone",
"ZoneDelegate",
"ZoneSpecification",
"Timer",
"_DelayedEvent",
"RecursiveVisitor",
"Visitor",
"Node",
"StringScanner",
"LineScanner",
"RuntimeSelection",
"LineScannerState",
"SourceSpanMixin",
"SourceSpanBase",
"SourceSpanException",
"SourceSpan",
"SourceLocationMixin",
"FileSpan",
"_DelegatingIterableBase",
"UnmodifiableSetMixin",
"CompilerSelection",
"Reporter",
"LoadException",
"Environment",
"LiveSuite",
"Style",
"InternalStyle",
"BooleanSelector",
"GroupEntry",
"StackZoneSpecification",
"TestSelection",
"GlyphSet",
"StackTraceMapper",
"TestLocation",
"Test",
"Suite",
"SquadronException",
"IWorker",
"LocalWorker",
"WorkerPool",
"PoolVersion",
"Worker",
"WorkerVersion",
"SquadronMarshaler",
"GenericMarshaler",
"StreamTask",
"Task",
"ValueTask",
"ServiceInstaller",
"Squadron",
"WorkerChannel",
"WorkerService",
"Log",
"ConsoleToHtml",
"_ListError",
"WorkerTask",
"SquadronVersion",
"_$JSProps",
"LogFilter",
"LogOutput",
"LogPrinter",
"Logger",
"UriChecker",
"TokenId",
"CancelationToken",
"Releasable",
"ReleasableTracker",
"Channel",
"LocalClientService",
"LocalService",
"Cache",
"ErrorService",
"IssuesService",
"LogService",
"PrimeService",
"StreamingService",
"TestService",
"PersonService",
"InstallableService",
"Description",
"Matcher",
"FeatureMatcher",
"_IterableMatcher",
"_UnorderedMatches",
"AsyncMatcher",
"CustomMatcher",
"LiveTest",
"RestartableTimer",
"_WasmBase",
"T",
"true",
"false",
"JavaScriptError",
"Future already completed",
"_stackTrace=",
"{...}",
"{",
"}",
"[]",
"Type argument substitution not supported for ",
"Type parameter should have been substituted already.",
"(",
" ",
"FutureOr",
"required ",
"Null check operator used on a null value",
"Index out of range",
": index must not be negative",
": no indices are valid",
": index should be less than ",
"Concurrent modification during iteration: ",
".",
"X",
" extends ",
"[",
"]",
" => ",
"Closure: ",
"...",
"NoSuchMethodError: method not found: '",
"'\n",
"Receiver: ",
"\n",
"Arguments: [",
"Symbol(\"",
"\")",
":",
"s",
"@",
",",
"=",
"_stackTrace",
"Bad state: ",
"value",
"zone",
"Can only run in platform zones",
"onError",
"Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
"Cannot complete a future with itself",
"The error handler of Future.then must return a value of the returned future's type",
"The error handler of Future.catchError must return a value of the future's type",
"sourceResult",
"type '",
"' is not a subtype of ",
"' of '",
"dartPrint",
"Test Runner: ",
" platform using Squadron ",
"7.1.2+1",
"@@READY@@",
"Unhandled dartifyRaw type case: ",
"message",
"Too few arguments passed. Expected 1 or more, got ",
" instead.",
"max",
"Must be positive and <= 2^32",
"IntegerDivisionByZeroException._stackTrace",
"Division resulted in non-finite value",
"Function?",
"buffer",
"start",
"end",
"Too few elements",
"[]=",
"index",
"count",
"No element",
"(...)",
"call",
"key",
"Type argument '",
"' is not a ",
"subtype of type parameter bound '",
"???",
"\u001b[0m",
"\u001b[1m",
"<b>",
"</b>",
"Web Assembly",
"wasm",
"fail",
"[E]",
"Expected integer value, but was not integer.",
"Positive input exceeds the limit of integer",
"Negative input exceeds the limit of integer",
"Invalid number",
"Invalid radix-",
" number",
" (at line ",
", character ",
")\n",
" (at character ",
"^\n",
" (at offset ",
"The implementation cannot handle very large operands (was: ",
").",
"Exception: ",
"m",
"i",
"u",
"g",
"Illegal RegExp pattern (",
"] ",
"div",
"iterable",
"\u001b[32m",
"<span class=\"pass\">",
"</span>",
"\u001b[33m",
"<span class=\"skip\">",
"\u001b[31m",
"<span class=\"fail\">",
"&gt;",
"&lt;",
"&",
"&amp;",
"\r",
"length",
"-",
"0",
"#output",
"@@RUN@@",
"Tests are already running",
"Launching tests...",
"@@CANCEL@@",
"Cancel tests",
"@@CLEAR@@",
"@@NEXT-ERROR@@",
"@@PREV-ERROR@@",
"highlight",
"|()",
"Stalled at ",
" / ",
")...",
", cancelling tests...",
"1 error - ",
" errors - ",
"Tests cancelled - ",
" tests pending...",
"computation",
"The type parameter is not nullable",
"pending",
"TestState.",
"SquadronPlatformType.",
"Failed to initialize a test context",
"@@STARTED@@",
"@@DONE@@",
"Tests cancelled",
"Tests completed",
"^",
".*",
"Selected tests: ",
"Test Runner running on ",
"Workers running on ",
"00_not_a_worker_test.dart",
"00_jsify_dartify_test.dart",
"01_web_worker_test.dart",
"04_worker_test.dart",
"05_worker_errors_test.dart",
"06_worker_streaming_test.dart",
"10_worker_pool_test.dart",
"07_shared_channel_test.dart",
"07_local_worker_test.dart",
"02_logging_test.dart",
"03_converter_test.dart",
"09_marshaler_test.dart",
"08_cancelation_test.dart",
"11_issues_test.dart",
" runner / ",
" workers",
"group",
"A test with the name \"",
"\" was already declared. ",
"Test cases must have unique names.\n\n",
"See https://github.com/dart-lang/test/blob/master/pkgs/test/doc/",
"configuration.md#allow_test_randomization for info on enabling this.",
"build",
"(tearDownAll)",
"Invalid ",
". Tags must be (optionally hyphenated) ",
"Dart identifiers.",
"and",
"takeCount",
"tag",
"tags",
"\"",
"^[a-zA-Z_-][a-zA-Z0-9_-]*$",
"other",
"objects",
"next",
"x",
"none",
"<all>",
"Cannot modify unmodifiable map",
"Can only fork a platform zone",
"Instance check should not reach function type parameter.",
"complete",
"Status.",
"_controller",
"Field '",
"' has not been initialized.",
"LateInitializationError: ",
"Can't add or remove outstanding callbacks outside of a test body.",
"runCount",
"error",
"failure",
"\n\n",
"This test failed after it had already completed.\nMake sure to use a matching library which informs the test runner\nof pending async work.",
"print",
"_chain",
"' has been assigned during initialization.",
"===== asynchronous gap ===========================\n",
"  ",
"unparsed",
"file",
"/",
"//",
"hashCode",
"_text",
"#",
"http",
"https",
"/.",
"./",
"%3A",
"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000϶\u0000Єϴ ϴ϶ǶǶ϶ϼǴϿϿքϿϿϿϿϿϿϿϿϿϿהǴ\u0000Ǵ\u0000ԄׄϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿЀ\u0000ЀȀϷȀϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿȀȀȀϷ\u0000",
"\\",
"%",
"%25",
"Invalid character",
"unreachable",
"0123456789ABCDEF",
"skipCount",
"Cannot modify an unmodifiable list",
"^[\\-\\.0-9A-Z_a-z~]*$",
"Missing end `]` to match `[` in host",
"25",
"address is too short",
"invalid start colon.",
"only one wildcard `::` is allowed",
"too few parts",
"expected a part after last `:`",
"an address with a wildcard must have less than 7 parts",
"an address without a wildcard must contain exactly 8 parts",
"invalid character",
"IPv4 address should contain exactly 4 parts",
"each part must be in the range 0..255",
"Radix ",
" not in range 2..36",
"Illegal IPv4 address, ",
"an IPv6 part can only contain a maximum of 4 hex digits",
"each part must be in the range of `0x0..0xFFFF`",
"Illegal IPv6 address, ",
"ZoneID should not contain % anymore",
"Scheme not starting with alphabetic character",
"Illegal scheme character",
"package",
"Couldn't parse package:stack_trace stack trace line '",
"'.",
"data:...",
"data",
"Unable to find a path to \"",
"\" from \"",
"\".",
"windows",
"[/\\\\]",
"[^/\\\\]$",
"^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])",
"^[/\\\\](?![/\\\\])",
"PathException: ",
"absolute",
"join",
"): part ",
" was null, but part ",
" was not.",
"Cannot extract a file path from a ",
" URI",
"Cannot extract a file path from a URI with a query component",
"Cannot extract a file path from a URI with a fragment component",
"Cannot extract a non-Windows file path from a file URI with an authority",
"Illegal path character ",
"pathSegments",
"Illegal percent encoding in URI",
"Truncated URI",
"Invalid UTF-8 byte",
"Missing extension byte",
"Unexpected extension byte",
"Overlong encoding",
"Out of unicode range",
"Encoded surrogate",
"Unfinished UTF-8 octet sequence",
"Invalid URL encoding",
"[\"*/:<>?\\\\|]",
"Illegal character in path",
"Illegal character in path: ",
"Illegal drive letter ",
"../",
"a/b",
"a\\b",
"posix",
"[^/]$",
"^/",
"Uri ",
" must have scheme 'file:'.",
"\\\\",
"%3a",
"url",
"(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$",
"[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*",
"://",
"file://",
"uri",
"Value must be a String or a Uri",
" in ",
"/..",
"file:///",
"80",
"443",
"Invalid empty scheme",
"Invalid port",
"á\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001ááá\u0001áá\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001áãáá\u0001á\u0001áÍ\u0001á\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u000e\u0003\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\"\u0001á\u0001á¬á\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001ááá\u0001áá\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001áêáá\u0001á\u0001áÍ\u0001á\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\n\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\"\u0001á\u0001á¬ëëëëëëëëëëëÍëëëë¬ë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëDëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u0012D\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬å\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005ååå\u0005åDååååååååååååååååååååååååååèåå\u0005å\u0005åÍ\u0005å\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005f\u0005å\u0005å¬å\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005ååå\u0005åDååååååååååååååååååååååååååååå\u0005å\u0005åÍ\u0005å\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005f\u0005å\u0005å¬ççççççççççççççççççççççççççççççççDçççççççççççççççççççççççççççççççççÍçççççççççççç\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007ççççç¬ççççççççççççççççççççççççççççççççDçççççççççççççççççççççççççççççççççÍççççççççççç\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007ççççç¬\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\u0005\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëêëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u0010ê\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬ë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëêëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u0012\n\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬ë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëêëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\n\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬ì\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\fììì\fìì\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\fìììì\fì\fìÍ\fì\f\f\f\f\f\f\f\f\fì\f\f\f\f\f\f\f\f\f\fì\fì\fì\fí\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\rííí\ríí\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\ríííí\rí\ríí\rí\r\r\r\r\r\r\r\r\rí\r\r\r\r\r\r\r\r\r\rí\rí\rí\rá\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001ááá\u0001áá\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001áêáá\u0001á\u0001áÍ\u0001á\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u000fê\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\"\u0001á\u0001á¬á\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001ááá\u0001áá\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001áéáá\u0001á\u0001áÍ\u0001á\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\t\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\"\u0001á\u0001á¬ë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëêëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u0011ê\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬ë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëéëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\t\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬ë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëêëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u0013ê\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬ë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëêëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bê\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬õ\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015õõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõ\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015õõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõ\u0015õ\u0015\u0015õ\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015õõõõõõ",
"Invalid MIME type",
"base64",
"Expecting '='",
"data:",
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
"Invalid base64 data",
"Invalid base64 encoding length ",
"==",
"Invalid base64 padding, padded length must be multiple of four, ",
"is ",
"Invalid base64 padding, '=' not at the end",
"Invalid base64 padding, more than two '=' characters",
"non-byte value",
"string",
"Contains invalid characters.",
"application/octet-stream",
"mimeType",
"^(\\S+)(?: (\\d+)(?::(\\d+))?)?\\s+([^\\d].*)$",
"=====",
"\tat ",
"\nStack trace:\n",
".da",
"<async>",
"<anonymous closure>",
"<fn>",
"<data:",
"<(<anonymous closure>|[^>]+)_async_body>",
"^#\\d+\\s+(\\S.*) \\((.+?)((?::\\d+){0,2})\\)$",
"^[^\\s<][^\\s]*( \\d+(:\\d+)?)?[ \\t]+[^\\s]+$",
"_trace",
" line ",
".<fn>",
"member",
"offset",
"wasm code",
"^.*?wasm-function\\[(?<member>.*)\\]@\\[wasm code\\]$",
"name",
"Not a capture group name",
"^(?<member>.*?)@(?:(?<uri>\\S+).*?:wasm-function\\[(?<index>\\d+)\\]:0x(?<offset>[0-9a-fA-F]+))$",
"^\\.",
"\\\\?\\",
"UNC\\",
"path",
"Windows paths with \\\\?\\ prefix must be absolute",
"Windows paths with drive letter must be absolute",
"^([a-zA-Z]:[\\\\/]|\\\\\\\\)",
"^[a-zA-Z][-+.a-zA-Z\\d]*://",
"/<",
"anonymous",
"(\\S+)@(\\S+) line (\\d+) >.* (Function|eval):\\d+:\\d+",
"^(?:([^@(/]*)(?:\\(.*\\))?((?:/[^/]*)*)(?:\\(.*\\))?@)?(.*?):(\\d*)(?::(\\d*))?$",
"[native code]",
"@\\S+ line \\d+ >.* (Function|eval):\\d+:\\d+",
"^(([.0-9A-Za-z_$/<]|\\(.*\\))*@)?[^\\s]*:\\d*$",
"native",
"^(.*?):(\\d+)(?::(\\d+))?$|native$",
"^eval at (?:\\S.*?) \\((.*)\\)(?:, .*?:\\d+:\\d+)?$",
"<anonymous>",
"Anonymous function",
"(anonymous function)",
"^\\s*at (?:(\\S.*?)(?: \\[as [^\\]]+\\])? \\((.*)\\)|(.*))$",
"^\\s*at (?:(?<member>.+) )?(?:\\(?(?:(?<uri>\\S+):wasm-function\\[(?<index>\\d+)\\]\\:0x(?<offset>[0-9a-fA-F]+))\\)?)$",
"    ?at ",
"\\n    ?at ",
"^<asynchronous suspension>\\n?$",
"Result.",
"success",
"running",
"running with ",
"skipped",
"TimeoutException after ",
"Test timed out after ",
" See https://pub.dev/packages/test#timeouts",
" minutes",
" seconds",
"This test has been closed.",
"test.invoker",
"test.declarer",
"(setUpAll)",
"nextIteration",
"Local '",
"does not have \"solo\"",
"_base",
"elements",
"Cannot modify an unmodifiable Set",
"dart-vm",
"browser",
"js",
"blink",
"google",
"VM",
"vm",
"Kernel",
"kernel",
"Source",
"source",
"Exe",
"exe",
"Chrome",
"chrome",
"Dart2Js",
"dart2js",
"Dart2Wasm",
"dart2wasm",
"Firefox",
"firefox",
"Safari",
"safari",
"Microsoft Edge",
"edge",
"Node.js",
"node",
"Windows",
"OS X",
"mac-os",
"Linux",
"linux",
"Android",
"android",
"iOS",
"ios",
"Compiler.",
"\"skip\" must be a String or a bool, was \"",
"Metadata for platform \"",
"\" must be a ",
"Timeout, Skip, or List of those; was \"",
"Only a single Timeout may be declared for ",
"end of file",
"Expected end of input.",
"Offset may not be negative, was ",
"Offset ",
" must not be greater than the number ",
"of characters in the file, ",
"unknown source",
" must be not be greater than the ",
"number of characters in the file, ",
"Line ",
" comes after offset ",
"Error on ",
"line ",
", column ",
" contains no elements matching ",
"─",
"┬",
"┌",
"└",
"│",
"┼",
" contains no null elements.",
"\u001b[34m",
"╵",
"╷",
"combine",
"MapEntry(",
"Source URLs \"",
"\" and ",
"\" don't match.",
"Cannot add to a fixed-length list",
"Cannot add to an unmodifiable list",
": \"",
"\" (",
"The context line \"",
"\" must contain \"",
"The span text \"",
"\" must start at ",
"column ",
" in a line within \"",
" \"",
"End ",
" must come after start ",
"Text \"",
"\" must be ",
"characters long.",
"Line may not be negative, was ",
"Column may not be negative, was ",
": from ",
" to ",
"\">",
"\r\n",
"byteOffset",
" must be less than the number of ",
"lines in the file, ",
" doesn't have ",
" columns.",
"primary ",
"No more tokens.",
"left paren",
"right paren",
"question mark",
"colon",
"not",
"expression",
"identifier",
"identifier \"",
"\\\"",
"expected ",
"Start may not be negative, was ",
"position must be greater than or equal to 0.",
"position must be less than or equal to the string length.",
"length must be greater than or equal to 0.",
"position plus length must not go beyond the end of the string.",
"[a-zA-Z_-][a-zA-Z0-9_-]*",
"&&",
"||",
"or",
"more input",
"/*",
"*/",
"([^/*]|/[^*]|\\*[^/])+",
"([ \\t\\n]+|//[^\\n]*(\\n|$))+",
"Expected \":\".",
" ? ",
" : ",
" || ",
" && ",
"Expected \")\".",
"Expected expression.",
"!",
"!(",
"from",
"Undefined variable.",
") && (",
"<none>",
"When running a test as an executable directly (not as a suite by the test runner), tests must be declared in a synchronous block.\nIf async work is required before any tests are run use a `setUpAll` callback.\nIf async work cannot be avoided before declaring tests, all async events must be complete before declaring the first test.",
"If async work is required before any tests are run use a `setUpAll` callback.\nIf async work cannot be avoided before declaring tests it must all be awaited within the Future returned from `main`.",
"Can't call ",
"() once tests have begun running.\n",
"Groups may not be async.",
"Engine.run() may not be called more than once.",
"Subscription has been canceled.",
"task",
"The FutureGroup is closed.",
"A PoolResource may only be released once.",
"dispatch",
"No events after a done.",
"Cannot add new events after calling close",
"Cannot add new events while doing an addStream",
"Cannot fire new event. Controller is already firing an event",
"_next",
"_previous",
"handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace.",
"sub",
"Skip: ",
"skip",
"controller",
"LiveTest.run() may not be called more than once.",
"LiveTest.run() may not be called for a closed test.",
"Can't call reportLiveTest() after noMoreTests().",
"Length ",
" may not be negative.",
"The length can only be increased when the element type is ",
"nullable, but the current element type is `",
"`.",
"fillValue",
"Must not be null",
"fill",
"Index ",
" must be in the range [0..",
"' has already been initialized.",
"Retry: ",
"Can't add a Stream to a closed StreamGroup.",
"dormant",
"canceled",
"ifAbsent",
"paused",
"liveSuite",
"request() may not be called on a closed Pool.",
"Dummy exception to set exit code.",
"\u001b[90m",
"No tests ran.",
" - did not complete ",
"Some tests failed.",
"All tests skipped.",
"All tests passed!",
"Consider enabling the flag chain-stack-traces to receive more detailed exceptions.\nFor example, 'dart test --chain-stack-traces'.",
"+",
" ~",
" -",
"subscription",
"Stream has already been listened to.",
"pendingEvents",
"Cannot add event after closing",
"Cannot add event while adding a stream",
"maxAllocatedResources",
"Must be greater than zero.",
"element",
"listening",
"_suite",
"No OS should be passed for runtime \"",
"The platform ",
" does not support the compiler ",
"/Applications",
"/Library",
"/Network",
"/System",
"/Users",
"JS",
"WASM",
"JavaScript",
"Dart VM",
"a value equal to",
"id",
"Memory leak detected: ",
" connections retained after early stream cancellation",
"sink",
"inputEvent",
"TypeError: ",
" is not a subtype of ",
"Converting object to an encodable object failed:",
"Converting object did not return an encodable object:",
"toJson",
"Cyclic error in JSON stringify",
"{}",
",\"",
"\":",
"$#",
"$C",
"$C*",
"$T",
"0x",
"radix",
"Invalid state: a subscription is already attached",
"$!",
"Z",
"00",
"000",
"_stats",
"matchAsync() may only return a String, a Future, or null.",
" at ",
"mismatch",
"state",
"recursion depth limit exceeded",
"expected a map",
"has different length and ",
"['",
"']",
"longer than expected",
"shorter than expected",
"is not Iterable",
"larger than expected",
"smaller than expected",
"does not contain ",
"(recursive)",
"[\n",
",\n",
"{\n",
"\\n'\n",
"Instance of ",
"\\'",
"[\\x00-\\x07\\x0E-\\x1F",
"\\n",
"\\r",
"\f",
"\\f",
"\b",
"\\b",
"\t",
"\\t",
"\u000b",
"\\v",
"",
"\\x7F",
"\\x",
"Too many elements",
"newContents",
"Cannot remove from a fixed-length list",
"Cannot remove from an unmodifiable list",
"<Instance of '",
"'>",
"<dynamic(, dynamic)*>",
"has extra map key ",
"is missing map key ",
"== threw ",
"does not match ",
"is not ",
"not an ",
"is different.",
" Both strings start the same, but the actual value also has the following trailing characters: ",
" Both strings start the same, but the actual value is missing the following trailing characters: ",
"\nExpected: ",
"\n  Actual: ",
"\n          ",
"^\n Differ at offset ",
"... ",
" ...",
"is not an instance of '",
"at location ",
" is ",
"instead of",
"which",
"Expected: ",
"  Actual: ",
"   Which: ",
" or ",
"was not a Function or Future",
"emitted ",
"returned a Future that emitted ",
"returned ",
"threw ",
"stack ",
"which ",
"(-patch)?([/\\\\].*)?$",
"stack_trace",
"dart",
"satisfies function",
"matcher",
"stream_channel",
"test",
"test_api",
"Invalid state: worker is stopped",
"Web Worker is not ready",
"Failed to post connection request: ",
"Created Web Worker for ",
"Failed to create Web Worker for ",
"trace",
"Level.",
"push",
"00000000",
"0000",
"bigInt",
"_lastQuoRemDigits",
"_lastRemUsed",
"_lastQuoRemUsed",
"Must be a platform BigInt",
"shift-amount must be positive ",
"_lastRem_nsh",
"squadronJsify",
"getPrototypeOf",
"Int8Array",
"ArrayBuffer",
"MessagePort",
"ReadableStream",
"WritableStream",
"TransformStream",
"ImageBitmap",
"VideoFrame",
"OffscreenCanvas",
"RTCDataChannel",
"MediaSourceHandle",
"MIDIAccess",
"$C1",
"$K",
"Task canceled",
"toElement",
"kcast",
"vcast",
"map",
"c",
"l",
"input",
"Channel is not connected",
"The pool cannot accept new requests because it is stopped",
"orElse",
"Worker has been terminated",
"Stop worker",
"debug",
"worker",
"Provisionning workers failed",
"K",
"V",
"newEntries",
"replacement",
"convert",
"f",
"transform",
".js",
".wasm",
"application/javascript",
"javascript",
"Invalid entry point URI",
"(async function() {\n  const workerUri = new URL(\"",
"\", self.location.origin).href;\n  try {\n    let dart2wasm_runtime; let moduleInstance;\n    const runtimeUri = workerUri.replaceAll('.unopt', '').replaceAll('.wasm', '.mjs');\n    try {\n      const dartModule = WebAssembly.compileStreaming(fetch(workerUri));\n      dart2wasm_runtime = await import(runtimeUri);\n      moduleInstance = await dart2wasm_runtime.instantiate(dartModule, {});\n    } catch (exception) {\n      console.error(`Failed to fetch and instantiate wasm module ${workerUri}: ${exception}`);\n      console.error('See https://dart.dev/web/wasm for more information.');\n      throw new Error(exception.message ?? 'Unknown error when instantiating worker module');\n    }\n    try {\n      await dart2wasm_runtime.invoke(moduleInstance);\n      //console.log(`Succesfully loaded and invoked ${workerUri}`);\n    } catch (exception) {\n      console.error(`Exception while invoking wasm module ${workerUri}: ${exception}`);\n      throw new Error(exception.message ?? 'Unknown error when invoking worker module');\n    }\n  } catch (ex) {\n    const ts = (Date.now() - Date.UTC(2020, 1, 2)) * 1000;\n    postMessage([ts, null, [\"$!\", `Failed to load Web Worker from ${workerUri}: ${ex}`, null, null], null, null]);\n  }\n})()",
"Connection to Web Worker failed: ",
"Failed to post connection request ",
"Unexpected response: ",
"Connected to Web Worker",
"Channel is closed",
"Failed to post request: ",
"Failed to post request ",
"Invalid state: unexpected endOfStream for command ",
"Invalid state: unexpected endOfStream",
"Unknown error",
"Array",
"bigint",
"Could not parse BigInt",
"^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$",
"done",
"squadronDartify",
"force",
"No response from worker",
"warning",
"Disconnecting from Web Worker",
"Failed to deserialize exception information for ",
"microsecond",
"millisecondsSinceEpoch",
"Time including microseconds is outside valid range",
"all",
"verbose",
"info",
"wtf",
"fatal",
"nothing",
"off",
"Invalid worker response",
"Web Worker is ready",
"It seems no Web Worker lives at ",
"Unhandled error from Web Worker: ",
" [",
")]",
"blob",
"undefined",
"Promise was rejected with a value of `",
"method",
"HEAD",
"Invalid state: worker is not ready",
"Instance has been released.",
" connections retained after streaming request",
"Already waiting for next.",
" connections retained after 10 requests",
"- sendRequest should clean up active connections",
"- sendStreamingRequest should clean up active connections",
"- Early canceled streams should clean up active connections",
"discover",
"failed",
"passed",
"RunMode.",
"Cancelled",
"cancelled",
"- Using a Squadron worker",
"- Using a worker pool",
"issue 8 error message",
"Error that reported",
"error message",
"match '",
"custom.exception",
"custom.stack",
"has ",
" with value ",
"custom.feature",
" which ",
"has length of ",
"has no length property",
"an object with length of ",
"- #8 - Exceptions from Streams must come through onError",
"- #23 - Handle case where Map<int, _> is received as Map<JSString, _> in wasm worker",
"- #70 - ForwardStreamController leak",
"- GITHUB ISSUES",
"every",
"any",
"_Mode.",
"errors",
"a positive value",
"errors: ",
"success: ",
"Operation was canceled.",
"timeout",
"Operation timed out.",
"a value less than or equal to",
"Generator must be supplied or element type must allow integers",
"generator",
"non-empty",
"isNotEmpty",
"digits",
"exception",
"digits: ",
"exception: ",
"- Finite() worker",
"- Infinite() worker",
"- Finite() pool",
"- Infinite() pool",
"completed",
"interrupted",
"started",
"not started",
"empty",
"isEmpty",
"Immediate cancelation",
"has value ",
"doesn't match ",
" at index ",
"every element(",
"- Immediate with pool.cancel()",
"- Immediate with pool.cancel(task)",
"- Immediate with task.cancel()",
"- With pool.cancelAll()",
"- With pool.cancel(task)",
"- With task.cancel()",
"delayedTask()",
"Unexpected: ",
" completed successfully",
" completed successfully with res=",
"- With pool.cancel()",
"- ValueTask",
"- StreamTask",
"- CancelationToken",
"- TimeoutToken",
"- CompositeToken",
"- CANCELATION",
"France",
"Belgium",
"12345",
"fr-12345",
"be-12345",
"67890",
"fr-67890",
"City(",
"Country(",
"friend-of-friend",
"values",
"friend",
"sibling",
"child",
"parent",
"self",
"unmarshalled call to fractionAdd()",
"not a subtype",
"Failed to post response",
"Failed to post request",
"replacements",
"Person(",
"y",
"- Aware",
"- Unaware",
"Division by zero",
"Not coprime",
"- CONTEXT AWARENESS",
"- Unmarshaled \"non-native\" types work in VM, fail on Web",
"- Unmarshaled \"non-native\" input types work in VM, fail on Web",
"- Unmarshaled \"non-native\" output types work in VM, fail on Web",
"- Marshaled \"non-native\" types always work",
"ME",
"Myself",
"P",
"1",
"2",
"3",
"C",
"4",
"5",
"A",
"a",
"B",
"b",
"D",
"d",
"- Person - Self",
"- Person - Other",
"- Person - Parent",
"- Person - Child",
"- Person - Sibling",
"- Person - Friend",
"- Person - Friend of friend",
"- MARSHALING",
"not ",
"describeMismatch",
"item",
"mismatchDescription",
"matchState",
"is not a string, map or iterable",
" and ",
"throws",
"throws ",
"- Type checks per platform",
"- Custom identity is not considered an identity",
"- Change default converter",
"- Converter listeners",
"- ContextAwareConverter",
"Different instances",
"Same instance",
"integral double to int",
"Unexpected failure on ",
" failed with ex=",
"Unexpected success on ",
"one",
"two",
"three",
"- String / integer (cast conversion)",
"- String / integer (custom conversion)",
"- String / nullable integer",
"- String / integers + integral double (cast conversion)",
"- String / integers + integral double (custom conversion)",
"- Integers (cast conversion)",
"- Integers (custom conversion)",
"- Nullable integers",
"- Integers + integral double (cast conversion)",
"- Integers + integral double (custom conversion)",
"- Doubles",
"- Nullable doubles",
"- Doubles + integer",
"- Converters are not identities",
"- int",
"- double",
"- null",
"- bool",
"- String",
"- Object",
"garbage",
"1.1",
"- Integers",
"- Lists",
"- Sets",
"- Maps",
"Instances",
"tearDown",
"- NumConverter",
"- CastConverter",
"int to double",
"Operation succeeded",
"Operation failed",
"- Converters are identities",
"four",
"five",
"- ",
" succeeded for ",
" with ",
", failed for ",
" failed with inconsistent errors: for ",
", for ",
"subList (invalid range)",
"Stacktrace (a): ",
"Stacktrace (b): ",
"read length",
"entries",
"keys",
"get key",
"get key (miss)",
"set key",
"set key (new)",
"containsKey",
"containsKey (miss)",
"containsValue",
"containsValue (miss)",
"cast",
"forEach",
"addAll",
"addAll (empty)",
"addEntries",
"addEntries (empty)",
"putIfAbsent",
"putIfAbsent (existing)",
"update",
"update (no default)",
"update (miss)",
"update (miss, no default)",
"updateAll",
"remove",
"remove (miss)",
"removeWhere (key)",
"removeWhere (value)",
"removeWhere (miss)",
"clear",
"toString",
"Key not in map.",
"1dot2",
"1dot3",
"1dot4",
"1dot5",
"twelve",
"thirteen",
"fourteen",
"fifteen",
"*",
" = ",
"3dot3",
"4dot4",
"lazy",
"ref",
"lazy: ",
"ref: ",
"decrease length",
"increase length",
"read single",
"read first",
"read last",
"read by index",
"read by index (invalid)",
"set first",
"set last",
"set by index",
"set by index (invalid)",
"elementAt",
"elementAt (invalid)",
"getRange",
"contains",
"contains (miss)",
"find index",
"find index (skip)",
"find index (miss)",
"last index",
"last index (skip)",
"last index (miss)",
"find where",
"find where (skip)",
"find where (miss)",
"last where",
"last where (skip)",
"last where (miss)",
"toList",
"subList (all from start)",
"subList (all from mid)",
"subList (all from end)",
"subList (start to end)",
"subList (mid to end)",
"subList (end to end)",
"subList (invalid start)",
"subList (invalid end)",
"toSet",
"asMap",
"reversed",
"expand",
"fold",
"reduce",
"any (miss)",
"every (full)",
"skip while",
"skip while (miss)",
"take",
"take while",
"take while (miss)",
"where",
"where (miss)",
"where type",
"where type (miss)",
"singleWhere",
"singleWhere (match)",
"singleWhere (many)",
"singleWhere (-1 on many)",
"firstWhere",
"firstWhere (match)",
"firstWhere (miss)",
"firstWhere (-1 on miss)",
"lastWhere",
"lastWhere (match)",
"lastWhere (miss)",
"lastWhere (-1 on miss)",
"concat",
"concat (empty)",
"add",
"followedBy",
"fillRange",
"fillRange (all)",
"fillRange (invalid)",
"setAll (start)",
"setAll (mid)",
"setAll (end)",
"setAll (invalid)",
"insert (start)",
"insert (mid)",
"insert (end)",
"insert (invalid)",
"insertAll (start)",
"insertAll (mid)",
"insertAll (end)",
"insertAll (invalid)",
"removeAt",
"removeLast",
"removeRange",
"removeWhere",
"retainWhere",
"setRange",
"setRange (skip)",
"replaceRange",
"shuffle",
"join (dollar)",
"Cannot resize a fixed-length list",
"Cannot change the length of an unmodifiable list",
"Cannot change the length of a fixed-length list",
"Cannot clear an unmodifiable list",
"Cannot clear a fixed-length list",
" $ ",
"r",
"Cannot insert into a fixed-length list",
"res",
"match",
"sort",
"sort (reversed)",
"- Lazy list",
"- Lazy map",
"- LAZY COLLECTIONS",
"- CONVERTERS",
"contains ",
"Level.off",
"Level.fatal",
"Level.error",
"Level.warning",
"Level.info",
"Level.debug",
"Level.trace",
"Level.all",
"setUp",
"_initialization",
"<no log message>",
"Error parameter cannot take a StackTrace!",
"Log events cannot have Level.all",
"Log events cannot have Level.off",
"- LOGGING",
"ok",
"squadronTransferify",
"_channel",
"Unexpected connection request: ",
"Worker service is not ready",
"Missing client for request: ",
"Unknown command: ",
"Unhandled error: ",
"Failed to post response: ",
"Failed to post response ",
"Service uninstallation failed with error: ",
"Worker termination failed with error: ",
"Terminating local Worker",
"streamId",
"Token reference mismatch",
"Cancelation token mismatch",
"_completer",
"_exception=",
"_exception",
"Invalid worker request",
"Invalid command identifier",
" in service operations map: ",
". Command ids must be positive.",
"operations",
"Not available",
"Intentional exception",
"LocalService running as \"",
"- Local Worker",
"- Squadron Worker",
"- Worker Pool",
"throwException()",
"not null",
"- Identity",
"- Error handling",
"- Streaming",
"Worker running as \"(0x[0-9A-Fa-f]+)\", LocalService running as \"(0x[0-9A-Fa-f]+)\"",
"- LOCAL WORKER",
"a value less than",
"Cannot change an unmodifiable set",
"in cache",
"- Standalone cache worker",
"- Prime worker + cache worker",
"- SHARED CHANNEL",
"by token #0",
"getPendingInfiniteWithErrors() is not supported for worker pools with maxWorker != 1",
"a value greater than",
"by request",
"Client-side exception",
"infiniteWithErrors()",
"error #\\d+",
"futureValue",
"forced",
"error #",
"- With cancelOnError = false",
"- With cancelOnError = true",
"- With \"await for\"",
"- Throwing in \"await for\"",
"- Pause & resume",
"- Pause/resume/cancel with a StreamTask",
"- Early cancelation",
"- Streaming task early cancelation",
"cpu tasks weer not terminated",
"a non-negative value",
"delayed()",
"cannot accept new requests",
"stopped",
"a value greater than or equal to",
"perf",
"- Non-streaming (prime worker)",
"- Streaming (prime worker)",
"cancel()",
"intentional TEST exception",
"throwTestException",
"#TEST",
"Invalid exception type ID: #TEST is reserved.",
"Stack trace that called",
"stack trace",
"toInt",
"Failed to deserialize",
"intentional canceled exception",
"timeOut()",
"intentional timeout exception",
"throwWorkerException()",
"intentional worker exception",
"throwWorkerException",
"intentional exception",
"throwException",
"- Failed initialization",
"- Missing command",
"- Invalid command ID",
"- Dart Exception",
"- WorkerException",
"- TaskTimeOutException",
"- CanceledException",
"- TestException (unregistered)",
"- TestException (registered)",
"- Prime worker pool + cache worker",
"- Worker pool monitoring",
"- Performance",
"- Stopped pool will not accept new requests",
"- Restarted pool will serve new requests",
"- Stopping a pool does not prevent processing of pending tasks",
"- Pool termination",
"- Streaming - with multiple errors",
"- SQUADRON WORKER - POOL",
"client-side exception",
"- Immediate cancelation",
"- Subscription cancelation",
"- SQUADRON WORKER - STREAMING",
"missing()",
"Unknown command",
"invalidResponse()",
"ping()",
"throwTestException()",
"throwCanceledException()",
"throwTaskTimeOutException()",
"service installed",
"intended failure",
"service uninstalled",
"isInstalled()",
"this exception is reported",
"hook called",
"intended exception",
"intended exception after setting status",
"- Missing worker",
"- Missing start request",
"- Failed hook installation",
"- Failed service installation",
"- Failed service uninstallation",
"- Invalid request",
"- Invalid response",
"- Missing operation",
"- SQUADRON WORKER - ERRORS",
"growable",
"has too few elements (",
" < ",
"has too many elements (",
" > ",
"has no match for ",
" along with ",
" other unmatched",
"contains all of ",
"Unknown",
"unknown",
"- Platform type",
"- Sending maps with BigInts",
"- Sending sets with BigInts",
"- Sending TypedData - different instances",
"- Sending TypedData - same instances",
"- Sending TypedData - same buffer",
"- Identity - different instances",
"- Identity - same instances",
"- Sequential workloads",
"- Parallel workloads",
"start()",
"worker is stopped",
"io completed after termination",
"cpu completed after termination",
"- Start & stop",
"- Start & terminate (sync)",
"- Start & terminate (async)",
"- Hook installation",
"- Service installation",
"- Cannot restart after stop",
"~/",
"- VM",
"- JS",
"- WASM",
"- WEB",
"- ALL",
"- ALL - no pool",
"- Web",
"- SQUADRON PLATFORMS",
"- TARGET PLATFORMS",
"- ANNOTATIONS",
"- SQUADRON WORKER - START/STOP",
"- SQUADRON WORKER - NON-STREAMING",
"ErrorEvent",
"Unknown error: ",
"not_found.wasm",
"Hello",
"postMessage",
"Failed to load Web Worker",
"handled ",
"not_found.js",
"ECHO \"Hello\"",
"- JavaScript Web Worker",
"- JavaScript Web Worker (in-memory)",
"- Dart Web Worker",
"- Missing Web Worker (JavaScript)",
"- Missing Web Worker (WebAssembly)",
"- WEB WORKER",
"Offset (",
") must be a multiple of ",
"zero",
"- Base types don't need transfer",
"- JSArrayBuffer - same instance",
"- JSArrayBuffer - different instances",
"- JSArrayBuffer - same buffer",
"- MessagePort - same instance",
"- MessagePort - different instances",
"- BigInt",
"- List",
"- Set",
"- Map",
"- Uint16List",
"- Port",
"- Mixed list",
"- Acyclic reference",
"- Cyclic reference",
"String ",
"$jsify --> ",
" ms",
"$jsify2 --> ",
"List<String>",
"number",
"- PERFS",
"- JSIFY",
"- DARTIFY",
"- TRANSFERIFY",
"- PATCH",
"- Dart program (VM)",
"- Dart program (Web)",
"- NOT A WORKER",
"RegExp/",
"Worker ",
": compiled with Squadron ",
"Failed to get version for ",
"~/..",
"/workers/js",
"/workers/wasm",
"Unsupported platform ",
"/native_worker.js",
"/not_a_worker.dart.",
"/echo_worker.dart.",
"/cache_worker.dart.",
"/installable_worker.dart.",
"/issues_worker.dart.",
"/local_client_worker.dart.",
"/prime_worker.dart.",
"/log_worker.dart.",
"/streaming_worker.dart.",
"/test_worker.dart.",
"/person_worker.dart.",
"/error_worker.dart.",
"onmessage = (e) => { postMessage(`ECHO \"${e.data}\"`); };",
"data:application/javascript;base64,",
"/missing_worker.dart.",
" not found",
"\n============================================================================ \nCannot run tests because some workers are missing.\nPlease ensure Web Workers have been compiled prior to running Browser tests.\n\n",
"\n============================================================================ \n\n",
"Not a byte value at index ",
": 0x",
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
"~",
"launch",
"collection"
      ],

    };

    const jsStringPolyfill = {
      "charCodeAt": (s, i) => s.charCodeAt(i),
      "compare": (s1, s2) => {
        if (s1 < s2) return -1;
        if (s1 > s2) return 1;
        return 0;
      },
      "concat": (s1, s2) => s1 + s2,
      "equals": (s1, s2) => s1 === s2,
      "fromCharCode": (i) => String.fromCharCode(i),
      "length": (s) => s.length,
      "substring": (s, a, b) => s.substring(a, b),
      "fromCharCodeArray": (a, start, end) => {
        if (end <= start) return '';

        const read = dartInstance.exports.$wasmI16ArrayGet;
        let result = '';
        let index = start;
        const chunkLength = Math.min(end - index, 500);
        let array = new Array(chunkLength);
        while (index < end) {
          const newChunkLength = Math.min(end - index, 500);
          for (let i = 0; i < newChunkLength; i++) {
            array[i] = read(a, index++);
          }
          if (newChunkLength < chunkLength) {
            array = array.slice(0, newChunkLength);
          }
          result += String.fromCharCode(...array);
        }
        return result;
      },
      "intoCharCodeArray": (s, a, start) => {
        if (s == '') return 0;

        const write = dartInstance.exports.$wasmI16ArraySet;
        for (var i = 0; i < s.length; ++i) {
          write(a, start++, s.charCodeAt(i));
        }
        return s.length;
      },
    };


    

    dartInstance = await WebAssembly.instantiate(this.module, {
      ...baseImports,
      ...additionalImports,
      
      "wasm:js-string": jsStringPolyfill,
    });

    return new InstantiatedApp(this, dartInstance);
  }
}

class InstantiatedApp {
  constructor(compiledApp, instantiatedModule) {
    this.compiledApp = compiledApp;
    this.instantiatedModule = instantiatedModule;
  }

  // Call the main function with the given arguments.
  invokeMain(...args) {
    this.instantiatedModule.exports.$invokeMain(args);
  }
}
