// Generated by dart2js (, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.9.2.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded. The loadPriority argument is an arbitrary argument
//    string forwarded from the 'dart2js:load-priority' pragma option.
// dartDeferredLibraryMultiLoader(uris, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of every URI in `uris`,
//    and call successCallback. If it fails to do so, it should call
//    errorCallback with an error. The loadId argument is the deferred import
//    that resulted in this uri being loaded. The loadPriority argument is an
//    arbitrary argument string forwarded from the 'dart2js:load-priority'
//    pragma option.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key)) {
        to[key] = from[key];
      }
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(Object.getPrototypeOf(object) && Object.getPrototypeOf(object).p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        Object.setPrototypeOf(cls.prototype, sup.prototype);
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++) {
      inherit(classes[i], sup);
    }
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        holder[name] = initializer();
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel) {
          A.throwLateFieldADI(name);
        }
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list, rti) {
    if (rti != null)
      A._setArrayType(list, rti);
    list.$flags = 7;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i) {
      convertToFastObject(arrayOfObjects[i]);
    }
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number") {
      funType += typesOffset;
    }
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$allocateGrowable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      var t1 = A._setArrayType(allocation, $E._eval$1("JSArray<0>"));
      t1.$flags = 1;
      return t1;
    },
    JSArray__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    JSInt__binaryGcd(x, y, inv) {
      var t0, ac, v, u, a, b, c, d, s = 1;
      while (true) {
        if (!((x & 1) === 0 && (y & 1) === 0))
          break;
        x = B.JSInt_methods._tdivFast$1(x, 2);
        y = B.JSInt_methods._tdivFast$1(y, 2);
        s *= 2;
      }
      if ((y & 1) === 1) {
        t0 = y;
        y = x;
        x = t0;
      }
      ac = (x & 1) === 0;
      v = y;
      u = x;
      a = 1;
      b = 0;
      c = 0;
      d = 1;
      do {
        for (; (u & 1) === 0;) {
          u = B.JSInt_methods._tdivFast$1(u, 2);
          if (ac) {
            if ((a & 1) !== 0 || (b & 1) !== 0) {
              a += y;
              b -= x;
            }
            a = B.JSInt_methods._tdivFast$1(a, 2);
          } else if ((b & 1) !== 0)
            b -= x;
          b = B.JSInt_methods._tdivFast$1(b, 2);
        }
        for (; (v & 1) === 0;) {
          v = B.JSInt_methods._tdivFast$1(v, 2);
          if (ac) {
            if ((c & 1) !== 0 || (d & 1) !== 0) {
              c += y;
              d -= x;
            }
            c = B.JSInt_methods._tdivFast$1(c, 2);
          } else if ((d & 1) !== 0)
            d -= x;
          d = B.JSInt_methods._tdivFast$1(d, 2);
        }
        if (u >= v) {
          u -= v;
          if (ac)
            a -= c;
          b -= d;
        } else {
          v -= u;
          if (ac)
            c -= a;
          d -= b;
        }
      } while (u !== 0);
      return s * v;
    },
    JSString__isWhitespace(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = string.charCodeAt(index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace(string, index) {
      var t1, index0, codeUnit;
      for (t1 = string.length; index > 0; index = index0) {
        index0 = index - 1;
        if (!(index0 < t1))
          return A.ioore(string, index0);
        codeUnit = string.charCodeAt(index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$in(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$n(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    set$length$asx(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    get$add$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$add(receiver);
    },
    get$first$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$last$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$last(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$reversed$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$reversed(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    get$single$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$single(receiver);
    },
    $add$ansx(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (Array.isArray(receiver) || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    $negate$in(receiver) {
      if (typeof receiver == "number")
        return -receiver;
      return J.getInterceptor$in(receiver).$negate(receiver);
    },
    add$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    allMatches$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    allMatches$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).allMatches$2(receiver, a0, a1);
    },
    any$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).any$1(receiver, a0);
    },
    asMap$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).asMap$0(receiver);
    },
    asUint8List$0$x(receiver) {
      return J.getInterceptor$x(receiver).asUint8List$0(receiver);
    },
    asUint8List$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).asUint8List$2(receiver, a0, a1);
    },
    cast$1$0$ax(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    clear$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).clear$0(receiver);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    every$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).every$1(receiver, a0);
    },
    expand$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).expand$1$1(receiver, a0, $T1);
    },
    fillRange$3$ax(receiver, a0, a1, a2) {
      return J.getInterceptor$ax(receiver).fillRange$3(receiver, a0, a1, a2);
    },
    firstWhere$2$orElse$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).firstWhere$2$orElse(receiver, a0, a1);
    },
    fold$1$2$ax(receiver, a0, a1, $T1) {
      return J.getInterceptor$ax(receiver).fold$1$2(receiver, a0, a1, $T1);
    },
    followedBy$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).followedBy$1(receiver, a0);
    },
    forEach$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    getRange$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).getRange$2(receiver, a0, a1);
    },
    indexOf$2$asx(receiver, a0, a1) {
      return J.getInterceptor$asx(receiver).indexOf$2(receiver, a0, a1);
    },
    indexWhere$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).indexWhere$2(receiver, a0, a1);
    },
    insert$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).insert$2(receiver, a0, a1);
    },
    insertAll$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).insertAll$2(receiver, a0, a1);
    },
    join$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).join$1(receiver, a0);
    },
    lastIndexOf$2$asx(receiver, a0, a1) {
      return J.getInterceptor$asx(receiver).lastIndexOf$2(receiver, a0, a1);
    },
    lastIndexWhere$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).lastIndexWhere$2(receiver, a0, a1);
    },
    lastWhere$2$orElse$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).lastWhere$2$orElse(receiver, a0, a1);
    },
    map$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).map$1(receiver, a0);
    },
    map$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    matchAsPrefix$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    reduce$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).reduce$1(receiver, a0);
    },
    remove$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
    },
    removeAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
    },
    removeLast$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).removeLast$0(receiver);
    },
    removeRange$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).removeRange$2(receiver, a0, a1);
    },
    removeWhere$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).removeWhere$1(receiver, a0);
    },
    replaceRange$3$asx(receiver, a0, a1, a2) {
      return J.getInterceptor$asx(receiver).replaceRange$3(receiver, a0, a1, a2);
    },
    retainWhere$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).retainWhere$1(receiver, a0);
    },
    setAll$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).setAll$2(receiver, a0, a1);
    },
    setRange$4$ax(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
    },
    shuffle$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).shuffle$1(receiver, a0);
    },
    singleWhere$2$orElse$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).singleWhere$2$orElse(receiver, a0, a1);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    skipWhile$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skipWhile$1(receiver, a0);
    },
    sort$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
    },
    sublist$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
    },
    take$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).take$1(receiver, a0);
    },
    takeWhile$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).takeWhile$1(receiver, a0);
    },
    toInt$0$n(receiver) {
      return J.getInterceptor$n(receiver).toInt$0(receiver);
    },
    toList$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toSet$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toSet$0(receiver);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    where$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).where$1(receiver, a0);
    },
    whereType$1$0$ax(receiver, $T1) {
      return J.getInterceptor$ax(receiver).whereType$1$0(receiver, $T1);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JavaScriptBigInt: function JavaScriptBigInt() {
    },
    JavaScriptSymbol: function JavaScriptSymbol() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSArraySafeToStringHook: function JSArraySafeToStringHook() {
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  A = {JS_CONST: function JS_CONST() {
    },
    createSentinel() {
      return $;
    },
    CastIterable_CastIterable(source, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(source))
        return new A._EfficientLengthCastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_EfficientLengthCastIterable<1,2>"));
      return new A.CastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterable<1,2>"));
    },
    LateError$fieldADI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has been assigned during initialization.");
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$localNI(localName) {
      return new A.LateError("Local '" + localName + "' has not been initialized.");
    },
    LateError$fieldAI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has already been initialized.");
    },
    CodeUnits$(_string) {
      return new A.CodeUnits(_string);
    },
    hexDigitValue(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    isToStringVisiting(object) {
      var t1, i;
      for (t1 = $.toStringVisiting.length, i = 0; i < t1; ++i)
        if (object === $.toStringVisiting[i])
          return true;
      return false;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new A.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    TakeIterable_TakeIterable(iterable, takeCount, $E) {
      var _s9_ = "takeCount";
      A.ArgumentError_checkNotNull(takeCount, _s9_, type$.int);
      A.RangeError_checkNotNegative(takeCount, _s9_);
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthTakeIterable(iterable, takeCount, $E._eval$1("EfficientLengthTakeIterable<0>"));
      return new A.TakeIterable(iterable, takeCount, $E._eval$1("TakeIterable<0>"));
    },
    SkipIterable_SkipIterable(iterable, count, $E) {
      var _s5_ = "count";
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        A.ArgumentError_checkNotNull(count, _s5_, type$.int);
        A.RangeError_checkNotNegative(count, _s5_);
        return new A.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      A.ArgumentError_checkNotNull(count, _s5_, type$.int);
      A.RangeError_checkNotNegative(count, _s5_);
      return new A.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    FollowedByIterable_FollowedByIterable$firstEfficient(first, second, $E) {
      return new A.EfficientLengthFollowedByIterable(first, second, $E._eval$1("EfficientLengthFollowedByIterable<0>"));
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    IterableElementError_tooMany() {
      return new A.StateError("Too many elements");
    },
    IterableElementError_tooFew() {
      return new A.StateError("Too few elements");
    },
    Sort__doSort(a, left, right, compare, $E) {
      if (right - left <= 32)
        A.Sort__insertionSort(a, left, right, compare, $E);
      else
        A.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort(a, left, right, compare, $E) {
      var i, t1, el, j, t2, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (j > left) {
            t2 = compare.call$2(t1.$index(a, j - 1), el);
            if (typeof t2 !== "number")
              return t2.$gt();
            t2 = t2 > 0;
          } else
            t2 = false;
          if (!t2)
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort(a, left, right, compare, $E) {
      var t0, less, great, pivots_are_equal, k, ak, comp, great0, less0,
        sixth = B.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = B.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5),
        t2 = compare.call$2(el1, el2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t2 = compare.call$2(el1, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el1, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el3, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      t2 = compare.call$2(el2, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      pivots_are_equal = J.$eq$(compare.call$2(el2, el4), 0);
      if (pivots_are_equal)
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
      else
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) > 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) > 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      A.Sort__doSort(a, left, less - 2, compare, $E);
      A.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        A.Sort__doSort(a, less, great, compare, $E);
      } else
        A.Sort__doSort(a, less, great, compare, $E);
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    _CastIterableBase_lastWhere_closure0: function _CastIterableBase_lastWhere_closure0(t0, t1) {
      this.$this = t0;
      this.test = t1;
    },
    _CastIterableBase_lastWhere_closure: function _CastIterableBase_lastWhere_closure(t0, t1) {
      this.$this = t0;
      this.orElse = t1;
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    _CastListBase_sort_closure: function _CastListBase_sort_closure(t0, t1) {
      this.$this = t0;
      this.compare = t1;
    },
    _CastListBase_removeWhere_closure: function _CastListBase_removeWhere_closure(t0, t1) {
      this.$this = t0;
      this.test = t1;
    },
    _CastListBase_retainWhere_closure: function _CastListBase_retainWhere_closure(t0, t1) {
      this.$this = t0;
      this.test = t1;
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastSet: function CastSet(t0, t1, t2) {
      this._source = t0;
      this._emptySet = t1;
      this.$ti = t2;
    },
    CastMap: function CastMap(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap_putIfAbsent_closure: function CastMap_putIfAbsent_closure(t0, t1) {
      this.$this = t0;
      this.ifAbsent = t1;
    },
    CastMap_forEach_closure: function CastMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CastMap_update_closure0: function CastMap_update_closure0(t0, t1) {
      this.$this = t0;
      this.update = t1;
    },
    CastMap_update_closure: function CastMap_update_closure(t0, t1) {
      this.$this = t0;
      this.ifAbsent = t1;
    },
    CastMap_updateAll_closure: function CastMap_updateAll_closure(t0, t1) {
      this.$this = t0;
      this.update = t1;
    },
    CastMap_entries_closure: function CastMap_entries_closure(t0) {
      this.$this = t0;
    },
    CastMap_removeWhere_closure: function CastMap_removeWhere_closure(t0, t1) {
      this.$this = t0;
      this.test = t1;
    },
    CastQueue: function CastQueue(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    LateError: function LateError(t0) {
      this.__internal$_message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this._string = t0;
    },
    nullFuture_closure: function nullFuture_closure() {
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
      _.$ti = t3;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1, t2) {
      this._iterator = t0;
      this._remaining = t1;
      this.$ti = t2;
    },
    TakeWhileIterable: function TakeWhileIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    TakeWhileIterator: function TakeWhileIterator(t0, t1, t2) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._isFinished = false;
      _.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipWhileIterable: function SkipWhileIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    SkipWhileIterator: function SkipWhileIterator(t0, t1, t2) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._hasSkipped = false;
      _.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    FollowedByIterable: function FollowedByIterable(t0, t1, t2) {
      this.__internal$_first = t0;
      this.__internal$_second = t1;
      this.$ti = t2;
    },
    EfficientLengthFollowedByIterable: function EfficientLengthFollowedByIterable(t0, t1, t2) {
      this.__internal$_first = t0;
      this.__internal$_second = t1;
      this.$ti = t2;
    },
    FollowedByIterator: function FollowedByIterator(t0, t1, t2) {
      this._currentIterator = t0;
      this._nextIterable = t1;
      this.$ti = t2;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    NonNullsIterable: function NonNullsIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    NonNullsIterator: function NonNullsIterator(t0, t1) {
      this._source = t0;
      this.__internal$_current = null;
      this.$ti = t1;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    _ListIndicesIterable: function _ListIndicesIterable(t0) {
      this._backedList = t0;
    },
    ListMapView: function ListMapView(t0, t1) {
      this.__internal$_values = t0;
      this.$ti = t1;
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this.__internal$_name = t0;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap_ConstantMap$from(other, $K, $V) {
      var allStrings, k, object, index, index0, values, map,
        t1 = A._instanceType(other),
        keys = A.List_List$from(new A.LinkedHashMapKeysIterable(other, t1._eval$1("LinkedHashMapKeysIterable<1>")), true, $K),
        t2 = keys.length,
        _i = 0;
      while (true) {
        if (!(_i < t2)) {
          allStrings = true;
          break;
        }
        k = keys[_i];
        if (typeof k != "string" || "__proto__" === k) {
          allStrings = false;
          break;
        }
        ++_i;
      }
      if (allStrings) {
        object = {};
        for (index = 0, _i = 0; _i < keys.length; keys.length === t2 || (0, A.throwConcurrentModificationError)(keys), ++_i, index = index0) {
          k = keys[_i];
          $V._as(other.$index(0, k));
          index0 = index + 1;
          object[k] = index;
        }
        values = A.List_List$from(new A.LinkedHashMapValuesIterable(other, t1._eval$1("LinkedHashMapValuesIterable<2>")), true, $V);
        map = new A.ConstantStringMap(object, values, $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantStringMap<1,2>"));
        map.$keys = keys;
        return map;
      }
      return new A.ConstantMapView(A.LinkedHashMap_LinkedHashMap$from(other, $K, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantMapView<1,2>"));
    },
    ConstantMap__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    ConstantSet__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify constant Set"));
    },
    instantiate1(f, $T1) {
      var t1 = new A.Instantiation1(f, $T1._eval$1("Instantiation1<0>"));
      t1.Instantiation$1(f);
      return t1;
    },
    instantiate2(f, $T1, $T2) {
      var t1 = new A.Instantiation2(f, $T1._eval$1("@<0>")._bind$1($T2)._eval$1("Instantiation2<1,2>"));
      t1.Instantiation$1(f);
      return t1;
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i, _null = null,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      if (3 >= match.length)
        return A.ioore(match, 3);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((digitsPart.charCodeAt(i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_objectTypeName(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_safeToString(object) {
      var hooks, i, hookResult;
      if (object == null || typeof object == "number" || A._isBool(object))
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      if (object instanceof A.Closure)
        return object.toString$0(0);
      if (object instanceof A._Record)
        return object._toString$1(true);
      hooks = $.$get$_safeToStringHooks();
      for (i = 0; i < 1; ++i) {
        hookResult = hooks[i].tryFormat$1(object);
        if (hookResult != null)
          return hookResult;
      }
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Primitives_dateNow() {
      return Date.now();
    },
    Primitives_initTicker() {
      var $window, performance;
      if ($.Primitives_timerFrequency !== 0)
        return;
      $.Primitives_timerFrequency = 1000;
      if (typeof window == "undefined")
        return;
      $window = window;
      if ($window == null)
        return;
      if (!!$window.dartUseDateNowForTicks)
        return;
      performance = $window.performance;
      if (performance == null)
        return;
      if (typeof performance.now != "function")
        return;
      $.Primitives_timerFrequency = 1000000;
      $.Primitives_timerTicks = new A.Primitives_initTicker_closure(performance);
    },
    Primitives_currentUri() {
      if (!!self.location)
        return self.location.href;
      return null;
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, _i, i,
        a = A._setArrayType([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, A.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
          B.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          B.JSArray_methods.add$1(a, 55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          B.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw A.wrapException(A.argumentErrorValue(i));
      }
      return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
          throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
          return A.Primitives_stringFromCodePoints(charCodes);
      }
      return A.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_valueFromDecomposedDate(years, month, day, hours, minutes, seconds, milliseconds, microseconds, isUtc) {
      var remainder, value, t1,
        jsMonth = month - 1;
      if (years < 100) {
        years += 400;
        jsMonth -= 4800;
      }
      remainder = B.JSInt_methods.$mod(microseconds, 1000);
      value = Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds + B.JSInt_methods._tdivFast$1(microseconds - remainder, 1000));
      t1 = true;
      if (!isNaN(value))
        if (!(value < -864e13))
          if (!(value > 864e13))
            t1 = value === 864e13 && remainder !== 0;
      if (t1)
        return null;
      return value;
    },
    Primitives_lazyAsJsDate(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._core$_value);
      return receiver.date;
    },
    Primitives_getYear(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_extractStackTrace(error) {
      var jsError = error.$thrownJsError;
      if (jsError == null)
        return null;
      return A.getTraceFromException(jsError);
    },
    Primitives_trySetStackTrace(error, stackTrace) {
      var jsError;
      if (error.$thrownJsError == null) {
        jsError = new Error();
        A.initializeExceptionWrapper(error, jsError);
        error.$thrownJsError = jsError;
        jsError.stack = stackTrace.toString$0(0);
      }
    },
    iae(argument) {
      throw A.wrapException(A.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = A._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, null, _s5_);
      return A.RangeError$value(index, _s5_);
    },
    diagnoseRangeError(start, end, $length) {
      if (start < 0 || start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      return A.initializeExceptionWrapper(ex, new Error());
    },
    initializeExceptionWrapper(ex, wrapper) {
      var t1;
      if (ex == null)
        ex = new A.TypeError();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex, wrapper) {
      throw A.initializeExceptionWrapper(ex, wrapper == null ? new Error() : wrapper);
    },
    throwUnsupportedOperation(o, operation, verb) {
      var wrapper;
      if (operation == null)
        operation = 0;
      if (verb == null)
        verb = 0;
      wrapper = Error();
      A.throwExpression(A._diagnoseUnsupportedOperation(o, operation, verb), wrapper);
    },
    _diagnoseUnsupportedOperation(o, encodedOperation, encodedVerb) {
      var operation, table, tableLength, index, verb, object, flags, article, adjective;
      if (typeof encodedOperation == "string")
        operation = encodedOperation;
      else {
        table = "[]=;add;removeWhere;retainWhere;removeRange;setRange;setInt8;setInt16;setInt32;setUint8;setUint16;setUint32;setFloat32;setFloat64".split(";");
        tableLength = table.length;
        index = encodedOperation;
        if (index > tableLength) {
          encodedVerb = index / tableLength | 0;
          index %= tableLength;
        }
        operation = table[index];
      }
      verb = typeof encodedVerb == "string" ? encodedVerb : "modify;remove from;add to".split(";")[encodedVerb];
      object = type$.List_dynamic._is(o) ? "list" : "ByteData";
      flags = o.$flags | 0;
      article = "a ";
      if ((flags & 4) !== 0)
        adjective = "constant ";
      else if ((flags & 2) !== 0) {
        adjective = "unmodifiable ";
        article = "an ";
      } else
        adjective = (flags & 1) !== 0 ? "fixed-length " : "";
      return new A.UnsupportedError("'" + operation + "': Cannot " + verb + " " + article + adjective + object);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      var t1;
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace) {
        t1 = ex.dartException;
        return A.saveStackTrace(ex, t1 == null ? A._asObject(t1) : t1);
      }
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              A.S(message);
              return A.saveStackTrace(ex, new A.NullError());
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else if (nullCall.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefCall.matchTypeError$1(message) != null || undefLiteralCall.matchTypeError$1(message) != null || nullProperty.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefProperty.matchTypeError$1(message) != null || undefLiteralProperty.matchTypeError$1(message) != null) {
            A._asString(message);
            return A.saveStackTrace(ex, new A.NullError());
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, null, null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      trace = new A._StackTrace(exception);
      if (typeof exception === "object")
        exception.$cachedTrace = trace;
      return trace;
    },
    objectHashCode(object) {
      if (object == null)
        return J.get$hashCode$(object);
      if (typeof object == "object")
        return A.Primitives_objectHashCode(object);
      return J.get$hashCode$(object);
    },
    constantHashCode(key) {
      if (typeof key == "number")
        return B.JSNumber_methods.get$hashCode(key);
      if (key instanceof A._Type)
        return A.Primitives_objectHashCode(key);
      if (key instanceof A._Record)
        return key.get$hashCode(key);
      if (key instanceof A.Symbol)
        return key.get$hashCode(0);
      return A.objectHashCode(key);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    fillLiteralSet(values, result) {
      var index,
        $length = values.length;
      for (index = 0; index < $length; ++index)
        result.add$1(0, values[index]);
      return result;
    },
    _invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = A.convertDartClosureToJSUncached(closure, arity);
      closure.$identity = $function;
      return $function;
    },
    convertDartClosureToJSUncached(closure, arity) {
      var entry;
      switch (arity) {
        case 0:
          entry = closure.call$0;
          break;
        case 1:
          entry = closure.call$1;
          break;
        case 2:
          entry = closure.call$2;
          break;
        case 3:
          entry = closure.call$3;
          break;
        case 4:
          entry = closure.call$4;
          break;
        default:
          entry = null;
      }
      if (entry != null)
        return entry.bind(closure);
      return function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A._invokeClosure);
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      $constructor = isStatic ? function static_tear_off() {
        this.$initialize();
      } : function tear_off(a, b) {
        this.$initialize(a, b);
      };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunction(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunction(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      return A.Closure_cspForwardCall($function.length, needsDirectAccess, stubName, $function);
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var names, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        t1 = Object.getOwnPropertyNames(template);
      t1.$flags = 1;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    staticInteropGlobalContext() {
      return init.G;
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (Array.isArray(transformers))
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    createRecordTypePredicate(shape, fieldRtis) {
      var $length = fieldRtis.length,
        $function = init.rttc["" + $length + ";" + shape];
      if ($function == null)
        return null;
      if ($length === 0)
        return $function;
      if ($length === $function.length)
        return $function.apply(null, fieldRtis);
      return $function(fieldRtis);
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, extraFlags) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + extraFlags);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1;
      if (typeof other == "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else if (other instanceof A.JSSyntaxRegExp) {
        t1 = B.JSString_methods.substring$1(receiver, startIndex);
        return other._nativeRegExp.test(t1);
      } else
        return !J.allMatches$1$s(other, B.JSString_methods.substring$1(receiver, startIndex)).get$isEmpty(0);
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    stringReplaceFirstRE(receiver, regexp, replacement, startIndex) {
      var match = regexp._execGlobal$2(receiver, startIndex);
      if (match == null)
        return receiver;
      return A.stringReplaceRangeUnchecked(receiver, match._match.index, match.get$end(), replacement);
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var nativeRegexp;
      if (typeof pattern == "string")
        return A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      if (pattern instanceof A.JSSyntaxRegExp) {
        nativeRegexp = pattern.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, A.escapeReplacement(replacement));
      }
      return A.stringReplaceAllGeneral(receiver, pattern, replacement);
    },
    stringReplaceAllGeneral(receiver, pattern, replacement) {
      var t1, startIndex, t2, match;
      for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), startIndex = 0, t2 = ""; t1.moveNext$0();) {
        match = t1.get$current();
        t2 = t2 + receiver.substring(startIndex, match.get$start()) + replacement;
        startIndex = match.get$end();
      }
      t1 = t2 + receiver.substring(startIndex);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        for (t1 = replacement, i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      if (receiver.indexOf(pattern, 0) < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    _stringIdentity(string) {
      return string;
    },
    stringReplaceAllFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
      var t1, t2, startIndex, t3, match, t4, t5;
      for (t1 = pattern.allMatches$1(0, receiver), t1 = new A._AllMatchesIterator(t1._re, t1.__js_helper$_string, t1.__js_helper$_start), t2 = type$.RegExpMatch, startIndex = 0, t3 = ""; t1.moveNext$0();) {
        match = t1.__js_helper$_current;
        if (match == null)
          match = t2._as(match);
        t4 = match._match;
        t5 = t4.index;
        t3 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$2(receiver, startIndex, t5))) + A.S(onMatch.call$1(match));
        startIndex = t5 + t4[0].length;
      }
      t1 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$1(receiver, startIndex)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
      var index, t1, matches, match;
      if (typeof pattern == "string") {
        index = receiver.indexOf(pattern, startIndex);
        if (index < 0)
          return receiver;
        return A.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
      }
      if (pattern instanceof A.JSSyntaxRegExp)
        return startIndex === 0 ? receiver.replace(pattern._nativeRegExp, A.escapeReplacement(replacement)) : A.stringReplaceFirstRE(receiver, pattern, replacement, startIndex);
      t1 = J.allMatches$2$s(pattern, receiver, startIndex);
      matches = t1.get$iterator(t1);
      if (!matches.moveNext$0())
        return receiver;
      match = matches.get$current();
      return B.JSString_methods.replaceRange$3(receiver, match.get$start(), match.get$end(), replacement);
    },
    stringReplaceRangeUnchecked(receiver, start, end, replacement) {
      return receiver.substring(0, start) + replacement + receiver.substring(end);
    },
    _Record_2_digits_ex78ception: function _Record_2_digits_ex78ception(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    _Record_2_errors_success: function _Record_2_errors_success(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    _Record_2_label_tests: function _Record_2_label_tests(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    _Record_2_lazy_ref: function _Record_2_lazy_ref(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantMap_map_closure: function ConstantMap_map_closure(t0, t1, t2) {
      this.$this = t0;
      this.transform = t1;
      this.result = t2;
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2) {
      this._jsIndex = t0;
      this._values = t1;
      this.$ti = t2;
    },
    _KeysOrValues: function _KeysOrValues(t0, t1) {
      this.__js_helper$_elements = t0;
      this.$ti = t1;
    },
    _KeysOrValuesOrElementsIterator: function _KeysOrValuesOrElementsIterator(t0, t1, t2) {
      var _ = this;
      _.__js_helper$_elements = t0;
      _.__js_helper$_length = t1;
      _.__js_helper$_index = 0;
      _.__js_helper$_current = null;
      _.$ti = t2;
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    ConstantSet: function ConstantSet() {
    },
    GeneralConstantSet: function GeneralConstantSet(t0, t1) {
      this.__js_helper$_elements = t0;
      this.$ti = t1;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    Instantiation2: function Instantiation2(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    Primitives_initTicker_closure: function Primitives_initTicker_closure(t0) {
      this.performance = t0;
    },
    SafeToStringHook: function SafeToStringHook() {
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError() {
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _.__js_helper$_last = _.__js_helper$_first = _.__js_helper$_rest = _.__js_helper$_nums = _.__js_helper$_strings = null;
      _.__js_helper$_modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_containsValue_closure: function JsLinkedHashMap_containsValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _.__js_helper$_previous = _.__js_helper$_next = null;
    },
    LinkedHashMapKeysIterable: function LinkedHashMapKeysIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_map = t0;
      _.__js_helper$_modifications = t1;
      _.__js_helper$_cell = t2;
      _.__js_helper$_current = null;
      _.$ti = t3;
    },
    LinkedHashMapValuesIterable: function LinkedHashMapValuesIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    LinkedHashMapValueIterator: function LinkedHashMapValueIterator(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_map = t0;
      _.__js_helper$_modifications = t1;
      _.__js_helper$_cell = t2;
      _.__js_helper$_current = null;
      _.$ti = t3;
    },
    LinkedHashMapEntriesIterable: function LinkedHashMapEntriesIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    LinkedHashMapEntryIterator: function LinkedHashMapEntryIterator(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_map = t0;
      _.__js_helper$_modifications = t1;
      _.__js_helper$_cell = t2;
      _.__js_helper$_current = null;
      _.$ti = t3;
    },
    JsConstantLinkedHashMap: function JsConstantLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _.__js_helper$_last = _.__js_helper$_first = _.__js_helper$_rest = _.__js_helper$_nums = _.__js_helper$_strings = null;
      _.__js_helper$_modifications = 0;
      _.$ti = t0;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _Record: function _Record() {
    },
    _Record2: function _Record2() {
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._hasCapturesCache = _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this.__js_helper$_string = t1;
      this.__js_helper$_start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _.__js_helper$_string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    throwLateFieldNI(fieldName) {
      throw A.initializeExceptionWrapper(A.LateError$fieldNI(fieldName), new Error());
    },
    throwLateFieldAI(fieldName) {
      throw A.initializeExceptionWrapper(A.LateError$fieldAI(fieldName), new Error());
    },
    throwLateFieldADI(fieldName) {
      throw A.initializeExceptionWrapper(A.LateError$fieldADI(fieldName), new Error());
    },
    _Cell$named(_name) {
      var t1 = new A._Cell(_name);
      return t1._value = t1;
    },
    _Cell: function _Cell(t0) {
      this.__late_helper$_name = t0;
      this._value = null;
    },
    _checkViewArguments(buffer, offsetInBytes, $length) {
    },
    _ensureNativeList(list) {
      return list;
    },
    NativeByteData_NativeByteData($length) {
      return new DataView(new ArrayBuffer($length));
    },
    NativeInt8List__create1(arg) {
      return new Int8Array(arg);
    },
    NativeUint32List_NativeUint32List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      $length = B.JSInt_methods._tdivFast$1(buffer.byteLength - offsetInBytes, 4);
      return new Uint32Array(buffer, offsetInBytes, $length);
    },
    NativeUint8List_NativeUint8List($length) {
      return new Uint8Array($length);
    },
    NativeUint8List_NativeUint8List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = start > $length;
        else
          t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeArrayBuffer: function NativeArrayBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    _UnmodifiableNativeByteBufferView: function _UnmodifiableNativeByteBufferView(t0) {
      this._data = t0;
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    instantiatedGenericFunctionType(genericFunctionRti, instantiationRti) {
      var t1, cache, key, probe, rti;
      if (genericFunctionRti == null)
        return null;
      t1 = instantiationRti._rest;
      cache = genericFunctionRti._bindCache;
      if (cache == null)
        cache = genericFunctionRti._bindCache = new Map();
      key = instantiationRti._canonicalRecipe;
      probe = cache.get(key);
      if (probe != null)
        return probe;
      rti = A._substitute(init.typeUniverse, genericFunctionRti._primary, t1, 0);
      cache.set(key, rti);
      return rti;
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, t1, fields, substitutedFields, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 8:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 9:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 10:
          t1 = rti._primary;
          fields = rti._rest;
          substitutedFields = A._substituteArray(universe, fields, typeArguments, depth);
          if (substitutedFields === fields)
            return rti;
          return A._Universe__lookupRecordRti(universe, t1, substitutedFields);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      if (object instanceof A.Object)
        return A._instanceType(object);
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? Object.getPrototypeOf(Object.getPrototypeOf(instance)).constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeTypeOfDartObject(object) {
      return A.createRuntimeType(A._instanceType(object));
    },
    getRuntimeTypeOfClosure(closure) {
      var rti = A.closureFunctionType(closure);
      return A.createRuntimeType(rti == null ? A.instanceType(closure) : rti);
    },
    _structuralTypeOf(object) {
      var functionRti;
      if (object instanceof A._Record)
        return object._getRti$0();
      functionRti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      if (functionRti != null)
        return functionRti;
      if (type$.TrustedGetRuntimeType._is(object))
        return J.get$runtimeType$(object)._rti;
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A.instanceType(object);
    },
    createRuntimeType(rti) {
      var t1 = rti._cachedRuntimeType;
      return t1 == null ? rti._cachedRuntimeType = new A._Type(rti) : t1;
    },
    evaluateRtiForRecord(recordRecipe, valuesList) {
      var bindings, i,
        values = valuesList,
        $length = values.length;
      if ($length === 0)
        return type$.Record_0;
      if (0 >= $length)
        return A.ioore(values, 0);
      bindings = A._Universe_evalInEnvironment(init.typeUniverse, A._structuralTypeOf(values[0]), "@<0>");
      for (i = 1; i < $length; ++i) {
        if (!(i < values.length))
          return A.ioore(values, i);
        bindings = A._Universe_bind(init.typeUniverse, bindings, A._structuralTypeOf(values[i]));
      }
      return A._Universe_evalInEnvironment(init.typeUniverse, bindings, recordRecipe);
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var testRti = this;
      testRti._is = A._specializedIsTest(testRti);
      return testRti._is(object);
    },
    _specializedIsTest(testRti) {
      var kind, simpleIsFn, $name, predicate, t1;
      if (testRti === type$.Object)
        return A._isObject;
      if (A.isTopType(testRti))
        return A._isTop;
      kind = testRti._kind;
      if (kind === 6)
        return A._generalNullableIsTestImplementation;
      if (kind === 1)
        return A._isNever;
      if (kind === 7)
        return A._isFutureOr;
      simpleIsFn = A._simpleSpecializedIsTest(testRti);
      if (simpleIsFn != null)
        return simpleIsFn;
      if (kind === 8) {
        $name = testRti._primary;
        if (testRti._rest.every(A.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._isListTestViaProperty;
          if (testRti === type$.JSObject)
            return A._isJSObject;
          return A._isTestViaProperty;
        }
      } else if (kind === 10) {
        predicate = A.createRecordTypePredicate(testRti._primary, testRti._rest);
        t1 = predicate == null ? A._isNever : predicate;
        return t1 == null ? A._asObject(t1) : t1;
      }
      return A._generalIsTestImplementation;
    },
    _simpleSpecializedIsTest(testRti) {
      if (testRti._kind === 8) {
        if (testRti === type$.int)
          return A._isInt;
        if (testRti === type$.double || testRti === type$.num)
          return A._isNum;
        if (testRti === type$.String)
          return A._isString;
        if (testRti === type$.bool)
          return A._isBool;
      }
      return null;
    },
    _installSpecializedAsCheck(object) {
      var testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (A.isTopType(testRti))
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else if (A.isNullable(testRti)) {
        asFn = A._generalNullableAsCheckImplementation;
        if (testRti === type$.nullable_int)
          asFn = A._asIntQ;
        else if (testRti === type$.nullable_String)
          asFn = A._asStringQ;
        else if (testRti === type$.nullable_bool)
          asFn = A._asBoolQ;
        else if (testRti === type$.nullable_num)
          asFn = A._asNumQ;
        else if (testRti === type$.nullable_double)
          asFn = A._asDoubleQ;
        else if (testRti === type$.nullable_JSObject)
          asFn = A._asJSObjectQ;
      } else if (testRti === type$.int)
        asFn = A._asInt;
      else if (testRti === type$.String)
        asFn = A._asString;
      else if (testRti === type$.bool)
        asFn = A._asBool;
      else if (testRti === type$.num)
        asFn = A._asNum;
      else if (testRti === type$.double)
        asFn = A._asDouble;
      else if (testRti === type$.JSObject)
        asFn = A._asJSObject;
      testRti._as = asFn;
      return testRti._as(object);
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      return A.isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), testRti);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isJSObject(object) {
      var t1 = this;
      if (object == null)
        return false;
      if (typeof object == "object") {
        if (object instanceof A.Object)
          return !!object[t1._specializedTestResource];
        return true;
      }
      if (typeof object == "function")
        return true;
      return false;
    },
    _isJSObjectStandalone(object) {
      if (typeof object == "object") {
        if (object instanceof A.Object)
          return type$.JSObject._is(object);
        return true;
      }
      if (typeof object == "function")
        return true;
      return false;
    },
    _generalAsCheckImplementation(object) {
      var testRti = this;
      if (object == null) {
        if (A.isNullable(testRti))
          return object;
      } else if (testRti._is(object))
        return object;
      throw A.initializeExceptionWrapper(A._errorForAsCheck(object, testRti), new Error());
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null || testRti._is(object))
        return object;
      throw A.initializeExceptionWrapper(A._errorForAsCheck(object, testRti), new Error());
    },
    _errorForAsCheck(object, testRti) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, A._rtiToString(testRti, null)));
    },
    checkTypeBound(type, bound, variable, methodName) {
      if (A.isSubtype(init.typeUniverse, type, bound))
        return type;
      throw A.initializeExceptionWrapper(A._TypeError$fromMessage("The type argument '" + A._rtiToString(type, null) + "' is not a subtype of the type variable bound '" + A._rtiToString(bound, null) + "' of type variable '" + variable + "' in '" + methodName + "'."), new Error());
    },
    _Error_compose(object, checkedTypeDescription) {
      return A.Error_safeToString(object) + ": type '" + A._rtiToString(A._structuralTypeOf(object), null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, type));
    },
    _isFutureOr(object) {
      var testRti = this;
      return testRti._primary._is(object) || A.Rti__getFutureFromFutureOr(init.typeUniverse, testRti)._is(object);
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "Object"), new Error());
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isNever(object) {
      return false;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "bool"), new Error());
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "bool?"), new Error());
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "double"), new Error());
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "double?"), new Error());
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "int"), new Error());
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "int?"), new Error());
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "num"), new Error());
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "num?"), new Error());
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "String"), new Error());
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "String?"), new Error());
    },
    _asJSObject(object) {
      if (A._isJSObjectStandalone(object))
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "JSObject"), new Error());
    },
    _asJSObjectQ(object) {
      if (object == null)
        return object;
      if (A._isJSObjectStandalone(object))
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "JSObject?"), new Error());
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var fieldCount, names, namesIndex, s, comma, i,
        partialShape = recordType._primary,
        fields = recordType._rest;
      if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
      fieldCount = fields.length;
      names = partialShape.split(",");
      namesIndex = names.length - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
          s += " " + names[namesIndex];
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, offset, i, t1, typeParametersText, typeSep, t2, t3, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ", outerContextLength = null;
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null)
          genericContext = A._setArrayType([], type$.JSArray_String);
        else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t2 = genericContext.length;
          t3 = t2 - 1 - i;
          if (!(t3 >= 0))
            return A.ioore(genericContext, t3);
          typeParametersText = typeParametersText + typeSep + genericContext[t3];
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else
        typeParametersText = "";
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var questionArgument, s, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 7)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 8) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 10)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 11)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        metadata = universe.eT,
        probe = metadata[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        metadata[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        cache = universe.eC,
        probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, false));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 9 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        t1 = true;
        if (!A.isTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 6)
              t1 = baseKind === 7 && A.isNullable(baseType._primary);
        if (t1)
          return baseType;
        else if (baseKind === 1)
          return type$.Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (A.isTopType(baseType) || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 9) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = partialShapeTag;
      rti._rest = fields;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t1, i, ch, u, array, end, item,
        source = parser.r,
        stack = parser.s;
      for (t1 = source.length, i = 0; i < t1;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, stack);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
          i = A._Parser_handleIdentifier(parser, i, source, stack, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, stack, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              stack.push(false);
              break;
            case 33:
              stack.push(true);
              break;
            case 59:
              stack.push(A._Parser_toType(parser.u, parser.e, stack.pop()));
              break;
            case 94:
              stack.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, stack.pop()));
              break;
            case 35:
              stack.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              stack.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              stack.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 62:
              A._Parser_handleTypeArguments(parser, stack);
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, stack);
              break;
            case 63:
              u = parser.u;
              stack.push(A._Universe__lookupQuestionRti(u, A._Parser_toType(u, parser.e, stack.pop()), parser.n));
              break;
            case 47:
              u = parser.u;
              stack.push(A._Universe__lookupFutureOrRti(u, A._Parser_toType(u, parser.e, stack.pop()), parser.n));
              break;
            case 40:
              stack.push(-3);
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 41:
              A._Parser_handleArguments(parser, stack);
              break;
            case 91:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 93:
              array = stack.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = stack.pop();
              stack.push(array);
              stack.push(-1);
              break;
            case 123:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 125:
              array = stack.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = stack.pop();
              stack.push(array);
              stack.push(-2);
              break;
            case 43:
              end = source.indexOf("(", i);
              stack.push(source.substring(i, end));
              stack.push(-4);
              stack.push(parser.p);
              parser.p = stack.length;
              i = end + 1;
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = stack.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 9)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleTypeArguments(parser, stack) {
      var base,
        universe = parser.u,
        $arguments = A._Parser_collectArray(parser, stack),
        head = stack.pop();
      if (typeof head == "string")
        stack.push(A._Universe__lookupInterfaceRti(universe, head, $arguments));
      else {
        base = A._Parser_toType(universe, parser.e, head);
        switch (base._kind) {
          case 11:
            stack.push(A._Universe__lookupGenericFunctionRti(universe, base, $arguments, parser.n));
            break;
          default:
            stack.push(A._Universe__lookupBindingRti(universe, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleArguments(parser, stack) {
      var requiredPositional, returnType, parameters,
        universe = parser.u,
        head = stack.pop(),
        optionalPositional = null, named = null;
      if (typeof head == "number")
        switch (head) {
          case -1:
            optionalPositional = stack.pop();
            break;
          case -2:
            named = stack.pop();
            break;
          default:
            stack.push(head);
            break;
        }
      else
        stack.push(head);
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = stack.pop();
      switch (head) {
        case -3:
          head = stack.pop();
          if (optionalPositional == null)
            optionalPositional = universe.sEA;
          if (named == null)
            named = universe.sEA;
          returnType = A._Parser_toType(universe, parser.e, head);
          parameters = new A._FunctionParameters();
          parameters._requiredPositional = requiredPositional;
          parameters._optionalPositional = optionalPositional;
          parameters._named = named;
          stack.push(A._Universe__lookupFunctionRti(universe, returnType, parameters));
          return;
        case -4:
          stack.push(A._Universe__lookupRecordRti(universe, stack.pop(), requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = stack.splice(parser.p);
      A._Parser_toTypes(parser.u, parser.e, array);
      parser.p = stack.pop();
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
      } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 9) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 8)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    isSubtype(universe, s, t) {
      var result,
        sCache = s._isSubtypeCache;
      if (sCache == null)
        sCache = s._isSubtypeCache = new Map();
      result = sCache.get(t);
      if (result == null) {
        result = A._isSubtype(universe, s, null, t, null);
        sCache.set(t, result);
      }
      return result;
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var sKind, leftTypeVariable, tKind, t1, t2, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (A.isTopType(t))
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isTopType(s))
        return false;
      if (s._kind === 1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = type$.Null;
      if (s === t1 || s === type$.JSNull) {
        if (tKind === 7)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === t1 || t === type$.JSNull || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 7)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 6;
      }
      if (sKind === 7) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 6)
        return A._isSubtype(universe, t1, sEnv, t, tEnv) && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 7) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 6)
        return A._isSubtype(universe, s, sEnv, t1, tEnv) || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      t2 = sKind === 10;
      if (t2 && t === type$.Record)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 8) {
        if (tKind !== 8)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      if (t2 && tKind === 10)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      return A._areArgumentsSubtypes(universe, s._rest, null, sEnv, t._rest, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i)
        if (!A._isSubtype(universe, sArgs[i], sEnv, tArgs[i], tEnv))
          return false;
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv) {
      var i,
        sFields = s._rest,
        tFields = t._rest,
        sCount = sFields.length;
      if (sCount !== tFields.length)
        return false;
      if (s._primary !== t._primary)
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv))
          return false;
      return true;
    },
    isNullable(t) {
      var kind = t._kind,
        t1 = true;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isTopType(t))
          if (kind !== 6)
            t1 = kind === 7 && A.isNullable(t._primary);
      return t1;
    },
    isTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._isSubtypeCache = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this._message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var t1, div, span;
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        t1 = {};
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    Timer__createPeriodicTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl(true);
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _TimerImpl$periodic(milliseconds, callback) {
      var t1 = new A._TimerImpl(false);
      t1._TimerImpl$periodic$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (object instanceof A._Future)
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true) {
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
          }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _SyncStarIterator__terminatedBody(_1, _2, _3) {
      return 0;
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B._StringStackTrace_OdL;
    },
    Future_Future(computation, $T) {
      var result = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      A.Timer_Timer(B.Duration_0, new A.Future_Future_closure(computation, result));
      return result;
    },
    Future_Future$microtask(computation, $T) {
      var result = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      A.scheduleMicrotask(new A.Future_Future$microtask_closure(computation, result));
      return result;
    },
    Future_Future$sync(computation, $T) {
      var error, stackTrace, exception, t1, t2, t3, t4, result = null;
      try {
        result = computation.call$0();
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
        t2 = error;
        t3 = stackTrace;
        t4 = A._interceptError(t2, t3);
        if (t4 == null)
          t2 = new A.AsyncError(t2, t3 == null ? A.AsyncError_defaultStackTrace(t2) : t3);
        else
          t2 = t4;
        t1._asyncCompleteErrorObject$1(t2);
        return t1;
      }
      return $T._eval$1("Future<0>")._is(result) ? result : A._Future$value(result, $T);
    },
    Future_Future$value(value, $T) {
      var t1 = value == null ? $T._as(value) : value,
        t2 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t2._asyncComplete$1(t1);
      return t2;
    },
    Future_Future$delayed(duration, computation, $T) {
      var result;
      if (computation == null && !$T._is(null))
        throw A.wrapException(A.ArgumentError$value(null, "computation", "The type parameter is not nullable"));
      result = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      A.Timer_Timer(duration, new A.Future_Future$delayed_closure(computation, result, $T));
      return result;
    },
    Future_wait(futures, eagerError, $T) {
      var handleError, future, pos, e, s, t1, t2, exception, t3, t4, _box_0 = {}, cleanUp = null,
        _future = new A._Future($.Zone__current, $T._eval$1("_Future<List<0>>"));
      _box_0.values = null;
      _box_0.remaining = 0;
      _box_0.stackTrace = _box_0.error = null;
      handleError = new A.Future_wait_handleError(_box_0, cleanUp, eagerError, _future);
      try {
        for (t1 = J.get$iterator$ax(futures), t2 = type$.Null; t1.moveNext$0();) {
          future = t1.get$current();
          pos = _box_0.remaining;
          future.then$1$2$onError(new A.Future_wait_closure(_box_0, pos, _future, $T, cleanUp, eagerError), handleError, t2);
          ++_box_0.remaining;
        }
        t1 = _box_0.remaining;
        if (t1 === 0) {
          t1 = _future;
          t1._completeWithValue$1(A._setArrayType([], $T._eval$1("JSArray<0>")));
          return t1;
        }
        _box_0.values = A.List_List$filled(t1, null, false, $T._eval$1("0?"));
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (_box_0.remaining === 0 || eagerError) {
          t1 = _future;
          t2 = e;
          t3 = s;
          t4 = A._interceptError(t2, t3);
          if (t4 == null)
            t2 = new A.AsyncError(t2, t3 == null ? A.AsyncError_defaultStackTrace(t2) : t3);
          else
            t2 = t4;
          t1._asyncCompleteErrorObject$1(t2);
          return t1;
        } else {
          _box_0.error = e;
          _box_0.stackTrace = s;
        }
      }
      return _future;
    },
    Future_any(futures, $T) {
      var t2, _i,
        t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._SyncCompleter(t1, $T._eval$1("_SyncCompleter<0>")),
        onValue = new A.Future_any_onValue(completer, $T),
        onError = new A.Future_any_onError(completer);
      for (t2 = type$.void, _i = 0; _i < 2; ++_i)
        futures[_i].then$1$2$onError(onValue, onError, t2);
      return t1;
    },
    Future_forEach(elements, action, $T) {
      return A.Future_doWhile(new A.Future_forEach_closure(new J.ArrayIterator(elements, elements.length, A._arrayInstanceType(elements)._eval$1("ArrayIterator<1>")), action));
    },
    Future__kTrue(__wc0_formal) {
      return true;
    },
    Future_doWhile(action) {
      var t1 = $.Zone__current,
        doneSignal = new A._Future(t1, type$._Future_void),
        nextIteration = A._Cell$named("nextIteration");
      nextIteration._value = t1.bindUnaryCallbackGuarded$1$1(new A.Future_doWhile_closure(action, doneSignal, nextIteration), type$.bool);
      nextIteration._readLocal$0().call$1(true);
      return doneSignal;
    },
    FutureExtensions_onError(_this, handleError, $T, $E) {
      var onError, t1, result;
      $T._eval$1("_Future<0>")._as(_this);
      onError = $T._eval$1("0/(Object,StackTrace)")._as(new A.FutureExtensions_onError_onError($E, null, handleError, $T));
      t1 = $.Zone__current;
      result = new A._Future(t1, $T._eval$1("_Future<0>"));
      if (t1 !== B.C__RootZone)
        onError = t1.registerBinaryCallback$3$1(onError, $T._eval$1("0/"), type$.Object, type$.StackTrace);
      _this._addListener$1(new A._FutureListener(result, 2, null, onError, _this.$ti._eval$1("@<1>")._bind$1($T)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    FutureExtensions_ignore(_this, $T) {
      _this._ignore$0();
    },
    Completer_Completer($T) {
      return new A._AsyncCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncCompleter<0>"));
    },
    _interceptError(error, stackTrace) {
      var replacement, t1, t2,
        zone = $.Zone__current;
      if (zone === B.C__RootZone)
        return null;
      replacement = zone.errorCallback$2(error, stackTrace);
      if (replacement == null)
        return null;
      t1 = replacement.error;
      t2 = replacement.stackTrace;
      if (type$.Error._is(t1))
        A.Primitives_trySetStackTrace(t1, t2);
      return replacement;
    },
    _interceptUserError(error, stackTrace) {
      var replacement;
      if ($.Zone__current !== B.C__RootZone) {
        replacement = A._interceptError(error, stackTrace);
        if (replacement != null)
          return replacement;
      }
      if (stackTrace == null)
        if (type$.Error._is(error)) {
          stackTrace = error.get$stackTrace();
          if (stackTrace == null) {
            A.Primitives_trySetStackTrace(error, B._StringStackTrace_OdL);
            stackTrace = B._StringStackTrace_OdL;
          }
        } else
          stackTrace = B._StringStackTrace_OdL;
      else if (type$.Error._is(error))
        A.Primitives_trySetStackTrace(error, stackTrace);
      return new A.AsyncError(error, stackTrace);
    },
    _Future$zoneValue(value, _zone, $T) {
      var t1 = new A._Future(_zone, $T._eval$1("_Future<0>"));
      $T._as(value);
      t1._state = 8;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future$value(value, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      $T._as(value);
      t1._state = 8;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future__chainCoreFuture(source, target, sync) {
      var t2, t3, ignoreError, listeners, _box_0 = {},
        t1 = _box_0.source = source;
      for (t2 = type$._Future_dynamic; t3 = t1._state, (t3 & 4) !== 0; t1 = source) {
        source = t2._as(t1._resultOrListeners);
        _box_0.source = source;
      }
      if (t1 === target) {
        t2 = A.StackTrace_current();
        target._asyncCompleteErrorObject$1(new A.AsyncError(new A.ArgumentError(true, t1, null, "Cannot complete a future with itself"), t2));
        return;
      }
      ignoreError = target._state & 1;
      t2 = t1._state = t3 | ignoreError;
      if ((t2 & 24) === 0) {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = target._state & 1 | 4;
        target._resultOrListeners = t1;
        t1._prependListeners$1(listeners);
        return;
      }
      if (!sync)
        if (target._resultOrListeners == null)
          t1 = (t2 & 16) === 0 || ignoreError !== 0;
        else
          t1 = false;
      else
        t1 = true;
      if (t1) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(_box_0.source);
        A._Future__propagateToListeners(target, listeners);
        return;
      }
      target._state ^= 2;
      target._zone.scheduleMicrotask$1(new A._Future__chainCoreFuture_closure(_box_0, target));
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, _box_0, t4, t5, hasError, asyncError, nextListener, nextListener0, sourceResult, t6, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic; true;) {
        _box_0 = {};
        t4 = t1._state;
        t5 = (t4 & 16) === 0;
        hasError = !t5;
        if (listeners == null) {
          if (hasError && (t4 & 1) === 0) {
            asyncError = t2._as(t1._resultOrListeners);
            t1._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t4 = _box_1.source;
        sourceResult = t4._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t5) {
          t6 = t1.state;
          t6 = (t6 & 1) !== 0 || (t6 & 15) === 8;
        } else
          t6 = true;
        if (t6) {
          zone = t1.result._zone;
          if (hasError) {
            t1 = t4._zone;
            t1 = !(t1 === zone || t1.get$errorZone() === zone.get$errorZone());
          } else
            t1 = false;
          if (t1) {
            t1 = _box_1.source;
            asyncError = t2._as(t1._resultOrListeners);
            t1._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = _box_0.listener.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t5) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t1 instanceof A._Future) {
            t4 = _box_0.listener.$ti;
            t4 = t4._eval$1("Future<2>")._is(t1) || !t4._rest[1]._is(t1);
          } else
            t4 = false;
          if (t4) {
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state & 30 | result._state & 1;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFuture(t1, result, true);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t4 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t4);
          result._state = 8;
          result._resultOrListeners = t4;
        } else {
          t2._as(t4);
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t4;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.dynamic_Function_Object._is(errorHandler))
        return zone.registerUnaryCallback$2$1(errorHandler, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var t1, _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      if (B.C__RootZone === currentZone.get$_scheduleMicrotask().zone)
        t1 = B.C__RootZone.get$errorZone() === currentZone.get$errorZone();
      else
        t1 = false;
      if (t1) {
        A._rootScheduleMicrotask(_null, _null, currentZone, currentZone.registerCallback$1$1(callback, type$.void));
        return;
      }
      t1 = $.Zone__current;
      t1.scheduleMicrotask$1(t1.bindCallbackGuarded$1(callback));
    },
    Stream_Stream$fromFuture(future, $T) {
      var _null = null,
        t1 = $T._eval$1("_SyncStreamController<0>"),
        controller = new A._SyncStreamController(_null, _null, _null, _null, t1);
      future.then$1$2$onError(new A.Stream_Stream$fromFuture_closure(controller, $T), new A.Stream_Stream$fromFuture_closure0(controller), type$.Null);
      return new A._ControllerStream(controller, t1._eval$1("_ControllerStream<1>"));
    },
    Stream_Stream$fromIterable(elements, $T) {
      return new A._MultiStream(false, new A.Stream_Stream$fromIterable_closure(elements, $T), $T._eval$1("_MultiStream<0>"));
    },
    StreamIterator_StreamIterator(stream, $T) {
      return new A._StreamIterator(A.checkNotNullable(stream, "stream", type$.Object), $T._eval$1("_StreamIterator<0>"));
    },
    StreamController_StreamController(onCancel, onListen, onPause, onResume, $T) {
      return new A._AsyncStreamController(onListen, onPause, onResume, onCancel, $T._eval$1("_AsyncStreamController<0>"));
    },
    _runGuarded(notificationHandler) {
      var e, s, exception;
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        $.Zone__current.handleUncaughtError$2(e, s);
      }
    },
    _ControllerSubscription$(_controller, onData, onError, onDone, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0,
        t3 = onError != null ? 32 : 0;
      return new A._ControllerSubscription(_controller, A._BufferingStreamSubscription__registerDataHandler(t1, onData, $T), A._BufferingStreamSubscription__registerErrorHandler(t1, onError), A._BufferingStreamSubscription__registerDoneHandler(t1, onDone), t1, t2 | t3, $T._eval$1("_ControllerSubscription<0>"));
    },
    _BufferingStreamSubscription__registerDataHandler(zone, handleData, $T) {
      var t1 = handleData == null ? A.async___nullDataHandler$closure() : handleData;
      return zone.registerUnaryCallback$2$1(t1, type$.void, $T);
    },
    _BufferingStreamSubscription__registerErrorHandler(zone, handleError) {
      if (handleError == null)
        handleError = A.async___nullErrorHandler$closure();
      if (type$.void_Function_Object_StackTrace._is(handleError))
        return zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.void_Function_Object._is(handleError))
        return zone.registerUnaryCallback$2$1(handleError, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace.", null));
    },
    _BufferingStreamSubscription__registerDoneHandler(zone, handleDone) {
      var t1 = handleDone == null ? A.async___nullDoneHandler$closure() : handleDone;
      return zone.registerCallback$1$1(t1, type$.void);
    },
    _nullDataHandler(value) {
    },
    _nullErrorHandler(error, stackTrace) {
      A._asObject(error);
      type$.StackTrace._as(stackTrace);
      $.Zone__current.handleUncaughtError$2(error, stackTrace);
    },
    _nullDoneHandler() {
    },
    _cancelAndValue(subscription, future, value) {
      var cancelFuture = subscription.cancel$0();
      if (cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new A._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    Timer_Timer(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return t1.createTimer$2(duration, callback);
      return t1.createTimer$2(duration, t1.bindCallbackGuarded$1(callback));
    },
    Timer_Timer$periodic(duration, callback) {
      var boundCallback,
        t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return t1.createPeriodicTimer$2(duration, callback);
      boundCallback = t1.bindUnaryCallbackGuarded$1$1(callback, type$.Timer);
      return $.Zone__current.createPeriodicTimer$2(duration, boundCallback);
    },
    _rootHandleUncaughtError($self, $parent, zone, error, stackTrace) {
      A._rootHandleError(A._asObject(error), type$.StackTrace._as(stackTrace));
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old, t1;
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      $R._eval$1("0()")._as(f);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, $T1, $T2) {
      var old, t1;
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      $R._eval$1("@<0>")._bind$1($T1)._bind$1($T2)._eval$1("1(2,3)")._as(f);
      $T1._as(arg1);
      $T2._as(arg2);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRegisterCallback($self, $parent, zone, f, $R) {
      return $R._eval$1("0()")._as(f);
    },
    _rootRegisterUnaryCallback($self, $parent, zone, f, $R, $T) {
      return $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
    },
    _rootRegisterBinaryCallback($self, $parent, zone, f, $R, $T1, $T2) {
      return $R._eval$1("@<0>")._bind$1($T1)._bind$1($T2)._eval$1("1(2,3)")._as(f);
    },
    _rootErrorCallback($self, $parent, zone, error, stackTrace) {
      A._asObject(error);
      type$.nullable_StackTrace._as(stackTrace);
      return null;
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      var t1, t2;
      type$.void_Function._as(f);
      if (B.C__RootZone !== zone) {
        t1 = B.C__RootZone.get$errorZone();
        t2 = zone.get$errorZone();
        f = t1 !== t2 ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, type$.void);
      }
      A._scheduleAsyncCallback(f);
    },
    _rootCreateTimer($self, $parent, zone, duration, callback) {
      type$.Duration._as(duration);
      type$.void_Function._as(callback);
      return A.Timer__createTimer(duration, B.C__RootZone !== zone ? zone.bindCallback$1$1(callback, type$.void) : callback);
    },
    _rootCreatePeriodicTimer($self, $parent, zone, duration, callback) {
      type$.Duration._as(duration);
      type$.void_Function_Timer._as(callback);
      return A.Timer__createPeriodicTimer(duration, B.C__RootZone !== zone ? zone.bindUnaryCallback$2$1(callback, type$.void, type$.Timer) : callback);
    },
    _rootPrint($self, $parent, zone, line) {
      A.printString(A._asString(line));
    },
    _printToZone(line) {
      $.Zone__current.print$1(line);
    },
    _rootFork($self, $parent, zone, specification, zoneValues) {
      var valueMap, t1, registerCallback, registerUnaryCallback, registerBinaryCallback, errorCallback, $print, handleUncaughtError;
      type$.nullable_ZoneSpecification._as(specification);
      type$.nullable_Map_of_nullable_Object_and_nullable_Object._as(zoneValues);
      $.printToZone = A.async___printToZone$closure();
      if (specification == null)
        specification = B._ZoneSpecification_Ipa;
      if (zoneValues == null)
        valueMap = zone.get$_async$_map();
      else {
        t1 = type$.nullable_Object;
        valueMap = A.HashMap_HashMap$from(zoneValues, t1, t1);
      }
      t1 = new A._CustomZone(zone.get$_run(), zone.get$_runUnary(), zone.get$_runBinary(), zone.get$_registerCallback(), zone.get$_registerUnaryCallback(), zone.get$_registerBinaryCallback(), zone.get$_errorCallback(), zone.get$_scheduleMicrotask(), zone.get$_createTimer(), zone.get$_createPeriodicTimer(), zone.get$_print(), zone.get$_fork(), zone.get$_handleUncaughtError(), zone, valueMap);
      registerCallback = specification.registerCallback;
      if (registerCallback != null)
        t1._registerCallback = new A._ZoneFunction(t1, registerCallback, type$._ZoneFunction_of_A_Function_Function_A_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function);
      registerUnaryCallback = specification.registerUnaryCallback;
      if (registerUnaryCallback != null)
        t1._registerUnaryCallback = new A._ZoneFunction(t1, registerUnaryCallback, type$._ZoneFunction_of_A_Function_B_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_B);
      registerBinaryCallback = specification.registerBinaryCallback;
      if (registerBinaryCallback != null)
        t1._registerBinaryCallback = new A._ZoneFunction(t1, registerBinaryCallback, type$._ZoneFunction_of_A_Function_2_B_and_C_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_and_C_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_2_B_and_C);
      errorCallback = specification.errorCallback;
      if (errorCallback != null)
        t1._errorCallback = new A._ZoneFunction(t1, errorCallback, type$._ZoneFunction_of_nullable_AsyncError_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Object_and_nullable_StackTrace);
      $print = specification.print;
      if ($print != null)
        t1._print = new A._ZoneFunction(t1, $print, type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_String);
      handleUncaughtError = specification.handleUncaughtError;
      if (handleUncaughtError != null)
        t1._handleUncaughtError = new A._ZoneFunction(t1, handleUncaughtError, type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace);
      return t1;
    },
    runZoned(body, zoneSpecification, zoneValues, $R) {
      return A._runZoned(body, zoneValues, zoneSpecification, $R);
    },
    _runZoned(body, zoneValues, specification, $R) {
      return $.Zone__current.fork$2$specification$zoneValues(specification, zoneValues).run$1$1(body, $R);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl(t0) {
      this._once = t0;
      this._handle = null;
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.milliseconds = t1;
      _.start = t2;
      _.callback = t3;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._async$_body = t0;
      _._suspendedBodies = _._nestedIterator = _._datum = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _BroadcastStream: function _BroadcastStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _BroadcastSubscription: function _BroadcastSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._eventState = 0;
      _._async$_previous = _._async$_next = null;
      _._controller = t0;
      _._async$_onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _BroadcastStreamController: function _BroadcastStreamController() {
    },
    _SyncBroadcastStreamController: function _SyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    _SyncBroadcastStreamController__sendData_closure: function _SyncBroadcastStreamController__sendData_closure(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    _SyncBroadcastStreamController__sendError_closure: function _SyncBroadcastStreamController__sendError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _SyncBroadcastStreamController__sendDone_closure: function _SyncBroadcastStreamController__sendDone_closure(t0) {
      this.$this = t0;
    },
    _AsyncBroadcastStreamController: function _AsyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    Future_Future_closure: function Future_Future_closure(t0, t1) {
      this.computation = t0;
      this.result = t1;
    },
    Future_Future$microtask_closure: function Future_Future$microtask_closure(t0, t1) {
      this.computation = t0;
      this.result = t1;
    },
    Future_Future$delayed_closure: function Future_Future$delayed_closure(t0, t1, t2) {
      this.computation = t0;
      this.result = t1;
      this.T = t2;
    },
    Future_wait_handleError: function Future_wait_handleError(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.cleanUp = t1;
      _.eagerError = t2;
      _._future = t3;
    },
    Future_wait_closure: function Future_wait_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.pos = t1;
      _._future = t2;
      _.T = t3;
      _.cleanUp = t4;
      _.eagerError = t5;
    },
    Future_any_onValue: function Future_any_onValue(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    Future_any_onError: function Future_any_onError(t0) {
      this.completer = t0;
    },
    Future_forEach_closure: function Future_forEach_closure(t0, t1) {
      this.iterator = t0;
      this.action = t1;
    },
    Future_doWhile_closure: function Future_doWhile_closure(t0, t1, t2) {
      this.action = t0;
      this.doneSignal = t1;
      this.nextIteration = t2;
    },
    FutureExtensions_onError_onError: function FutureExtensions_onError_onError(t0, t1, t2, t3) {
      var _ = this;
      _.E = t0;
      _.test = t1;
      _.handleError = t2;
      _.T = t3;
    },
    TimeoutException: function TimeoutException(t0, t1) {
      this.message = t0;
      this.duration = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainCoreFuture_closure: function _Future__chainCoreFuture_closure(t0, t1) {
      this._box_0 = t0;
      this.target = t1;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteErrorObject_closure: function _Future__asyncCompleteErrorObject_closure(t0, t1) {
      this.$this = t0;
      this.error = t1;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0, t1) {
      this.joinedResult = t0;
      this.originalSource = t1;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0: function _Future__propagateToListeners_handleWhenCompleteCallback_closure0(t0) {
      this.joinedResult = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_Stream$fromFuture_closure: function Stream_Stream$fromFuture_closure(t0, t1) {
      this.controller = t0;
      this.T = t1;
    },
    Stream_Stream$fromFuture_closure0: function Stream_Stream$fromFuture_closure0(t0) {
      this.controller = t0;
    },
    Stream_Stream$fromIterable_closure: function Stream_Stream$fromIterable_closure(t0, t1) {
      this.elements = t0;
      this.T = t1;
    },
    Stream_Stream$fromIterable_closure_next: function Stream_Stream$fromIterable_closure_next(t0, t1, t2) {
      this._box_0 = t0;
      this.controller = t1;
      this.zone = t2;
    },
    Stream_Stream$fromIterable__closure: function Stream_Stream$fromIterable__closure(t0, t1, t2) {
      this._box_0 = t0;
      this.zone = t1;
      this.next = t2;
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    Stream_isEmpty_closure: function Stream_isEmpty_closure(t0) {
      this.future = t0;
    },
    Stream_isEmpty_closure0: function Stream_isEmpty_closure0(t0, t1, t2) {
      this.$this = t0;
      this.subscription = t1;
      this.future = t2;
    },
    Stream_toList_closure: function Stream_toList_closure(t0, t1) {
      this.$this = t0;
      this.result = t1;
    },
    Stream_toList_closure0: function Stream_toList_closure0(t0, t1) {
      this.future = t0;
      this.result = t1;
    },
    Stream_first_closure: function Stream_first_closure(t0) {
      this.future = t0;
    },
    Stream_first_closure0: function Stream_first_closure0(t0, t1, t2) {
      this.$this = t0;
      this.subscription = t1;
      this.future = t2;
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _SyncStreamController: function _SyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._controller = t0;
      _._async$_onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _StreamSinkWrapper: function _StreamSinkWrapper(t0, t1) {
      this._async$_target = t0;
      this.$ti = t1;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    },
    _BufferingStreamSubscription_asFuture_closure: function _BufferingStreamSubscription_asFuture_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _BufferingStreamSubscription_asFuture_closure0: function _BufferingStreamSubscription_asFuture_closure0(t0, t1) {
      this.$this = t0;
      this.result = t1;
    },
    _BufferingStreamSubscription_asFuture__closure: function _BufferingStreamSubscription_asFuture__closure(t0, t1, t2) {
      this.result = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents(t0) {
      var _ = this;
      _._state = 0;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _.$ti = t0;
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _DoneStreamSubscription: function _DoneStreamSubscription(t0, t1) {
      var _ = this;
      _._state = 1;
      _._zone = t0;
      _._onDone = null;
      _.$ti = t1;
    },
    _DoneStreamSubscription_asFuture_closure: function _DoneStreamSubscription_asFuture_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _StreamIterator: function _StreamIterator(t0, t1) {
      var _ = this;
      _._subscription = null;
      _._stateData = t0;
      _._async$_hasValue = false;
      _.$ti = t1;
    },
    _MultiStream: function _MultiStream(t0, t1, t2) {
      this.isBroadcast = t0;
      this._onListen = t1;
      this.$ti = t2;
    },
    _MultiStream_listen_closure: function _MultiStream_listen_closure(t0, t1) {
      this.$this = t0;
      this.controller = t1;
    },
    _MultiStreamController: function _MultiStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _cancelAndValue_closure: function _cancelAndValue_closure(t0, t1) {
      this.future = t0;
      this.value = t1;
    },
    _ForwardingStream: function _ForwardingStream() {
    },
    _ForwardingStreamSubscription: function _ForwardingStreamSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._stream = t0;
      _._subscription = null;
      _._async$_onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _MapStream: function _MapStream(t0, t1, t2) {
      this._transform = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    _ZoneFunction: function _ZoneFunction(t0, t1, t2) {
      this.zone = t0;
      this.$function = t1;
      this.$ti = t2;
    },
    _ZoneSpecification: function _ZoneSpecification(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.handleUncaughtError = t0;
      _.run = t1;
      _.runUnary = t2;
      _.runBinary = t3;
      _.registerCallback = t4;
      _.registerUnaryCallback = t5;
      _.registerBinaryCallback = t6;
      _.errorCallback = t7;
      _.scheduleMicrotask = t8;
      _.createTimer = t9;
      _.createPeriodicTimer = t10;
      _.print = t11;
      _.fork = t12;
    },
    _ZoneDelegate: function _ZoneDelegate(t0) {
      this._delegationTarget = t0;
    },
    _Zone: function _Zone() {
    },
    _CustomZone: function _CustomZone(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._run = t0;
      _._runUnary = t1;
      _._runBinary = t2;
      _._registerCallback = t3;
      _._registerUnaryCallback = t4;
      _._registerBinaryCallback = t5;
      _._errorCallback = t6;
      _._scheduleMicrotask = t7;
      _._createTimer = t8;
      _._createPeriodicTimer = t9;
      _._print = t10;
      _._fork = t11;
      _._handleUncaughtError = t12;
      _._delegateCache = null;
      _.parent = t13;
      _._async$_map = t14;
    },
    _CustomZone_bindCallback_closure: function _CustomZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.R = t2;
    },
    _CustomZone_bindUnaryCallback_closure: function _CustomZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.registered = t1;
      _.T = t2;
      _.R = t3;
    },
    _CustomZone_bindCallbackGuarded_closure: function _CustomZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.registered = t1;
    },
    _CustomZone_bindUnaryCallbackGuarded_closure: function _CustomZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.T = t2;
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindUnaryCallback_closure: function _RootZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.T = t2;
      _.R = t3;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    HashMap_HashMap(equals, $K, $V) {
      if (equals == null)
        return new A._HashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_HashMap<1,2>"));
      return A._CustomHashMap$(equals, A.collection___defaultHashCode$closure(), null, $K, $V);
    },
    _HashMap__getTableEntry(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable() {
      var table = Object.create(null);
      A._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    _CustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      return new A._CustomHashMap(_equals, _hashCode, new A._CustomHashMap_closure($K), $K._eval$1("@<0>")._bind$1($V)._eval$1("_CustomHashMap<1,2>"));
    },
    LinkedHashMap_LinkedHashMap($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    HashSet_HashSet(equals, $E) {
      return A._CustomHashSet$(equals, A.collection___defaultHashCode$closure(), null, $E);
    },
    _HashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _CustomHashSet$(_equality, _hasher, validKey, $E) {
      var t1 = validKey != null ? validKey : new A._CustomHashSet_closure($E);
      return new A._CustomHashSet(_equality, _hasher, t1, $E._eval$1("_CustomHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_literal(values, $E) {
      return $E._eval$1("LinkedHashSet<0>")._as(A.fillLiteralSet(values, new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"))));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications, $E) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._cell = _set._first;
      return t1;
    },
    _defaultHashCode(a) {
      return J.get$hashCode$(a);
    },
    HashMap_HashMap$from(other, $K, $V) {
      var result = A.HashMap_HashMap(null, $K, $V);
      other.forEach$1(0, new A.HashMap_HashMap$from_closure(result, $K, $V));
      return result;
    },
    IterableExtensions_get_lastOrNull(_this, $T) {
      if (_this.length === 0)
        return null;
      return B.JSArray_methods.get$last(_this);
    },
    LinkedHashMap_LinkedHashMap$from(other, $K, $V) {
      var result = A.LinkedHashMap_LinkedHashMap($K, $V);
      other.forEach$1(0, new A.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashMap_LinkedHashMap$of(other, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap($K, $V);
      t1.addAll$1(0, other);
      return t1;
    },
    LinkedHashSet_LinkedHashSet$from(elements, $E) {
      var t1,
        result = A.LinkedHashSet_LinkedHashSet($E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, $E._as(t1.get$current()));
      return result;
    },
    LinkedHashSet_LinkedHashSet$of(elements, $E) {
      var t1 = A.LinkedHashSet_LinkedHashSet($E);
      t1.addAll$1(0, elements);
      return t1;
    },
    ListBase__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    MapBase_mapToString(m) {
      var result, t1;
      if (A.isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        t1 = {};
        B.JSArray_methods.add$1($.toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    ListQueue$($E) {
      return new A.ListQueue(A.List_List$filled(A.ListQueue__calculateCapacity(null), null, false, $E._eval$1("0?")), $E._eval$1("ListQueue<0>"));
    },
    ListQueue__calculateCapacity(initialCapacity) {
      return 8;
    },
    _ListQueueIterator$(queue, $E) {
      return new A._ListQueueIterator(queue, queue._collection$_tail, queue._modificationCount, queue._collection$_head, $E._eval$1("_ListQueueIterator<0>"));
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._nums = _._strings = null;
      _.$ti = t0;
    },
    _HashMap_values_closure: function _HashMap_values_closure(t0) {
      this.$this = t0;
    },
    _HashMap_containsValue_closure: function _HashMap_containsValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _HashMap_addAll_closure: function _HashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._nums = _._strings = null;
      _.$ti = t0;
    },
    _CustomHashMap: function _CustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._nums = _._strings = null;
      _.$ti = t3;
    },
    _CustomHashMap_closure: function _CustomHashMap_closure(t0) {
      this.K = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _HashSet: function _HashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._elements = _._collection$_rest = _._nums = _._strings = null;
      _.$ti = t0;
    },
    _CustomHashSet: function _CustomHashSet(t0, t1, t2, t3) {
      var _ = this;
      _._equality = t0;
      _._hasher = t1;
      _._validKey = t2;
      _._collection$_length = 0;
      _._elements = _._collection$_rest = _._nums = _._strings = null;
      _.$ti = t3;
    },
    _CustomHashSet_closure: function _CustomHashSet_closure(t0) {
      this.E = t0;
    },
    _HashSetIterator: function _HashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._elements = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._last = _._first = _._collection$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._previous = this._next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._modifications = t1;
      _._collection$_current = _._cell = null;
      _.$ti = t2;
    },
    UnmodifiableListView: function UnmodifiableListView(t0, t1) {
      this._collection$_source = t0;
      this.$ti = t1;
    },
    HashMap_HashMap$from_closure: function HashMap_HashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    MapBase: function MapBase() {
    },
    MapBase_addAll_closure: function MapBase_addAll_closure(t0) {
      this.$this = t0;
    },
    MapBase_entries_closure: function MapBase_entries_closure(t0) {
      this.$this = t0;
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    UnmodifiableMapBase: function UnmodifiableMapBase() {
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._keys = t0;
      _._map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ListQueue: function ListQueue(t0, t1) {
      var _ = this;
      _._collection$_table = t0;
      _._modificationCount = _._collection$_tail = _._collection$_head = 0;
      _.$ti = t1;
    },
    _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue = t0;
      _._end = t1;
      _._modificationCount = t2;
      _._position = t3;
      _._collection$_current = null;
      _.$ti = t4;
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _Utf8Decoder__makeNativeUint8List(codeUnits, start, end) {
      var bytes, t1, i, b,
        $length = end - start;
      if ($length <= 4096)
        bytes = $.$get$_Utf8Decoder__reusableBuffer();
      else
        bytes = new Uint8Array($length);
      for (t1 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
        b = t1.$index(codeUnits, start + i);
        if ((b & 255) !== b)
          b = 255;
        bytes[i] = b;
      }
      return bytes;
    },
    _Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$_Utf8Decoder__decoderNonfatal() : $.$get$_Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A._Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A._Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, end));
    },
    _Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    Base64Codec__checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (B.JSInt_methods.$mod($length, 4) !== 0)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder_encodeChunk(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var t1, t2, t3, i, byteOr, byte, outputIndex0, t4, t5, outputIndex1,
        bits = state >>> 2,
        expectedChars = 3 - (state & 3);
      for (t1 = J.getInterceptor$asx(bytes), t2 = alphabet.length, t3 = output.$flags | 0, i = start, byteOr = 0; i < end; ++i) {
        byte = t1.$index(bytes, i);
        byteOr = (byteOr | byte) >>> 0;
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          outputIndex0 = outputIndex + 1;
          t4 = bits >>> 18 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          t3 & 2 && A.throwUnsupportedOperation(output);
          t5 = output.length;
          if (!(outputIndex < t5))
            return A.ioore(output, outputIndex);
          output[outputIndex] = alphabet.charCodeAt(t4);
          outputIndex = outputIndex0 + 1;
          t4 = bits >>> 12 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex0 < t5))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = alphabet.charCodeAt(t4);
          outputIndex0 = outputIndex + 1;
          t4 = bits >>> 6 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex < t5))
            return A.ioore(output, outputIndex);
          output[outputIndex] = alphabet.charCodeAt(t4);
          outputIndex = outputIndex0 + 1;
          t4 = bits & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex0 < t5))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = alphabet.charCodeAt(t4);
          bits = 0;
          expectedChars = 3;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (expectedChars < 3) {
          outputIndex0 = outputIndex + 1;
          outputIndex1 = outputIndex0 + 1;
          if (3 - expectedChars === 1) {
            t1 = bits >>> 2 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            t3 & 2 && A.throwUnsupportedOperation(output);
            t3 = output.length;
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = alphabet.charCodeAt(t1);
            t1 = bits << 4 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex0 < t3))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = alphabet.charCodeAt(t1);
            outputIndex = outputIndex1 + 1;
            if (!(outputIndex1 < t3))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = 61;
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          } else {
            t1 = bits >>> 10 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            t3 & 2 && A.throwUnsupportedOperation(output);
            t3 = output.length;
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = alphabet.charCodeAt(t1);
            t1 = bits >>> 4 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex0 < t3))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = alphabet.charCodeAt(t1);
            outputIndex = outputIndex1 + 1;
            t1 = bits << 2 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex1 < t3))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = alphabet.charCodeAt(t1);
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          }
          return 0;
        }
        return (bits << 2 | 3 - expectedChars) >>> 0;
      }
      for (i = start; i < end;) {
        byte = t1.$index(bytes, i);
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      throw A.wrapException(A.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + B.JSInt_methods.toRadixString$1(t1.$index(bytes, i), 16), null));
    },
    JsonUnsupportedObjectError$(unsupportedObject, cause, partialResult) {
      return new A.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier$(_sink, _toEncodable) {
      var t1 = _toEncodable == null ? A.convert___defaultToEncodable$closure() : _toEncodable;
      return new A._JsonStringStringifier(_sink, [], t1);
    },
    _JsonStringStringifier_stringify(object, toEncodable, indent) {
      var stringifier, t1,
        output = new A.StringBuffer("");
      if (indent == null)
        stringifier = A._JsonStringStringifier$(output, toEncodable);
      else {
        t1 = toEncodable == null ? A.convert___defaultToEncodable$closure() : toEncodable;
        stringifier = new A._JsonStringStringifierPretty(indent, 0, output, [], t1);
      }
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _Utf8Decoder__decoder_closure: function _Utf8Decoder__decoder_closure() {
    },
    _Utf8Decoder__decoderNonfatal_closure: function _Utf8Decoder__decoderNonfatal_closure() {
    },
    AsciiCodec: function AsciiCodec() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0) {
      this._subsetMask = t0;
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    _Base64Encoder: function _Base64Encoder(t0) {
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    Codec: function Codec() {
    },
    _FusedCodec: function _FusedCodec(t0, t1, t2) {
      this._convert$_first = t0;
      this._second = t1;
      this.$ti = t2;
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0, t1) {
      this.indent = t0;
      this._toEncodable = t1;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonPrettyPrintMixin: function _JsonPrettyPrintMixin() {
    },
    _JsonPrettyPrintMixin_writeMap_closure: function _JsonPrettyPrintMixin_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    _JsonStringStringifierPretty: function _JsonStringStringifierPretty(t0, t1, t2, t3, t4) {
      var _ = this;
      _._indent = t0;
      _._JsonPrettyPrintMixin__indentLevel = t1;
      _._sink = t2;
      _._seen = t3;
      _._toEncodable = t4;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._convert$_buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin: function __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin() {
    },
    _BigIntImpl_parse(source, radix) {
      var result = A._BigIntImpl__tryParse(source, radix);
      if (result == null)
        throw A.wrapException(A.FormatException$("Could not parse BigInt", source, null));
      return result;
    },
    _BigIntImpl__parseDecimal(source, isNegative) {
      var part, i,
        result = $.$get$_BigIntImpl_zero(),
        t1 = source.length,
        digitInPartCount = 4 - t1 % 4;
      if (digitInPartCount === 4)
        digitInPartCount = 0;
      for (part = 0, i = 0; i < t1; ++i) {
        part = part * 10 + source.charCodeAt(i) - 48;
        ++digitInPartCount;
        if (digitInPartCount === 4) {
          result = result.$mul(0, $.$get$_BigIntImpl__bigInt10000()).$add(0, A._BigIntImpl__BigIntImpl$_fromInt(part));
          part = 0;
          digitInPartCount = 0;
        }
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__codeUnitToRadixValue(codeUnit) {
      if (48 <= codeUnit && codeUnit <= 57)
        return codeUnit - 48;
      return (codeUnit | 32) - 97 + 10;
    },
    _BigIntImpl__parseHex(source, startPos, isNegative) {
      var i, chunk, j, i0, digitValue, digitIndex, digitIndex0,
        t1 = source.length,
        sourceLength = t1 - startPos,
        chunkCount = B.JSNumber_methods.ceil$0(sourceLength / 4),
        digits = new Uint16Array(chunkCount),
        t2 = chunkCount - 1,
        lastDigitLength = sourceLength - t2 * 4;
      for (i = startPos, chunk = 0, j = 0; j < lastDigitLength; ++j, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(source, i);
        digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
        if (digitValue >= 16)
          return null;
        chunk = chunk * 16 + digitValue;
      }
      digitIndex = t2 - 1;
      if (!(t2 >= 0 && t2 < chunkCount))
        return A.ioore(digits, t2);
      digits[t2] = chunk;
      for (; i < t1; digitIndex = digitIndex0) {
        for (chunk = 0, j = 0; j < 4; ++j, i = i0) {
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(source, i);
          digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
          if (digitValue >= 16)
            return null;
          chunk = chunk * 16 + digitValue;
        }
        digitIndex0 = digitIndex - 1;
        if (!(digitIndex >= 0 && digitIndex < chunkCount))
          return A.ioore(digits, digitIndex);
        digits[digitIndex] = chunk;
      }
      if (chunkCount === 1) {
        if (0 >= chunkCount)
          return A.ioore(digits, 0);
        t1 = digits[0] === 0;
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_zero();
      t1 = A._BigIntImpl__normalize(chunkCount, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__tryParse(source, radix) {
      var match, t1, t2, isNegative, decimalMatch, hexMatch;
      if (source === "")
        return null;
      match = $.$get$_BigIntImpl__parseRE().firstMatch$1(source);
      if (match == null)
        return null;
      t1 = match._match;
      t2 = t1.length;
      if (1 >= t2)
        return A.ioore(t1, 1);
      isNegative = t1[1] === "-";
      if (4 >= t2)
        return A.ioore(t1, 4);
      decimalMatch = t1[4];
      hexMatch = t1[3];
      if (5 >= t2)
        return A.ioore(t1, 5);
      if (decimalMatch != null)
        return A._BigIntImpl__parseDecimal(decimalMatch, isNegative);
      if (hexMatch != null)
        return A._BigIntImpl__parseHex(hexMatch, 2, isNegative);
      return null;
    },
    _BigIntImpl__normalize(used, digits) {
      var t2,
        t1 = digits.length;
      while (true) {
        if (used > 0) {
          t2 = used - 1;
          if (!(t2 < t1))
            return A.ioore(digits, t2);
          t2 = digits[t2] === 0;
        } else
          t2 = false;
        if (!t2)
          break;
        --used;
      }
      return used;
    },
    _BigIntImpl__cloneDigits(digits, from, to, $length) {
      var t1, i, t2,
        resultDigits = new Uint16Array($length),
        n = to - from;
      for (t1 = digits.length, i = 0; i < n; ++i) {
        t2 = from + i;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(digits, t2);
        t2 = digits[t2];
        if (!(i < $length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      return resultDigits;
    },
    _BigIntImpl__BigIntImpl$_fromInt(value) {
      var digits, t1, i, i0,
        isNegative = value < 0;
      if (isNegative) {
        if (value === -9223372036854776e3) {
          digits = new Uint16Array(4);
          digits[3] = 32768;
          t1 = A._BigIntImpl__normalize(4, digits);
          return new A._BigIntImpl(t1 !== 0, digits, t1);
        }
        value = -value;
      }
      if (value < 65536) {
        digits = new Uint16Array(1);
        digits[0] = value;
        t1 = A._BigIntImpl__normalize(1, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      if (value <= 4294967295) {
        digits = new Uint16Array(2);
        digits[0] = value & 65535;
        digits[1] = B.JSInt_methods._shrOtherPositive$1(value, 16);
        t1 = A._BigIntImpl__normalize(2, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      t1 = B.JSInt_methods._tdivFast$1(B.JSInt_methods.get$bitLength(value) - 1, 16) + 1;
      digits = new Uint16Array(t1);
      for (i = 0; value !== 0; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(digits, i);
        digits[i] = value & 65535;
        value = B.JSInt_methods._tdivFast$1(value, 65536);
      }
      t1 = A._BigIntImpl__normalize(t1, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__dlShiftDigits(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, t3, t4;
      if (xUsed === 0)
        return 0;
      if (n === 0 && resultDigits === xDigits)
        return xUsed;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.$flags | 0; i >= 0; --i) {
        t3 = i + n;
        if (!(i < t1))
          return A.ioore(xDigits, i);
        t4 = xDigits[i];
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(t3 >= 0 && t3 < resultDigits.length))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = t4;
      }
      for (i = n - 1; i >= 0; --i) {
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return xUsed + n;
    },
    _BigIntImpl__lsh(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, carry, digit, t3, t4,
        digitShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, carryBitShift) - 1;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.$flags | 0, carry = 0; i >= 0; --i) {
        if (!(i < t1))
          return A.ioore(xDigits, i);
        digit = xDigits[i];
        t3 = i + digitShift + 1;
        t4 = B.JSInt_methods.$shr(digit, carryBitShift);
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(t3 >= 0 && t3 < resultDigits.length))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = (t4 | carry) >>> 0;
        carry = B.JSInt_methods.$shl((digit & bitMask) >>> 0, bitShift);
      }
      t2 & 2 && A.throwUnsupportedOperation(resultDigits);
      if (!(digitShift >= 0 && digitShift < resultDigits.length))
        return A.ioore(resultDigits, digitShift);
      resultDigits[digitShift] = carry;
    },
    _BigIntImpl__lShiftDigits(xDigits, xUsed, n, resultDigits) {
      var resultUsed, t1, i,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16);
      if (B.JSInt_methods.$mod(n, 16) === 0)
        return A._BigIntImpl__dlShiftDigits(xDigits, xUsed, digitsShift, resultDigits);
      resultUsed = xUsed + digitsShift + 1;
      A._BigIntImpl__lsh(xDigits, xUsed, n, resultDigits);
      for (t1 = resultDigits.$flags | 0, i = digitsShift; --i, i >= 0;) {
        t1 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      t1 = resultUsed - 1;
      if (!(t1 >= 0 && t1 < resultDigits.length))
        return A.ioore(resultDigits, t1);
      if (resultDigits[t1] === 0)
        resultUsed = t1;
      return resultUsed;
    },
    _BigIntImpl__rsh(xDigits, xUsed, n, resultDigits) {
      var carry, last, t2, i, t3, digit,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, bitShift) - 1,
        t1 = xDigits.length;
      if (!(digitsShift >= 0 && digitsShift < t1))
        return A.ioore(xDigits, digitsShift);
      carry = B.JSInt_methods.$shr(xDigits[digitsShift], bitShift);
      last = xUsed - digitsShift - 1;
      for (t2 = resultDigits.$flags | 0, i = 0; i < last; ++i) {
        t3 = i + digitsShift + 1;
        if (!(t3 < t1))
          return A.ioore(xDigits, t3);
        digit = xDigits[t3];
        t3 = B.JSInt_methods.$shl((digit & bitMask) >>> 0, carryBitShift);
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = (t3 | carry) >>> 0;
        carry = B.JSInt_methods.$shr(digit, bitShift);
      }
      t2 & 2 && A.throwUnsupportedOperation(resultDigits);
      if (!(last >= 0 && last < resultDigits.length))
        return A.ioore(resultDigits, last);
      resultDigits[last] = carry;
    },
    _BigIntImpl__compareDigits(digits, used, otherDigits, otherUsed) {
      var i, t1, t2, t3,
        result = used - otherUsed;
      if (result === 0)
        for (i = used - 1, t1 = digits.length, t2 = otherDigits.length; i >= 0; --i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          t3 = digits[i];
          if (!(i < t2))
            return A.ioore(otherDigits, i);
          result = t3 - otherDigits[i];
          if (result !== 0)
            return result;
        }
      return result;
    },
    _BigIntImpl__absAdd(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.$flags | 0, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 + otherDigits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = B.JSInt_methods._shrOtherPositive$1(carry, 16);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = B.JSInt_methods._shrOtherPositive$1(carry, 16);
      }
      t3 & 2 && A.throwUnsupportedOperation(resultDigits);
      if (!(used >= 0 && used < resultDigits.length))
        return A.ioore(resultDigits, used);
      resultDigits[used] = carry;
    },
    _BigIntImpl__absSub(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.$flags | 0, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 - otherDigits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
    },
    _BigIntImpl__mulAdd(x, multiplicandDigits, i, accumulatorDigits, j, n) {
      var t1, t2, t3, c, i0, t4, combined, j0, l;
      if (x === 0)
        return;
      for (t1 = multiplicandDigits.length, t2 = accumulatorDigits.length, t3 = accumulatorDigits.$flags | 0, c = 0; --n, n >= 0; j = j0, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(multiplicandDigits, i);
        t4 = multiplicandDigits[i];
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        combined = x * t4 + accumulatorDigits[j] + c;
        j0 = j + 1;
        t3 & 2 && A.throwUnsupportedOperation(accumulatorDigits);
        accumulatorDigits[j] = combined & 65535;
        c = B.JSInt_methods._tdivFast$1(combined, 65536);
      }
      for (; c !== 0; j = j0) {
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        l = accumulatorDigits[j] + c;
        j0 = j + 1;
        t3 & 2 && A.throwUnsupportedOperation(accumulatorDigits);
        accumulatorDigits[j] = l & 65535;
        c = B.JSInt_methods._tdivFast$1(l, 65536);
      }
    },
    _BigIntImpl__estimateQuotientDigit(topDigitDivisor, digits, i) {
      var t2, t3, quotientDigit,
        t1 = digits.length;
      if (!(i >= 0 && i < t1))
        return A.ioore(digits, i);
      t2 = digits[i];
      if (t2 === topDigitDivisor)
        return 65535;
      t3 = i - 1;
      if (!(t3 >= 0 && t3 < t1))
        return A.ioore(digits, t3);
      quotientDigit = B.JSInt_methods.$tdiv((t2 << 16 | digits[t3]) >>> 0, topDigitDivisor);
      if (quotientDigit > 65535)
        return 65535;
      return quotientDigit;
    },
    Expando__checkType(object) {
      if (A._isBool(object) || typeof object == "number" || typeof object == "string" || object instanceof A._Record)
        A.Expando__badExpandoKey(object);
    },
    Expando__badExpandoKey(object) {
      throw A.wrapException(A.ArgumentError$value(object, "object", "Expandos are not allowed on strings, numbers, bools, records or null"));
    },
    int_parse(source, radix) {
      var value = A.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null, null));
    },
    Error__throw(error, stackTrace) {
      error = A.initializeExceptionWrapper(error, new Error());
      if (error == null)
        error = A._asObject(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      if (growable)
        return list;
      list.$flags = 1;
      return list;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    List_List$unmodifiable(elements, $E) {
      var result = A.List_List$from(elements, false, $E);
      result.$flags = 3;
      return result;
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var t1, t2, maxLength, array, len;
      A.RangeError_checkNotNegative(start, "start");
      t1 = end == null;
      t2 = !t1;
      if (t2) {
        maxLength = end - start;
        if (maxLength < 0)
          throw A.wrapException(A.RangeError$range(end, start, null, "end", null));
        if (maxLength === 0)
          return "";
      }
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        if (t1)
          end = len;
        return A.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return A.String__stringFromUint8List(charCodes, start, end);
      if (t2)
        charCodes = J.take$1$ax(charCodes, end);
      if (start > 0)
        charCodes = J.skip$1$ax(charCodes, start);
      t1 = A.List_List$_of(charCodes, type$.int);
      return A.Primitives_stringFromCharCodes(t1);
    },
    String_String$fromCharCode(charCode) {
      return A.Primitives_stringFromCharCode(charCode);
    },
    String__stringFromUint8List(charCodes, start, endOrNull) {
      var len = charCodes.length;
      if (start >= len)
        return "";
      return A.Primitives_stringFromNativeUint8List(charCodes, start, endOrNull == null || endOrNull > len ? len : endOrNull);
    },
    RegExp_RegExp(source, caseSensitive, multiLine) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, false, false, ""));
    },
    identical(a, b) {
      return a == null ? b == null : a === b;
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current());
      }
      return string;
    },
    Uri_base() {
      var cachedUri, uri,
        current = A.Primitives_currentUri();
      if (current == null)
        throw A.wrapException(A.UnsupportedError$("'Uri.base' is not supported"));
      cachedUri = $.Uri__cachedBaseUri;
      if (cachedUri != null && current === $.Uri__cachedBaseString)
        return cachedUri;
      uri = A.Uri_parse(current);
      $.Uri__cachedBaseUri = uri;
      $.Uri__cachedBaseString = current;
      return uri;
    },
    _Uri__uriEncode(canonicalMask, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, byte,
        _s16_ = "0123456789ABCDEF";
      if (encoding === B.C_Utf8Codec) {
        t1 = $.$get$_Uri__needsNoEncoding();
        t1 = t1._nativeRegExp.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      bytes = B.C_Utf8Encoder.convert$1(text);
      for (t1 = bytes.length, i = 0, t2 = ""; i < t1; ++i) {
        byte = bytes[i];
        if (byte < 128 && (string$.x00_____.charCodeAt(byte) & canonicalMask) !== 0)
          t2 += A.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[byte >>> 4 & 15] + _s16_[byte & 15];
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    StackTrace_current() {
      return A.getTraceFromException(new Error());
    },
    DateTime$now() {
      return new A.DateTime(Date.now(), 0, false);
    },
    DateTime__validate(millisecondsSinceEpoch, microsecond, isUtc) {
      var _s11_ = "microsecond";
      if (microsecond < 0 || microsecond > 999)
        throw A.wrapException(A.RangeError$range(microsecond, 0, 999, _s11_, null));
      if (millisecondsSinceEpoch < -864e13 || millisecondsSinceEpoch > 864e13)
        throw A.wrapException(A.RangeError$range(millisecondsSinceEpoch, -864e13, 864e13, "millisecondsSinceEpoch", null));
      if (millisecondsSinceEpoch === 864e13 && microsecond !== 0)
        throw A.wrapException(A.ArgumentError$value(microsecond, _s11_, "Time including microseconds is outside valid range"));
      A.checkNotNullable(isUtc, "isUtc", type$.bool);
      return millisecondsSinceEpoch;
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$(days, hours, microseconds, milliseconds, seconds) {
      return new A.Duration(microseconds + 1000 * milliseconds + 1000000 * seconds + 3600000000 * hours + 864e8 * days);
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Primitives_safeToString(object);
    },
    Error_throwWithStackTrace(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      A.checkNotNullable(stackTrace, "stackTrace", type$.StackTrace);
      A.Error__throw(error, stackTrace);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError$notNull($name) {
      return new A.ArgumentError(false, null, $name, "Must not be null");
    },
    ArgumentError_checkNotNull(argument, $name, $T) {
      return argument;
    },
    RangeError$(message) {
      var _null = null;
      return new A.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value(value, $name) {
      return new A.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw A.wrapException(A.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$withLength(invalidValue, $length, indexable, message, $name) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    IndexError_check(index, $length, indexable) {
      if (0 > index || index >= $length)
        throw A.wrapException(A.IndexError$withLength(index, $length, indexable, null, "index"));
      return index;
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new A._Exception(message);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    Iterable_Iterable$generate(count, $E) {
      if (count <= 0)
        return new A.EmptyIterable($E._eval$1("EmptyIterable<0>"));
      if (!$E._eval$1("0(int)")._is(A.core__GeneratorIterable__id$closure()))
        throw A.wrapException(A.ArgumentError$("Generator must be supplied or element type must allow integers", "generator"));
      return new A._GeneratorIterable(count, A.core__GeneratorIterable__id$closure(), $E._eval$1("_GeneratorIterable<0>"));
    },
    Iterable_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A.isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Iterable_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A.isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _GeneratorIterable__id(n) {
      return A._asInt(n);
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    Map_castFrom(source, $K, $V, $K2, $V2) {
      return new A.CastMap(source, $K._eval$1("@<0>")._bind$1($V)._bind$1($K2)._bind$1($V2)._eval$1("CastMap<1,2,3,4>"));
    },
    Map_Map$fromEntries(entries, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap$_empty($K, $V);
      t1.addEntries$1(entries);
      return t1;
    },
    Object_hash(object1, object2, object3, object4) {
      var t1;
      if (B.C_SentinelValue === object3) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      if (B.C_SentinelValue === object4) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3));
      }
      t1 = J.get$hashCode$(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      object4 = J.get$hashCode$(object4);
      object4 = A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4));
      return object4;
    },
    print(object) {
      var line = A.S(object),
        toZone = $.printToZone;
      if (toZone == null)
        A.printString(line);
      else
        toZone.call$1(line);
    },
    Set_castFrom(source, newSet, $S, $T) {
      return new A.CastSet(source, newSet, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastSet<1,2>"));
    },
    _combineSurrogatePair(start, end) {
      return 65536 + ((start & 1023) << 10) + (end & 1023);
    },
    Uri_Uri$dataFromString($content) {
      var t1, _null = null,
        buffer = new A.StringBuffer(""),
        indices = A._setArrayType([-1], type$.JSArray_int);
      A.UriData__writeUri(_null, _null, _null, buffer, indices);
      B.JSArray_methods.add$1(indices, buffer._contents.length);
      buffer._contents += ",";
      A.UriData__uriEncodeBytes(256, B.C_AsciiCodec.encode$1($content), buffer);
      t1 = buffer._contents;
      return new A.UriData(t1.charCodeAt(0) == 0 ? t1 : t1, indices, _null).get$uri();
    },
    Uri_parse(uri) {
      var delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t1, t2, schemeAuth, queryStart0, pathStart0, port, userInfoStart, userInfo, host, portNumber, path, query, _null = null,
        end = uri.length;
      if (end >= 5) {
        if (4 >= end)
          return A.ioore(uri, 4);
        delta = ((uri.charCodeAt(4) ^ 58) * 3 | uri.charCodeAt(0) ^ 100 | uri.charCodeAt(1) ^ 97 | uri.charCodeAt(2) ^ 116 | uri.charCodeAt(3) ^ 97) >>> 0;
        if (delta === 0)
          return A.UriData__parse(end < end ? B.JSString_methods.substring$2(uri, 0, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return A.UriData__parse(B.JSString_methods.substring$2(uri, 5, end), 0, _null).get$uri();
      }
      indices = A.List_List$filled(8, 0, false, type$.int);
      B.JSArray_methods.$indexSet(indices, 0, 0);
      B.JSArray_methods.$indexSet(indices, 1, -1);
      B.JSArray_methods.$indexSet(indices, 2, -1);
      B.JSArray_methods.$indexSet(indices, 7, -1);
      B.JSArray_methods.$indexSet(indices, 3, 0);
      B.JSArray_methods.$indexSet(indices, 4, 0);
      B.JSArray_methods.$indexSet(indices, 5, end);
      B.JSArray_methods.$indexSet(indices, 6, end);
      if (A._scan(uri, 0, end, 0, indices) >= 14)
        B.JSArray_methods.$indexSet(indices, 7, end);
      schemeEnd = indices[1];
      if (schemeEnd >= 0)
        if (A._scan(uri, 0, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = indices[2] + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = indices[7] < 0;
      scheme = _null;
      if (isSimple) {
        isSimple = false;
        if (!(hostStart > schemeEnd + 3)) {
          t1 = portStart > 0;
          if (!(t1 && portStart + 1 === pathStart)) {
            if (!B.JSString_methods.startsWith$2(uri, "\\", pathStart))
              if (hostStart > 0)
                t2 = B.JSString_methods.startsWith$2(uri, "\\", hostStart - 1) || B.JSString_methods.startsWith$2(uri, "\\", hostStart - 2);
              else
                t2 = false;
            else
              t2 = true;
            if (!t2) {
              if (!(queryStart < end && queryStart === pathStart + 2 && B.JSString_methods.startsWith$2(uri, "..", pathStart)))
                t2 = queryStart > pathStart + 2 && B.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
              else
                t2 = true;
              if (!t2)
                if (schemeEnd === 4) {
                  if (B.JSString_methods.startsWith$2(uri, "file", 0)) {
                    if (hostStart <= 0) {
                      if (!B.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                        schemeAuth = "file:///";
                        delta = 3;
                      } else {
                        schemeAuth = "file://";
                        delta = 2;
                      }
                      uri = schemeAuth + B.JSString_methods.substring$2(uri, pathStart, end);
                      queryStart += delta;
                      fragmentStart += delta;
                      end = uri.length;
                      hostStart = 7;
                      portStart = 7;
                      pathStart = 7;
                    } else if (pathStart === queryStart) {
                      ++fragmentStart;
                      queryStart0 = queryStart + 1;
                      uri = B.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                      ++end;
                      queryStart = queryStart0;
                    }
                    scheme = "file";
                  } else if (B.JSString_methods.startsWith$2(uri, "http", 0)) {
                    if (t1 && portStart + 3 === pathStart && B.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                      fragmentStart -= 3;
                      pathStart0 = pathStart - 3;
                      queryStart -= 3;
                      uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                      end -= 3;
                      pathStart = pathStart0;
                    }
                    scheme = "http";
                  }
                } else if (schemeEnd === 5 && B.JSString_methods.startsWith$2(uri, "https", 0)) {
                  if (t1 && portStart + 4 === pathStart && B.JSString_methods.startsWith$2(uri, "443", portStart + 1)) {
                    fragmentStart -= 4;
                    pathStart0 = pathStart - 4;
                    queryStart -= 4;
                    uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "https";
                }
              isSimple = !t2;
            }
          }
        }
      }
      if (isSimple)
        return new A._SimpleUri(end < uri.length ? B.JSString_methods.substring$2(uri, 0, end) : uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      if (scheme == null)
        if (schemeEnd > 0)
          scheme = A._Uri__makeScheme(uri, 0, schemeEnd);
        else {
          if (schemeEnd === 0)
            A._Uri__fail(uri, 0, "Invalid empty scheme");
          scheme = "";
        }
      port = _null;
      if (hostStart > 0) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? A._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = A._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = A.Primitives_parseInt(B.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = A._Uri__makePort(portNumber == null ? A.throwExpression(A.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        }
      } else {
        host = _null;
        userInfo = "";
      }
      path = A._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? A._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? A._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    Uri_decodeComponent(encodedComponent) {
      A._asString(encodedComponent);
      return A._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, B.C_Utf8Codec, false);
    },
    Uri__parseIPv4Address(host, start, end) {
      var t1, i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new A.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (t1 = host.length, i = start, partStart = i, partIndex = 0; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = A.int_parse(B.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (!(partIndex < 4))
            return A.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = A.int_parse(B.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (!(partIndex < 4))
        return A.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri__validateIPvAddress(host, start, end) {
      var error;
      if (start === end)
        throw A.wrapException(A.FormatException$("Empty IP address", host, start));
      if (!(start >= 0 && start < host.length))
        return A.ioore(host, start);
      if (host.charCodeAt(start) === 118) {
        error = A.Uri__validateIPvFutureAddress(host, start, end);
        if (error != null)
          throw A.wrapException(error);
        return false;
      }
      A.Uri_parseIPv6Address(host, start, end);
      return true;
    },
    Uri__validateIPvFutureAddress(host, start, end) {
      var t1, cursor, cursor0, char, ucChar,
        _s38_ = "Missing hex-digit in IPvFuture address",
        _s128_ = string$.x00_____;
      ++start;
      for (t1 = host.length, cursor = start; true; cursor = cursor0) {
        if (cursor < end) {
          cursor0 = cursor + 1;
          if (!(cursor >= 0 && cursor < t1))
            return A.ioore(host, cursor);
          char = host.charCodeAt(cursor);
          if ((char ^ 48) <= 9)
            continue;
          ucChar = char | 32;
          if (ucChar >= 97 && ucChar <= 102)
            continue;
          if (char === 46) {
            if (cursor0 - 1 === start)
              return new A.FormatException(_s38_, host, cursor0);
            cursor = cursor0;
            break;
          }
          return new A.FormatException("Unexpected character", host, cursor0 - 1);
        }
        if (cursor - 1 === start)
          return new A.FormatException(_s38_, host, cursor);
        return new A.FormatException("Missing '.' in IPvFuture address", host, cursor);
      }
      if (cursor === end)
        return new A.FormatException("Missing address in IPvFuture address, host, cursor", null, null);
      for (; true;) {
        if (!(cursor >= 0 && cursor < t1))
          return A.ioore(host, cursor);
        char = host.charCodeAt(cursor);
        if (!(char < 128))
          return A.ioore(_s128_, char);
        if ((_s128_.charCodeAt(char) & 16) !== 0) {
          ++cursor;
          if (cursor < end)
            continue;
          return null;
        }
        return new A.FormatException("Invalid IPvFuture address character", host, cursor);
      }
    },
    Uri_parseIPv6Address(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, last, bytes, wildCardLength, index, value, j, t2, _null = null,
        error = new A.Uri_parseIPv6Address_error(host),
        parseHex = new A.Uri_parseIPv6Address_parseHex(error, host),
        t1 = host.length;
      if (t1 < 2)
        error.call$2("address is too short", _null);
      parts = A._setArrayType([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (!(i < t1))
              return A.ioore(host, i);
            if (host.charCodeAt(i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            B.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$2("too few parts", _null);
      atEnd = partStart === end;
      t1 = B.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = A.Uri__parseIPv4Address(host, partStart, end);
          B.JSArray_methods.add$1(parts, (last[0] << 8 | last[1]) >>> 0);
          B.JSArray_methods.add$1(parts, (last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$2("an address with a wildcard must have less than 7 parts", _null);
      } else if (parts.length !== 8)
        error.call$2("an address without a wildcard must contain exactly 8 parts", _null);
      bytes = new Uint8Array(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            if (!(index >= 0 && index < 16))
              return A.ioore(bytes, index);
            bytes[index] = 0;
            t2 = index + 1;
            if (!(t2 < 16))
              return A.ioore(bytes, t2);
            bytes[t2] = 0;
            index += 2;
          }
        else {
          t2 = B.JSInt_methods._shrOtherPositive$1(value, 8);
          if (!(index >= 0 && index < 16))
            return A.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          if (!(t2 < 16))
            return A.ioore(bytes, t2);
          bytes[t2] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new A._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__Uri(host, path, pathSegments, scheme) {
      var userInfo, query, fragment, port, isFile, t1, hasAuthority, t2, _null = null;
      scheme = scheme == null ? "" : A._Uri__makeScheme(scheme, 0, scheme.length);
      userInfo = A._Uri__makeUserInfo(_null, 0, 0);
      host = A._Uri__makeHost(host, 0, host == null ? 0 : host.length, false);
      query = A._Uri__makeQuery(_null, 0, 0, _null);
      fragment = A._Uri__makeFragment(_null, 0, 0);
      port = A._Uri__makePort(_null, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = A._Uri__makePath(path, 0, path == null ? 0 : path.length, pathSegments, scheme, hasAuthority);
      t2 = scheme.length === 0;
      if (t2 && t1 && !B.JSString_methods.startsWith$1(path, "/"))
        path = A._Uri__normalizeRelativePath(path, !t2 || hasAuthority);
      else
        path = A._Uri__removeDotSegments(path);
      return A._Uri$_internal(scheme, userInfo, t1 && B.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail(uri, index, message) {
      throw A.wrapException(A.FormatException$(message, uri, index));
    },
    _Uri__Uri$file(path, windows) {
      return windows ? A._Uri__makeWindowsFileUrl(path, false) : A._Uri__makeFileUri(path, false);
    },
    _Uri__checkNonWindowsPathReservedCharacters(segments, argumentError) {
      var t1, _i, segment;
      for (t1 = segments.length, _i = 0; _i < t1; ++_i) {
        segment = segments[_i];
        if (B.JSString_methods.contains$1(segment, "/")) {
          t1 = A.UnsupportedError$("Illegal path character " + segment);
          throw A.wrapException(t1);
        }
      }
    },
    _Uri__checkWindowsPathReservedCharacters(segments, argumentError, firstSegment) {
      var t1, t2, t3;
      for (t1 = A.SubListIterable$(segments, firstSegment, null, A._arrayInstanceType(segments)._precomputed1), t2 = t1.$ti, t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"); t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (B.JSString_methods.contains$1(t3, A.RegExp_RegExp('["*/:<>?\\\\|]', true, false)))
          if (argumentError)
            throw A.wrapException(A.ArgumentError$("Illegal character in path", null));
          else
            throw A.wrapException(A.UnsupportedError$("Illegal character in path: " + t3));
      }
    },
    _Uri__checkWindowsDriveLetter(charCode, argumentError) {
      var t1,
        _s21_ = "Illegal drive letter ";
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      if (argumentError)
        throw A.wrapException(A.ArgumentError$(_s21_ + A.String_String$fromCharCode(charCode), null));
      else
        throw A.wrapException(A.UnsupportedError$(_s21_ + A.String_String$fromCharCode(charCode)));
    },
    _Uri__makeFileUri(path, slashTerminated) {
      var _null = null,
        segments = A._setArrayType(path.split("/"), type$.JSArray_String);
      if (B.JSString_methods.startsWith$1(path, "/"))
        return A._Uri__Uri(_null, _null, segments, "file");
      else
        return A._Uri__Uri(_null, _null, segments, _null);
    },
    _Uri__makeWindowsFileUrl(path, slashTerminated) {
      var t1, t2, pathSegments, pathStart, hostPart, _s1_ = "\\", _null = null, _s4_ = "file";
      if (B.JSString_methods.startsWith$1(path, "\\\\?\\"))
        if (B.JSString_methods.startsWith$2(path, "UNC\\", 4))
          path = B.JSString_methods.replaceRange$3(path, 0, 7, _s1_);
        else {
          path = B.JSString_methods.substring$1(path, 4);
          t1 = path.length;
          t2 = true;
          if (t1 >= 3) {
            if (1 >= t1)
              return A.ioore(path, 1);
            if (path.charCodeAt(1) === 58) {
              if (2 >= t1)
                return A.ioore(path, 2);
              t1 = path.charCodeAt(2) !== 92;
            } else
              t1 = t2;
          } else
            t1 = t2;
          if (t1)
            throw A.wrapException(A.ArgumentError$value(path, "path", "Windows paths with \\\\?\\ prefix must be absolute"));
        }
      else
        path = A.stringReplaceAllUnchecked(path, "/", _s1_);
      t1 = path.length;
      if (t1 > 1 && path.charCodeAt(1) === 58) {
        if (0 >= t1)
          return A.ioore(path, 0);
        A._Uri__checkWindowsDriveLetter(path.charCodeAt(0), true);
        if (t1 !== 2) {
          if (2 >= t1)
            return A.ioore(path, 2);
          t1 = path.charCodeAt(2) !== 92;
        } else
          t1 = true;
        if (t1)
          throw A.wrapException(A.ArgumentError$value(path, "path", "Windows paths with drive letter must be absolute"));
        pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
        A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 1);
        return A._Uri__Uri(_null, _null, pathSegments, _s4_);
      }
      if (B.JSString_methods.startsWith$1(path, _s1_))
        if (B.JSString_methods.startsWith$2(path, _s1_, 1)) {
          pathStart = B.JSString_methods.indexOf$2(path, _s1_, 2);
          t1 = pathStart < 0;
          hostPart = t1 ? B.JSString_methods.substring$1(path, 2) : B.JSString_methods.substring$2(path, 2, pathStart);
          pathSegments = A._setArrayType((t1 ? "" : B.JSString_methods.substring$1(path, pathStart + 1)).split(_s1_), type$.JSArray_String);
          A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          return A._Uri__Uri(hostPart, _null, pathSegments, _s4_);
        } else {
          pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
          A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          return A._Uri__Uri(_null, _null, pathSegments, _s4_);
        }
      else {
        pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
        A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
        return A._Uri__Uri(_null, _null, pathSegments, _null);
      }
    },
    _Uri__makePort(port, scheme) {
      if (port != null && port === A._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost(host, start, end, strictIPv6) {
      var t1, t2, t3, zoneID, index, zoneIDstart, isIPv6, hostChars, i;
      if (host == null)
        return null;
      if (start === end)
        return "";
      t1 = host.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(host, start);
      if (host.charCodeAt(start) === 91) {
        t2 = end - 1;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(host, t2);
        if (host.charCodeAt(t2) !== 93)
          A._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t3 = start + 1;
        if (!(t3 < t1))
          return A.ioore(host, t3);
        zoneID = "";
        if (host.charCodeAt(t3) !== 118) {
          index = A._Uri__checkZoneID(host, t3, t2);
          if (index < t2) {
            zoneIDstart = index + 1;
            zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t2, "%25");
          }
        } else
          index = t2;
        isIPv6 = A.Uri__validateIPvAddress(host, t3, index);
        hostChars = B.JSString_methods.substring$2(host, t3, index);
        return "[" + (isIPv6 ? hostChars.toLowerCase() : hostChars) + zoneID + "]";
      }
      for (i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(host, i);
        if (host.charCodeAt(i) === 58) {
          index = B.JSString_methods.indexOf$2(host, "%", start);
          index = index >= start && index < end ? index : end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          A.Uri_parseIPv6Address(host, start, index);
          return "[" + B.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      }
      return A._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID(host, start, end) {
      var index = B.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__normalizeZoneID(host, start, end, prefix) {
      var t1, index, sectionStart, isNormalized, char, replacement, t2, t3, sourceLength, tail, slice,
        buffer = prefix !== "" ? new A.StringBuffer(prefix) : null;
      for (t1 = host.length, index = start, sectionStart = index, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          t3 = buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
          if (t2)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            A._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t3 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else if (char < 127 && (string$.x00_____.charCodeAt(char) & 1) !== 0) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = new A.StringBuffer("");
            if (sectionStart < index) {
              buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else {
          sourceLength = 1;
          if ((char & 64512) === 55296 && index + 1 < end) {
            t2 = index + 1;
            if (!(t2 < t1))
              return A.ioore(host, t2);
            tail = host.charCodeAt(t2);
            if ((tail & 64512) === 56320) {
              char = 65536 + ((char & 1023) << 10) + (tail & 1023);
              sourceLength = 2;
            }
          }
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t2 = buffer;
          } else
            t2 = buffer;
          t2._contents += slice;
          t3 = A._Uri__escapeChar(char);
          t2._contents += t3;
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName(host, start, end) {
      var t1, index, sectionStart, buffer, isNormalized, char, replacement, t2, slice, t3, sourceLength, tail,
        _s128_ = string$.x00_____;
      for (t1 = host.length, index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (!isNormalized)
            slice = slice.toLowerCase();
          t3 = buffer._contents += slice;
          sourceLength = 3;
          if (t2)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          }
          buffer._contents = t3 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else if (char < 127 && (_s128_.charCodeAt(char) & 32) !== 0) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = new A.StringBuffer("");
            if (sectionStart < index) {
              buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else if (char <= 93 && (_s128_.charCodeAt(char) & 1024) !== 0)
          A._Uri__fail(host, index, "Invalid character");
        else {
          sourceLength = 1;
          if ((char & 64512) === 55296 && index + 1 < end) {
            t2 = index + 1;
            if (!(t2 < t1))
              return A.ioore(host, t2);
            tail = host.charCodeAt(t2);
            if ((tail & 64512) === 56320) {
              char = 65536 + ((char & 1023) << 10) + (tail & 1023);
              sourceLength = 2;
            }
          }
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (!isNormalized)
            slice = slice.toLowerCase();
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t2 = buffer;
          } else
            t2 = buffer;
          t2._contents += slice;
          t3 = A._Uri__escapeChar(char);
          t2._contents += t3;
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        if (!isNormalized)
          slice = slice.toLowerCase();
        buffer._contents += slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme(scheme, start, end) {
      var t1, i, containsUpperCase, codeUnit;
      if (start === end)
        return "";
      t1 = scheme.length;
      if (!(start < t1))
        return A.ioore(scheme, start);
      if (!A._Uri__isAlphabeticCharacter(scheme.charCodeAt(start)))
        A._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(scheme, i);
        codeUnit = scheme.charCodeAt(i);
        if (!(codeUnit < 128 && (string$.x00_____.charCodeAt(codeUnit) & 8) !== 0))
          A._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = B.JSString_methods.substring$2(scheme, start, end);
      return A._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return A._Uri__normalizeOrSubstring(userInfo, start, end, 16, false, false);
    },
    _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
      var t1, result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null) {
        if (pathSegments == null)
          return isFile ? "/" : "";
        t1 = A._arrayInstanceType(pathSegments);
        result = new A.MappedListIterable(pathSegments, t1._eval$1("String(1)")._as(new A._Uri__makePath_closure()), t1._eval$1("MappedListIterable<1,String>")).join$1(0, "/");
      } else if (pathSegments != null)
        throw A.wrapException(A.ArgumentError$("Both path and pathSegments specified", null));
      else
        result = A._Uri__normalizeOrSubstring(path, start, end, 128, true, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !B.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return A._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !B.JSString_methods.startsWith$1(path, "/") && !B.JSString_methods.startsWith$1(path, "\\"))
        return A._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return A._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery(query, start, end, queryParameters) {
      if (query != null)
        return A._Uri__normalizeOrSubstring(query, start, end, 256, true, false);
      return null;
    },
    _Uri__makeFragment(fragment, start, end) {
      if (fragment == null)
        return null;
      return A._Uri__normalizeOrSubstring(fragment, start, end, 256, true, false);
    },
    _Uri__normalizeEscape(source, index, lowerCase) {
      var t3, firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        _s128_ = string$.x00_____,
        t1 = index + 2,
        t2 = source.length;
      if (t1 >= t2)
        return "%";
      t3 = index + 1;
      if (!(t3 >= 0 && t3 < t2))
        return A.ioore(source, t3);
      firstDigit = source.charCodeAt(t3);
      if (!(t1 >= 0))
        return A.ioore(source, t1);
      secondDigit = source.charCodeAt(t1);
      firstDigitValue = A.hexDigitValue(firstDigit);
      secondDigitValue = A.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127) {
        if (!(value >= 0))
          return A.ioore(_s128_, value);
        t1 = (_s128_.charCodeAt(value) & 1) !== 0;
      } else
        t1 = false;
      if (t1)
        return A.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return B.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar(char) {
      var codeUnits, t1, flag, encodedBytes, index, byte, t2, t3,
        _s16_ = "0123456789ABCDEF";
      if (char <= 127) {
        codeUnits = new Uint8Array(3);
        codeUnits[0] = 37;
        t1 = char >>> 4;
        if (!(t1 < 16))
          return A.ioore(_s16_, t1);
        codeUnits[1] = _s16_.charCodeAt(t1);
        codeUnits[2] = _s16_.charCodeAt(char & 15);
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = 3 * encodedBytes;
        codeUnits = new Uint8Array(t1);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = B.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          if (!(index < t1))
            return A.ioore(codeUnits, index);
          codeUnits[index] = 37;
          t2 = index + 1;
          t3 = byte >>> 4;
          if (!(t3 < 16))
            return A.ioore(_s16_, t3);
          if (!(t2 < t1))
            return A.ioore(codeUnits, t2);
          codeUnits[t2] = _s16_.charCodeAt(t3);
          t3 = index + 2;
          if (!(t3 < t1))
            return A.ioore(codeUnits, t3);
          codeUnits[t3] = _s16_.charCodeAt(byte & 15);
          index += 3;
        }
      }
      return A.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring(component, start, end, charMask, escapeDelimiters, replaceBackslash) {
      var t1 = A._Uri__normalize(component, start, end, charMask, escapeDelimiters, replaceBackslash);
      return t1 == null ? B.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize(component, start, end, charMask, escapeDelimiters, replaceBackslash) {
      var t1, t2, index, sectionStart, buffer, char, sourceLength, replacement, t3, tail, _null = null,
        _s128_ = string$.x00_____;
      for (t1 = !escapeDelimiters, t2 = component.length, index = start, sectionStart = index, buffer = _null; index < end;) {
        if (!(index >= 0 && index < t2))
          return A.ioore(component, index);
        char = component.charCodeAt(index);
        if (char < 127 && (_s128_.charCodeAt(char) & charMask) !== 0)
          ++index;
        else {
          sourceLength = 1;
          if (char === 37) {
            replacement = A._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement)
              replacement = "%25";
            else
              sourceLength = 3;
          } else if (char === 92 && replaceBackslash)
            replacement = "/";
          else if (t1 && char <= 93 && (_s128_.charCodeAt(char) & 1024) !== 0) {
            A._Uri__fail(component, index, "Invalid character");
            sourceLength = _null;
            replacement = sourceLength;
          } else {
            if ((char & 64512) === 55296) {
              t3 = index + 1;
              if (t3 < end) {
                if (!(t3 < t2))
                  return A.ioore(component, t3);
                tail = component.charCodeAt(t3);
                if ((tail & 64512) === 56320) {
                  char = 65536 + ((char & 1023) << 10) + (tail & 1023);
                  sourceLength = 2;
                }
              }
            }
            replacement = A._Uri__escapeChar(char);
          }
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t3 = buffer;
          } else
            t3 = buffer;
          t3._contents = (t3._contents += B.JSString_methods.substring$2(component, sectionStart, index)) + replacement;
          if (typeof sourceLength !== "number")
            return A.iae(sourceLength);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return _null;
      if (sectionStart < end) {
        t1 = B.JSString_methods.substring$2(component, sectionStart, end);
        buffer._contents += t1;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments(path) {
      if (B.JSString_methods.startsWith$1(path, "."))
        return true;
      return B.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments(path) {
      var output, t1, t2, appendSlash, _i, segment, t3;
      if (!A._Uri__mayContainDotSegments(path))
        return path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (segment === "..") {
          t3 = output.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return A.ioore(output, -1);
            output.pop();
            if (output.length === 0)
              B.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else {
          appendSlash = "." === segment;
          if (!appendSlash)
            B.JSArray_methods.add$1(output, segment);
        }
      }
      if (appendSlash)
        B.JSArray_methods.add$1(output, "");
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return !allowScheme ? A._Uri__escapeScheme(path) : path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment) {
          appendSlash = output.length !== 0 && B.JSArray_methods.get$last(output) !== "..";
          if (appendSlash) {
            if (0 >= output.length)
              return A.ioore(output, -1);
            output.pop();
          } else
            B.JSArray_methods.add$1(output, "..");
        } else {
          appendSlash = "." === segment;
          if (!appendSlash)
            B.JSArray_methods.add$1(output, segment);
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        if (t1 === 1) {
          if (0 >= t1)
            return A.ioore(output, 0);
          t1 = output[0].length === 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || B.JSArray_methods.get$last(output) === "..")
        B.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return A.ioore(output, 0);
        B.JSArray_methods.$indexSet(output, 0, A._Uri__escapeScheme(output[0]));
      }
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme(path) {
      var i, char, t2,
        _s128_ = string$.x00_____,
        t1 = path.length;
      if (t1 >= 2 && A._Uri__isAlphabeticCharacter(path.charCodeAt(0)))
        for (i = 1; i < t1; ++i) {
          char = path.charCodeAt(i);
          if (char === 58)
            return B.JSString_methods.substring$2(path, 0, i) + "%3A" + B.JSString_methods.substring$1(path, i + 1);
          if (char <= 127) {
            if (!(char < 128))
              return A.ioore(_s128_, char);
            t2 = (_s128_.charCodeAt(char) & 8) === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__packageNameEnd(uri, path) {
      if (uri.isScheme$1("package") && uri._host == null)
        return A._skipPackageNameChars(path, 0, path.length);
      return -1;
    },
    _Uri__hexCharPairToByte(s, pos) {
      var t1, byte, i, t2, charCode;
      for (t1 = s.length, byte = 0, i = 0; i < 2; ++i) {
        t2 = pos + i;
        if (!(t2 < t1))
          return A.ioore(s, t2);
        charCode = s.charCodeAt(t2);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw A.wrapException(A.ArgumentError$("Invalid URL encoding", null));
        }
      }
      return byte;
    },
    _Uri__uriDecode(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t2, bytes,
        t1 = text.length,
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        if (!(i < t1))
          return A.ioore(text, i);
        codeUnit = text.charCodeAt(i);
        if (codeUnit <= 127)
          t2 = codeUnit === 37;
        else
          t2 = true;
        if (t2) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple)
        if (B.C_Utf8Codec === encoding)
          return B.JSString_methods.substring$2(text, start, end);
        else
          bytes = new A.CodeUnits(B.JSString_methods.substring$2(text, start, end));
      else {
        bytes = A._setArrayType([], type$.JSArray_int);
        for (i = start; i < end; ++i) {
          if (!(i < t1))
            return A.ioore(text, i);
          codeUnit = text.charCodeAt(i);
          if (codeUnit > 127)
            throw A.wrapException(A.ArgumentError$("Illegal percent encoding in URI", null));
          if (codeUnit === 37) {
            if (i + 3 > t1)
              throw A.wrapException(A.ArgumentError$("Truncated URI", null));
            B.JSArray_methods.add$1(bytes, A._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else
            B.JSArray_methods.add$1(bytes, codeUnit);
        }
      }
      type$.List_int._as(bytes);
      return B.Utf8Decoder_false.convert$1(bytes);
    },
    _Uri__isAlphabeticCharacter(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__writeUri(mimeType, charsetName, parameters, buffer, indices) {
      buffer._contents = buffer._contents;
    },
    UriData__parse(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = A._setArrayType([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = text.charCodeAt(i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw A.wrapException(A.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw A.wrapException(A.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        B.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          if (!(i >= 0))
            return A.ioore(text, i);
          char = text.charCodeAt(i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          B.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = B.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !B.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw A.wrapException(A.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      B.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = B.C_Base64Codec.normalize$3(text, t2, t1);
      else {
        data = A._Uri__normalize(text, t2, t1, 256, true, false);
        if (data != null)
          text = B.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new A.UriData(text, indices, sourceUri);
    },
    UriData__uriEncodeBytes(canonicalMask, bytes, buffer) {
      var t1, byteOr, i, byte, t2,
        _s16_ = "0123456789ABCDEF";
      for (t1 = bytes.length, byteOr = 0, i = 0; i < t1; ++i) {
        byte = bytes[i];
        byteOr |= byte;
        if (byte < 128 && (string$.x00_____.charCodeAt(byte) & canonicalMask) !== 0) {
          t2 = A.Primitives_stringFromCharCode(byte);
          buffer._contents += t2;
        } else {
          t2 = A.Primitives_stringFromCharCode(37);
          buffer._contents += t2;
          t2 = byte >>> 4;
          if (!(t2 < 16))
            return A.ioore(_s16_, t2);
          t2 = A.Primitives_stringFromCharCode(_s16_.charCodeAt(t2));
          buffer._contents += t2;
          t2 = A.Primitives_stringFromCharCode(_s16_.charCodeAt(byte & 15));
          buffer._contents += t2;
        }
      }
      if ((byteOr & 4294967040) !== 0)
        for (i = 0; i < t1; ++i) {
          byte = bytes[i];
          if (byte > 255)
            throw A.wrapException(A.ArgumentError$value(byte, "non-byte value", null));
        }
    },
    _scan(uri, start, end, state, indices) {
      var t1, i, char, t2, transition,
        _s2112_ = '\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe3\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x0e\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xea\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\n\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xeb\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\xeb\xeb\xeb\x8b\xeb\xeb\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\xeb\x83\xeb\xeb\x8b\xeb\x8b\xeb\xcd\x8b\xeb\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x92\x83\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\xeb\x8b\xeb\x8b\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xebD\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x12D\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\xe5\xe5\xe5\x05\xe5D\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe8\x8a\xe5\xe5\x05\xe5\x05\xe5\xcd\x05\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x8a\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05f\x05\xe5\x05\xe5\xac\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\xe5\xe5\xe5\x05\xe5D\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\x8a\xe5\xe5\x05\xe5\x05\xe5\xcd\x05\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x8a\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05f\x05\xe5\x05\xe5\xac\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7D\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\xe7\xe7\xe7\xe7\xe7\xe7\xcd\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\xe7\x07\x07\x07\x07\x07\x07\x07\x07\x07\xe7\xe7\xe7\xe7\xe7\xac\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7D\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\xe7\xe7\xe7\xe7\xe7\xe7\xcd\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\xe7\xe7\xe7\xe7\xe7\xac\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\x05\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x10\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x12\n\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\v\n\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xec\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\xec\xec\xec\f\xec\xec\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\xec\xec\xec\xec\f\xec\f\xec\xcd\f\xec\f\f\f\f\f\f\f\f\f\xec\f\f\f\f\f\f\f\f\f\f\xec\f\xec\f\xec\f\xed\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\xed\xed\xed\r\xed\xed\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\xed\xed\xed\xed\r\xed\r\xed\xed\r\xed\r\r\r\r\r\r\r\r\r\xed\r\r\r\r\r\r\r\r\r\r\xed\r\xed\r\xed\r\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xea\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x0f\xea\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe9\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\t\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x11\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xe9\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\v\t\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x13\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\v\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xf5\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\x15\xf5\x15\x15\xf5\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\xf5\xf5\xf5\xf5\xf5\xf5';
      for (t1 = uri.length, i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(uri, i);
        char = uri.charCodeAt(i) ^ 96;
        if (char > 95)
          char = 31;
        t2 = state * 96 + char;
        if (!(t2 < 2112))
          return A.ioore(_s2112_, t2);
        transition = _s2112_.charCodeAt(t2);
        state = transition & 31;
        B.JSArray_methods.$indexSet(indices, transition >>> 5, i);
      }
      return state;
    },
    _SimpleUri__packageNameEnd(uri) {
      if (uri._schemeEnd === 7 && B.JSString_methods.startsWith$1(uri._uri, "package") && uri._hostStart <= 0)
        return A._skipPackageNameChars(uri._uri, uri._pathStart, uri._queryStart);
      return -1;
    },
    _skipPackageNameChars(source, start, end) {
      var t1, i, dots, char;
      for (t1 = source.length, i = start, dots = 0; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(source, i);
        char = source.charCodeAt(i);
        if (char === 47)
          return dots !== 0 ? i : -1;
        if (char === 37 || char === 58)
          return -1;
        dots |= char ^ 46;
      }
      return -1;
    },
    _caseInsensitiveCompareStart(prefix, string, start) {
      var t1, t2, result, i, t3, stringChar, delta, lowerChar;
      for (t1 = prefix.length, t2 = string.length, result = 0, i = 0; i < t1; ++i) {
        t3 = start + i;
        if (!(t3 < t2))
          return A.ioore(string, t3);
        stringChar = string.charCodeAt(t3);
        delta = prefix.charCodeAt(i) ^ stringChar;
        if (delta !== 0) {
          if (delta === 32) {
            lowerChar = stringChar | delta;
            if (97 <= lowerChar && lowerChar <= 122) {
              result = 32;
              continue;
            }
          }
          return -1;
        }
      }
      return result;
    },
    _BigIntImpl: function _BigIntImpl(t0, t1, t2) {
      this._isNegative = t0;
      this._digits = t1;
      this._used = t2;
    },
    _BigIntImpl_hashCode_combine: function _BigIntImpl_hashCode_combine() {
    },
    _BigIntImpl_hashCode_finish: function _BigIntImpl_hashCode_finish() {
    },
    DateTime: function DateTime(t0, t1, t2) {
      this._core$_value = t0;
      this._microsecond = t1;
      this.isUtc = t2;
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    IntegerDivisionByZeroException: function IntegerDivisionByZeroException() {
    },
    Iterable: function Iterable() {
    },
    _GeneratorIterable: function _GeneratorIterable(t0, t1, t2) {
      this.length = t0;
      this._generator = t1;
      this.$ti = t2;
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace(t0) {
      this._stackTrace = t0;
    },
    Stopwatch: function Stopwatch() {
      this._stop = this._core$_start = 0;
    },
    Runes: function Runes(t0) {
      this.string = t0;
    },
    RuneIterator: function RuneIterator(t0) {
      var _ = this;
      _.string = t0;
      _._nextPosition = _._core$_position = 0;
      _._currentCodePoint = -1;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._core$_port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure() {
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._core$_port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    Expando: function Expando() {
    },
    _functionToJS1(f) {
      var result;
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1) {
          return _call(f, arg1, arguments.length);
        };
      }(A._callDartFunctionFast1, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _callDartFunctionFast1(callback, arg1, $length) {
      type$.Function._as(callback);
      if (A._asInt($length) >= 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _noJsifyRequired(o) {
      return o == null || A._isBool(o) || typeof o == "number" || typeof o == "string" || type$.Int8List._is(o) || type$.Uint8List._is(o) || type$.Uint8ClampedList._is(o) || type$.Int16List._is(o) || type$.Uint16List._is(o) || type$.Int32List._is(o) || type$.Uint32List._is(o) || type$.Float32List._is(o) || type$.Float64List._is(o) || type$.ByteBuffer._is(o) || type$.ByteData._is(o);
    },
    jsify(object) {
      if (A._noJsifyRequired(object))
        return object;
      return new A.jsify__convert(new A._IdentityHashMap(type$._IdentityHashMap_of_nullable_Object_and_nullable_Object)).call$1(object);
    },
    getProperty(o, $name, $T) {
      return $T._as(o[$name]);
    },
    callConstructor(constr, $arguments, $T) {
      var args, factoryFunction;
      if ($arguments == null)
        return $T._as(new constr());
      if ($arguments instanceof Array)
        switch ($arguments.length) {
          case 0:
            return $T._as(new constr());
          case 1:
            return $T._as(new constr($arguments[0]));
          case 2:
            return $T._as(new constr($arguments[0], $arguments[1]));
          case 3:
            return $T._as(new constr($arguments[0], $arguments[1], $arguments[2]));
          case 4:
            return $T._as(new constr($arguments[0], $arguments[1], $arguments[2], $arguments[3]));
        }
      args = [null];
      B.JSArray_methods.addAll$1(args, $arguments);
      factoryFunction = constr.bind.apply(constr, args);
      String(factoryFunction);
      return $T._as(new factoryFunction());
    },
    promiseToFuture(jsPromise, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      jsPromise.then(A.convertDartClosureToJS(new A.promiseToFuture_closure(completer, $T), 1), A.convertDartClosureToJS(new A.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    _noDartifyRequired(o) {
      return o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string" || o instanceof Int8Array || o instanceof Uint8Array || o instanceof Uint8ClampedArray || o instanceof Int16Array || o instanceof Uint16Array || o instanceof Int32Array || o instanceof Uint32Array || o instanceof Float32Array || o instanceof Float64Array || o instanceof ArrayBuffer || o instanceof DataView;
    },
    dartify(o) {
      if (A._noDartifyRequired(o))
        return o;
      return new A.dartify_convert(new A._IdentityHashMap(type$._IdentityHashMap_of_nullable_Object_and_nullable_Object)).call$1(o);
    },
    jsify__convert: function jsify__convert(t0) {
      this._convertedObjects = t0;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    dartify_convert: function dartify_convert(t0) {
      this._convertedObjects = t0;
    },
    NullRejectionException: function NullRejectionException(t0) {
      this.isUndefined = t0;
    },
    max(a, b, $T) {
      A.checkTypeBound($T, type$.num, "T", "max");
      return Math.max($T._as(a), $T._as(b));
    },
    _JSRandom: function _JSRandom() {
    },
    _Random: function _Random() {
      this._hi = this._lo = 0;
    },
    _JSSecureRandom: function _JSSecureRandom(t0) {
      this._math$_buffer = t0;
    },
    AsyncMemoizer: function AsyncMemoizer(t0, t1) {
      this._async_memoizer$_completer = t0;
      this.$ti = t1;
    },
    DelegatingSink: function DelegatingSink(t0, t1) {
      this._sink$_sink = t0;
      this.$ti = t1;
    },
    FutureGroup: function FutureGroup(t0, t1, t2) {
      var _ = this;
      _._future_group$_pending = 0;
      _._future_group$_closed = false;
      _._future_group$_completer = t0;
      _._future_group$_values = t1;
      _.$ti = t2;
    },
    FutureGroup_add_closure: function FutureGroup_add_closure(t0, t1) {
      this.$this = t0;
      this.index = t1;
    },
    FutureGroup_add_closure0: function FutureGroup_add_closure0(t0) {
      this.$this = t0;
    },
    StreamGroup: function StreamGroup(t0, t1, t2) {
      var _ = this;
      _.__StreamGroup__controller_A = $;
      _._stream_group$_closed = false;
      _._stream_group$_state = t0;
      _._stream_group$_subscriptions = t1;
      _.$ti = t2;
    },
    StreamGroup_add_closure: function StreamGroup_add_closure() {
    },
    StreamGroup_add_closure0: function StreamGroup_add_closure0(t0, t1) {
      this.$this = t0;
      this.stream = t1;
    },
    StreamGroup__onListen_closure: function StreamGroup__onListen_closure() {
    },
    StreamGroup__onCancel_closure: function StreamGroup__onCancel_closure(t0) {
      this.$this = t0;
    },
    StreamGroup__onCancelBroadcast_closure: function StreamGroup__onCancelBroadcast_closure(t0) {
      this.$this = t0;
    },
    StreamGroup__listenToStream_closure: function StreamGroup__listenToStream_closure(t0, t1) {
      this.$this = t0;
      this.stream = t1;
    },
    _StreamGroupState: function _StreamGroupState(t0) {
      this.name = t0;
    },
    All: function All() {
    },
    CancelationToken: function CancelationToken() {
    },
    CanceledException: function CanceledException(t0) {
      this.message = t0;
    },
    _self(x, $X) {
      return $X._as(x);
    },
    CanceledExceptions: function CanceledExceptions(t0) {
      this._canceled_exceptions$_exceptions = t0;
    },
    CanceledExceptions_message_closure: function CanceledExceptions_message_closure() {
    },
    TimeoutCanceledException: function TimeoutCanceledException(t0) {
      this.message = t0;
    },
    CancelableToken: function CancelableToken(t0) {
      this._cancelable_token$_exception = null;
      this._cancelable_token$_canceler = t0;
    },
    CompositeToken$any(tokens) {
      var t1 = $.Zone__current,
        t2 = A._setArrayType(tokens.slice(0), A._arrayInstanceType(tokens));
      t1 = new A.CompositeToken(B._Mode_0, t2, new A._AsyncCompleter(new A._Future(t1, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
      t1.CompositeToken$_$2(tokens, B._Mode_0);
      return t1;
    },
    CompositeToken$all(tokens) {
      var t1 = $.Zone__current,
        t2 = A._setArrayType(tokens.slice(0), A._arrayInstanceType(tokens));
      t1 = new A.CompositeToken(B._Mode_1, t2, new A._AsyncCompleter(new A._Future(t1, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
      t1.CompositeToken$_$2(tokens, B._Mode_1);
      return t1;
    },
    _Mode: function _Mode(t0) {
      this._name = t0;
    },
    CompositeToken: function CompositeToken(t0, t1, t2) {
      var _ = this;
      _._mode = t0;
      _._tokens = t1;
      _._canceler = t2;
      _._composite_token$_exception = null;
    },
    CompositeToken$__closure: function CompositeToken$__closure(t0, t1) {
      this.$this = t0;
      this.idx = t1;
    },
    CompositeToken__checkTokens_closure: function CompositeToken__checkTokens_closure() {
    },
    TimeoutToken$(timeout) {
      var t1 = $.Zone__current;
      if (timeout._duration < 0)
        A.throwExpression(A.ArgumentError$value(timeout, "timeout", null));
      return new A.TimeoutToken(timeout, new A._AsyncCompleter(new A._Future(t1, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
    },
    TimeoutToken: function TimeoutToken(t0, t1) {
      var _ = this;
      _.timeout = t0;
      _._timeout_token$_exception = _._timeout_token$_timer = null;
      _._timeout_token$_canceler = t1;
    },
    TimeoutToken_ensureStarted_closure: function TimeoutToken_ensureStarted_closure(t0) {
      this.$this = t0;
    },
    EmptyUnmodifiableSet: function EmptyUnmodifiableSet(t0) {
      this.$ti = t0;
    },
    _EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin: function _EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin() {
    },
    mergeMaps(map1, map2, value, $K, $V) {
      var result = A.LinkedHashMap_LinkedHashMap$of(map1, $K, $V);
      map2.forEach$1(0, new A.mergeMaps_closure(result, value, $V, $K));
      return result;
    },
    mergeMaps_closure: function mergeMaps_closure(t0, t1, t2, t3) {
      var _ = this;
      _.result = t0;
      _.value = t1;
      _.V = t2;
      _.K = t3;
    },
    QueueList__computeInitialCapacity(initialCapacity) {
      return 8;
    },
    QueueList__nextPowerOf2(number) {
      var nextNumber;
      number = (number << 1 >>> 0) - 1;
      for (; true; number = nextNumber) {
        nextNumber = (number & number - 1) >>> 0;
        if (nextNumber === 0)
          return number;
      }
    },
    QueueList: function QueueList(t0, t1, t2, t3) {
      var _ = this;
      _._table = t0;
      _._head = t1;
      _._tail = t2;
      _.$ti = t3;
    },
    _CastQueueList: function _CastQueueList(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue_list$_delegate = t0;
      _._table = t1;
      _._head = t2;
      _._tail = t3;
      _.$ti = t4;
    },
    _QueueList_Object_ListMixin: function _QueueList_Object_ListMixin() {
    },
    UnionSet: function UnionSet(t0, t1, t2) {
      this._sets = t0;
      this._disjoint = t1;
      this.$ti = t2;
    },
    UnionSet_length_closure: function UnionSet_length_closure(t0) {
      this.$this = t0;
    },
    UnionSet__iterable_closure: function UnionSet__iterable_closure(t0) {
      this.$this = t0;
    },
    UnionSet_contains_closure: function UnionSet_contains_closure(t0, t1) {
      this.$this = t0;
      this.element = t1;
    },
    _UnionSet_SetBase_UnmodifiableSetMixin: function _UnionSet_SetBase_UnmodifiableSetMixin() {
    },
    UnionSetController: function UnionSetController(t0, t1, t2) {
      this.set = t0;
      this._union_set_controller$_sets = t1;
      this.$ti = t2;
    },
    UnmodifiableSetMixin__throw() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable Set"));
    },
    UnmodifiableSetView: function UnmodifiableSetView(t0, t1) {
      this._base = t0;
      this.$ti = t1;
    },
    UnmodifiableSetMixin: function UnmodifiableSetMixin() {
    },
    _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin: function _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin() {
    },
    _DelegatingIterableBase: function _DelegatingIterableBase() {
    },
    DelegatingSet: function DelegatingSet(t0, t1) {
      this._base = t0;
      this.$ti = t1;
    },
    DevelopmentFilter: function DevelopmentFilter() {
      this._level = null;
    },
    ProductionFilter: function ProductionFilter() {
      this._level = null;
    },
    LogEvent: function LogEvent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.level = t0;
      _.message = t1;
      _.error = t2;
      _.stackTrace = t3;
      _.time = t4;
    },
    LogFilter: function LogFilter() {
    },
    Level: function Level(t0, t1) {
      this.value = t0;
      this._name = t1;
    },
    LogOutput: function LogOutput() {
    },
    LogPrinter: function LogPrinter() {
    },
    Logger: function Logger() {
    },
    Logger_defaultFilter_closure: function Logger_defaultFilter_closure() {
    },
    OutputEvent: function OutputEvent(t0) {
      this.lines = t0;
    },
    _Empty: function _Empty() {
    },
    _NotEmpty: function _NotEmpty() {
    },
    _IsNull: function _IsNull() {
    },
    _IsNotNull: function _IsNotNull() {
    },
    _IsTrue: function _IsTrue() {
    },
    _IsFalse: function _IsFalse() {
    },
    _IsNaN: function _IsNaN() {
    },
    _HasLength: function _HasLength(t0) {
      this._core_matchers$_matcher = t0;
    },
    _Contains: function _Contains(t0) {
      this._core_matchers$_expected = t0;
    },
    _Contains_matches_closure: function _Contains_matches_closure(t0, t1) {
      this.expected = t0;
      this.matchState = t1;
    },
    _Predicate: function _Predicate(t0, t1, t2) {
      this._core_matchers$_matcher = t0;
      this._core_matchers$_description = t1;
      this.$ti = t2;
    },
    CustomMatcher: function CustomMatcher() {
    },
    CustomMatcher_matches_closure: function CustomMatcher_matches_closure() {
    },
    StringDescription: function StringDescription(t0) {
      this._out = t0;
    },
    _StringEqualsMatcher__writeLeading(buff, s, start) {
      var t1 = buff._contents;
      if (start > 10) {
        t1 += "... ";
        buff._contents = t1;
        buff._contents = t1 + B.JSString_methods.substring$2(s, start - 10, start);
      } else
        buff._contents = t1 + B.JSString_methods.substring$2(s, 0, start);
    },
    _StringEqualsMatcher__writeTrailing(buff, s, start) {
      var t1 = start + 10,
        t2 = buff._contents;
      if (t1 > s.length)
        buff._contents = t2 + B.JSString_methods.substring$1(s, start);
      else {
        t1 = t2 + B.JSString_methods.substring$2(s, start, t1);
        buff._contents = t1;
        buff._contents = t1 + " ...";
      }
    },
    _Mismatch$simple($location, actual, problem) {
      return new A._Mismatch($location, actual, new A._Mismatch$simple_closure(problem), false);
    },
    _StringEqualsMatcher: function _StringEqualsMatcher(t0) {
      this._equals_matcher$_value = t0;
    },
    _DeepMatcher: function _DeepMatcher(t0, t1) {
      this._expected = t0;
      this._limit = t1;
    },
    _DeepMatcher__compareSets_closure: function _DeepMatcher__compareSets_closure(t0, t1, t2, t3) {
      var _ = this;
      _.matcher = t0;
      _.expectedElement = t1;
      _.location = t2;
      _.depth = t3;
    },
    _DeepMatcher__compareSets_closure0: function _DeepMatcher__compareSets_closure0(t0) {
      this.expectedElement = t0;
    },
    _DeepMatcher__recursiveMatch_closure: function _DeepMatcher__recursiveMatch_closure(t0, t1, t2, t3) {
      var _ = this;
      _.expected = t0;
      _.actual = t1;
      _.matchState = t2;
      _.depth = t3;
    },
    _DeepMatcher__recursiveMatch_closure0: function _DeepMatcher__recursiveMatch_closure0(t0) {
      this.e = t0;
    },
    _DeepMatcher__recursiveMatch_closure1: function _DeepMatcher__recursiveMatch_closure1(t0, t1) {
      this.err = t0;
      this.key = t1;
    },
    _DeepMatcher__recursiveMatch_closure2: function _DeepMatcher__recursiveMatch_closure2(t0, t1) {
      this.err = t0;
      this.key = t1;
    },
    _DeepMatcher__recursiveMatch_closure3: function _DeepMatcher__recursiveMatch_closure3(t0) {
      this.expected = t0;
    },
    _Mismatch: function _Mismatch(t0, t1, t2, t3) {
      var _ = this;
      _.location = t0;
      _.actual = t1;
      _.describeProblem = t2;
      _.instead = t3;
    },
    _Mismatch$simple_closure: function _Mismatch$simple_closure(t0) {
      this.problem = t0;
    },
    AsyncMatcher: function AsyncMatcher() {
    },
    AsyncMatcher_matches_closure: function AsyncMatcher_matches_closure(t0, t1, t2) {
      this.$this = t0;
      this.item = t1;
      this.outstandingWork = t2;
    },
    expect(actual, matcher, reason) {
      A._expect(actual, matcher, null, reason, null, false);
    },
    _expect(actual, matcher, formatter, reason, skip, verbose) {
      var matchState, e, trace, test, result, outstandingWork, t2, exception, t1 = {};
      t1.matcher = matcher;
      t1.reason = reason;
      test = A.TestHandle_current();
      matcher = t1.matcher = A.wrapMatcher(matcher);
      if (matcher instanceof A.Throws) {
        result = matcher.matchAsync$1(actual);
        A.expect(result, A.anyOf(A._setArrayType([new A._DeepMatcher(null, 100), B.C_TypeMatcher, B.C_TypeMatcher0], type$.JSArray_Matcher), null, null), string$.matchA);
        if (typeof result == "string")
          A.fail(A.formatFailure(matcher, actual, result, reason));
        else if (result instanceof A._Future) {
          outstandingWork = test.markPending$0();
          return result.then$1$1(new A._expect_closure(t1, actual), type$.Null).whenComplete$1(outstandingWork.get$complete());
        }
        return A.Future_Future$sync(new A._expect_closure0(), type$.dynamic);
      }
      t2 = type$.dynamic;
      matchState = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
      try {
        if (matcher.matches$2(actual, matchState)) {
          t2 = A.Future_Future$sync(new A._expect_closure1(), t2);
          return t2;
        }
        t2 = reason;
      } catch (exception) {
        e = A.unwrapException(exception);
        trace = A.getTraceFromException(exception);
        t2 = t1.reason;
        if (t2 == null) {
          reason = A.S(e) + " at " + A.S(trace);
          t1.reason = reason;
          t2 = reason;
        }
      }
      A.fail(new A._expect_closure2().call$5(actual, type$.Matcher._as(t1.matcher), t2, matchState, false));
    },
    fail(message) {
      return A.throwExpression(new A.TestFailure(message));
    },
    formatFailure(expected, actual, which, reason) {
      var t2,
        t1 = new A.StringDescription(new A.StringBuffer("")).addDescriptionOf$1(expected)._out._contents;
      t1 = A.indent0(t1.charCodeAt(0) == 0 ? t1 : t1, "Expected: ");
      t2 = new A.StringDescription(new A.StringBuffer("")).addDescriptionOf$1(actual)._out._contents;
      t2 = t1 + "\n" + (A.indent0(t2.charCodeAt(0) == 0 ? t2 : t2, "  Actual: ") + "\n");
      t1 = which.length !== 0 ? t2 + (A.indent0(which, "   Which: ") + "\n") : t2;
      if (reason != null)
        t1 += reason + "\n";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _expect_closure2: function _expect_closure2() {
    },
    _expect_closure: function _expect_closure(t0, t1) {
      this._box_0 = t0;
      this.actual = t1;
    },
    _expect_closure0: function _expect_closure0() {
    },
    _expect_closure1: function _expect_closure1() {
    },
    Throws: function Throws(t0) {
      this._matcher = t0;
    },
    FeatureMatcher: function FeatureMatcher() {
    },
    Matcher: function Matcher() {
    },
    _ContainsAll$(expected) {
      var t1 = A._arrayInstanceType(expected),
        t2 = t1._eval$1("MappedListIterable<1,@>"),
        t3 = t2._eval$1("MappedListIterable<ListIterable.E,Matcher>");
      t1 = A.List_List$_of(new A.MappedListIterable(new A.MappedListIterable(expected, t1._eval$1("@(1)")._as(A.util__wrapMatcher$closure()), t2), t2._eval$1("Matcher(ListIterable.E)")._as(A.util__wrapMatcher$closure()), t3), t3._eval$1("ListIterable.E"));
      return new A._ContainsAll(expected, t1, true);
    },
    _EveryElement: function _EveryElement(t0) {
      this._iterable_matchers$_matcher = t0;
    },
    _IterableMatcher: function _IterableMatcher() {
    },
    _UnorderedMatches: function _UnorderedMatches() {
    },
    _UnorderedMatches__test_closure: function _UnorderedMatches__test_closure() {
    },
    _UnorderedMatches__findPairingInner_closure: function _UnorderedMatches__findPairingInner_closure(t0) {
      this.reserved = t0;
    },
    _ContainsAll: function _ContainsAll(t0, t1, t2) {
      this._unwrappedExpected = t0;
      this._iterable_matchers$_expected = t1;
      this._allowUnmatchedValues = t2;
    },
    anyOf(arg0, arg1, arg2) {
      var _null = null;
      return new A._AnyOf(A._wrapArgs(arg0, arg1, arg2, _null, _null, _null, _null));
    },
    _wrapArgs(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
      var t1, args, t2;
      if (type$.List_dynamic._is(arg0)) {
        if (arg1 == null)
          t1 = arg2 != null;
        else
          t1 = true;
        if (t1)
          throw A.wrapException(A.ArgumentError$("If arg0 is a List, all other arguments must be null.", null));
        args = arg0;
      } else {
        t1 = [arg0, arg1, arg2, arg3, arg4, arg5, arg6];
        t2 = A._arrayInstanceType(t1);
        args = new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A._wrapArgs_closure()), t2._eval$1("WhereIterable<1>"));
      }
      return J.map$1$1$ax(args, A.util__wrapMatcher$closure(), type$.Matcher).toList$0(0);
    },
    _IsNot: function _IsNot(t0) {
      this._operator_matchers$_matcher = t0;
    },
    _AllOf: function _AllOf(t0) {
      this._matchers = t0;
    },
    _AnyOf: function _AnyOf(t0) {
      this._matchers = t0;
    },
    _wrapArgs_closure: function _wrapArgs_closure() {
    },
    _OrderingMatcher: function _OrderingMatcher(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._order_matchers$_value = t0;
      _._equalValue = t1;
      _._lessThanValue = t2;
      _._greaterThanValue = t3;
      _._comparisonDescription = t4;
      _._valueInDescription = t5;
    },
    prettyPrint(object, maxItems, maxLineLength) {
      return new A.prettyPrint_prettyPrintImpl(maxItems, maxLineLength).call$4(object, 0, A.LinkedHashSet_LinkedHashSet$_empty(type$.nullable_Object), true);
    },
    _typeName(x) {
      if (x instanceof A._Type)
        return "Type";
      if (type$.Uri._is(x))
        return "Uri";
      if (type$.Set_dynamic._is(x))
        return "Set";
      if (x instanceof A._BigIntImpl)
        return "BigInt";
      return J.get$runtimeType$(x).toString$0(0);
    },
    _escapeString(source) {
      var t1 = A.escape(A._asString(source));
      return A.stringReplaceAllUnchecked(t1, "'", "\\'");
    },
    prettyPrint_prettyPrintImpl: function prettyPrint_prettyPrintImpl(t0, t1) {
      this.maxItems = t0;
      this.maxLineLength = t1;
    },
    prettyPrint_prettyPrintImpl_pp: function prettyPrint_prettyPrintImpl_pp(t0, t1, t2) {
      this._box_0 = t0;
      this.prettyPrintImpl = t1;
      this.indent = t2;
    },
    prettyPrint_prettyPrintImpl_closure: function prettyPrint_prettyPrintImpl_closure(t0) {
      this.indent = t0;
    },
    prettyPrint_prettyPrintImpl_closure0: function prettyPrint_prettyPrintImpl_closure0(t0, t1) {
      this.pp = t0;
      this.object = t1;
    },
    prettyPrint_prettyPrintImpl_closure1: function prettyPrint_prettyPrintImpl_closure1(t0) {
      this.indent = t0;
    },
    _MatchesRegExp$(re) {
      var t1 = A.RegExp_RegExp(re, true, false);
      return new A._MatchesRegExp(t1);
    },
    _MatchesRegExp: function _MatchesRegExp(t0) {
      this._regexp = t0;
    },
    TypeMatcher: function TypeMatcher(t0) {
      this.$ti = t0;
    },
    addStateInfo(matchState, values) {
      var t1 = type$.dynamic,
        innerState = A.LinkedHashMap_LinkedHashMap$of(matchState, t1, t1);
      matchState.clear$0(0);
      matchState.$indexSet(0, "state", innerState);
      matchState.addAll$1(0, values);
    },
    wrapMatcher(valueOrMatcher) {
      var _s18_ = "satisfies function";
      if (valueOrMatcher instanceof A.Matcher)
        return valueOrMatcher;
      else if (type$.bool_Function_nullable_Object._is(valueOrMatcher))
        return new A._Predicate(valueOrMatcher, _s18_, type$._Predicate_nullable_Object);
      else if (type$.bool_Function_Never._is(valueOrMatcher))
        return new A._Predicate(new A.wrapMatcher_closure(valueOrMatcher), _s18_, type$._Predicate_nullable_Object);
      else
        return typeof valueOrMatcher == "string" ? new A._StringEqualsMatcher(valueOrMatcher) : new A._DeepMatcher(valueOrMatcher, 100);
    },
    escape(str) {
      return A.stringReplaceAllFuncUnchecked(A.stringReplaceAllUnchecked(str, "\\", "\\\\"), $.$get$_escapeRegExp(), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(new A.escape_closure())), null);
    },
    _getHexLiteral(input) {
      return "\\x" + B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(new A.Runes(A._asString(input)).get$single(0), 16).toUpperCase(), 2, "0");
    },
    wrapMatcher_closure: function wrapMatcher_closure(t0) {
      this.valueOrMatcher = t0;
    },
    escape_closure: function escape_closure() {
    },
    Context_Context(style) {
      return new A.Context(style, ".");
    },
    _parseUri(uri) {
      return uri;
    },
    _validateArgList(method, args) {
      var numArgs, i, numArgs0, message, t1, t2, t3, t4;
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new A.StringBuffer("");
        t1 = method + "(";
        message._contents = t1;
        t2 = A._arrayInstanceType(args);
        t3 = t2._eval$1("SubListIterable<1>");
        t4 = new A.SubListIterable(args, 0, numArgs, t3);
        t4.SubListIterable$3(args, 0, numArgs, t2._precomputed1);
        t3 = t1 + new A.MappedListIterable(t4, t3._eval$1("String(ListIterable.E)")._as(new A._validateArgList_closure()), t3._eval$1("MappedListIterable<ListIterable.E,String>")).join$1(0, ", ");
        message._contents = t3;
        message._contents = t3 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw A.wrapException(A.ArgumentError$(message.toString$0(0), null));
      }
    },
    Context: function Context(t0, t1) {
      this.style = t0;
      this._context$_current = t1;
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    InternalStyle: function InternalStyle() {
    },
    ParsedPath_ParsedPath$parse(path, style) {
      var t1, parts, separators, t2, start, i,
        root = style.getRoot$1(path);
      style.isRootRelative$1(path);
      if (root != null)
        path = B.JSString_methods.substring$1(path, root.length);
      t1 = type$.JSArray_String;
      parts = A._setArrayType([], t1);
      separators = A._setArrayType([], t1);
      t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t2 = style.isSeparator$1(path.charCodeAt(0));
      } else
        t2 = false;
      if (t2) {
        if (0 >= t1)
          return A.ioore(path, 0);
        B.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        B.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (i = start; i < t1; ++i)
        if (style.isSeparator$1(path.charCodeAt(i))) {
          B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(path, start, i));
          B.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        B.JSArray_methods.add$1(parts, B.JSString_methods.substring$1(path, start));
        B.JSArray_methods.add$1(separators, "");
      }
      return new A.ParsedPath(style, root, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
    },
    PathException$(message) {
      return new A.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    Style__getPlatformStyle() {
      if (A.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      if (!B.JSString_methods.endsWith$1(A.Uri_base().get$path(), "/"))
        return $.$get$Style_url();
      if (A._Uri__Uri(null, "a/b", null, null).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle_absolutePathToUri_closure: function WindowsStyle_absolutePathToUri_closure() {
    },
    Pool: function Pool(t0, t1, t2, t3, t4) {
      var _ = this;
      _._requestedResources = t0;
      _._onReleaseCallbacks = t1;
      _._onReleaseCompleters = t2;
      _._maxAllocatedResources = t3;
      _._allocatedResources = 0;
      _._closeGroup = _._timer = null;
      _._pool$_closeMemo = t4;
    },
    Pool__onResourceReleaseAllowed_closure: function Pool__onResourceReleaseAllowed_closure(t0, t1) {
      this.zone = t0;
      this.registered = t1;
    },
    Pool__runOnRelease_closure: function Pool__runOnRelease_closure(t0) {
      this.$this = t0;
    },
    Pool__runOnRelease_closure0: function Pool__runOnRelease_closure0(t0) {
      this.$this = t0;
    },
    PoolResource: function PoolResource(t0) {
      this._pool = t0;
      this._released = false;
    },
    openChannel(entryPoint, exceptionManager, logger, startArguments, hook) {
      return A.openChannel$body(entryPoint, exceptionManager, logger, startArguments, hook);
    },
    openChannel$body(entryPoint, exceptionManager, logger, startArguments, hook) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Channel),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], com, webEntryPoint, worker, fail, success, $$errorHandler, disconnected, res, startRequest, transfer, msg, ex, st, channel, ex0, ex1, st0, t3, exception, t1, t2, completer, ready, $async$exception, $async$exception1;
      var $async$openChannel = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t2 = $.Zone__current;
              completer = new A._AsyncCompleter(new A._Future(t2, type$._Future__WebChannel), type$._AsyncCompleter__WebChannel);
              ready = new A._AsyncCompleter(new A._Future(t2, type$._Future_bool), type$._AsyncCompleter_bool);
              t1.channel = null;
              t2 = init.G;
              com = A._asJSObject(new t2.MessageChannel());
              webEntryPoint = A.EntryPointUri_EntryPointUri$from(entryPoint);
              worker = A._Cell$named("worker");
              fail = new A.openChannel_fail(ready, completer);
              success = new A.openChannel_success(ready, completer);
              $async$handler = 4;
              worker._value = A._asJSObject(new t2.Worker(webEntryPoint.uri));
              $$errorHandler = new A.openChannel_$errorHandler(logger, fail, entryPoint);
              worker._readLocal$0().onerror = A._functionToJS1($$errorHandler);
              worker._readLocal$0().onmessageerror = A._functionToJS1($$errorHandler);
              disconnected = new A.DisconnectedChannel(exceptionManager, logger);
              worker._readLocal$0().onmessage = A._functionToJS1(new A.openChannel_closure(disconnected, logger, fail, ready));
              $async$goto = 7;
              return A._asyncAwait(ready.future, $async$openChannel);
            case 7:
              // returning from await.
              res = $async$result;
              if (!res) {
                t1 = A.SquadronError$_("Web Worker is not ready", null, null);
                throw A.wrapException(t1);
              }
              t3 = A._asJSObject(com.port2);
              startRequest = [A.microsecTimeStamp(), t3, -1, startArguments, null, null, true];
              A._asJSObject(com.port1).onmessage = A._functionToJS1(new A.openChannel_closure0(t1, disconnected, logger, fail, completer, exceptionManager, worker, success));
              try {
                transfer = type$.JSArray_nullable_Object._as(new t2.Array());
                msg = A.$jsify(A.WorkerRequestExt_wrapInPlace(startRequest), transfer);
                worker._readLocal$0().postMessage(msg, transfer);
              } catch (exception) {
                ex = A.unwrapException(exception);
                st = A.getTraceFromException(exception);
                if (logger != null)
                  logger.e$1(new A.openChannel_closure1(startRequest, ex));
                t1 = A.SquadronError$_("Failed to post connection request: " + A.S(ex), st, null);
                throw A.wrapException(t1);
              }
              $async$handler = 9;
              $async$goto = 12;
              return A._asyncAwait(completer.future, $async$openChannel);
            case 12:
              // returning from await.
              channel = $async$result;
              $async$goto = hook != null ? 13 : 14;
              break;
            case 13:
              // then
              t1 = hook.call$1(worker._readLocal$0());
              $async$goto = 15;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$openChannel);
            case 15:
              // returning from await.
            case 14:
              // join
              if (logger != null)
                logger.t$1("Created Web Worker for " + entryPoint.toString$0(0));
              $async$returnValue = channel;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$handler = 4;
              // goto after finally
              $async$goto = 11;
              break;
            case 9:
              // catch
              $async$handler = 8;
              $async$exception = $async$errorStack.pop();
              ex0 = A.unwrapException($async$exception);
              if (logger != null)
                logger.e$1(new A.openChannel_closure2(ex0));
              throw $async$exception;
              // goto after finally
              $async$goto = 11;
              break;
            case 8:
              // uncaught
              // goto catch
              $async$goto = 4;
              break;
            case 11:
              // after finally
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception1 = $async$errorStack.pop();
              ex1 = A.unwrapException($async$exception1);
              st0 = A.getTraceFromException($async$exception1);
              A.FutureExtensions_ignore(ready.future, type$.bool);
              A.FutureExtensions_ignore(completer.future, type$._WebChannel);
              if (logger != null)
                logger.t$1("Failed to create Web Worker for " + entryPoint.toString$0(0));
              A._asJSObject(com.port1).close();
              A._asJSObject(com.port2).close();
              worker._readLocal$0().terminate();
              t1 = A.SquadronException_from(ex1, st0, null);
              throw A.wrapException(t1);
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              webEntryPoint.release$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$openChannel, $async$completer);
    },
    terminateChannel(channel, ex) {
      var t1, pendingConnections, _i, c;
      if (channel instanceof A._WebChannel) {
        t1 = channel._thread;
        if (t1 != null)
          t1.terminate();
        pendingConnections = channel._activeConnections;
        for (t1 = pendingConnections.length, _i = 0; _i < pendingConnections.length; pendingConnections.length === t1 || (0, A.throwConcurrentModificationError)(pendingConnections), ++_i) {
          c = pendingConnections[_i];
          c.addError$1(ex);
          c.close$0();
        }
      }
    },
    openChannel_fail: function openChannel_fail(t0, t1) {
      this.ready = t0;
      this.completer = t1;
    },
    openChannel_success: function openChannel_success(t0, t1) {
      this.ready = t0;
      this.completer = t1;
    },
    openChannel_$errorHandler: function openChannel_$errorHandler(t0, t1, t2) {
      this.logger = t0;
      this.fail = t1;
      this.entryPoint = t2;
    },
    openChannel_$errorHandler_closure: function openChannel_$errorHandler_closure(t0) {
      this.error = t0;
    },
    openChannel_$errorHandler_closure0: function openChannel_$errorHandler_closure0(t0, t1, t2, t3) {
      var _ = this;
      _.e = t0;
      _.entryPoint = t1;
      _.err = t2;
      _.logger = t3;
    },
    openChannel_$errorHandler__closure: function openChannel_$errorHandler__closure(t0) {
      this.msg = t0;
    },
    openChannel_$errorHandler__closure0: function openChannel_$errorHandler__closure0(t0) {
      this.entryPoint = t0;
    },
    openChannel_closure: function openChannel_closure(t0, t1, t2, t3) {
      var _ = this;
      _.disconnected = t0;
      _.logger = t1;
      _.fail = t2;
      _.ready = t3;
    },
    openChannel__closure1: function openChannel__closure1(t0) {
      this.error = t0;
    },
    openChannel_closure0: function openChannel_closure0(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._box_0 = t0;
      _.disconnected = t1;
      _.logger = t2;
      _.fail = t3;
      _.completer = t4;
      _.exceptionManager = t5;
      _.worker = t6;
      _.success = t7;
    },
    openChannel__closure: function openChannel__closure(t0) {
      this.error = t0;
    },
    openChannel__closure0: function openChannel__closure0(t0) {
      this.response = t0;
    },
    openChannel_closure1: function openChannel_closure1(t0, t1) {
      this.startRequest = t0;
      this.ex = t1;
    },
    openChannel_closure2: function openChannel_closure2(t0) {
      this.ex = t0;
    },
    _WebForwardChannel: function _WebForwardChannel(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._remote = t0;
      _._com = t1;
      _._sendPort = t2;
      _._thread = null;
      _._activeConnections = t3;
      _.exceptionManager = t4;
      _.logger = t5;
      _._closed = false;
    },
    _WebForwardChannel__forward_closure: function _WebForwardChannel__forward_closure(t0, t1) {
      this.e = t0;
      this.ex = t1;
    },
    _WebChannel: function _WebChannel(t0, t1, t2, t3) {
      var _ = this;
      _._sendPort = t0;
      _._thread = null;
      _._activeConnections = t1;
      _.exceptionManager = t2;
      _.logger = t3;
      _._closed = false;
    },
    _WebChannel__postRequest_closure: function _WebChannel__postRequest_closure(t0, t1) {
      this.req = t0;
      this.ex = t1;
    },
    _WebChannel__inspectAndPostRequest_closure: function _WebChannel__inspectAndPostRequest_closure(t0, t1) {
      this.req = t0;
      this.ex = t1;
    },
    _WebChannel__getResponseStream_$sendRequest: function _WebChannel__getResponseStream_$sendRequest(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.command = t1;
      _.com = t2;
      _.post = t3;
      _.req = t4;
    },
    _WebChannel__getResponseStream_$sendRequest_$forwardMessage: function _WebChannel__getResponseStream_$sendRequest_$forwardMessage(t0) {
      this.controller = t0;
    },
    _WebChannel__getResponseStream_$sendRequest_$forwardError: function _WebChannel__getResponseStream_$sendRequest_$forwardError(t0, t1) {
      this.controller = t0;
      this.command = t1;
    },
    _WebChannel__getResponseStream_$sendRequest_$close: function _WebChannel__getResponseStream_$sendRequest_$close(t0, t1, t2) {
      this.$this = t0;
      this.com = t1;
      this.controller = t2;
    },
    _WebChannel__getResponseStream_$sendRequest_closure: function _WebChannel__getResponseStream_$sendRequest_closure(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.$this = t0;
      _.controller = t1;
      _.com = t2;
      _.command = t3;
      _.buffer = t4;
      _.$$forwardError = t5;
      _.$$forwardMessage = t6;
      _.post = t7;
      _.req = t8;
      _.$$close = t9;
    },
    _WebChannel__getResponseStream_$sendRequest__closure: function _WebChannel__getResponseStream_$sendRequest__closure(t0, t1, t2) {
      this.command = t0;
      this.buffer = t1;
      this.$$forwardError = t2;
    },
    _WebChannel__getResponseStream_$sendRequest__closure0: function _WebChannel__getResponseStream_$sendRequest__closure0(t0, t1) {
      this.buffer = t0;
      this.$$forwardMessage = t1;
    },
    _WebChannel__getResponseStream_closure: function _WebChannel__getResponseStream_closure(t0) {
      this.com = t0;
    },
    _WebChannel_sendRequest_$success: function _WebChannel_sendRequest_$success(t0, t1) {
      this.sub = t0;
      this.completer = t1;
    },
    _WebChannel_sendRequest_$fail: function _WebChannel_sendRequest_$fail(t0, t1) {
      this.sub = t0;
      this.completer = t1;
    },
    _WebChannel_sendRequest_$done: function _WebChannel_sendRequest_$done(t0, t1, t2, t3) {
      var _ = this;
      _.sub = t0;
      _.completer = t1;
      _.$$fail = t2;
      _.command = t3;
    },
    EntryPointUri_EntryPointUri$from(workerEntrypoint) {
      var url, t2, blob,
        t1 = A.IterableExtensions_get_lastOrNull(workerEntrypoint.get$pathSegments(), type$.String),
        fileName = t1 == null ? null : t1.toLowerCase();
      if (fileName == null)
        fileName = "";
      url = workerEntrypoint.toString$0(0);
      if (B.JSString_methods.endsWith$1(fileName, ".js"))
        return new A.EntryPointUri(url, false, false, new A.Object());
      else if (B.JSString_methods.endsWith$1(fileName, ".wasm")) {
        t1 = init.G;
        t2 = t1.Blob;
        blob = A._asJSObject(new t2(A._setArrayType(['(async function() {\n  const workerUri = new URL("' + A.stringReplaceAllUnchecked(url, '"', '\\"') + "\", self.location.origin).href;\n  try {\n    let dart2wasm_runtime; let moduleInstance;\n    const runtimeUri = workerUri.replaceAll('.unopt', '').replaceAll('.wasm', '.mjs');\n    try {\n      const dartModule = WebAssembly.compileStreaming(fetch(workerUri));\n      dart2wasm_runtime = await import(runtimeUri);\n      moduleInstance = await dart2wasm_runtime.instantiate(dartModule, {});\n    } catch (exception) {\n      console.error(`Failed to fetch and instantiate wasm module ${workerUri}: ${exception}`);\n      console.error('See https://dart.dev/web/wasm for more information.');\n      throw new Error(exception.message ?? 'Unknown error when instantiating worker module');\n    }\n    try {\n      await dart2wasm_runtime.invoke(moduleInstance);\n      //console.log(`Succesfully loaded and invoked ${workerUri}`);\n    } catch (exception) {\n      console.error(`Exception while invoking wasm module ${workerUri}: ${exception}`);\n      throw new Error(exception.message ?? 'Unknown error when invoking worker module');\n    }\n  } catch (ex) {\n    const ts = (Date.now() - Date.UTC(2020, 1, 2)) * 1000;\n    postMessage([ts, null, [\"$!\", `Failed to load Web Worker from ${workerUri}: ${ex}`, null, null], null, null]);\n  }\n})()"], type$.JSArray_String), {type: "application/javascript"}));
        return new A.EntryPointUri(A._asString(t1.URL.createObjectURL(blob)), true, false, new A.Object());
      } else if (workerEntrypoint.isScheme$1("data") || workerEntrypoint.isScheme$1("javascript"))
        return new A.EntryPointUri(url, false, false, new A.Object());
      else
        throw A.wrapException(A.SquadronError$_("Invalid entry point URI", null, null));
    },
    EntryPointUri: function EntryPointUri(t0, t1, t2, t3) {
      var _ = this;
      _.uri = t0;
      _._revoke = t1;
      _.Releasable__released = t2;
      _.Releasable__token = t3;
    },
    _EntryPointUri_Object_Releasable: function _EntryPointUri_Object_Releasable() {
    },
    EventBuffer: function EventBuffer(t0, t1, t2, t3) {
      var _ = this;
      _.onDeactivate = null;
      _._processValue = t0;
      _._processError = t1;
      _._buffer = t2;
      _.__event_buffer$_pauses = 0;
      _.$ti = t3;
    },
    EventBuffer_add_closure: function EventBuffer_add_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    EventBuffer_addError_closure: function EventBuffer_addError_closure(t0, t1, t2) {
      this.$this = t0;
      this.err = t1;
      this.st = t2;
    },
    _WebLocalWorker: function _WebLocalWorker(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.operations = t0;
      _.exceptionManager = t1;
      _._port = t2;
      _.___WebLocalWorker__channel_A = $;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
      _.$ti = t5;
    },
    __WebLocalWorker_Object_Releasable: function __WebLocalWorker_Object_Releasable() {
    },
    getRootUrl() {
      var components,
        t1 = init.G;
      A._asJSObject(t1.window);
      components = A._setArrayType(A._asString(A._asJSObject(A._asJSObject(t1.window).location).pathname).split("/"), type$.JSArray_String);
      return A.SubListIterable$(components, 0, A.checkNotNullable(components.length - 1, "count", type$.int), type$.String).join$1(0, "/");
    },
    _isTransferable(js) {
      var t1 = A.JSAnyUtilityExtension_instanceOfString(js, "ArrayBuffer");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "MessagePort");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "ReadableStream");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "WritableStream");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "TransformStream");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "ImageBitmap");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "VideoFrame");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "OffscreenCanvas");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "RTCDataChannel");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "MediaSourceHandle");
      if (t1)
        return true;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "MIDIAccess");
      if (t1)
        return true;
      return false;
    },
    _$is(a, b) {
      A._asObject(a);
      A._asObject(b);
      return A._asBool(init.G.Object.is(a, b));
    },
    $transferify(message, transfer) {
      var registered = A.HashSet_HashSet(A._patch___$is$closure(), type$.Object),
        squadronTransferify = A._Cell$named("squadronTransferify");
      squadronTransferify.set$finalLocalValue(new A.$transferify_closure(registered, transfer, squadronTransferify));
      squadronTransferify._readLocal$0().call$1(message);
    },
    _toJSStr(value) {
      A._asStringQ(value);
      return value == null ? null : value;
    },
    _toJSBool(value) {
      A._asBoolQ(value);
      return value == null ? null : value;
    },
    _toJSNum(value) {
      A._asNumQ(value);
      return value == null ? null : value;
    },
    _toJSBigInt(value) {
      return value == null ? null : type$.JavaScriptBigInt._as(init.G.BigInt(type$.BigInt._as(value).toString$0(0)));
    },
    _toJSDate(value) {
      var t1;
      if (value == null)
        t1 = null;
      else {
        type$.DateTime._as(value);
        t1 = A.JSFunctionUnsafeUtilExtension_callAsConstructor($.$get$_$JSDateFunction(), value._core$_value, type$.JSObject);
      }
      return t1;
    },
    $jsify(message, transfer) {
      var t1 = type$.Object,
        cache = A.HashMap_HashMap(A._platform__isSameInstance$closure(), t1, t1),
        $$registerTransferable = transfer == null ? new A.$jsify_closure() : new A.$jsify_closure0(cache, transfer),
        squadronJsify = A._Cell$named("squadronJsify");
      squadronJsify.set$finalLocalValue(new A.$jsify_closure1(cache, squadronJsify, $$registerTransferable));
      return squadronJsify._readLocal$0().call$1(message);
    },
    $jsify2(message, transfer) {
      var t1 = type$.Object,
        cache = A.HashMap_HashMap(A._platform__isSameInstance$closure(), t1, t1),
        squadronJsify = A._Cell$named("squadronJsify");
      squadronJsify.set$finalLocalValue(new A.$jsify2_closure(cache, squadronJsify, new A.$jsify2_closure0()));
      return squadronJsify._readLocal$0().call$1(message);
    },
    $dartify(message) {
      var t1 = type$.Object,
        cache = A.HashMap_HashMap(A._platform__isSameInstance$closure(), t1, t1),
        squadronDartify = A._Cell$named("squadronDartify");
      squadronDartify.set$finalLocalValue(new A.$dartify_closure(cache, squadronDartify));
      return squadronDartify._readLocal$0().call$1(message);
    },
    $JSEventExt__getMessageEventData(obj) {
      return A.$dartify(obj == null ? null : obj[$.$get$_$JSProps_data()]);
    },
    $JSEventExt_get_$dartError(_this) {
      var t1 = _this == null,
        t2 = A.$dartify(t1 ? null : _this[$.$get$_$JSProps_error()]);
      if (t2 == null) {
        t2 = A.$dartify(t1 ? null : _this[$.$get$_$JSProps_message()]);
        t1 = t2 == null ? null : J.toString$0$(t2);
      } else
        t1 = t2;
      return t1 == null ? "Unknown error" : t1;
    },
    $transferify_closure: function $transferify_closure(t0, t1, t2) {
      this.registered = t0;
      this.transfer = t1;
      this.squadronTransferify = t2;
    },
    $jsify_closure: function $jsify_closure() {
    },
    $jsify_closure0: function $jsify_closure0(t0, t1) {
      this.cache = t0;
      this.transfer = t1;
    },
    $jsify_closure1: function $jsify_closure1(t0, t1, t2) {
      this.cache = t0;
      this.squadronJsify = t1;
      this.$$registerTransferable = t2;
    },
    $jsify2_closure0: function $jsify2_closure0() {
    },
    $jsify2_closure: function $jsify2_closure(t0, t1, t2) {
      this.cache = t0;
      this.squadronJsify = t1;
      this.$$registerTransferable = t2;
    },
    $dartify_closure: function $dartify_closure(t0, t1) {
      this.cache = t0;
      this.squadronDartify = t1;
    },
    _WebWorkerChannel: function _WebWorkerChannel(t0, t1) {
      this.__worker_channel$_sendPort = t0;
      this._logger = t1;
    },
    _WebWorkerChannel__postResponse_closure: function _WebWorkerChannel__postResponse_closure(t0, t1) {
      this.res = t0;
      this.ex = t1;
    },
    _WebWorkerChannel__inspectAndPostResponse_closure: function _WebWorkerChannel__inspectAndPostResponse_closure(t0, t1) {
      this.res = t0;
      this.ex = t1;
    },
    JsWorkerRunnerExt_get_handle(_this) {
      return new A.JsWorkerRunnerExt_get_handle_closure(_this);
    },
    JsWorkerRunnerExt_get_handle_closure: function JsWorkerRunnerExt_get_handle_closure(t0) {
      this._this = t0;
    },
    DisconnectedChannel: function DisconnectedChannel(t0, t1) {
      this.exceptionManager = t0;
      this.logger = t1;
    },
    ForwardCompleter: function ForwardCompleter(t0, t1) {
      this._res = t0;
      this.$ti = t1;
    },
    ForwardStreamController$(onCancel, onListen, $T) {
      var t1 = new A.ForwardStreamController($T._eval$1("ForwardStreamController<0>"));
      t1.__ForwardStreamController__controller_F = $T._eval$1("StreamController<0>")._as(A.StreamController_StreamController(onCancel, onListen, t1.get$_pause(), t1.get$_resume(), $T));
      return t1;
    },
    ForwardStreamController: function ForwardStreamController(t0) {
      var _ = this;
      _.__ForwardStreamController__controller_F = $;
      _.__forward_stream_controller$_closed = false;
      _._sub = null;
      _._pauses = 0;
      _.$ti = t0;
    },
    InternalLogger: function InternalLogger(t0, t1, t2) {
      var _ = this;
      _.__Logger__initialization_F = $;
      _._filter = t0;
      _._printer = t1;
      _._output = t2;
    },
    _NoLogOutput: function _NoLogOutput() {
    },
    _DummyPrinter: function _DummyPrinter() {
    },
    _LogAllFilter: function _LogAllFilter() {
      this._level = null;
    },
    ResultStream$(channel, req, sendRequest, streaming) {
      var t1 = new A.ResultStream();
      t1.ResultStream$4(channel, req, sendRequest, streaming);
      return t1;
    },
    ResultStream: function ResultStream() {
      this.__ResultStream__controller_F = $;
    },
    ResultStream_$decodeStreamOfResponses: function ResultStream_$decodeStreamOfResponses(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.channel = t1;
      _.streamIdCompleter = t2;
      _.command = t3;
      _.token = t4;
    },
    ResultStream_$decodeSingleResponse: function ResultStream_$decodeSingleResponse(t0, t1, t2) {
      this.$this = t0;
      this.channel = t1;
      this.command = t2;
    },
    ResultStream_$getStreamId: function ResultStream_$getStreamId(t0) {
      this.streamIdCompleter = t0;
    },
    ResultStream_$onCancel: function ResultStream_$onCancel(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.streamIdCompleter = t1;
      _.$$getStreamId = t2;
      _.channel = t3;
    },
    ResultStream_$closeWithError: function ResultStream_$closeWithError(t0, t1) {
      this.$this = t0;
      this.command = t1;
    },
    ResultStream_$onListen: function ResultStream_$onListen(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.$this = t0;
      _.token = t1;
      _.sendRequest = t2;
      _.streaming = t3;
      _.$$decodeStreamOfResponses = t4;
      _.$$decodeSingleResponse = t5;
      _.$$closeWithError = t6;
    },
    WorkerRunner_WorkerRunner$use(localWorker) {
      var runner,
        t1 = new A._LogAllFilter(),
        t2 = new A._DummyPrinter(),
        t3 = new A._NoLogOutput(),
        t4 = new A.InternalLogger(t1, t2, t3);
      t4.Logger$4$filter$level$output$printer(t1, null, t3, t2);
      runner = new A.WorkerRunner(new A.WorkerRunner_WorkerRunner$use_closure(), t4, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.CancelationTokenReference), A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.void_Function));
      runner._service = localWorker;
      runner.set$_operations(localWorker.operations);
      runner._checkOperations$0();
      return runner;
    },
    WorkerRunner: function WorkerRunner(t0, t1, t2, t3) {
      var _ = this;
      _._terminate = t0;
      _.internalLogger = t1;
      _._operations = _._service = null;
      _._cancelTokens = t2;
      _._terminationRequested = false;
      _._executing = 0;
      _._streamCancelers = t3;
      _._streamId = 0;
      _._installCompleter = null;
    },
    WorkerRunner_WorkerRunner$use_closure: function WorkerRunner_WorkerRunner$use_closure() {
    },
    WorkerRunner__checkOperations_closure: function WorkerRunner__checkOperations_closure() {
    },
    WorkerRunner_processRequest_$postError: function WorkerRunner_processRequest_$postError(t0, t1) {
      this.replyWithError = t0;
      this.cmd = t1;
    },
    WorkerRunner_processRequest_post: function WorkerRunner_processRequest_post(t0, t1) {
      this.reply = t0;
      this.$$postError = t1;
    },
    WorkerRunner__getTokenRef_closure: function WorkerRunner__getTokenRef_closure(t0) {
      this.token = t0;
    },
    WorkerRunner__pipe_onDone: function WorkerRunner__pipe_onDone(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.streamId = t1;
      _.channel = t2;
      _.subscription = t3;
      _.done = t4;
    },
    WorkerRunner__pipe_closure: function WorkerRunner__pipe_closure() {
    },
    WorkerRunner__pipe_closure0: function WorkerRunner__pipe_closure0(t0, t1, t2) {
      this.token = t0;
      this.postError = t1;
      this.onDone = t2;
    },
    WorkerRunner__pipe_closure1: function WorkerRunner__pipe_closure1(t0, t1) {
      this._box_0 = t0;
      this.post = t1;
    },
    WorkerRunner__pipe_closure2: function WorkerRunner__pipe_closure2(t0, t1) {
      this._box_0 = t0;
      this.postError = t1;
    },
    SquadronService$(baseUrl, pool, targetPlatform) {
      return new A.SquadronService(pool, false, targetPlatform, baseUrl);
    },
    SquadronService: function SquadronService(t0, t1, t2, t3) {
      var _ = this;
      _.pool = t0;
      _.local = t1;
      _.targetPlatform = t2;
      _.baseUrl = t3;
    },
    ConcurrencySettings: function ConcurrencySettings(t0, t1, t2) {
      this.minWorkers = t0;
      this.maxWorkers = t1;
      this.maxParallel = t2;
    },
    CastConverter: function CastConverter() {
    },
    ContextAwareConverter$(converter) {
      var t2,
        t1 = type$.Object;
      t1 = A.HashMap_HashMap(A._platform__isSameInstance$closure(), t1, t1);
      t2 = converter == null ? $.$get$Squadron__converter() : converter;
      return new A.ContextAwareConverter(t2, new A.SerializationContext(t1));
    },
    ContextAwareConverter: function ContextAwareConverter(t0, t1) {
      this._converter = t0;
      this._context_aware_converter$_arguments = t1;
    },
    ContextAwareConverter_value_closure: function ContextAwareConverter_value_closure(t0, t1, t2) {
      this.$this = t0;
      this.op = t1;
      this.T = t2;
    },
    ContextAwareConverter_list_closure: function ContextAwareConverter_list_closure(t0, t1, t2) {
      this.$this = t0;
      this.toList = t1;
      this.T = t2;
    },
    ContextAwareConverter_list_closure0: function ContextAwareConverter_list_closure0(t0, t1, t2) {
      this.$this = t0;
      this.op = t1;
      this.T = t2;
    },
    ContextAwareConverter_nlist_closure: function ContextAwareConverter_nlist_closure(t0, t1, t2) {
      this.$this = t0;
      this.toList = t1;
      this.T = t2;
    },
    ContextAwareConverter_nlist_closure0: function ContextAwareConverter_nlist_closure0(t0, t1, t2) {
      this.$this = t0;
      this.nop = t1;
      this.T = t2;
    },
    ContextAwareConverter_set_closure: function ContextAwareConverter_set_closure(t0, t1, t2) {
      this.$this = t0;
      this.toSet = t1;
      this.T = t2;
    },
    ContextAwareConverter_set_closure0: function ContextAwareConverter_set_closure0(t0, t1, t2) {
      this.$this = t0;
      this.op = t1;
      this.T = t2;
    },
    ContextAwareConverter_nset_closure: function ContextAwareConverter_nset_closure(t0, t1, t2) {
      this.$this = t0;
      this.toSet = t1;
      this.T = t2;
    },
    ContextAwareConverter_nset_closure0: function ContextAwareConverter_nset_closure0(t0, t1, t2) {
      this.$this = t0;
      this.nop = t1;
      this.T = t2;
    },
    ContextAwareConverter_map_closure: function ContextAwareConverter_map_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.toMap = t1;
      _.K = t2;
      _.V = t3;
    },
    ContextAwareConverter_map_closure0: function ContextAwareConverter_map_closure0(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.vop = t1;
      _.K = t2;
      _.V = t3;
    },
    ContextAwareConverter_map_closure1: function ContextAwareConverter_map_closure1(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.kop = t1;
      _.vop = t2;
      _.K = t3;
      _.V = t4;
    },
    ContextAwareConverter_map__closure: function ContextAwareConverter_map__closure(t0, t1, t2, t3) {
      var _ = this;
      _.kop = t0;
      _.vop = t1;
      _.K = t2;
      _.V = t3;
    },
    ContextAwareConverter_nmap_closure: function ContextAwareConverter_nmap_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.toMap = t1;
      _.K = t2;
      _.V = t3;
    },
    ContextAwareConverter_nmap_closure0: function ContextAwareConverter_nmap_closure0(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.nvop = t1;
      _.K = t2;
      _.V = t3;
    },
    ContextAwareConverter_nmap_closure1: function ContextAwareConverter_nmap_closure1(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.kop = t1;
      _.nvop = t2;
      _.K = t3;
      _.V = t4;
    },
    ContextAwareConverter_nmap__closure: function ContextAwareConverter_nmap__closure(t0, t1, t2, t3) {
      var _ = this;
      _.kop = t0;
      _.nvop = t1;
      _.K = t2;
      _.V = t3;
    },
    Converter_identity(x, $T) {
      return $T._is(x) ? x : A.throwExpression(A.WorkerException$("TypeError: " + J.get$runtimeType$(x).toString$0(0) + " is not a subtype of " + A.createRuntimeType($T).toString$0(0), null, null));
    },
    Converter__castList(x, $T) {
      var t1;
      if ($T._eval$1("List<0>")._is(x))
        t1 = x;
      else if (type$.List_dynamic._is(x))
        t1 = J.cast$1$0$ax(x, $T);
      else {
        t1 = J.cast$1$0$ax(type$.Iterable_dynamic._as(x), $T);
        t1 = t1.toList$0(t1);
      }
      return t1;
    },
    Converter__mapList(op, $T) {
      return new A.Converter__mapList_closure(op, $T);
    },
    Converter__castSet(x, $T) {
      var t1;
      if ($T._eval$1("Set<0>")._is(x))
        t1 = x;
      else if (type$.Set_dynamic._is(x))
        t1 = x.cast$1$0(0, $T);
      else {
        t1 = J.cast$1$0$ax(type$.Iterable_dynamic._as(x), $T);
        t1 = t1.toSet$0(t1);
      }
      return t1;
    },
    Converter__mapSet(op, $T) {
      return new A.Converter__mapSet_closure(op, $T);
    },
    Converter__castMap(x, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("Map<1,2>")._is(x) ? x : type$.Map_dynamic_dynamic._as(x).cast$2$0(0, $K, $V);
    },
    Converter__mapMap(kop, vop, $K, $V) {
      return new A.Converter__mapMap_closure(kop, vop, $K, $V);
    },
    Converter_allowNull(op, $T) {
      return J.$eq$(op, A.instantiate1(A.converter_Converter_identity$closure(), $T)) ? A.instantiate1(A.converter_Converter_identity$closure(), $T._eval$1("0?")) : new A.Converter_allowNull_closure(op, $T);
    },
    Converter0: function Converter0() {
    },
    Converter__mapList_closure: function Converter__mapList_closure(t0, t1) {
      this.op = t0;
      this.T = t1;
    },
    Converter__mapSet_closure: function Converter__mapSet_closure(t0, t1) {
      this.op = t0;
      this.T = t1;
    },
    Converter__mapMap_closure: function Converter__mapMap_closure(t0, t1, t2, t3) {
      var _ = this;
      _.kop = t0;
      _.vop = t1;
      _.K = t2;
      _.V = t3;
    },
    Converter__mapMap__closure: function Converter__mapMap__closure(t0, t1, t2, t3) {
      var _ = this;
      _.kop = t0;
      _.vop = t1;
      _.K = t2;
      _.V = t3;
    },
    Converter_allowNull_closure: function Converter_allowNull_closure(t0, t1) {
      this.op = t0;
      this.T = t1;
    },
    _ListError_noElement() {
      return new A.StateError("No element");
    },
    _ListError_tooMany() {
      return new A.StateError("Too many elements");
    },
    LazyInPlaceList: function LazyInPlaceList(t0, t1, t2) {
      this._lazy_in_place_list$_data = t0;
      this._cast = t1;
      this.$ti = t2;
    },
    LazyInPlaceList_retainWhere_closure: function LazyInPlaceList_retainWhere_closure(t0, t1) {
      this.$this = t0;
      this.test = t1;
    },
    LazyInPlaceList_sort_closure: function LazyInPlaceList_sort_closure(t0, t1) {
      this.$this = t0;
      this.compare = t1;
    },
    LazyInPlaceMap: function LazyInPlaceMap(t0, t1, t2) {
      this._lazy_in_place_map$_data = t0;
      this._vcast = t1;
      this.$ti = t2;
    },
    LazyInPlaceMap_entries_closure: function LazyInPlaceMap_entries_closure(t0) {
      this.$this = t0;
    },
    LazyInPlaceMap_values_closure: function LazyInPlaceMap_values_closure(t0) {
      this.$this = t0;
    },
    LazyInPlaceMap_containsValue_closure: function LazyInPlaceMap_containsValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    LazyInPlaceMap_update_closure: function LazyInPlaceMap_update_closure(t0) {
      this.$this = t0;
    },
    NumConverter__toInt(x) {
      var z;
      A._asNum(x);
      if (A._isInt(x) && isFinite(x))
        return x;
      if (!isFinite(x))
        return A._asInt(0 / 0);
      z = B.JSNumber_methods.toInt$0(x);
      if (x - z !== 0)
        return A._asInt(0 / 0);
      return z;
    },
    NumConverter__toDbl(x) {
      return A._asNum(x);
    },
    NumConverter: function NumConverter() {
    },
    SerializationContext: function SerializationContext(t0) {
      this._cache = t0;
    },
    ExceptionManager: function ExceptionManager(t0) {
      this._deserializers = t0;
    },
    SquadronCanceledException$(tokenId, message, stackTrace) {
      var t1 = new A.SquadronCanceledException(tokenId, message, stackTrace);
      t1.SquadronException$init$2(message, stackTrace);
      return t1;
    },
    SquadronCanceledException_SquadronCanceledException$from(tokenId, ex, stackTrace) {
      if (type$.TimeoutCanceledException._is(ex))
        return A.SquadronTimeoutException$(tokenId, ex.get$message(), ex.get$duration(), ex.get$stackTrace());
      else if (type$.CanceledExceptions._is(ex))
        return A.SquadronCanceledExceptions$(tokenId, J.map$1$1$ax(ex.get$innerExceptions(), new A.SquadronCanceledException_SquadronCanceledException$from_closure(tokenId), type$.SquadronCanceledException));
      else
        return A.SquadronCanceledException$(tokenId, ex.get$message(), ex.get$stackTrace());
    },
    SquadronCanceledExceptionExt_deserialize(props) {
      var t1;
      type$.nullable_List_dynamic._as(props);
      if (props == null)
        return null;
      t1 = J.getInterceptor$asx(props);
      switch (t1.$index(props, 0)) {
        case "$C":
          return A.SquadronCanceledException$(A._asString(t1.$index(props, 1)), A._asString(t1.$index(props, 2)), A.SquadronException_loadStackTrace(A._asStringQ(t1.$index(props, 3))));
        case "$C*":
          return A.SquadronCanceledExceptionsExt_deserialize(props);
        case "$T":
          return A.SquadronTimeoutExceptionExt_deserialize(props);
        default:
          return null;
      }
    },
    SquadronCanceledException: function SquadronCanceledException(t0, t1, t2) {
      this.tokenId = t0;
      this.message = t1;
      this._squadron_exception$_stackTrace = t2;
    },
    SquadronCanceledException_SquadronCanceledException$from_closure: function SquadronCanceledException_SquadronCanceledException$from_closure(t0) {
      this.tokenId = t0;
    },
    SquadronCanceledExceptions$(tokenId, exceptions) {
      var t1 = new A.SquadronCanceledExceptions(exceptions.toList$0(exceptions), tokenId, "", null);
      t1.SquadronException$init$2("", null);
      return t1;
    },
    SquadronCanceledExceptionsExt_deserialize(props) {
      var t1;
      type$.nullable_List_dynamic._as(props);
      if (props == null)
        return null;
      t1 = J.getInterceptor$asx(props);
      if (!J.$eq$(t1.$index(props, 0), "$C*"))
        return null;
      return A.SquadronCanceledExceptions$(A._asString(t1.$index(props, 1)), type$.Iterable_SquadronCanceledException._as(J.map$1$ax(t1.$index(props, 2), A.squadron_canceled_exception__SquadronCanceledExceptionExt_deserialize$closure())));
    },
    SquadronCanceledExceptions: function SquadronCanceledExceptions(t0, t1, t2, t3) {
      var _ = this;
      _._exceptions = t0;
      _.tokenId = t1;
      _.message = t2;
      _._squadron_exception$_stackTrace = t3;
    },
    SquadronCanceledExceptions_message_closure: function SquadronCanceledExceptions_message_closure() {
    },
    SquadronCanceledExceptions_serialize_closure: function SquadronCanceledExceptions_serialize_closure() {
    },
    SquadronError$_(message, stackTrace, command) {
      var t1 = new A.SquadronError(command, message, stackTrace);
      t1.SquadronException$init$2(message, stackTrace);
      return t1;
    },
    SquadronErrorImpl_deserialize(exceptionInfo) {
      var t1;
      type$.List_dynamic._as(exceptionInfo);
      t1 = J.getInterceptor$asx(exceptionInfo);
      return J.$eq$(t1.$index(exceptionInfo, 0), "$!") ? A.SquadronError$_(A._asString(t1.$index(exceptionInfo, 1)), A.SquadronException_loadStackTrace(A._asStringQ(t1.$index(exceptionInfo, 2))), A._asIntQ(t1.$index(exceptionInfo, 3))) : null;
    },
    SquadronError: function SquadronError(t0, t1, t2) {
      this._command = t0;
      this.message = t1;
      this._squadron_exception$_stackTrace = t2;
    },
    SquadronException_from(error, stackTrace, command) {
      var t1;
      if (error instanceof A.WorkerException) {
        if (command != null)
          error._worker_exception$_command = command;
        return error;
      } else if (type$.SquadronException._is(error))
        return error;
      else if (type$.CanceledException._is(error))
        return A.SquadronCanceledException_SquadronCanceledException$from("", error, null);
      else if (type$.TimeoutException._is(error)) {
        t1 = error.get$message();
        return A.SquadronTimeoutException$("", t1, error.get$duration(), null);
      } else
        return A.WorkerException$(J.toString$0$(error), stackTrace, command);
    },
    SquadronException_loadStackTrace(stackTrace) {
      var exception;
      if (stackTrace == null)
        return null;
      try {
        return new A._StringStackTrace(stackTrace);
      } catch (exception) {
        return null;
      }
    },
    SquadronException: function SquadronException() {
    },
    SquadronTimeoutException$(tokenId, message, duration, stackTrace) {
      var t1 = new A.SquadronTimeoutException(duration, tokenId, message, stackTrace);
      t1.SquadronException$init$2(message, stackTrace);
      return t1;
    },
    SquadronTimeoutExceptionExt_deserialize(props) {
      var t1, t2, microSecs, t3, t4, _null = null;
      type$.nullable_List_dynamic._as(props);
      if (props == null)
        return _null;
      t1 = J.getInterceptor$asx(props);
      if (!J.$eq$(t1.$index(props, 0), "$T"))
        return _null;
      t2 = A._asNumQ(t1.$index(props, 4));
      microSecs = t2 == null ? _null : B.JSNumber_methods.toInt$0(t2);
      t2 = A._asString(t1.$index(props, 1));
      t3 = A._asString(t1.$index(props, 2));
      t4 = microSecs == null ? _null : A.Duration$(0, 0, microSecs, 0, 0);
      return A.SquadronTimeoutException$(t2, t3, t4, A.SquadronException_loadStackTrace(A._asStringQ(t1.$index(props, 3))));
    },
    SquadronTimeoutException: function SquadronTimeoutException(t0, t1, t2, t3) {
      var _ = this;
      _.duration = t0;
      _.tokenId = t1;
      _.message = t2;
      _._squadron_exception$_stackTrace = t3;
    },
    TaskCanceledExceptionExt_deserialize(props) {
      var t1;
      type$.nullable_List_dynamic._as(props);
      if (props == null)
        return null;
      t1 = J.getInterceptor$asx(props);
      if (!J.$eq$(t1.$index(props, 0), "$C1"))
        return null;
      t1 = A._asStringQ(t1.$index(props, 1));
      return new A.TaskCanceledException(t1 == null ? "Task canceled" : t1);
    },
    TaskCanceledException: function TaskCanceledException(t0) {
      this.message = t0;
    },
    TaskTerminatedExceptionExt_deserialize(props) {
      var t1;
      type$.nullable_List_dynamic._as(props);
      if (props == null)
        return null;
      t1 = J.getInterceptor$asx(props);
      if (!J.$eq$(t1.$index(props, 0), "$K"))
        return null;
      return new A.TaskTerminatedException(A._asString(t1.$index(props, 1)), A.SquadronException_loadStackTrace(A._asStringQ(t1.$index(props, 2))));
    },
    TaskTerminatedException: function TaskTerminatedException(t0, t1) {
      this.message = t0;
      this.stackTrace = t1;
    },
    WorkerException$(message, stackTrace, command) {
      var t1 = new A.WorkerException(command, message, stackTrace);
      t1.SquadronException$init$2(message, stackTrace);
      return t1;
    },
    WorkerExceptionImpl_deserialize(data) {
      var t1, t2, t3;
      type$.List_dynamic._as(data);
      t1 = J.getInterceptor$asx(data);
      if (J.$eq$(t1.$index(data, 0), "$#")) {
        t2 = A._asString(t1.$index(data, 1));
        t3 = A.SquadronException_loadStackTrace(A._asStringQ(t1.$index(data, 2)));
        t1 = A._asNumQ(t1.$index(data, 3));
        t1 = A.WorkerException$(t2, t3, t1 == null ? null : B.JSNumber_methods.toInt$0(t1));
      } else
        t1 = null;
      return t1;
    },
    WorkerException: function WorkerException(t0, t1, t2) {
      this._worker_exception$_command = t0;
      this.message = t1;
      this._squadron_exception$_stackTrace = t2;
    },
    GenericMarshaler: function GenericMarshaler() {
    },
    ConverterExt_get_converter(_this) {
      var t1 = _this._marshaling_context$_converter;
      return t1;
    },
    MarshalingContext: function MarshalingContext(t0, t1) {
      this._marshaling_context$_converter = t0;
      this._objects = t1;
    },
    SquadronMarshaler: function SquadronMarshaler() {
    },
    PoolWorker_compareCapacity(a, b) {
      var t2,
        t1 = type$.PoolWorker_Worker;
      t1._as(a);
      t1._as(b);
      t1 = a._capacity;
      t2 = b._capacity;
      if (t1 !== t2)
        return B.JSInt_methods.compareTo$1(t1, t2);
      t1 = a._lastStart;
      if (t1 == null)
        return -1;
      t2 = b._lastStart;
      if (t2 == null)
        return 1;
      return B.JSInt_methods.compareTo$1(t2, t1);
    },
    PoolWorker_getStats(w) {
      return type$.PoolWorker_Worker._as(w).worker.get$_stats().get$snapshot();
    },
    PoolWorker: function PoolWorker(t0, t1, t2, t3) {
      var _ = this;
      _.worker = t0;
      _.__pool_worker$_maxWorkload = t1;
      _._lastStart = null;
      _._capacity = t2;
      _.$ti = t3;
    },
    PoolWorker_run_closure: function PoolWorker_run_closure(t0) {
      this.$this = t0;
    },
    WorkerStreamTask$(_producer, counter, $T, $W) {
      var t1 = $.Zone__current;
      A.microsecTimeStamp();
      t1 = new A.WorkerStreamTask(_producer, new A._AsyncCompleter(new A._Future(t1, $W._eval$1("_Future<0?>")), $W._eval$1("_AsyncCompleter<0?>")), counter, new A._AsyncCompleter(new A._Future(t1, type$._Future_void), type$._AsyncCompleter_void), $T._eval$1("@<0>")._bind$1($W)._eval$1("WorkerStreamTask<1,2>"));
      t1.WorkerStreamTask$2(_producer, counter, $T, $W);
      return t1;
    },
    WorkerStreamTask: function WorkerStreamTask(t0, t1, t2, t3, t4) {
      var _ = this;
      _._producer = t0;
      _.__worker_stream_task$_worker = t1;
      _.__WorkerStreamTask__controller_F = $;
      _._canceled = _._finished = _._scheduled = null;
      _._counter = t2;
      _._done = t3;
      _._canceledException = null;
      _.$ti = t4;
    },
    WorkerStreamTask_closure: function WorkerStreamTask_closure(t0) {
      this.$this = t0;
    },
    WorkerStreamTask_execute_closure: function WorkerStreamTask_execute_closure(t0) {
      this.$this = t0;
    },
    WorkerStreamTask_execute_closure0: function WorkerStreamTask_execute_closure0() {
    },
    WorkerTask: function WorkerTask() {
    },
    WorkerValueTask: function WorkerValueTask(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._computer = t0;
      _._result = t1;
      _.__worker_value_task$_done = t2;
      _._canceled = _._finished = _._scheduled = null;
      _._counter = t3;
      _._done = t4;
      _._canceledException = null;
      _.$ti = t5;
    },
    WorkerPool: function WorkerPool() {
    },
    WorkerPool__provisionWorkers_closure: function WorkerPool__provisionWorkers_closure(t0) {
      this.$this = t0;
    },
    WorkerPool__provisionWorkers_closure0: function WorkerPool__provisionWorkers_closure0(t0, t1) {
      this.$this = t0;
      this.poolWorker = t1;
    },
    WorkerPool__provisionWorkers_closure1: function WorkerPool__provisionWorkers_closure1(t0, t1) {
      this.poolWorker = t0;
      this.errors = t1;
    },
    WorkerPool__provisionWorkers_closure2: function WorkerPool__provisionWorkers_closure2(t0, t1, t2) {
      this.$this = t0;
      this.errors = t1;
      this.tasks = t2;
    },
    WorkerPool__provisionWorkers__closure: function WorkerPool__provisionWorkers__closure() {
    },
    WorkerPool__provisionWorkers__closure0: function WorkerPool__provisionWorkers__closure0() {
    },
    WorkerPool__provisionWorkers__closure1: function WorkerPool__provisionWorkers__closure1() {
    },
    WorkerPool__provisionWorkers__closure2: function WorkerPool__provisionWorkers__closure2() {
    },
    WorkerPool_stop_closure: function WorkerPool_stop_closure(t0, t1) {
      this.$this = t0;
      this.predicate = t1;
    },
    WorkerPool___schedule_closure: function WorkerPool___schedule_closure(t0) {
      this.$this = t0;
    },
    WorkerPool___schedule_closure0: function WorkerPool___schedule_closure0(t0) {
      this.$this = t0;
    },
    WorkerPool__dispatchTasks_closure: function WorkerPool__dispatchTasks_closure(t0, t1) {
      this.$this = t0;
      this.task = t1;
    },
    WorkerPool_cancel_closure: function WorkerPool_cancel_closure(t0) {
      this.task = t0;
    },
    _WorkerPool_Object_Releasable: function _WorkerPool_Object_Releasable() {
    },
    SquadronPlatformType_tryParse(label) {
      if (label === "JavaScript")
        return B.SquadronPlatformType_JavaScript_js;
      if (label === "Web Assembly")
        return B.SquadronPlatformType_Dqj;
      if (label === "Dart VM")
        return B.SquadronPlatformType_Rhi;
      if (label === "Unknown")
        return B.SquadronPlatformType_Unknown_unknown;
      return null;
    },
    SquadronPlatformType: function SquadronPlatformType(t0, t1) {
      this.label = t0;
      this._name = t1;
    },
    PerfCounter$($name) {
      return new A.PerfCounter($name);
    },
    PerfCounterImpl_update(_this, timeInMicroseconds, success) {
      if (timeInMicroseconds > _this._maxTimeInMicroseconds)
        _this._maxTimeInMicroseconds = timeInMicroseconds;
      _this._totalTimeInMicroseconds += timeInMicroseconds;
      if (success)
        ++_this._totalCount;
      else
        ++_this._perf_counter$_totalErrors;
    },
    PerfCounter: function PerfCounter(t0) {
      var _ = this;
      _.name = t0;
      _._perf_counter$_totalErrors = _._totalCount = _._totalTimeInMicroseconds = _._maxTimeInMicroseconds = 0;
    },
    PerfCounterSnapshot$(counter) {
      return new A.PerfCounterSnapshot(counter._totalTimeInMicroseconds, counter._totalCount, counter._perf_counter$_totalErrors);
    },
    PerfCounterSnapshot: function PerfCounterSnapshot(t0, t1, t2) {
      this.totalTimeInMicroseconds = t0;
      this.totalCount = t1;
      this.totalErrors = t2;
    },
    WorkerStat: function WorkerStat(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.timestamp = t0;
      _.isStopped = t1;
      _.workload = t2;
      _.maxWorkload = t3;
      _.totalWorkload = t4;
      _.totalErrors = t5;
      _.upTime = t6;
      _.idleTime = t7;
      _.activeConnections = t8;
    },
    CancelationTokenReference: function CancelationTokenReference(t0, t1, t2) {
      var _ = this;
      _.id = t0;
      _.__cancelation_token_ref$_exception = null;
      _._completer = t1;
      _._hasRef = t2;
      _._refCount = 0;
    },
    SquadronCancelationToken$_(token, id) {
      var t1 = new A.SquadronCancelationToken(id, token, new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
      if (token != null)
        token.get$onCanceled().then$1$1(t1.get$_checkToken(), type$.void);
      return t1;
    },
    SquadronCancelationToken_deserialize(props) {
      var t1, id, ex, token;
      if (props == null)
        return null;
      t1 = J.getInterceptor$asx(props);
      id = t1.$index(props, 0);
      ex = A.SquadronCanceledExceptionExt_deserialize(type$.nullable_List_dynamic._as(t1.$index(props, 1)));
      token = A.SquadronCancelationToken$_(null, A._asString(id));
      if (ex != null) {
        token.__squadron_cancelation_token$_exception = ex;
        token.__squadron_cancelation_token$_completer.complete$1(ex);
      }
      return token;
    },
    SquadronCancelationTokenExt_wrap(_this) {
      var token,
        t1 = $.TokenId__id + 1;
      $.TokenId__id = t1;
      token = A.SquadronCancelationToken$_(_this, "" + t1 + "@" + $.$get$threadId());
      token._checkToken$0();
      return token;
    },
    SquadronCancelationToken: function SquadronCancelationToken(t0, t1, t2) {
      var _ = this;
      _.id = t0;
      _.token = t1;
      _.__squadron_cancelation_token$_exception = null;
      _.__squadron_cancelation_token$_completer = t2;
    },
    Worker: function Worker() {
    },
    Worker_send_closure: function Worker_send_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.squadronToken = t1;
      _.completer = t2;
      _.command = t3;
    },
    Worker_stream_closure: function Worker_stream_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.controller = t1;
      _.command = t2;
      _.squadronToken = t3;
    },
    Worker_stream_closure0: function Worker_stream_closure0(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.$this = t0;
      _.controller = t1;
      _.squadronToken = t2;
      _.command = t3;
      _.args = t4;
      _.inspectRequest = t5;
      _.inspectResponse = t6;
    },
    Worker_stream__closure: function Worker_stream__closure(t0, t1) {
      this.controller = t0;
      this.command = t1;
    },
    _Stats: function _Stats(t0, t1) {
      var _ = this;
      _._worker = t0;
      _._stopped = _._started = null;
      _._idle = t1;
      _._totalErrors = _._totalWorkload = _._maxWorkload = _._workload = 0;
    },
    _Worker_Object_Releasable: function _Worker_Object_Releasable() {
    },
    WorkerResponse_get_result(_this) {
      var t1 = J.getInterceptor$asx(_this),
        err = type$.nullable_SquadronException._as(t1.$index(_this, 2));
      if (err != null)
        throw A.wrapException(err);
      else
        return t1.$index(_this, 1);
    },
    WorkerResponseImpl_unwrapInPlace(_this, channel) {
      var t1, t2, t3, log, t4, t5, t6, t7, t8, _null = null;
      A.WorkerMessageImpl_unwrapTravelTime(_this);
      t1 = J.getInterceptor$asx(_this);
      t2 = type$.nullable_List_dynamic;
      t3 = t2._as(t1.$index(_this, 4));
      if (t3 == null)
        log = _null;
      else {
        t4 = J.getInterceptor$asx(t3);
        t5 = A._asNumQ(t4.$index(t3, 0));
        t5 = A._LogEventSerializationExt__getLevel(t5 == null ? _null : B.JSNumber_methods.toInt$0(t5));
        t6 = t4.$index(t3, 1);
        t7 = A._asNumQ(t4.$index(t3, 2));
        t7 = t7 == null ? _null : B.JSNumber_methods.toInt$0(t7);
        t7 = t7 == null ? _null : $.$get$_latestUPDEpoch()._addMicroseconds$1(A.Duration$(0, 0, t7, 0, 0)._duration);
        t8 = t4.$index(t3, 3);
        t3 = A.SquadronException_loadStackTrace(A._asStringQ(t4.$index(t3, 4)));
        log = new A.LogEvent(t5, t6, t8, t3, t7 == null ? new A.DateTime(Date.now(), 0, false) : t7);
      }
      if (log != null) {
        t1 = channel.get$logger();
        if (t1 != null) {
          t2 = log.level;
          t3 = log.message;
          t4 = log.time;
          t1.log$5$error$stackTrace$time(t2, t3, log.error, log.stackTrace, t4);
        }
        return false;
      } else {
        t1.$indexSet(_this, 2, channel.get$exceptionManager().deserialize$1(t2._as(t1.$index(_this, 2))));
        if (t1.$index(_this, 3) == null)
          t1.$indexSet(_this, 3, false);
        return true;
      }
    },
    WorkerResponseImpl_wrapInPlace(_this) {
      var t2,
        t1 = J.getInterceptor$asx(_this),
        result = t1.$index(_this, 1);
      if (type$.Iterable_dynamic._is(result) && !type$.List_dynamic._is(result))
        t1.$indexSet(_this, 1, J.toList$0$ax(result));
      t2 = type$.nullable_SquadronException._as(t1.$index(_this, 2));
      t1.$indexSet(_this, 2, t2 == null ? null : t2.serialize$0());
      return _this;
    },
    WorkerResponseImpl_from(data) {
      if (J.get$length$asx(data) !== 5)
        throw A.wrapException(A.SquadronError$_("Invalid worker response", null, null));
      return data;
    },
    _LogEventSerializationExt__getLevel(value) {
      if (value == null)
        return B.Level_2000_debug;
      return new A.WhereIterable(B.List_gu1, type$.bool_Function_Level._as(new A._LogEventSerializationExt__getLevel_closure(value)), type$.WhereIterable_Level).get$first(0);
    },
    _LogEventSerializationExt__getLevel_closure: function _LogEventSerializationExt__getLevel_closure(t0) {
      this.value = t0;
    },
    Chain_capture(callback, errorZone, when, $T) {
      var t1 = A.runZoned(callback, null, null, $T);
      return t1;
    },
    Chain_Chain$current() {
      var t1 = $.Zone__current,
        t2 = $.$get$_specKey(),
        t3 = type$.nullable_StackZoneSpecification;
      if (t3._as(t1.$index(0, t2)) != null) {
        t1 = t3._as($.Zone__current.$index(0, t2));
        t2 = t1._currentTrace$1(3);
        t1 = t1._currentNode;
        return new A._Node(A.Trace_Trace$from(t2), t1).toChain$0();
      }
      return new A.LazyChain(new A.Chain_Chain$current_closure(A.Chain_Chain$forTrace(A.StackTrace_current()), 0));
    },
    Chain_Chain$forTrace(trace) {
      var t1, t2, t3;
      if (type$.Chain._is(trace))
        return trace;
      t1 = $.Zone__current;
      t2 = $.$get$_specKey();
      t3 = type$.nullable_StackZoneSpecification;
      if (t3._as(t1.$index(0, t2)) != null)
        return t3._as($.Zone__current.$index(0, t2)).chainFor$1(trace);
      t1 = type$.Trace;
      if (t1._is(trace))
        return new A.Chain(A.List_List$unmodifiable(A._setArrayType([trace], type$.JSArray_Trace), t1));
      return new A.LazyChain(new A.Chain_Chain$forTrace_closure(trace));
    },
    Chain_Chain$parse(chain) {
      var t1, t2,
        _s51_ = string$.x3d_____;
      if (chain.length === 0)
        return new A.Chain(A.List_List$unmodifiable(A._setArrayType([], type$.JSArray_Trace), type$.Trace));
      t1 = $.$get$vmChainGap();
      if (B.JSString_methods.contains$1(chain, t1)) {
        t1 = B.JSString_methods.split$1(chain, t1);
        t2 = A._arrayInstanceType(t1);
        return new A.Chain(A.List_List$unmodifiable(new A.MappedIterable(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Chain_Chain$parse_closure()), t2._eval$1("WhereIterable<1>")), t2._eval$1("Trace(1)")._as(A.trace_Trace___parseVM_tearOff$closure()), t2._eval$1("MappedIterable<1,Trace>")), type$.Trace));
      }
      if (!B.JSString_methods.contains$1(chain, _s51_))
        return new A.Chain(A.List_List$unmodifiable(A._setArrayType([A.Trace_Trace$parse(chain)], type$.JSArray_Trace), type$.Trace));
      return new A.Chain(A.List_List$unmodifiable(new A.MappedListIterable(A._setArrayType(chain.split(_s51_), type$.JSArray_String), type$.Trace_Function_String._as(A.trace_Trace___parseFriendly_tearOff$closure()), type$.MappedListIterable_String_Trace), type$.Trace));
    },
    Chain: function Chain(t0) {
      this.traces = t0;
    },
    Chain_Chain$current_closure: function Chain_Chain$current_closure(t0, t1) {
      this.chain = t0;
      this.level = t1;
    },
    Chain_Chain$forTrace_closure: function Chain_Chain$forTrace_closure(t0) {
      this.trace = t0;
    },
    Chain_Chain$parse_closure: function Chain_Chain$parse_closure() {
    },
    Chain_foldFrames_closure: function Chain_foldFrames_closure(t0, t1) {
      this.predicate = t0;
      this.terse = t1;
    },
    Chain_foldFrames_closure0: function Chain_foldFrames_closure0(t0) {
      this.terse = t0;
    },
    Chain_toTrace_closure: function Chain_toTrace_closure() {
    },
    Chain_toString_closure0: function Chain_toString_closure0() {
    },
    Chain_toString__closure0: function Chain_toString__closure0() {
    },
    Chain_toString_closure: function Chain_toString_closure(t0) {
      this.longest = t0;
    },
    Chain_toString__closure: function Chain_toString__closure(t0) {
      this.longest = t0;
    },
    Frame___parseVM_tearOff(frame) {
      return A.Frame_Frame$parseVM(A._asString(frame));
    },
    Frame_Frame$parseVM(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseVM_closure(frame));
    },
    Frame___parseV8_tearOff(frame) {
      return A.Frame_Frame$parseV8(A._asString(frame));
    },
    Frame_Frame$parseV8(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseV8_closure(frame));
    },
    Frame_Frame$_parseFirefoxEval(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$_parseFirefoxEval_closure(frame));
    },
    Frame___parseFirefox_tearOff(frame) {
      return A.Frame_Frame$parseFirefox(A._asString(frame));
    },
    Frame_Frame$parseFirefox(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseFirefox_closure(frame));
    },
    Frame___parseFriendly_tearOff(frame) {
      return A.Frame_Frame$parseFriendly(A._asString(frame));
    },
    Frame_Frame$parseFriendly(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseFriendly_closure(frame));
    },
    Frame__uriOrPathToUri(uriOrPath) {
      if (B.JSString_methods.contains$1(uriOrPath, $.$get$Frame__uriRegExp()))
        return A.Uri_parse(uriOrPath);
      else if (B.JSString_methods.contains$1(uriOrPath, $.$get$Frame__windowsRegExp()))
        return A._Uri__Uri$file(uriOrPath, true);
      else if (B.JSString_methods.startsWith$1(uriOrPath, "/"))
        return A._Uri__Uri$file(uriOrPath, false);
      if (B.JSString_methods.contains$1(uriOrPath, "\\"))
        return $.$get$windows().toUri$1(uriOrPath);
      return A.Uri_parse(uriOrPath);
    },
    Frame__catchFormatException(text, body) {
      var t1, exception;
      try {
        t1 = body.call$0();
        return t1;
      } catch (exception) {
        if (type$.FormatException._is(A.unwrapException(exception)))
          return new A.UnparsedFrame(A._Uri__Uri(null, "unparsed", null, null), text);
        else
          throw exception;
      }
    },
    Frame: function Frame(t0, t1, t2, t3) {
      var _ = this;
      _.uri = t0;
      _.line = t1;
      _.column = t2;
      _.member = t3;
    },
    Frame_Frame$parseVM_closure: function Frame_Frame$parseVM_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseV8_closure: function Frame_Frame$parseV8_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseV8_closure_parseJsLocation: function Frame_Frame$parseV8_closure_parseJsLocation(t0) {
      this.frame = t0;
    },
    Frame_Frame$_parseFirefoxEval_closure: function Frame_Frame$_parseFirefoxEval_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseFirefox_closure: function Frame_Frame$parseFirefox_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseFriendly_closure: function Frame_Frame$parseFriendly_closure(t0) {
      this.frame = t0;
    },
    LazyChain: function LazyChain(t0) {
      this._thunk = t0;
      this.__LazyChain__chain_FI = $;
    },
    LazyChain_foldFrames_closure: function LazyChain_foldFrames_closure(t0, t1, t2) {
      this.$this = t0;
      this.predicate = t1;
      this.terse = t2;
    },
    LazyTrace: function LazyTrace(t0) {
      this._lazy_trace$_thunk = t0;
      this.__LazyTrace__trace_FI = $;
    },
    LazyTrace_foldFrames_closure: function LazyTrace_foldFrames_closure(t0, t1, t2) {
      this.$this = t0;
      this.predicate = t1;
      this.terse = t2;
    },
    StackZoneSpecification_chainFor_closure: function StackZoneSpecification_chainFor_closure(t0) {
      this._box_0 = t0;
    },
    StackZoneSpecification_chainFor_closure0: function StackZoneSpecification_chainFor_closure0(t0, t1) {
      this.$this = t0;
      this.original = t1;
    },
    StackZoneSpecification__currentTrace_closure: function StackZoneSpecification__currentTrace_closure(t0, t1, t2) {
      this.$this = t0;
      this.stackTrace = t1;
      this.level = t2;
    },
    _Node: function _Node(t0, t1) {
      this.trace = t0;
      this.previous = t1;
    },
    Trace_Trace$from(trace) {
      if (type$.Trace._is(trace))
        return trace;
      if (type$.Chain._is(trace))
        return trace.toTrace$0();
      return new A.LazyTrace(new A.Trace_Trace$from_closure(trace));
    },
    Trace_Trace$parse(trace) {
      var error, t1, exception;
      try {
        if (trace.length === 0) {
          t1 = A.Trace$(A._setArrayType([], type$.JSArray_Frame), null);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, $.$get$_v8Trace())) {
          t1 = A.Trace$parseV8(trace);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, "\tat ")) {
          t1 = A.Trace$parseJSCore(trace);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, $.$get$_firefoxSafariTrace()) || B.JSString_methods.contains$1(trace, $.$get$_firefoxEvalTrace())) {
          t1 = A.Trace$parseFirefox(trace);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, string$.x3d_____)) {
          t1 = A.Chain_Chain$parse(trace).toTrace$0();
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, $.$get$_friendlyTrace())) {
          t1 = A.Trace$parseFriendly(trace);
          return t1;
        }
        t1 = A.Trace$parseVM(trace);
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (type$.FormatException._is(t1)) {
          error = t1;
          throw A.wrapException(A.FormatException$(error.get$message() + "\nStack trace:\n" + trace, null, null));
        } else
          throw exception;
      }
    },
    Trace___parseVM_tearOff(trace) {
      return A.Trace$parseVM(A._asString(trace));
    },
    Trace$parseVM(trace) {
      var t1 = A.List_List$unmodifiable(A.Trace__parseVM(trace), type$.Frame);
      return new A.Trace(t1, new A._StringStackTrace(trace));
    },
    Trace__parseVM(trace) {
      var $frames,
        t1 = B.JSString_methods.trim$0(trace),
        t2 = $.$get$vmChainGap(),
        t3 = type$.WhereIterable_String,
        lines = new A.WhereIterable(A._setArrayType(A.stringReplaceAllUnchecked(t1, t2, "").split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace__parseVM_closure()), t3);
      if (!lines.get$iterator(0).moveNext$0())
        return A._setArrayType([], type$.JSArray_Frame);
      t1 = A.TakeIterable_TakeIterable(lines, lines.get$length(0) - 1, t3._eval$1("Iterable.E"));
      t2 = A._instanceType(t1);
      t2 = A.MappedIterable_MappedIterable(t1, t2._eval$1("Frame(Iterable.E)")._as(A.frame_Frame___parseVM_tearOff$closure()), t2._eval$1("Iterable.E"), type$.Frame);
      $frames = A.List_List$_of(t2, A._instanceType(t2)._eval$1("Iterable.E"));
      if (!B.JSString_methods.endsWith$1(lines.get$last(0), ".da"))
        B.JSArray_methods.add$1($frames, A.Frame_Frame$parseVM(lines.get$last(0)));
      return $frames;
    },
    Trace$parseV8(trace) {
      var t2, t3,
        t1 = A.SubListIterable$(A._setArrayType(trace.split("\n"), type$.JSArray_String), 1, null, type$.String);
      t1 = t1.super$Iterable$skipWhile(0, t1.$ti._eval$1("bool(ListIterable.E)")._as(new A.Trace$parseV8_closure()));
      t2 = type$.Frame;
      t3 = t1.$ti;
      t2 = A.List_List$unmodifiable(A.MappedIterable_MappedIterable(t1, t3._eval$1("Frame(Iterable.E)")._as(A.frame_Frame___parseV8_tearOff$closure()), t3._eval$1("Iterable.E"), t2), t2);
      return new A.Trace(t2, new A._StringStackTrace(trace));
    },
    Trace$parseJSCore(trace) {
      var t1 = A.List_List$unmodifiable(new A.MappedIterable(new A.WhereIterable(A._setArrayType(trace.split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace$parseJSCore_closure()), type$.WhereIterable_String), type$.Frame_Function_String._as(A.frame_Frame___parseV8_tearOff$closure()), type$.MappedIterable_String_Frame), type$.Frame);
      return new A.Trace(t1, new A._StringStackTrace(trace));
    },
    Trace$parseFirefox(trace) {
      var t1 = A.List_List$unmodifiable(new A.MappedIterable(new A.WhereIterable(A._setArrayType(B.JSString_methods.trim$0(trace).split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace$parseFirefox_closure()), type$.WhereIterable_String), type$.Frame_Function_String._as(A.frame_Frame___parseFirefox_tearOff$closure()), type$.MappedIterable_String_Frame), type$.Frame);
      return new A.Trace(t1, new A._StringStackTrace(trace));
    },
    Trace___parseFriendly_tearOff(trace) {
      return A.Trace$parseFriendly(A._asString(trace));
    },
    Trace$parseFriendly(trace) {
      var t1 = trace.length === 0 ? A._setArrayType([], type$.JSArray_Frame) : new A.MappedIterable(new A.WhereIterable(A._setArrayType(B.JSString_methods.trim$0(trace).split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace$parseFriendly_closure()), type$.WhereIterable_String), type$.Frame_Function_String._as(A.frame_Frame___parseFriendly_tearOff$closure()), type$.MappedIterable_String_Frame);
      t1 = A.List_List$unmodifiable(t1, type$.Frame);
      return new A.Trace(t1, new A._StringStackTrace(trace));
    },
    Trace$($frames, original) {
      var t1 = A.List_List$unmodifiable($frames, type$.Frame);
      return new A.Trace(t1, new A._StringStackTrace(original == null ? "" : original));
    },
    Trace: function Trace(t0, t1) {
      this.frames = t0;
      this.original = t1;
    },
    Trace_Trace$from_closure: function Trace_Trace$from_closure(t0) {
      this.trace = t0;
    },
    Trace__parseVM_closure: function Trace__parseVM_closure() {
    },
    Trace$parseV8_closure: function Trace$parseV8_closure() {
    },
    Trace$parseJSCore_closure: function Trace$parseJSCore_closure() {
    },
    Trace$parseFirefox_closure: function Trace$parseFirefox_closure() {
    },
    Trace$parseFriendly_closure: function Trace$parseFriendly_closure() {
    },
    Trace_foldFrames_closure: function Trace_foldFrames_closure(t0) {
      this.oldPredicate = t0;
    },
    Trace_foldFrames_closure0: function Trace_foldFrames_closure0(t0) {
      this._box_0 = t0;
    },
    Trace_toString_closure0: function Trace_toString_closure0() {
    },
    Trace_toString_closure: function Trace_toString_closure(t0) {
      this.longest = t0;
    },
    UnparsedFrame: function UnparsedFrame(t0, t1) {
      this.uri = t0;
      this.member = t1;
    },
    TestHandle_current() {
      var t1,
        invoker = type$.nullable_Invoker._as($.Zone__current.$index(0, B.Symbol_gK7));
      if (invoker == null)
        throw A.wrapException(new A.OutsideTestException());
      t1 = type$.nullable_StackTraceFormatter._as($.Zone__current.$index(0, $.$get$_currentKey()));
      return new A.TestHandle(invoker, t1 == null ? $.$get$TestHandle__defaultFormatter() : t1);
    },
    TestHandle: function TestHandle(t0, t1) {
      this._invoker = t0;
      this._stackTraceFormatter = t1;
    },
    OutstandingWork: function OutstandingWork(t0, t1) {
      this._invoker = t0;
      this._hooks$_zone = t1;
      this._isComplete = false;
    },
    OutsideTestException: function OutsideTestException() {
    },
    ClosedException: function ClosedException() {
    },
    Compiler: function Compiler(t0, t1, t2) {
      this.name = t0;
      this.identifier = t1;
      this._name = t2;
    },
    Timeout: function Timeout(t0, t1) {
      this.duration = t0;
      this.scaleFactor = t1;
    },
    Declarer$_(_parent, _name, _metadata, _platformVariables, _collectTraces, _trace, _location, _noRetry, _fullTestName, _seenNames, _isStandalone) {
      var t1 = type$.JSArray_of_dynamic_Function,
        t2 = type$.JSArray_GroupEntry;
      return new A.Declarer(_parent, _name, _metadata, _platformVariables, _trace, _location, false, false, A._setArrayType([], t1), A._setArrayType([], t1), A._setArrayType([], t1), A._setArrayType([], type$.JSArray_of_void_Function), A._setArrayType([], t2), A._setArrayType([], t2), _fullTestName, _seenNames, true);
    },
    Declarer: function Declarer(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16) {
      var _ = this;
      _._parent = t0;
      _._declarer$_name = t1;
      _._metadata = t2;
      _._platformVariables = t3;
      _._declarer$_trace = t4;
      _._location = t5;
      _._collectTraces = t6;
      _._noRetry = t7;
      _._setUps = t8;
      _._tearDowns = t9;
      _._setUpAlls = t10;
      _._tearDownAlls = t11;
      _._entries = t12;
      _._built = false;
      _._soloEntries = t13;
      _._fullTestName = t14;
      _._seenNames = t15;
      _._isStandalone = t16;
    },
    Declarer_test_closure: function Declarer_test_closure(t0, t1) {
      this.$this = t0;
      this.body = t1;
    },
    Declarer_test__closure: function Declarer_test__closure(t0, t1) {
      this.$this = t0;
      this.body = t1;
    },
    Declarer_group_closure: function Declarer_group_closure(t0) {
      this.body = t0;
    },
    Declarer_build_closure: function Declarer_build_closure(t0) {
      this.$this = t0;
    },
    Declarer_build__closure: function Declarer_build__closure() {
    },
    Declarer__runSetUps_closure: function Declarer__runSetUps_closure() {
    },
    Declarer__tearDownAll_closure: function Declarer__tearDownAll_closure(t0) {
      this.$this = t0;
    },
    Declarer__tearDownAll__closure: function Declarer__tearDownAll__closure(t0) {
      this.$this = t0;
    },
    DuplicateTestNameException: function DuplicateTestNameException(t0) {
      this.name = t0;
    },
    Group$($name, entries, $location, metadata, setUpAll, tearDownAll, trace) {
      var t1 = A.List_List$unmodifiable(entries, type$.GroupEntry);
      t1 = new A.Group($name, metadata, trace, $location, t1, setUpAll, tearDownAll);
      t1.Group$7$location$metadata$setUpAll$tearDownAll$trace($name, entries, $location, metadata, setUpAll, tearDownAll, trace);
      return t1;
    },
    Group: function Group(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.name = t0;
      _.metadata = t1;
      _.trace = t2;
      _.location = t3;
      _.entries = t4;
      _.setUpAll = t5;
      _.tearDownAll = t6;
    },
    Group_forPlatform_closure: function Group_forPlatform_closure(t0) {
      this.platform = t0;
    },
    Group__map_closure: function Group__map_closure(t0) {
      this.callback = t0;
    },
    Invoker_guard(callback, $T) {
      var _null = null;
      return A.runZoned(callback, new A._ZoneSpecification(new A.Invoker_guard_closure(), _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null), _null, $T._eval$1("0?"));
    },
    Invoker$_(suite, test, groups, guarded) {
      var t1 = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void),
        t2 = new A.Invoker(guarded, new A.Object(), t1, A._setArrayType([], type$.JSArray_Zone), new A.Object(), A._setArrayType([], type$.JSArray_of_void_Function), A._setArrayType([], type$.JSArray_String));
      t1 = A.LiveTestController$(suite, test, t2.get$_onRun(), type$.void_Function_$opt_void._as(t1.get$complete()), groups);
      t2.__Invoker__controller_F !== $ && A.throwLateFieldAI("_controller");
      t2.__Invoker__controller_F = t1;
      return t2;
    },
    LocalTest: function LocalTest(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.name = t0;
      _.metadata = t1;
      _.trace = t2;
      _.location = t3;
      _.isScaffoldAll = t4;
      _._body = t5;
      _._guarded = t6;
    },
    Invoker: function Invoker(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.__Invoker__controller_F = $;
      _._guarded = t0;
      _._forceOpenForTearDownKey = t1;
      _._onCloseCompleter = t2;
      _._outstandingCallbackZones = t3;
      _._counterKey = t4;
      _._runCount = 0;
      _._timeoutTimer = null;
      _._invoker$_tearDowns = t5;
      _._printsOnFailure = t6;
    },
    Invoker_guard_closure: function Invoker_guard_closure() {
    },
    Invoker_guard__closure: function Invoker_guard__closure(t0, t1, t2, t3) {
      var _ = this;
      _.invoker = t0;
      _.zone = t1;
      _.error = t2;
      _.stackTrace = t3;
    },
    Invoker_runTearDowns_closure: function Invoker_runTearDowns_closure(t0, t1) {
      this.$this = t0;
      this.tearDowns = t1;
    },
    Invoker_runTearDowns__closure: function Invoker_runTearDowns__closure(t0, t1) {
      this.tearDowns = t0;
      this.completer = t1;
    },
    Invoker_runTearDowns__closure0: function Invoker_runTearDowns__closure0(t0) {
      this.$this = t0;
    },
    Invoker__waitForOutstandingCallbacks_closure: function Invoker__waitForOutstandingCallbacks_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.fn = t2;
      _.counter = t3;
    },
    Invoker__waitForOutstandingCallbacks_closure0: function Invoker__waitForOutstandingCallbacks_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Invoker_heartbeat_message: function Invoker_heartbeat_message(t0) {
      this.timeout = t0;
    },
    Invoker_heartbeat_closure: function Invoker_heartbeat_closure(t0, t1, t2) {
      this.$this = t0;
      this.message = t1;
      this.timeout = t2;
    },
    Invoker_heartbeat__closure: function Invoker_heartbeat__closure(t0, t1, t2) {
      this.$this = t0;
      this.message = t1;
      this.timeout = t2;
    },
    Invoker__handleError_closure: function Invoker__handleError_closure(t0) {
      this._box_0 = t0;
    },
    Invoker__onRun_closure: function Invoker__onRun_closure(t0) {
      this.$this = t0;
    },
    Invoker__onRun__closure: function Invoker__onRun__closure(t0) {
      this.$this = t0;
    },
    Invoker__onRun___closure: function Invoker__onRun___closure(t0) {
      this.$this = t0;
    },
    Invoker__onRun____closure: function Invoker__onRun____closure() {
    },
    Invoker__onRun____closure0: function Invoker__onRun____closure0(t0) {
      this.$this = t0;
    },
    Invoker__onRun___closure0: function Invoker__onRun___closure0(t0) {
      this.$this = t0;
    },
    _AsyncCounter: function _AsyncCounter(t0) {
      this._count = 1;
      this._invoker$_completer = t0;
    },
    LiveTest: function LiveTest() {
    },
    LiveTestController$(suite, test, _onRun, _onClose, groups) {
      var _null = null,
        t1 = A._setArrayType([], type$.JSArray_AsyncError),
        t2 = $.Zone__current,
        t3 = A.List_List$unmodifiable(groups, type$.Group);
      return new A.LiveTestController(suite, t3, test, _onRun, _onClose, t1, B.State_Status_0_Result_0, new A._SyncBroadcastStreamController(_null, _null, type$._SyncBroadcastStreamController_State), new A._SyncBroadcastStreamController(_null, _null, type$._SyncBroadcastStreamController_AsyncError), new A._SyncBroadcastStreamController(_null, _null, type$._SyncBroadcastStreamController_Message), new A._AsyncCompleter(new A._Future(t2, type$._Future_void), type$._AsyncCompleter_void));
    },
    LiveTestController: function LiveTestController(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.suite = t0;
      _.groups = t1;
      _.test = t2;
      _._live_test_controller$_onRun = t3;
      _._live_test_controller$_onClose = t4;
      _._errors = t5;
      _.state = t6;
      _._onStateChange = t7;
      _._live_test_controller$_onError = t8;
      _._onMessage = t9;
      _.completer = t10;
      _._live_test_controller$_runCalled = false;
    },
    Message: function Message(t0, t1) {
      this.type = t0;
      this.text = t1;
    },
    MessageType: function MessageType(t0) {
      this.name = t0;
    },
    Metadata__parseOnPlatform(onPlatform) {
      return A.LinkedHashMap_LinkedHashMap$_empty(type$.PlatformSelector, type$.Metadata);
    },
    Metadata__parseTags(tags) {
      return A.LinkedHashSet_LinkedHashSet$_empty(type$.String);
    },
    Metadata_Metadata(chainStackTraces, forTag, languageVersionComment, onPlatform, retry, skip, skipReason, tags, testOn, timeout, verboseTrace) {
      var t2, t3, empty, t4, merged, _null = null, t1 = {};
      t1.tags = tags;
      t1.forTag = forTag;
      t2 = new A.Metadata_Metadata_unresolved(t1, testOn, timeout, skip, verboseTrace, chainStackTraces, retry, skipReason, onPlatform, languageVersionComment);
      if (forTag == null || tags == null)
        return t2.call$0();
      t1.tags = A.LinkedHashSet_LinkedHashSet$from(tags, type$.String);
      t3 = type$.Metadata;
      t1.forTag = A.LinkedHashMap_LinkedHashMap$from(t1.forTag, type$.BooleanSelector, t3);
      empty = A.Metadata$_(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      t4 = t1.forTag.get$keys();
      t4 = A.List_List$_of(t4, A._instanceType(t4)._eval$1("Iterable.E"));
      merged = B.JSArray_methods.fold$1$2(t4, empty, new A.Metadata_Metadata_closure(t1), t3);
      if (merged === empty)
        return t2.call$0();
      return merged.merge$1(t2.call$0());
    },
    Metadata$_(chainStackTraces, forTag, languageVersionComment, onPlatform, retry, skip, skipReason, tags, testOn, timeout, verboseTrace) {
      var t1 = testOn == null ? B.PlatformSelector_All : testOn,
        t2 = timeout == null ? B.Timeout_null_1 : timeout,
        t3 = tags == null ? A.LinkedHashSet_LinkedHashSet$_empty(type$.String) : tags.toSet$0(0),
        t4 = onPlatform == null ? B.Map_empty : new A.UnmodifiableMapView(onPlatform, type$.UnmodifiableMapView_PlatformSelector_Metadata),
        t5 = forTag == null ? B.Map_empty0 : new A.UnmodifiableMapView(forTag, type$.UnmodifiableMapView_BooleanSelector_Metadata);
      t5 = new A.Metadata(t1, t2, skip, skipReason, verboseTrace, chainStackTraces, new A.UnmodifiableSetView(t3, type$.UnmodifiableSetView_String), retry, t4, t5, languageVersionComment);
      if (retry != null)
        A.RangeError_checkNotNegative(retry, "retry");
      t5._validateTags$0();
      return t5;
    },
    Metadata$parse(onPlatform, retry, skip, tags, testOn, timeout) {
      var _null = null,
        t1 = timeout == null ? B.Timeout_null_1 : timeout,
        t2 = skip == null ? _null : skip,
        t3 = A.Metadata__parseOnPlatform(onPlatform);
      t3 = new A.Metadata(B.PlatformSelector_All, t1, t2, _null, _null, _null, A.Metadata__parseTags(tags), retry, t3, B.Map_empty0, _null);
      if (retry != null)
        A.RangeError_checkNotNegative(retry, "retry");
      t3._validateTags$0();
      return t3;
    },
    Metadata: function Metadata(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.testOn = t0;
      _.timeout = t1;
      _._skip = t2;
      _.skipReason = t3;
      _._verboseTrace = t4;
      _._chainStackTraces = t5;
      _.tags = t6;
      _._retry = t7;
      _.onPlatform = t8;
      _.forTag = t9;
      _.languageVersionComment = t10;
    },
    Metadata_Metadata_unresolved: function Metadata_Metadata_unresolved(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._box_0 = t0;
      _.testOn = t1;
      _.timeout = t2;
      _.skip = t3;
      _.verboseTrace = t4;
      _.chainStackTraces = t5;
      _.retry = t6;
      _.skipReason = t7;
      _.onPlatform = t8;
      _.languageVersionComment = t9;
    },
    Metadata_Metadata_closure: function Metadata_Metadata_closure(t0) {
      this._box_0 = t0;
    },
    Metadata__validateTags_closure: function Metadata__validateTags_closure() {
    },
    Metadata__validateTags_closure0: function Metadata__validateTags_closure0() {
    },
    Metadata_validatePlatformSelectors_closure: function Metadata_validatePlatformSelectors_closure(t0) {
      this.validVariables = t0;
    },
    Metadata_merge_closure: function Metadata_merge_closure() {
    },
    Metadata_merge_closure0: function Metadata_merge_closure0() {
    },
    Metadata_forPlatform_closure: function Metadata_forPlatform_closure(t0, t1) {
      this._box_0 = t0;
      this.platform = t1;
    },
    OperatingSystem: function OperatingSystem(t0, t1) {
      this.name = t0;
      this.identifier = t1;
    },
    PlatformSelector__wrapFormatException(body, span, $T) {
      var t1 = body.call$0();
      return t1;
    },
    PlatformSelector: function PlatformSelector(t0) {
      this._inner = t0;
    },
    PlatformSelector_validate_closure: function PlatformSelector_validate_closure(t0, t1) {
      this.$this = t0;
      this.validVariables = t1;
    },
    PlatformSelector_validate__closure: function PlatformSelector_validate__closure(t0) {
      this.validVariables = t0;
    },
    PlatformSelector_evaluate_closure: function PlatformSelector_evaluate_closure(t0) {
      this.platform = t0;
    },
    Runtime: function Runtime(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.name = t0;
      _.identifier = t1;
      _.isDartVM = t2;
      _.isBrowser = t3;
      _.isBlink = t4;
      _.defaultCompiler = t5;
      _.supportedCompilers = t6;
    },
    StackTraceFormatter: function StackTraceFormatter(t0, t1) {
      this._except = t0;
      this._only = t1;
    },
    StackTraceFormatter_formatStackTrace_closure: function StackTraceFormatter_formatStackTrace_closure(t0) {
      this.$this = t0;
    },
    State: function State(t0, t1) {
      this.status = t0;
      this.result = t1;
    },
    Status: function Status(t0) {
      this._name = t0;
    },
    Result: function Result(t0) {
      this._name = t0;
    },
    Suite__filterGroup(group, platform) {
      var t1, t2, t3, _null = null,
        filtered = group.forPlatform$1(platform);
      if (filtered != null)
        return filtered;
      t1 = A._setArrayType([], type$.JSArray_GroupEntry);
      t2 = group.metadata;
      t3 = A.List_List$unmodifiable(t1, type$.GroupEntry);
      t3 = new A.Group("", t2, _null, _null, t3, _null, _null);
      t3.Group$7$location$metadata$setUpAll$tearDownAll$trace("", t1, _null, t2, _null, _null, _null);
      return t3;
    },
    Suite: function Suite() {
    },
    SuitePlatform: function SuitePlatform(t0, t1, t2) {
      this.runtime = t0;
      this.os = t1;
      this.compiler = t2;
    },
    Test: function Test() {
    },
    TestFailure: function TestFailure(t0) {
      this.message = t0;
    },
    pumpEventQueue(times) {
      if (times === 0)
        return A.Future_Future$value(null, type$.dynamic);
      return A.Future_Future(new A.pumpEventQueue_closure(times), type$.dynamic);
    },
    pumpEventQueue_closure: function pumpEventQueue_closure(t0) {
      this.times = t0;
    },
    Engine$() {
      var t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, _null = null,
        t1 = $.Zone__current,
        t2 = type$.RunnerSuite,
        t3 = A.StreamController_StreamController(_null, _null, _null, _null, t2),
        t4 = new A.StreamGroup(B._StreamGroupState_dormant, A.LinkedHashMap_LinkedHashMap$_empty(type$.Stream_LiveTest, type$.nullable_StreamSubscription_LiveTest), type$.StreamGroup_LiveTest);
      t4.__StreamGroup__controller_A = type$.StreamController_LiveTest._as(new A._SyncBroadcastStreamController(t4.get$_stream_group$_onListen(), t4.get$_onCancelBroadcast(), type$._SyncBroadcastStreamController_LiveTest));
      t5 = type$.Set_LiveTest;
      t6 = A.LinkedHashSet_LinkedHashSet$_empty(t5);
      t7 = type$.UnionSet_LiveTest;
      t8 = type$.UnionSetController_LiveTest;
      t9 = A.LinkedHashSet_LinkedHashSet$_empty(t5);
      t5 = A.LinkedHashSet_LinkedHashSet$_empty(t5);
      t10 = A.List_List$filled(A.QueueList__computeInitialCapacity(_null), _null, false, type$.nullable_LiveTest);
      t11 = type$.LiveTest;
      t12 = type$.Completer_PoolResource;
      t13 = A.ListQueue$(t12);
      t14 = A.ListQueue$(type$.void_Function);
      t12 = A.ListQueue$(t12);
      t15 = $.Zone__current;
      t1 = new A.Engine(new A.Pool(t13, t14, t12, 1, new A.AsyncMemoizer(new A._AsyncCompleter(new A._Future(t15, type$._Future_void), type$._AsyncCompleter_void), type$.AsyncMemoizer_void)), new A.FutureGroup(new A._AsyncCompleter(new A._Future(t1, type$._Future_List_void), type$._AsyncCompleter_List_void), [], type$.FutureGroup_void), A.LinkedHashSet_LinkedHashSet$_empty(type$.StreamSubscription_dynamic), t3, A.LinkedHashSet_LinkedHashSet$_empty(t2), new A._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_RunnerSuite), new A._AsyncBroadcastStreamController(_null, _null, type$._AsyncBroadcastStreamController_LiveSuite), t4, new A.UnionSetController(new A.UnionSet(t6, true, t7), t6, t8), new A.UnionSetController(new A.UnionSet(t9, true, t7), t9, t8), new A.UnionSetController(new A.UnionSet(t5, true, t7), t5, t8), new A.QueueList(t10, 0, 0, type$.QueueList_LiveTest), A.LinkedHashSet_LinkedHashSet$_empty(t11), A.LinkedHashSet_LinkedHashSet$_empty(t11));
      t1.Engine$4$concurrency$coverage$stopOnFirstFailure$testRandomizeOrderingSeed(_null, _null, false, _null);
      return t1;
    },
    Engine: function Engine(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13) {
      var _ = this;
      _._engine$_closed = _._runCalled = false;
      _._closedBeforeDone = null;
      _._runPool = t0;
      _._group = t1;
      _._engine$_subscriptions = t2;
      _._suiteController = t3;
      _._addedSuites = t4;
      _._onSuiteAddedController = t5;
      _._onSuiteStartedController = t6;
      _._onTestStartedGroup = t7;
      _._passedGroup = t8;
      _._skippedGroup = t9;
      _._failedGroup = t10;
      _._active = t11;
      _._activeSuiteLoads = t12;
      _._restarted = t13;
    },
    Engine_success_closure: function Engine_success_closure() {
    },
    Engine_closure: function Engine_closure(t0) {
      this.$this = t0;
    },
    Engine_closure0: function Engine_closure0() {
    },
    Engine_run_closure: function Engine_run_closure(t0) {
      this.$this = t0;
    },
    Engine_run__closure: function Engine_run__closure(t0, t1) {
      this.$this = t0;
      this.suite = t1;
    },
    Engine_run___closure: function Engine_run___closure(t0) {
      this._box_0 = t0;
    },
    Engine_run_closure0: function Engine_run_closure0(t0, t1) {
      this.$this = t0;
      this.subscription = t1;
    },
    Engine__runLiveTest_closure: function Engine__runLiveTest_closure(t0, t1) {
      this.$this = t0;
      this.liveTest = t1;
    },
    Engine__runLiveTest_closure0: function Engine__runLiveTest_closure0(t0, t1) {
      this.$this = t0;
      this.subscription = t1;
    },
    Engine__runLiveTest_closure1: function Engine__runLiveTest_closure1() {
    },
    Engine__runSkippedTest_closure: function Engine__runSkippedTest_closure() {
    },
    Engine__runSkippedTest_closure0: function Engine__runSkippedTest_closure0(t0, t1) {
      this.controller = t0;
      this.skipped = t1;
    },
    Engine__runSkippedTest_closure1: function Engine__runSkippedTest_closure1() {
    },
    LiveSuite: function LiveSuite() {
    },
    LiveSuiteController$(_suite) {
      var t1 = $.Zone__current,
        t2 = type$._Future_void,
        t3 = type$._AsyncCompleter_void,
        t4 = type$.LiveTest;
      return new A.LiveSuiteController(_suite, new A.FutureGroup(new A._AsyncCompleter(new A._Future(t1, type$._Future_List_void), type$._AsyncCompleter_List_void), [], type$.FutureGroup_void), new A._AsyncCompleter(new A._Future(t1, t2), t3), new A._SyncBroadcastStreamController(null, null, type$._SyncBroadcastStreamController_LiveTest), A.LinkedHashSet_LinkedHashSet$_empty(t4), A.LinkedHashSet_LinkedHashSet$_empty(t4), A.LinkedHashSet_LinkedHashSet$_empty(t4), new A.AsyncMemoizer(new A._AsyncCompleter(new A._Future(t1, t2), t3), type$.AsyncMemoizer_void));
    },
    _LiveSuite: function _LiveSuite(t0) {
      this._live_suite_controller$_controller = t0;
    },
    LiveSuiteController: function LiveSuiteController(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.__LiveSuiteController_liveSuite_FI = $;
      _._suite = t0;
      _._onCompleteGroup = t1;
      _._live_suite_controller$_onCloseCompleter = t2;
      _._onTestStartedController = t3;
      _._passed = t4;
      _._skipped = t5;
      _._failed = t6;
      _._live_suite_controller$_closeMemo = t7;
    },
    LiveSuiteController_reportLiveTest_closure: function LiveSuiteController_reportLiveTest_closure(t0, t1, t2) {
      this.$this = t0;
      this.liveTest = t1;
      this.countSuccess = t2;
    },
    LiveSuiteController_close_closure: function LiveSuiteController_close_closure(t0) {
      this.$this = t0;
    },
    ExpandedReporter: function ExpandedReporter(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _._color = t0;
      _._green = t1;
      _._red = t2;
      _._yellow = t3;
      _._gray = t4;
      _._bold = t5;
      _._noColor = t6;
      _._engine = t7;
      _._printPath = t8;
      _._printPlatform = t9;
      _._stopwatch = t10;
      _._lastProgressFailed = _._lastProgressSkipped = _._lastProgressPassed = 0;
      _._lastProgressMessage = "";
      _._lastProgressSuffix = null;
      _._shouldPrintStackTraceChainingNotice = false;
      _._subscriptions = t11;
      _._expanded$_sink = t12;
    },
    ExpandedReporter__onTestStarted_closure: function ExpandedReporter__onTestStarted_closure(t0, t1) {
      this.$this = t0;
      this.liveTest = t1;
    },
    ExpandedReporter__onTestStarted_closure0: function ExpandedReporter__onTestStarted_closure0(t0, t1) {
      this.$this = t0;
      this.liveTest = t1;
    },
    ExpandedReporter__onTestStarted_closure1: function ExpandedReporter__onTestStarted_closure1(t0, t1) {
      this.$this = t0;
      this.liveTest = t1;
    },
    RunnerSuite: function RunnerSuite(t0, t1, t2, t3, t4) {
      var _ = this;
      _._runner_suite$_controller = t0;
      _.platform = t1;
      _.path = t2;
      _.group = t3;
      _.ignoreTimeouts = t4;
    },
    RunnerSuiteController: function RunnerSuiteController(t0, t1, t2, t3, t4) {
      var _ = this;
      _.__RunnerSuiteController__suite_F = $;
      _._config = t0;
      _._onClose = t1;
      _._onDebuggingController = t2;
      _._channelNames = t3;
      _._closeMemo = t4;
    },
    RunnerSuiteController__close_closure: function RunnerSuiteController__close_closure(t0) {
      this.$this = t0;
    },
    SuiteConfiguration__list(input, $T) {
      return null;
    },
    SuiteConfiguration__map(input, $K, $V) {
      return B.Map_empty1;
    },
    SuiteConfiguration: function SuiteConfiguration(t0, t1, t2) {
      this._allowTestRandomization = t0;
      this._runSkipped = t1;
      this._ignoreTimeouts = t2;
    },
    IterableSet: function IterableSet(t0, t1) {
      this._iterable_set$_base = t0;
      this.$ti = t1;
    },
    _IterableSet_Object_SetMixin: function _IterableSet_Object_SetMixin() {
    },
    _IterableSet_Object_SetMixin_UnmodifiableSetMixin: function _IterableSet_Object_SetMixin_UnmodifiableSetMixin() {
    },
    _declarer() {
      var t1, t2, t3, _null = null,
        declarer = type$.nullable_Declarer._as($.Zone__current.$index(0, B.Symbol_KFY));
      if (declarer != null)
        return declarer;
      t1 = $._globalDeclarer;
      if (t1 != null)
        return t1;
      t1 = A.Metadata_Metadata(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
      t2 = type$.JSArray_of_dynamic_Function;
      t3 = type$.JSArray_GroupEntry;
      $._globalDeclarer = new A.Declarer(_null, _null, t1, B.C_EmptyUnmodifiableSet, _null, _null, false, false, A._setArrayType([], t2), A._setArrayType([], t2), A._setArrayType([], t2), A._setArrayType([], type$.JSArray_of_void_Function), A._setArrayType([], t3), A._setArrayType([], t3), _null, _null, true);
      new A._declarer_closure().call$0();
      t3 = $._globalDeclarer;
      t3.toString;
      return t3;
    },
    test(description, body, skip) {
      var _null = null;
      A._declarer().test$10$location$onPlatform$retry$skip$solo$tags$testOn$timeout(description, body, _null, _null, _null, skip, false, _null, _null, _null);
      return;
    },
    group(description, body) {
      var _null = null;
      A._declarer().group$10$location$onPlatform$retry$skip$solo$tags$testOn$timeout(description, body, _null, _null, _null, _null, false, _null, _null, _null);
      return;
    },
    _declarer_closure: function _declarer_closure() {
    },
    _declarer__closure: function _declarer__closure(t0) {
      this.engine = t0;
    },
    currentOSGuess_closure: function currentOSGuess_closure() {
    },
    PrintSink: function PrintSink(t0) {
      this._print_sink$_buffer = t0;
    },
    ReleasedException: function ReleasedException() {
    },
    Releasable: function Releasable() {
    },
    Using_useAsync(_this, asyncProcess, $T, $R) {
      return A.runZoned(new A.Using_useAsync_closure(_this, asyncProcess, $R), null, null, $R._eval$1("Future<0>"));
    },
    Using_useAsync_closure: function Using_useAsync_closure(t0, t1, t2) {
      this._this = t0;
      this.asyncProcess = t1;
      this.R = t2;
    },
    _EventStreamSubscription$(_target, _eventType, onData, _useCapture, $T) {
      var t1;
      if (onData == null)
        t1 = null;
      else {
        t1 = A._wrapZone(new A._EventStreamSubscription_closure(onData), type$.JSObject);
        t1 = t1 == null ? null : A._functionToJS1(t1);
      }
      t1 = new A._EventStreamSubscription(_target, _eventType, t1, false, $T._eval$1("_EventStreamSubscription<0>"));
      t1._tryResume$0();
      return t1;
    },
    _wrapZone(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    EventStreamProvider: function EventStreamProvider(t0, t1) {
      this._eventType = t0;
      this.$ti = t1;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _ElementEventStreamImpl: function _ElementEventStreamImpl(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._pauseCount = 0;
      _._target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    _EventStreamSubscription_onData_closure: function _EventStreamSubscription_onData_closure(t0) {
      this.handleData = t0;
    },
    execute(tc) {
      tc.launch$1(new A.execute_closure11(tc));
    },
    execute_closure11: function execute_closure11(t0) {
      this.tc = t0;
    },
    execute__closure16: function execute__closure16(t0) {
      this.tc = t0;
    },
    execute___closure106: function execute___closure106(t0) {
      this.tc = t0;
    },
    execute____closure170: function execute____closure170() {
    },
    execute____closure171: function execute____closure171() {
    },
    execute___closure107: function execute___closure107(t0) {
      this.tc = t0;
    },
    execute____closure156: function execute____closure156() {
    },
    execute____closure157: function execute____closure157() {
    },
    execute____closure158: function execute____closure158() {
    },
    execute____closure159: function execute____closure159() {
    },
    execute____closure160: function execute____closure160() {
    },
    execute____closure161: function execute____closure161() {
    },
    execute____closure162: function execute____closure162() {
    },
    execute____closure163: function execute____closure163() {
    },
    execute____closure164: function execute____closure164() {
    },
    execute____closure165: function execute____closure165() {
    },
    execute____closure166: function execute____closure166() {
    },
    execute____closure167: function execute____closure167() {
    },
    execute____closure168: function execute____closure168() {
    },
    execute____closure169: function execute____closure169(t0) {
      this.tc = t0;
    },
    execute____closure_unused: function execute____closure_unused() {
    },
    execute_____closure71: function execute_____closure71(t0) {
      this.unused = t0;
    },
    execute_____closure72: function execute_____closure72(t0) {
      this.unused = t0;
    },
    execute___closure108: function execute___closure108(t0) {
      this.tc = t0;
    },
    execute____closure143: function execute____closure143() {
    },
    execute____closure144: function execute____closure144() {
    },
    execute____closure145: function execute____closure145() {
    },
    execute____closure146: function execute____closure146() {
    },
    execute____closure147: function execute____closure147() {
    },
    execute____closure148: function execute____closure148() {
    },
    execute____closure149: function execute____closure149() {
    },
    execute____closure150: function execute____closure150() {
    },
    execute____closure151: function execute____closure151() {
    },
    execute____closure152: function execute____closure152() {
    },
    execute____closure153: function execute____closure153() {
    },
    execute____closure154: function execute____closure154() {
    },
    execute____closure155: function execute____closure155() {
    },
    execute___closure109: function execute___closure109(t0) {
      this.tc = t0;
    },
    execute____closure137: function execute____closure137() {
    },
    execute____closure138: function execute____closure138() {
    },
    execute____closure139: function execute____closure139() {
    },
    execute____closure140: function execute____closure140() {
    },
    execute____closure141: function execute____closure141() {
    },
    execute____closure142: function execute____closure142() {
    },
    execute0(tc) {
      tc.launch$1(new A.execute_closure12(tc));
    },
    execute_closure12: function execute_closure12(t0) {
      this.tc = t0;
    },
    execute__closure17: function execute__closure17(t0) {
      this.tc = t0;
    },
    execute___closure110: function execute___closure110(t0) {
      this.tc = t0;
    },
    execute____closure173: function execute____closure173() {
    },
    execute_____closure76: function execute_____closure76(t0) {
      this._box_0 = t0;
    },
    execute_____closure77: function execute_____closure77(t0) {
      this._box_0 = t0;
    },
    execute_____closure78: function execute_____closure78(t0) {
      this._box_0 = t0;
    },
    execute___closure111: function execute___closure111(t0) {
      this.tc = t0;
    },
    execute____closure172: function execute____closure172() {
    },
    execute_____closure73: function execute_____closure73(t0) {
      this._box_1 = t0;
    },
    execute_____closure74: function execute_____closure74(t0) {
      this._box_1 = t0;
    },
    execute_____closure75: function execute_____closure75(t0) {
      this._box_1 = t0;
    },
    execute1(tc) {
      tc.launch$1(new A.execute_closure10(tc));
    },
    _errorFromEvent($event) {
      var exception, msg = null,
        t1 = A.JSAnyUtilityExtension_instanceOfString($event, "ErrorEvent");
      if (t1)
        try {
          msg = A._asString($event.message);
        } catch (exception) {
          msg = "Unknown error";
        }
      else
        msg = "Unknown error: " + A.S(A.dartify($event));
      return A.SquadronError$_(msg, null, null);
    },
    execute_closure10: function execute_closure10(t0) {
      this.tc = t0;
    },
    execute__closure15: function execute__closure15(t0) {
      this.tc = t0;
    },
    execute___closure101: function execute___closure101(t0) {
      this.tc = t0;
    },
    execute____closure135: function execute____closure135(t0) {
      this.res = t0;
    },
    execute____closure136: function execute____closure136(t0) {
      this.res = t0;
    },
    execute___closure102: function execute___closure102(t0) {
      this.tc = t0;
    },
    execute____closure133: function execute____closure133(t0) {
      this.res = t0;
    },
    execute____closure134: function execute____closure134(t0) {
      this.res = t0;
    },
    execute___closure103: function execute___closure103(t0) {
      this.tc = t0;
    },
    execute____closure131: function execute____closure131(t0, t1) {
      this.ready = t0;
      this.res = t1;
    },
    execute____closure132: function execute____closure132(t0, t1) {
      this.ready = t0;
      this.res = t1;
    },
    execute___closure104: function execute___closure104() {
    },
    execute____closure129: function execute____closure129(t0) {
      this.res = t0;
    },
    execute____closure130: function execute____closure130(t0) {
      this.res = t0;
    },
    execute___closure105: function execute___closure105() {
    },
    execute____closure127: function execute____closure127(t0) {
      this.completer = t0;
    },
    execute____closure128: function execute____closure128(t0) {
      this.completer = t0;
    },
    execute2(tc) {
      tc.launch$1(new A.execute_closure3(tc));
    },
    execute_closure3: function execute_closure3(t0) {
      this.tc = t0;
    },
    execute__closure4: function execute__closure4(t0) {
      this.tc = t0;
    },
    execute___closure25: function execute___closure25(t0) {
      this.logger = t0;
    },
    execute___closure26: function execute___closure26(t0) {
      this.logger = t0;
    },
    execute___closure27: function execute___closure27(t0, t1) {
      this.tc = t0;
      this.logger = t1;
    },
    execute____closure51: function execute____closure51(t0) {
      this.logger = t0;
    },
    execute___closure28: function execute___closure28(t0, t1) {
      this.tc = t0;
      this.logger = t1;
    },
    execute____closure50: function execute____closure50(t0) {
      this.logger = t0;
    },
    execute___closure29: function execute___closure29(t0, t1) {
      this.tc = t0;
      this.logger = t1;
    },
    execute____closure49: function execute____closure49(t0) {
      this.logger = t0;
    },
    execute___closure30: function execute___closure30(t0, t1) {
      this.tc = t0;
      this.logger = t1;
    },
    execute____closure48: function execute____closure48(t0) {
      this.logger = t0;
    },
    execute___closure31: function execute___closure31(t0, t1) {
      this.tc = t0;
      this.logger = t1;
    },
    execute____closure47: function execute____closure47(t0) {
      this.logger = t0;
    },
    execute___closure32: function execute___closure32(t0, t1) {
      this.tc = t0;
      this.logger = t1;
    },
    execute____closure46: function execute____closure46(t0) {
      this.logger = t0;
    },
    execute___closure33: function execute___closure33(t0, t1) {
      this.tc = t0;
      this.logger = t1;
    },
    execute____closure45: function execute____closure45(t0) {
      this.logger = t0;
    },
    execute___closure34: function execute___closure34(t0, t1) {
      this.tc = t0;
      this.logger = t1;
    },
    execute____closure44: function execute____closure44(t0) {
      this.logger = t0;
    },
    _isTypeError(ex) {
      var msg;
      if (type$.TypeError._is(ex))
        return true;
      if (ex instanceof A.WorkerException) {
        msg = ex.message;
        return B.JSString_methods.contains$1(msg, "TypeError") || B.JSString_methods.contains$1(msg, "not a subtype");
      }
      return false;
    },
    _asInt0(x) {
      return A._asInt(x);
    },
    _unexpectedSuccessIfNonJs(message, res) {
      var t1 = $.$get$Squadron_platformType();
      if (t1 !== B.SquadronPlatformType_JavaScript_js)
        throw A.wrapException(A.unexpectedSuccess("Unexpected success on " + t1.label + ": " + message, res));
    },
    _unexpectedFailureIfJs(message, ex) {
      var t2,
        t1 = $.$get$Squadron_platformType();
      if (t1 === B.SquadronPlatformType_JavaScript_js) {
        t2 = A.S(ex);
        throw A.wrapException(A.UnexpectedException$("Unexpected: " + ("Unexpected failure on " + t1.label + ": " + message) + " failed with ex=" + t2));
      }
    },
    execute3(tc) {
      tc.launch$1(new A.execute_closure2(tc));
    },
    testCastConverter(tc) {
      tc.group$2("- CastConverter", new A.testCastConverter_closure(tc));
    },
    testContextAwareConverter(tc) {
      tc.group$2("- ContextAwareConverter", new A.testContextAwareConverter_closure(tc));
    },
    testNumConverter(tc) {
      tc.group$2("- NumConverter", new A.testNumConverter_closure(tc));
    },
    execute_closure2: function execute_closure2(t0) {
      this.tc = t0;
    },
    execute__closure2: function execute__closure2(t0) {
      this.tc = t0;
    },
    execute___closure23: function execute___closure23(t0) {
      this.tc = t0;
    },
    execute___closure24: function execute___closure24(t0) {
      this.tc = t0;
    },
    execute__closure3: function execute__closure3(t0) {
      this.tc = t0;
    },
    execute___closure19: function execute___closure19() {
    },
    execute____closure43: function execute____closure43(t0) {
      this.one = t0;
    },
    execute___closure20: function execute___closure20() {
    },
    execute___closure21: function execute___closure21() {
    },
    execute___closure_check: function execute___closure_check(t0, t1) {
      this._box_0 = t0;
      this.converter = t1;
    },
    execute___closure22: function execute___closure22() {
    },
    execute___closure_check1: function execute___closure_check1(t0) {
      this._box_1 = t0;
    },
    execute___closure_check2: function execute___closure_check2(t0) {
      this._box_1 = t0;
    },
    testCastConverter_closure: function testCastConverter_closure(t0) {
      this.tc = t0;
    },
    testCastConverter__closure: function testCastConverter__closure(t0, t1) {
      this.converter = t0;
      this.tc = t1;
    },
    testCastConverter__closure_$platformSensitive0: function testCastConverter__closure_$platformSensitive0(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testCastConverter__closure_$fails0: function testCastConverter__closure_$fails0(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testCastConverter__closure_$succeeds0: function testCastConverter__closure_$succeeds0(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testCastConverter___closure29: function testCastConverter___closure29(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testCastConverter___closure30: function testCastConverter___closure30(t0) {
      this.$$succeeds = t0;
    },
    testCastConverter___closure31: function testCastConverter___closure31(t0, t1) {
      this.$$platformSensitive = t0;
      this.$$fails = t1;
    },
    testCastConverter___closure32: function testCastConverter___closure32(t0) {
      this.$$fails = t0;
    },
    testCastConverter___closure33: function testCastConverter___closure33(t0) {
      this.$$fails = t0;
    },
    testCastConverter___closure34: function testCastConverter___closure34(t0) {
      this.$$fails = t0;
    },
    testCastConverter___closure35: function testCastConverter___closure35(t0) {
      this.$$fails = t0;
    },
    testCastConverter__closure0: function testCastConverter__closure0(t0, t1) {
      this.converter = t0;
      this.tc = t1;
    },
    testCastConverter__closure_$platformSensitive: function testCastConverter__closure_$platformSensitive(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testCastConverter__closure_$fails: function testCastConverter__closure_$fails(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testCastConverter__closure_$succeeds: function testCastConverter__closure_$succeeds(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testCastConverter___closure22: function testCastConverter___closure22(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testCastConverter___closure23: function testCastConverter___closure23(t0) {
      this.$$platformSensitive = t0;
    },
    testCastConverter___closure24: function testCastConverter___closure24(t0, t1, t2) {
      this.$$succeeds = t0;
      this.$$toDbl = t1;
      this.$$toNullableDbl = t2;
    },
    testCastConverter___closure25: function testCastConverter___closure25(t0) {
      this.$$fails = t0;
    },
    testCastConverter___closure26: function testCastConverter___closure26(t0) {
      this.$$fails = t0;
    },
    testCastConverter___closure27: function testCastConverter___closure27(t0) {
      this.$$fails = t0;
    },
    testCastConverter___closure28: function testCastConverter___closure28(t0) {
      this.$$fails = t0;
    },
    testCastConverter__closure1: function testCastConverter__closure1(t0, t1) {
      this.tc = t0;
      this.converter = t1;
    },
    testCastConverter___closure14: function testCastConverter___closure14(t0) {
      this.converter = t0;
    },
    testCastConverter____closure19: function testCastConverter____closure19(t0) {
      this.data = t0;
    },
    testCastConverter___closure15: function testCastConverter___closure15(t0) {
      this.converter = t0;
    },
    testCastConverter____closure18: function testCastConverter____closure18(t0) {
      this.data = t0;
    },
    testCastConverter___closure16: function testCastConverter___closure16(t0) {
      this.converter = t0;
    },
    testCastConverter____closure17: function testCastConverter____closure17(t0) {
      this.data = t0;
    },
    testCastConverter___closure17: function testCastConverter___closure17(t0) {
      this.converter = t0;
    },
    testCastConverter____closure16: function testCastConverter____closure16(t0) {
      this.data = t0;
    },
    testCastConverter___closure18: function testCastConverter___closure18(t0) {
      this.converter = t0;
    },
    testCastConverter____closure15: function testCastConverter____closure15(t0) {
      this.data = t0;
    },
    testCastConverter___closure19: function testCastConverter___closure19(t0) {
      this.converter = t0;
    },
    testCastConverter____closure14: function testCastConverter____closure14(t0) {
      this.data = t0;
    },
    testCastConverter___closure20: function testCastConverter___closure20(t0) {
      this.converter = t0;
    },
    testCastConverter____closure13: function testCastConverter____closure13(t0) {
      this.data = t0;
    },
    testCastConverter___closure21: function testCastConverter___closure21(t0) {
      this.converter = t0;
    },
    testCastConverter____closure12: function testCastConverter____closure12(t0) {
      this.data = t0;
    },
    testCastConverter__closure2: function testCastConverter__closure2(t0, t1) {
      this.tc = t0;
      this.converter = t1;
    },
    testCastConverter___closure6: function testCastConverter___closure6(t0) {
      this.converter = t0;
    },
    testCastConverter____closure11: function testCastConverter____closure11(t0) {
      this.data = t0;
    },
    testCastConverter___closure7: function testCastConverter___closure7(t0) {
      this.converter = t0;
    },
    testCastConverter____closure10: function testCastConverter____closure10(t0) {
      this.data = t0;
    },
    testCastConverter___closure8: function testCastConverter___closure8(t0) {
      this.converter = t0;
    },
    testCastConverter____closure9: function testCastConverter____closure9(t0) {
      this.data = t0;
    },
    testCastConverter___closure9: function testCastConverter___closure9(t0) {
      this.converter = t0;
    },
    testCastConverter____closure8: function testCastConverter____closure8(t0) {
      this.data = t0;
    },
    testCastConverter___closure10: function testCastConverter___closure10(t0) {
      this.converter = t0;
    },
    testCastConverter____closure7: function testCastConverter____closure7(t0) {
      this.data = t0;
    },
    testCastConverter___closure11: function testCastConverter___closure11(t0) {
      this.converter = t0;
    },
    testCastConverter____closure6: function testCastConverter____closure6(t0) {
      this.data = t0;
    },
    testCastConverter___closure12: function testCastConverter___closure12(t0) {
      this.converter = t0;
    },
    testCastConverter____closure5: function testCastConverter____closure5(t0) {
      this.data = t0;
    },
    testCastConverter___closure13: function testCastConverter___closure13(t0) {
      this.converter = t0;
    },
    testCastConverter____closure4: function testCastConverter____closure4(t0) {
      this.data = t0;
    },
    testCastConverter__closure3: function testCastConverter__closure3(t0, t1) {
      this.tc = t0;
      this.converter = t1;
    },
    testCastConverter___closure1: function testCastConverter___closure1(t0) {
      this.converter = t0;
    },
    testCastConverter____closure3: function testCastConverter____closure3(t0) {
      this.data = t0;
    },
    testCastConverter___closure2: function testCastConverter___closure2(t0) {
      this.converter = t0;
    },
    testCastConverter____closure2: function testCastConverter____closure2(t0) {
      this.data = t0;
    },
    testCastConverter___closure3: function testCastConverter___closure3(t0) {
      this.converter = t0;
    },
    testCastConverter____closure1: function testCastConverter____closure1(t0) {
      this.data = t0;
    },
    testCastConverter___closure4: function testCastConverter___closure4(t0) {
      this.converter = t0;
    },
    testCastConverter____closure0: function testCastConverter____closure0(t0) {
      this.data = t0;
    },
    testCastConverter___closure5: function testCastConverter___closure5(t0) {
      this.converter = t0;
    },
    testCastConverter____closure: function testCastConverter____closure(t0) {
      this.data = t0;
    },
    testCastConverter__closure4: function testCastConverter__closure4(t0, t1) {
      this.tc = t0;
      this.converter = t1;
    },
    testCastConverter___closure: function testCastConverter___closure(t0) {
      this.converter = t0;
    },
    testCastConverter___closure0: function testCastConverter___closure0(t0) {
      this.converter = t0;
    },
    testContextAwareConverter_closure: function testContextAwareConverter_closure(t0) {
      this.tc = t0;
    },
    testContextAwareConverter__closure: function testContextAwareConverter__closure(t0) {
      this.converter = t0;
    },
    testContextAwareConverter__closure0: function testContextAwareConverter__closure0(t0, t1) {
      this.converter = t0;
      this.tc = t1;
    },
    testContextAwareConverter___closure29: function testContextAwareConverter___closure29(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testContextAwareConverter___closure30: function testContextAwareConverter___closure30(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testContextAwareConverter___closure31: function testContextAwareConverter___closure31(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testContextAwareConverter____closure35: function testContextAwareConverter____closure35(t0) {
      this.$$toInt = t0;
    },
    testContextAwareConverter____closure36: function testContextAwareConverter____closure36(t0) {
      this.$$toNullableInt = t0;
    },
    testContextAwareConverter____closure37: function testContextAwareConverter____closure37(t0) {
      this.$$toInt = t0;
    },
    testContextAwareConverter____closure38: function testContextAwareConverter____closure38(t0) {
      this.$$toNullableInt = t0;
    },
    testContextAwareConverter____closure39: function testContextAwareConverter____closure39(t0) {
      this.$$toInt = t0;
    },
    testContextAwareConverter____closure40: function testContextAwareConverter____closure40(t0) {
      this.$$toNullableInt = t0;
    },
    testContextAwareConverter____closure41: function testContextAwareConverter____closure41(t0) {
      this.$$toInt = t0;
    },
    testContextAwareConverter____closure42: function testContextAwareConverter____closure42(t0) {
      this.$$toNullableInt = t0;
    },
    testContextAwareConverter___closure32: function testContextAwareConverter___closure32(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testContextAwareConverter____closure34: function testContextAwareConverter____closure34(t0) {
      this.$$toInt = t0;
    },
    testContextAwareConverter___closure33: function testContextAwareConverter___closure33(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testContextAwareConverter____closure32: function testContextAwareConverter____closure32(t0) {
      this.$$toInt = t0;
    },
    testContextAwareConverter____closure33: function testContextAwareConverter____closure33(t0) {
      this.$$toNullableInt = t0;
    },
    testContextAwareConverter___closure34: function testContextAwareConverter___closure34(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testContextAwareConverter____closure28: function testContextAwareConverter____closure28(t0) {
      this.$$toInt = t0;
    },
    testContextAwareConverter____closure29: function testContextAwareConverter____closure29(t0) {
      this.$$toNullableInt = t0;
    },
    testContextAwareConverter____closure30: function testContextAwareConverter____closure30(t0) {
      this.$$toNullableInt = t0;
    },
    testContextAwareConverter____closure31: function testContextAwareConverter____closure31(t0) {
      this.$$toNullableInt = t0;
    },
    testContextAwareConverter___closure35: function testContextAwareConverter___closure35(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testContextAwareConverter____closure26: function testContextAwareConverter____closure26(t0) {
      this.$$toInt = t0;
    },
    testContextAwareConverter____closure27: function testContextAwareConverter____closure27(t0) {
      this.$$toNullableInt = t0;
    },
    testContextAwareConverter__closure1: function testContextAwareConverter__closure1(t0, t1) {
      this.converter = t0;
      this.tc = t1;
    },
    testContextAwareConverter___closure22: function testContextAwareConverter___closure22(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testContextAwareConverter___closure23: function testContextAwareConverter___closure23(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testContextAwareConverter___closure24: function testContextAwareConverter___closure24(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testContextAwareConverter___closure25: function testContextAwareConverter___closure25(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testContextAwareConverter____closure25: function testContextAwareConverter____closure25(t0) {
      this.$$toDbl = t0;
    },
    testContextAwareConverter___closure26: function testContextAwareConverter___closure26(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testContextAwareConverter____closure23: function testContextAwareConverter____closure23(t0) {
      this.$$toDbl = t0;
    },
    testContextAwareConverter____closure24: function testContextAwareConverter____closure24(t0) {
      this.$$toNullableDbl = t0;
    },
    testContextAwareConverter___closure27: function testContextAwareConverter___closure27(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testContextAwareConverter____closure21: function testContextAwareConverter____closure21(t0) {
      this.$$toDbl = t0;
    },
    testContextAwareConverter____closure22: function testContextAwareConverter____closure22(t0) {
      this.$$toNullableDbl = t0;
    },
    testContextAwareConverter___closure28: function testContextAwareConverter___closure28(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testContextAwareConverter____closure19: function testContextAwareConverter____closure19(t0) {
      this.$$toDbl = t0;
    },
    testContextAwareConverter____closure20: function testContextAwareConverter____closure20(t0) {
      this.$$toNullableDbl = t0;
    },
    testContextAwareConverter__closure2: function testContextAwareConverter__closure2(t0, t1) {
      this.tc = t0;
      this.converter = t1;
    },
    testContextAwareConverter___closure14: function testContextAwareConverter___closure14(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure18: function testContextAwareConverter____closure18(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure15: function testContextAwareConverter___closure15(t0) {
      this.converter = t0;
    },
    testContextAwareConverter___closure16: function testContextAwareConverter___closure16(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure17: function testContextAwareConverter____closure17(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure17: function testContextAwareConverter___closure17(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure16: function testContextAwareConverter____closure16(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure18: function testContextAwareConverter___closure18(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure15: function testContextAwareConverter____closure15(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure19: function testContextAwareConverter___closure19(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure14: function testContextAwareConverter____closure14(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure20: function testContextAwareConverter___closure20(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure13: function testContextAwareConverter____closure13(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure21: function testContextAwareConverter___closure21(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure12: function testContextAwareConverter____closure12(t0) {
      this.data = t0;
    },
    testContextAwareConverter__closure3: function testContextAwareConverter__closure3(t0, t1) {
      this.tc = t0;
      this.converter = t1;
    },
    testContextAwareConverter___closure6: function testContextAwareConverter___closure6(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure11: function testContextAwareConverter____closure11(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure7: function testContextAwareConverter___closure7(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure10: function testContextAwareConverter____closure10(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure8: function testContextAwareConverter___closure8(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure9: function testContextAwareConverter____closure9(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure9: function testContextAwareConverter___closure9(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure8: function testContextAwareConverter____closure8(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure10: function testContextAwareConverter___closure10(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure7: function testContextAwareConverter____closure7(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure11: function testContextAwareConverter___closure11(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure6: function testContextAwareConverter____closure6(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure12: function testContextAwareConverter___closure12(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure5: function testContextAwareConverter____closure5(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure13: function testContextAwareConverter___closure13(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure4: function testContextAwareConverter____closure4(t0) {
      this.data = t0;
    },
    testContextAwareConverter__closure4: function testContextAwareConverter__closure4(t0, t1) {
      this.tc = t0;
      this.converter = t1;
    },
    testContextAwareConverter___closure1: function testContextAwareConverter___closure1(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure3: function testContextAwareConverter____closure3(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure2: function testContextAwareConverter___closure2(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure2: function testContextAwareConverter____closure2(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure3: function testContextAwareConverter___closure3(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure1: function testContextAwareConverter____closure1(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure4: function testContextAwareConverter___closure4(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure0: function testContextAwareConverter____closure0(t0) {
      this.data = t0;
    },
    testContextAwareConverter___closure5: function testContextAwareConverter___closure5(t0) {
      this.converter = t0;
    },
    testContextAwareConverter____closure: function testContextAwareConverter____closure(t0) {
      this.data = t0;
    },
    testContextAwareConverter__closure5: function testContextAwareConverter__closure5(t0, t1) {
      this.tc = t0;
      this.converter = t1;
    },
    testContextAwareConverter___closure: function testContextAwareConverter___closure(t0) {
      this.converter = t0;
    },
    testContextAwareConverter___closure0: function testContextAwareConverter___closure0(t0) {
      this.converter = t0;
    },
    testNumConverter_closure: function testNumConverter_closure(t0) {
      this.tc = t0;
    },
    testNumConverter__closure: function testNumConverter__closure(t0, t1) {
      this.converter = t0;
      this.tc = t1;
    },
    testNumConverter___closure29: function testNumConverter___closure29(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testNumConverter___closure30: function testNumConverter___closure30(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testNumConverter___closure31: function testNumConverter___closure31(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testNumConverter____closure35: function testNumConverter____closure35(t0) {
      this.$$toInt = t0;
    },
    testNumConverter____closure36: function testNumConverter____closure36(t0) {
      this.$$toNullableInt = t0;
    },
    testNumConverter____closure37: function testNumConverter____closure37(t0) {
      this.$$toInt = t0;
    },
    testNumConverter____closure38: function testNumConverter____closure38(t0) {
      this.$$toNullableInt = t0;
    },
    testNumConverter____closure39: function testNumConverter____closure39(t0) {
      this.$$toInt = t0;
    },
    testNumConverter____closure40: function testNumConverter____closure40(t0) {
      this.$$toNullableInt = t0;
    },
    testNumConverter____closure41: function testNumConverter____closure41(t0) {
      this.$$toInt = t0;
    },
    testNumConverter____closure42: function testNumConverter____closure42(t0) {
      this.$$toNullableInt = t0;
    },
    testNumConverter___closure32: function testNumConverter___closure32(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testNumConverter____closure34: function testNumConverter____closure34(t0) {
      this.$$toInt = t0;
    },
    testNumConverter___closure33: function testNumConverter___closure33(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testNumConverter____closure32: function testNumConverter____closure32(t0) {
      this.$$toInt = t0;
    },
    testNumConverter____closure33: function testNumConverter____closure33(t0) {
      this.$$toNullableInt = t0;
    },
    testNumConverter___closure34: function testNumConverter___closure34(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testNumConverter____closure28: function testNumConverter____closure28(t0) {
      this.$$toInt = t0;
    },
    testNumConverter____closure29: function testNumConverter____closure29(t0) {
      this.$$toNullableInt = t0;
    },
    testNumConverter____closure30: function testNumConverter____closure30(t0) {
      this.$$toNullableInt = t0;
    },
    testNumConverter____closure31: function testNumConverter____closure31(t0) {
      this.$$toNullableInt = t0;
    },
    testNumConverter___closure35: function testNumConverter___closure35(t0, t1) {
      this.$$toInt = t0;
      this.$$toNullableInt = t1;
    },
    testNumConverter____closure26: function testNumConverter____closure26(t0) {
      this.$$toInt = t0;
    },
    testNumConverter____closure27: function testNumConverter____closure27(t0) {
      this.$$toNullableInt = t0;
    },
    testNumConverter__closure0: function testNumConverter__closure0(t0, t1) {
      this.converter = t0;
      this.tc = t1;
    },
    testNumConverter___closure22: function testNumConverter___closure22(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testNumConverter___closure23: function testNumConverter___closure23(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testNumConverter___closure24: function testNumConverter___closure24(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testNumConverter___closure25: function testNumConverter___closure25(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testNumConverter____closure25: function testNumConverter____closure25(t0) {
      this.$$toDbl = t0;
    },
    testNumConverter___closure26: function testNumConverter___closure26(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testNumConverter____closure23: function testNumConverter____closure23(t0) {
      this.$$toDbl = t0;
    },
    testNumConverter____closure24: function testNumConverter____closure24(t0) {
      this.$$toNullableDbl = t0;
    },
    testNumConverter___closure27: function testNumConverter___closure27(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testNumConverter____closure21: function testNumConverter____closure21(t0) {
      this.$$toDbl = t0;
    },
    testNumConverter____closure22: function testNumConverter____closure22(t0) {
      this.$$toNullableDbl = t0;
    },
    testNumConverter___closure28: function testNumConverter___closure28(t0, t1) {
      this.$$toDbl = t0;
      this.$$toNullableDbl = t1;
    },
    testNumConverter____closure19: function testNumConverter____closure19(t0) {
      this.$$toDbl = t0;
    },
    testNumConverter____closure20: function testNumConverter____closure20(t0) {
      this.$$toNullableDbl = t0;
    },
    testNumConverter__closure1: function testNumConverter__closure1(t0, t1) {
      this.tc = t0;
      this.converter = t1;
    },
    testNumConverter___closure14: function testNumConverter___closure14(t0) {
      this.converter = t0;
    },
    testNumConverter____closure18: function testNumConverter____closure18(t0) {
      this.data = t0;
    },
    testNumConverter___closure15: function testNumConverter___closure15(t0) {
      this.converter = t0;
    },
    testNumConverter___closure16: function testNumConverter___closure16(t0) {
      this.converter = t0;
    },
    testNumConverter____closure17: function testNumConverter____closure17(t0) {
      this.data = t0;
    },
    testNumConverter___closure17: function testNumConverter___closure17(t0) {
      this.converter = t0;
    },
    testNumConverter____closure16: function testNumConverter____closure16(t0) {
      this.data = t0;
    },
    testNumConverter___closure18: function testNumConverter___closure18(t0) {
      this.converter = t0;
    },
    testNumConverter____closure15: function testNumConverter____closure15(t0) {
      this.data = t0;
    },
    testNumConverter___closure19: function testNumConverter___closure19(t0) {
      this.converter = t0;
    },
    testNumConverter____closure14: function testNumConverter____closure14(t0) {
      this.data = t0;
    },
    testNumConverter___closure20: function testNumConverter___closure20(t0) {
      this.converter = t0;
    },
    testNumConverter____closure13: function testNumConverter____closure13(t0) {
      this.data = t0;
    },
    testNumConverter___closure21: function testNumConverter___closure21(t0) {
      this.converter = t0;
    },
    testNumConverter____closure12: function testNumConverter____closure12(t0) {
      this.data = t0;
    },
    testNumConverter__closure2: function testNumConverter__closure2(t0, t1) {
      this.tc = t0;
      this.converter = t1;
    },
    testNumConverter___closure6: function testNumConverter___closure6(t0) {
      this.converter = t0;
    },
    testNumConverter____closure11: function testNumConverter____closure11(t0) {
      this.data = t0;
    },
    testNumConverter___closure7: function testNumConverter___closure7(t0) {
      this.converter = t0;
    },
    testNumConverter____closure10: function testNumConverter____closure10(t0) {
      this.data = t0;
    },
    testNumConverter___closure8: function testNumConverter___closure8(t0) {
      this.converter = t0;
    },
    testNumConverter____closure9: function testNumConverter____closure9(t0) {
      this.data = t0;
    },
    testNumConverter___closure9: function testNumConverter___closure9(t0) {
      this.converter = t0;
    },
    testNumConverter____closure8: function testNumConverter____closure8(t0) {
      this.data = t0;
    },
    testNumConverter___closure10: function testNumConverter___closure10(t0) {
      this.converter = t0;
    },
    testNumConverter____closure7: function testNumConverter____closure7(t0) {
      this.data = t0;
    },
    testNumConverter___closure11: function testNumConverter___closure11(t0) {
      this.converter = t0;
    },
    testNumConverter____closure6: function testNumConverter____closure6(t0) {
      this.data = t0;
    },
    testNumConverter___closure12: function testNumConverter___closure12(t0) {
      this.converter = t0;
    },
    testNumConverter____closure5: function testNumConverter____closure5(t0) {
      this.data = t0;
    },
    testNumConverter___closure13: function testNumConverter___closure13(t0) {
      this.converter = t0;
    },
    testNumConverter____closure4: function testNumConverter____closure4(t0) {
      this.data = t0;
    },
    testNumConverter__closure3: function testNumConverter__closure3(t0, t1) {
      this.tc = t0;
      this.converter = t1;
    },
    testNumConverter___closure1: function testNumConverter___closure1(t0) {
      this.converter = t0;
    },
    testNumConverter____closure3: function testNumConverter____closure3(t0) {
      this.data = t0;
    },
    testNumConverter___closure2: function testNumConverter___closure2(t0) {
      this.converter = t0;
    },
    testNumConverter____closure2: function testNumConverter____closure2(t0) {
      this.data = t0;
    },
    testNumConverter___closure3: function testNumConverter___closure3(t0) {
      this.converter = t0;
    },
    testNumConverter____closure1: function testNumConverter____closure1(t0) {
      this.data = t0;
    },
    testNumConverter___closure4: function testNumConverter___closure4(t0) {
      this.converter = t0;
    },
    testNumConverter____closure0: function testNumConverter____closure0(t0) {
      this.data = t0;
    },
    testNumConverter___closure5: function testNumConverter___closure5(t0) {
      this.converter = t0;
    },
    testNumConverter____closure: function testNumConverter____closure(t0) {
      this.data = t0;
    },
    testNumConverter__closure4: function testNumConverter__closure4(t0, t1) {
      this.tc = t0;
      this.converter = t1;
    },
    testNumConverter___closure: function testNumConverter___closure(t0) {
      this.converter = t0;
    },
    testNumConverter___closure0: function testNumConverter___closure0(t0) {
      this.converter = t0;
    },
    testLazyLists(tc) {
      var t1 = new A.testLazyLists_$initDataContext();
      tc.group$2("- Doubles", new A.testLazyLists_closure(t1, tc));
      tc.group$2("- Nullable doubles", new A.testLazyLists_closure0(t1, tc));
      tc.group$2("- Nullable integers", new A.testLazyLists_closure1(t1, tc));
    },
    _isNum0(n) {
      return typeof A._asNumQ(n) == "number";
    },
    _isGt3(n) {
      var t1;
      A._asNumQ(n);
      if (n != null) {
        t1 = $.$get$_dbl0().call$1(n);
        if (typeof t1 !== "number")
          return t1.$gt();
        t1 = t1 > 3;
      } else
        t1 = false;
      return t1;
    },
    _isGt4(n) {
      var t1;
      A._asNumQ(n);
      if (n != null) {
        t1 = $.$get$_dbl0().call$1(n);
        if (typeof t1 !== "number")
          return t1.$gt();
        t1 = t1 > 4;
      } else
        t1 = false;
      return t1;
    },
    _isInt0(n) {
      var t1;
      A._asNumQ(n);
      if (typeof n == "number") {
        t1 = $.$get$_dbl0();
        t1 = J.toInt$0$n(t1.call$1(n)) === t1.call$1(n);
      } else
        t1 = false;
      return t1;
    },
    _isNeg(n) {
      var t1;
      A._asNumQ(n);
      if (n != null) {
        t1 = $.$get$_dbl0().call$1(n);
        if (typeof t1 !== "number")
          return t1.$lt();
        t1 = t1 < 0;
      } else
        t1 = false;
      return t1;
    },
    _nf($T) {
      return $T._as(-1);
    },
    _FeatureTestExt_check(_this, tc, data, $T) {
      tc.test$2("- " + _this.key, new A._FeatureTestExt_check_closure(data, _this, tc, $T));
    },
    testLazyLists_$initDataContext: function testLazyLists_$initDataContext() {
    },
    testLazyLists_closure: function testLazyLists_closure(t0, t1) {
      this.$$initDataContext = t0;
      this.tc = t1;
    },
    testLazyLists_closure0: function testLazyLists_closure0(t0, t1) {
      this.$$initDataContext = t0;
      this.tc = t1;
    },
    testLazyLists_closure1: function testLazyLists_closure1(t0, t1) {
      this.$$initDataContext = t0;
      this.tc = t1;
    },
    _dblTests_closure26: function _dblTests_closure26() {
    },
    _dblTests_closure27: function _dblTests_closure27() {
    },
    _dblTests_closure28: function _dblTests_closure28() {
    },
    _dblTests_closure29: function _dblTests_closure29() {
    },
    _dblTests_closure30: function _dblTests_closure30() {
    },
    _dblTests_closure31: function _dblTests_closure31() {
    },
    _dblTests_closure32: function _dblTests_closure32() {
    },
    _dblTests_closure33: function _dblTests_closure33() {
    },
    _dblTests_closure34: function _dblTests_closure34() {
    },
    _dblTests_closure35: function _dblTests_closure35() {
    },
    _dblTests_closure36: function _dblTests_closure36() {
    },
    _dblTests_closure37: function _dblTests_closure37() {
    },
    _dblTests_closure38: function _dblTests_closure38() {
    },
    _dblTests_closure39: function _dblTests_closure39() {
    },
    _dblTests_closure40: function _dblTests_closure40() {
    },
    _dblTests_closure41: function _dblTests_closure41() {
    },
    _dblTests_closure42: function _dblTests_closure42() {
    },
    _dblTests_closure43: function _dblTests_closure43() {
    },
    _dblTests_closure44: function _dblTests_closure44() {
    },
    _dblTests_closure45: function _dblTests_closure45() {
    },
    _dblTests_closure46: function _dblTests_closure46() {
    },
    _dblTests_closure47: function _dblTests_closure47() {
    },
    _dblTests_closure48: function _dblTests_closure48() {
    },
    _dblTests_closure49: function _dblTests_closure49() {
    },
    _dblTests_closure50: function _dblTests_closure50() {
    },
    _dblTests_closure51: function _dblTests_closure51() {
    },
    _dblTests_closure52: function _dblTests_closure52() {
    },
    _dblTests_closure53: function _dblTests_closure53() {
    },
    _dblTests_closure54: function _dblTests_closure54() {
    },
    _dblTests_closure55: function _dblTests_closure55() {
    },
    _dblTests_closure56: function _dblTests_closure56() {
    },
    _dblTests_closure57: function _dblTests_closure57() {
    },
    _dblTests_closure58: function _dblTests_closure58() {
    },
    _dblTests_closure59: function _dblTests_closure59() {
    },
    _dblTests_closure60: function _dblTests_closure60() {
    },
    _dblTests_closure61: function _dblTests_closure61() {
    },
    _dblTests__closure12: function _dblTests__closure12() {
    },
    _dblTests_closure62: function _dblTests_closure62() {
    },
    _dblTests__closure11: function _dblTests__closure11() {
    },
    _dblTests_closure63: function _dblTests_closure63() {
    },
    _dblTests__closure10: function _dblTests__closure10() {
    },
    _dblTests_closure64: function _dblTests_closure64() {
    },
    _dblTests_closure65: function _dblTests_closure65() {
    },
    _dblTests_closure66: function _dblTests_closure66() {
    },
    _dblTests_closure67: function _dblTests_closure67() {
    },
    _dblTests_closure68: function _dblTests_closure68() {
    },
    _dblTests_closure69: function _dblTests_closure69() {
    },
    _dblTests_closure70: function _dblTests_closure70() {
    },
    _dblTests_closure71: function _dblTests_closure71() {
    },
    _dblTests_closure72: function _dblTests_closure72() {
    },
    _dblTests_closure73: function _dblTests_closure73() {
    },
    _dblTests_closure74: function _dblTests_closure74() {
    },
    _dblTests_closure75: function _dblTests_closure75() {
    },
    _dblTests_closure76: function _dblTests_closure76() {
    },
    _dblTests__closure9: function _dblTests__closure9() {
    },
    _dblTests_closure77: function _dblTests_closure77() {
    },
    _dblTests__closure8: function _dblTests__closure8() {
    },
    _dblTests_closure78: function _dblTests_closure78() {
    },
    _dblTests_closure79: function _dblTests_closure79() {
    },
    _dblTests_closure80: function _dblTests_closure80() {
    },
    _dblTests_closure81: function _dblTests_closure81() {
    },
    _dblTests_closure82: function _dblTests_closure82() {
    },
    _dblTests_closure83: function _dblTests_closure83() {
    },
    _dblTests_closure84: function _dblTests_closure84() {
    },
    _dblTests_closure85: function _dblTests_closure85() {
    },
    _dblTests_closure86: function _dblTests_closure86() {
    },
    _dblTests_closure87: function _dblTests_closure87() {
    },
    _dblTests_closure88: function _dblTests_closure88() {
    },
    _dblTests__closure7: function _dblTests__closure7() {
    },
    _dblTests_closure89: function _dblTests_closure89() {
    },
    _dblTests_closure90: function _dblTests_closure90() {
    },
    _dblTests_closure91: function _dblTests_closure91() {
    },
    _dblTests_closure92: function _dblTests_closure92() {
    },
    _dblTests_closure93: function _dblTests_closure93() {
    },
    _dblTests_closure94: function _dblTests_closure94() {
    },
    _dblTests_closure95: function _dblTests_closure95() {
    },
    _dblTests_closure96: function _dblTests_closure96() {
    },
    _dblTests_closure97: function _dblTests_closure97() {
    },
    _dblTests_closure98: function _dblTests_closure98() {
    },
    _dblTests_closure99: function _dblTests_closure99() {
    },
    _dblTests_closure100: function _dblTests_closure100() {
    },
    _dblTests_closure101: function _dblTests_closure101() {
    },
    _dblTests_closure102: function _dblTests_closure102() {
    },
    _dblTests_closure103: function _dblTests_closure103() {
    },
    _dblTests_closure104: function _dblTests_closure104() {
    },
    _dblTests_closure105: function _dblTests_closure105() {
    },
    _dblTests_closure106: function _dblTests_closure106() {
    },
    _dblTests_closure107: function _dblTests_closure107() {
    },
    _dblTests_closure108: function _dblTests_closure108() {
    },
    _dblTests_closure109: function _dblTests_closure109() {
    },
    _dblTests_closure110: function _dblTests_closure110() {
    },
    _dblTests_closure111: function _dblTests_closure111() {
    },
    _dblTests_closure112: function _dblTests_closure112() {
    },
    _dblTests_closure113: function _dblTests_closure113() {
    },
    _dblTests_closure114: function _dblTests_closure114() {
    },
    _dblTests_closure115: function _dblTests_closure115() {
    },
    _dblTests_closure116: function _dblTests_closure116() {
    },
    _dblTests_closure117: function _dblTests_closure117() {
    },
    _dblTests_closure118: function _dblTests_closure118() {
    },
    _dblTests__closure6: function _dblTests__closure6() {
    },
    _dblTests_closure119: function _dblTests_closure119() {
    },
    _dblTests_closure120: function _dblTests_closure120() {
    },
    _dblTests_closure121: function _dblTests_closure121() {
    },
    _ndblTests_closure26: function _ndblTests_closure26() {
    },
    _ndblTests_closure27: function _ndblTests_closure27() {
    },
    _ndblTests_closure28: function _ndblTests_closure28() {
    },
    _ndblTests_closure29: function _ndblTests_closure29() {
    },
    _ndblTests_closure30: function _ndblTests_closure30() {
    },
    _ndblTests_closure31: function _ndblTests_closure31() {
    },
    _ndblTests_closure32: function _ndblTests_closure32() {
    },
    _ndblTests_closure33: function _ndblTests_closure33() {
    },
    _ndblTests_closure34: function _ndblTests_closure34() {
    },
    _ndblTests_closure35: function _ndblTests_closure35() {
    },
    _ndblTests_closure36: function _ndblTests_closure36() {
    },
    _ndblTests_closure37: function _ndblTests_closure37() {
    },
    _ndblTests_closure38: function _ndblTests_closure38() {
    },
    _ndblTests_closure39: function _ndblTests_closure39() {
    },
    _ndblTests_closure40: function _ndblTests_closure40() {
    },
    _ndblTests_closure41: function _ndblTests_closure41() {
    },
    _ndblTests_closure42: function _ndblTests_closure42() {
    },
    _ndblTests_closure43: function _ndblTests_closure43() {
    },
    _ndblTests_closure44: function _ndblTests_closure44() {
    },
    _ndblTests_closure45: function _ndblTests_closure45() {
    },
    _ndblTests_closure46: function _ndblTests_closure46() {
    },
    _ndblTests_closure47: function _ndblTests_closure47() {
    },
    _ndblTests_closure48: function _ndblTests_closure48() {
    },
    _ndblTests_closure49: function _ndblTests_closure49() {
    },
    _ndblTests_closure50: function _ndblTests_closure50() {
    },
    _ndblTests_closure51: function _ndblTests_closure51() {
    },
    _ndblTests_closure52: function _ndblTests_closure52() {
    },
    _ndblTests_closure53: function _ndblTests_closure53() {
    },
    _ndblTests_closure54: function _ndblTests_closure54() {
    },
    _ndblTests_closure55: function _ndblTests_closure55() {
    },
    _ndblTests_closure56: function _ndblTests_closure56() {
    },
    _ndblTests_closure57: function _ndblTests_closure57() {
    },
    _ndblTests_closure58: function _ndblTests_closure58() {
    },
    _ndblTests_closure59: function _ndblTests_closure59() {
    },
    _ndblTests_closure60: function _ndblTests_closure60() {
    },
    _ndblTests_closure61: function _ndblTests_closure61() {
    },
    _ndblTests__closure11: function _ndblTests__closure11() {
    },
    _ndblTests_closure62: function _ndblTests_closure62() {
    },
    _ndblTests__closure10: function _ndblTests__closure10() {
    },
    _ndblTests_closure63: function _ndblTests_closure63() {
    },
    _ndblTests__closure9: function _ndblTests__closure9() {
    },
    _ndblTests_closure64: function _ndblTests_closure64() {
    },
    _ndblTests_closure65: function _ndblTests_closure65() {
    },
    _ndblTests_closure66: function _ndblTests_closure66() {
    },
    _ndblTests_closure67: function _ndblTests_closure67() {
    },
    _ndblTests_closure68: function _ndblTests_closure68() {
    },
    _ndblTests_closure69: function _ndblTests_closure69() {
    },
    _ndblTests_closure70: function _ndblTests_closure70() {
    },
    _ndblTests_closure71: function _ndblTests_closure71() {
    },
    _ndblTests_closure72: function _ndblTests_closure72() {
    },
    _ndblTests_closure73: function _ndblTests_closure73() {
    },
    _ndblTests_closure74: function _ndblTests_closure74() {
    },
    _ndblTests_closure75: function _ndblTests_closure75() {
    },
    _ndblTests_closure76: function _ndblTests_closure76() {
    },
    _ndblTests__closure8: function _ndblTests__closure8() {
    },
    _ndblTests_closure77: function _ndblTests_closure77() {
    },
    _ndblTests__closure7: function _ndblTests__closure7() {
    },
    _ndblTests_closure78: function _ndblTests_closure78() {
    },
    _ndblTests_closure79: function _ndblTests_closure79() {
    },
    _ndblTests_closure80: function _ndblTests_closure80() {
    },
    _ndblTests_closure81: function _ndblTests_closure81() {
    },
    _ndblTests_closure82: function _ndblTests_closure82() {
    },
    _ndblTests_closure83: function _ndblTests_closure83() {
    },
    _ndblTests_closure84: function _ndblTests_closure84() {
    },
    _ndblTests_closure85: function _ndblTests_closure85() {
    },
    _ndblTests_closure86: function _ndblTests_closure86() {
    },
    _ndblTests_closure87: function _ndblTests_closure87() {
    },
    _ndblTests_closure88: function _ndblTests_closure88() {
    },
    _ndblTests__closure6: function _ndblTests__closure6() {
    },
    _ndblTests_closure89: function _ndblTests_closure89() {
    },
    _ndblTests_closure90: function _ndblTests_closure90() {
    },
    _ndblTests_closure91: function _ndblTests_closure91() {
    },
    _ndblTests_closure92: function _ndblTests_closure92() {
    },
    _ndblTests_closure93: function _ndblTests_closure93() {
    },
    _ndblTests_closure94: function _ndblTests_closure94() {
    },
    _ndblTests_closure95: function _ndblTests_closure95() {
    },
    _ndblTests_closure96: function _ndblTests_closure96() {
    },
    _ndblTests_closure97: function _ndblTests_closure97() {
    },
    _ndblTests_closure98: function _ndblTests_closure98() {
    },
    _ndblTests_closure99: function _ndblTests_closure99() {
    },
    _ndblTests_closure100: function _ndblTests_closure100() {
    },
    _ndblTests_closure101: function _ndblTests_closure101() {
    },
    _ndblTests_closure102: function _ndblTests_closure102() {
    },
    _ndblTests_closure103: function _ndblTests_closure103() {
    },
    _ndblTests_closure104: function _ndblTests_closure104() {
    },
    _ndblTests_closure105: function _ndblTests_closure105() {
    },
    _ndblTests_closure106: function _ndblTests_closure106() {
    },
    _ndblTests_closure107: function _ndblTests_closure107() {
    },
    _ndblTests_closure108: function _ndblTests_closure108() {
    },
    _ndblTests_closure109: function _ndblTests_closure109() {
    },
    _ndblTests_closure110: function _ndblTests_closure110() {
    },
    _ndblTests_closure111: function _ndblTests_closure111() {
    },
    _ndblTests_closure112: function _ndblTests_closure112() {
    },
    _ndblTests_closure113: function _ndblTests_closure113() {
    },
    _ndblTests_closure114: function _ndblTests_closure114() {
    },
    _ndblTests_closure115: function _ndblTests_closure115() {
    },
    _ndblTests_closure116: function _ndblTests_closure116() {
    },
    _ndblTests_closure117: function _ndblTests_closure117() {
    },
    _ndblTests_closure118: function _ndblTests_closure118() {
    },
    _ndblTests_closure119: function _ndblTests_closure119() {
    },
    _nintTests_closure26: function _nintTests_closure26() {
    },
    _nintTests_closure27: function _nintTests_closure27() {
    },
    _nintTests_closure28: function _nintTests_closure28() {
    },
    _nintTests_closure29: function _nintTests_closure29() {
    },
    _nintTests_closure30: function _nintTests_closure30() {
    },
    _nintTests_closure31: function _nintTests_closure31() {
    },
    _nintTests_closure32: function _nintTests_closure32() {
    },
    _nintTests_closure33: function _nintTests_closure33() {
    },
    _nintTests_closure34: function _nintTests_closure34() {
    },
    _nintTests_closure35: function _nintTests_closure35() {
    },
    _nintTests_closure36: function _nintTests_closure36() {
    },
    _nintTests_closure37: function _nintTests_closure37() {
    },
    _nintTests_closure38: function _nintTests_closure38() {
    },
    _nintTests_closure39: function _nintTests_closure39() {
    },
    _nintTests_closure40: function _nintTests_closure40() {
    },
    _nintTests_closure41: function _nintTests_closure41() {
    },
    _nintTests_closure42: function _nintTests_closure42() {
    },
    _nintTests_closure43: function _nintTests_closure43() {
    },
    _nintTests_closure44: function _nintTests_closure44() {
    },
    _nintTests_closure45: function _nintTests_closure45() {
    },
    _nintTests_closure46: function _nintTests_closure46() {
    },
    _nintTests_closure47: function _nintTests_closure47() {
    },
    _nintTests_closure48: function _nintTests_closure48() {
    },
    _nintTests_closure49: function _nintTests_closure49() {
    },
    _nintTests_closure50: function _nintTests_closure50() {
    },
    _nintTests_closure51: function _nintTests_closure51() {
    },
    _nintTests_closure52: function _nintTests_closure52() {
    },
    _nintTests_closure53: function _nintTests_closure53() {
    },
    _nintTests_closure54: function _nintTests_closure54() {
    },
    _nintTests_closure55: function _nintTests_closure55() {
    },
    _nintTests_closure56: function _nintTests_closure56() {
    },
    _nintTests_closure57: function _nintTests_closure57() {
    },
    _nintTests_closure58: function _nintTests_closure58() {
    },
    _nintTests_closure59: function _nintTests_closure59() {
    },
    _nintTests_closure60: function _nintTests_closure60() {
    },
    _nintTests_closure61: function _nintTests_closure61() {
    },
    _nintTests__closure11: function _nintTests__closure11() {
    },
    _nintTests_closure62: function _nintTests_closure62() {
    },
    _nintTests__closure10: function _nintTests__closure10() {
    },
    _nintTests_closure63: function _nintTests_closure63() {
    },
    _nintTests__closure9: function _nintTests__closure9() {
    },
    _nintTests_closure64: function _nintTests_closure64() {
    },
    _nintTests_closure65: function _nintTests_closure65() {
    },
    _nintTests_closure66: function _nintTests_closure66() {
    },
    _nintTests_closure67: function _nintTests_closure67() {
    },
    _nintTests_closure68: function _nintTests_closure68() {
    },
    _nintTests_closure69: function _nintTests_closure69() {
    },
    _nintTests_closure70: function _nintTests_closure70() {
    },
    _nintTests_closure71: function _nintTests_closure71() {
    },
    _nintTests_closure72: function _nintTests_closure72() {
    },
    _nintTests_closure73: function _nintTests_closure73() {
    },
    _nintTests_closure74: function _nintTests_closure74() {
    },
    _nintTests_closure75: function _nintTests_closure75() {
    },
    _nintTests_closure76: function _nintTests_closure76() {
    },
    _nintTests__closure8: function _nintTests__closure8() {
    },
    _nintTests_closure77: function _nintTests_closure77() {
    },
    _nintTests__closure7: function _nintTests__closure7() {
    },
    _nintTests_closure78: function _nintTests_closure78() {
    },
    _nintTests_closure79: function _nintTests_closure79() {
    },
    _nintTests_closure80: function _nintTests_closure80() {
    },
    _nintTests_closure81: function _nintTests_closure81() {
    },
    _nintTests_closure82: function _nintTests_closure82() {
    },
    _nintTests_closure83: function _nintTests_closure83() {
    },
    _nintTests_closure84: function _nintTests_closure84() {
    },
    _nintTests_closure85: function _nintTests_closure85() {
    },
    _nintTests_closure86: function _nintTests_closure86() {
    },
    _nintTests_closure87: function _nintTests_closure87() {
    },
    _nintTests_closure88: function _nintTests_closure88() {
    },
    _nintTests__closure6: function _nintTests__closure6() {
    },
    _nintTests_closure89: function _nintTests_closure89() {
    },
    _nintTests_closure90: function _nintTests_closure90() {
    },
    _nintTests_closure91: function _nintTests_closure91() {
    },
    _nintTests_closure92: function _nintTests_closure92() {
    },
    _nintTests_closure93: function _nintTests_closure93() {
    },
    _nintTests_closure94: function _nintTests_closure94() {
    },
    _nintTests_closure95: function _nintTests_closure95() {
    },
    _nintTests_closure96: function _nintTests_closure96() {
    },
    _nintTests_closure97: function _nintTests_closure97() {
    },
    _nintTests_closure98: function _nintTests_closure98() {
    },
    _nintTests_closure99: function _nintTests_closure99() {
    },
    _nintTests_closure100: function _nintTests_closure100() {
    },
    _nintTests_closure101: function _nintTests_closure101() {
    },
    _nintTests_closure102: function _nintTests_closure102() {
    },
    _nintTests_closure103: function _nintTests_closure103() {
    },
    _nintTests_closure104: function _nintTests_closure104() {
    },
    _nintTests_closure105: function _nintTests_closure105() {
    },
    _nintTests_closure106: function _nintTests_closure106() {
    },
    _nintTests_closure107: function _nintTests_closure107() {
    },
    _nintTests_closure108: function _nintTests_closure108() {
    },
    _nintTests_closure109: function _nintTests_closure109() {
    },
    _nintTests_closure110: function _nintTests_closure110() {
    },
    _nintTests_closure111: function _nintTests_closure111() {
    },
    _nintTests_closure112: function _nintTests_closure112() {
    },
    _nintTests_closure113: function _nintTests_closure113() {
    },
    _nintTests_closure114: function _nintTests_closure114() {
    },
    _nintTests_closure115: function _nintTests_closure115() {
    },
    _nintTests_closure116: function _nintTests_closure116() {
    },
    _nintTests_closure117: function _nintTests_closure117() {
    },
    _nintTests_closure118: function _nintTests_closure118() {
    },
    _nintTests_closure119: function _nintTests_closure119() {
    },
    _Features0: function _Features0(t0) {
      this.$ti = t0;
    },
    _Features_forEach_$a0: function _Features_forEach_$a0(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.a = t2;
    },
    _FeatureTestExt_check_closure: function _FeatureTestExt_check_closure(t0, t1, t2, t3) {
      var _ = this;
      _.data = t0;
      _._this = t1;
      _.tc = t2;
      _.T = t3;
    },
    testLazyMaps(tc) {
      var t1 = new A.testLazyMaps_$initDataContext();
      tc.group$2("- Doubles", new A.testLazyMaps_closure(t1, tc));
      tc.group$2("- Nullable doubles", new A.testLazyMaps_closure0(t1, tc));
      tc.group$2("- Nullable integers", new A.testLazyMaps_closure1(t1, tc));
    },
    _intSq(n) {
      var t1, t2, t3;
      A._asNumQ(n);
      t1 = $.$get$_int();
      t2 = n == null;
      t3 = t1.call$1(t2 ? 0 : n);
      t1 = t1.call$1(t2 ? 0 : n);
      if (typeof t3 !== "number")
        return t3.$mul();
      if (typeof t1 !== "number")
        return A.iae(t1);
      return t3 * t1;
    },
    _dblSq(n) {
      var t1, t2, t3;
      A._asNumQ(n);
      t1 = $.$get$_dbl();
      t2 = n == null;
      t3 = t1.call$1(t2 ? 0 : n);
      t1 = t1.call$1(t2 ? 0 : n);
      if (typeof t3 !== "number")
        return t3.$mul();
      if (typeof t1 !== "number")
        return A.iae(t1);
      return t3 * t1;
    },
    _nf0($T) {
      return $T._as(-1);
    },
    _FeatureTestExt_test(_this, tc, data, $V) {
      tc.test$2("- " + _this.key, new A._FeatureTestExt_test_closure(data, _this, tc, $V));
    },
    testLazyMaps_$initDataContext: function testLazyMaps_$initDataContext() {
    },
    testLazyMaps_$initDataContext_closure: function testLazyMaps_$initDataContext_closure(t0, t1) {
      this.cast = t0;
      this.V = t1;
    },
    testLazyMaps_closure: function testLazyMaps_closure(t0, t1) {
      this.$$initDataContext = t0;
      this.tc = t1;
    },
    testLazyMaps_closure0: function testLazyMaps_closure0(t0, t1) {
      this.$$initDataContext = t0;
      this.tc = t1;
    },
    testLazyMaps_closure1: function testLazyMaps_closure1(t0, t1) {
      this.$$initDataContext = t0;
      this.tc = t1;
    },
    _dblTests_closure: function _dblTests_closure() {
    },
    _dblTests__closure5: function _dblTests__closure5() {
    },
    _dblTests_closure0: function _dblTests_closure0() {
    },
    _dblTests_closure1: function _dblTests_closure1() {
    },
    _dblTests_closure2: function _dblTests_closure2() {
    },
    _dblTests_closure3: function _dblTests_closure3() {
    },
    _dblTests_closure4: function _dblTests_closure4() {
    },
    _dblTests_closure5: function _dblTests_closure5() {
    },
    _dblTests_closure6: function _dblTests_closure6() {
    },
    _dblTests_closure7: function _dblTests_closure7() {
    },
    _dblTests_closure8: function _dblTests_closure8() {
    },
    _dblTests__closure4: function _dblTests__closure4() {
    },
    _dblTests_closure9: function _dblTests_closure9() {
    },
    _dblTests__closure3: function _dblTests__closure3() {
    },
    _dblTests_closure10: function _dblTests_closure10() {
    },
    _dblTests_closure11: function _dblTests_closure11() {
    },
    _dblTests_closure12: function _dblTests_closure12() {
    },
    _dblTests_closure13: function _dblTests_closure13() {
    },
    _dblTests_closure14: function _dblTests_closure14() {
    },
    _dblTests_closure15: function _dblTests_closure15() {
    },
    _dblTests_closure16: function _dblTests_closure16() {
    },
    _dblTests_closure17: function _dblTests_closure17() {
    },
    _dblTests_closure18: function _dblTests_closure18() {
    },
    _dblTests_closure19: function _dblTests_closure19() {
    },
    _dblTests_closure20: function _dblTests_closure20() {
    },
    _dblTests__closure2: function _dblTests__closure2() {
    },
    _dblTests_closure21: function _dblTests_closure21() {
    },
    _dblTests_closure22: function _dblTests_closure22() {
    },
    _dblTests_closure23: function _dblTests_closure23() {
    },
    _dblTests__closure1: function _dblTests__closure1() {
    },
    _dblTests_closure24: function _dblTests_closure24() {
    },
    _dblTests__closure0: function _dblTests__closure0() {
    },
    _dblTests_closure25: function _dblTests_closure25() {
    },
    _dblTests__closure: function _dblTests__closure() {
    },
    _ndblTests_closure: function _ndblTests_closure() {
    },
    _ndblTests__closure5: function _ndblTests__closure5() {
    },
    _ndblTests_closure0: function _ndblTests_closure0() {
    },
    _ndblTests_closure1: function _ndblTests_closure1() {
    },
    _ndblTests_closure2: function _ndblTests_closure2() {
    },
    _ndblTests_closure3: function _ndblTests_closure3() {
    },
    _ndblTests_closure4: function _ndblTests_closure4() {
    },
    _ndblTests_closure5: function _ndblTests_closure5() {
    },
    _ndblTests_closure6: function _ndblTests_closure6() {
    },
    _ndblTests_closure7: function _ndblTests_closure7() {
    },
    _ndblTests_closure8: function _ndblTests_closure8() {
    },
    _ndblTests__closure4: function _ndblTests__closure4() {
    },
    _ndblTests_closure9: function _ndblTests_closure9() {
    },
    _ndblTests__closure3: function _ndblTests__closure3() {
    },
    _ndblTests_closure10: function _ndblTests_closure10() {
    },
    _ndblTests_closure11: function _ndblTests_closure11() {
    },
    _ndblTests_closure12: function _ndblTests_closure12() {
    },
    _ndblTests_closure13: function _ndblTests_closure13() {
    },
    _ndblTests_closure14: function _ndblTests_closure14() {
    },
    _ndblTests_closure15: function _ndblTests_closure15() {
    },
    _ndblTests_closure16: function _ndblTests_closure16() {
    },
    _ndblTests_closure17: function _ndblTests_closure17() {
    },
    _ndblTests_closure18: function _ndblTests_closure18() {
    },
    _ndblTests_closure19: function _ndblTests_closure19() {
    },
    _ndblTests_closure20: function _ndblTests_closure20() {
    },
    _ndblTests__closure2: function _ndblTests__closure2() {
    },
    _ndblTests_closure21: function _ndblTests_closure21() {
    },
    _ndblTests_closure22: function _ndblTests_closure22() {
    },
    _ndblTests_closure23: function _ndblTests_closure23() {
    },
    _ndblTests__closure1: function _ndblTests__closure1() {
    },
    _ndblTests_closure24: function _ndblTests_closure24() {
    },
    _ndblTests__closure0: function _ndblTests__closure0() {
    },
    _ndblTests_closure25: function _ndblTests_closure25() {
    },
    _ndblTests__closure: function _ndblTests__closure() {
    },
    _nintTests_closure: function _nintTests_closure() {
    },
    _nintTests__closure5: function _nintTests__closure5() {
    },
    _nintTests_closure0: function _nintTests_closure0() {
    },
    _nintTests_closure1: function _nintTests_closure1() {
    },
    _nintTests_closure2: function _nintTests_closure2() {
    },
    _nintTests_closure3: function _nintTests_closure3() {
    },
    _nintTests_closure4: function _nintTests_closure4() {
    },
    _nintTests_closure5: function _nintTests_closure5() {
    },
    _nintTests_closure6: function _nintTests_closure6() {
    },
    _nintTests_closure7: function _nintTests_closure7() {
    },
    _nintTests_closure8: function _nintTests_closure8() {
    },
    _nintTests__closure4: function _nintTests__closure4() {
    },
    _nintTests_closure9: function _nintTests_closure9() {
    },
    _nintTests__closure3: function _nintTests__closure3() {
    },
    _nintTests_closure10: function _nintTests_closure10() {
    },
    _nintTests_closure11: function _nintTests_closure11() {
    },
    _nintTests_closure12: function _nintTests_closure12() {
    },
    _nintTests_closure13: function _nintTests_closure13() {
    },
    _nintTests_closure14: function _nintTests_closure14() {
    },
    _nintTests_closure15: function _nintTests_closure15() {
    },
    _nintTests_closure16: function _nintTests_closure16() {
    },
    _nintTests_closure17: function _nintTests_closure17() {
    },
    _nintTests_closure18: function _nintTests_closure18() {
    },
    _nintTests_closure19: function _nintTests_closure19() {
    },
    _nintTests_closure20: function _nintTests_closure20() {
    },
    _nintTests__closure2: function _nintTests__closure2() {
    },
    _nintTests_closure21: function _nintTests_closure21() {
    },
    _nintTests_closure22: function _nintTests_closure22() {
    },
    _nintTests_closure23: function _nintTests_closure23() {
    },
    _nintTests__closure1: function _nintTests__closure1() {
    },
    _nintTests_closure24: function _nintTests_closure24() {
    },
    _nintTests__closure0: function _nintTests__closure0() {
    },
    _nintTests_closure25: function _nintTests_closure25() {
    },
    _nintTests__closure: function _nintTests__closure() {
    },
    _Features: function _Features(t0) {
      this.$ti = t0;
    },
    _Features_forEach_$a: function _Features_forEach_$a(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.a = t2;
    },
    _FeatureTestExt_test_closure: function _FeatureTestExt_test_closure(t0, t1, t2, t3) {
      var _ = this;
      _.data = t0;
      _._this = t1;
      _.tc = t2;
      _.V = t3;
    },
    execute4(tc) {
      tc.launch$1(new A.execute_closure9(tc));
    },
    execute_closure9: function execute_closure9(t0) {
      this.tc = t0;
    },
    execute__closure10: function execute__closure10(t0) {
      this.tc = t0;
    },
    execute___closure97: function execute___closure97() {
    },
    execute___closure98: function execute___closure98() {
    },
    execute___closure99: function execute___closure99() {
    },
    execute___closure100: function execute___closure100() {
    },
    execute__closure11: function execute__closure11(t0) {
      this.tc = t0;
    },
    execute___closure94: function execute___closure94() {
    },
    execute___closure95: function execute___closure95() {
    },
    execute___closure96: function execute___closure96() {
    },
    execute__closure12: function execute__closure12(t0) {
      this.tc = t0;
    },
    execute___closure88: function execute___closure88() {
    },
    execute___closure89: function execute___closure89() {
    },
    execute___closure90: function execute___closure90() {
    },
    execute___closure91: function execute___closure91() {
    },
    execute___closure92: function execute___closure92() {
    },
    execute___closure93: function execute___closure93() {
    },
    execute__closure13: function execute__closure13(t0) {
      this.tc = t0;
    },
    execute___closure82: function execute___closure82(t0) {
      this.tc = t0;
    },
    execute____closure126: function execute____closure126() {
    },
    execute___closure83: function execute___closure83(t0) {
      this.tc = t0;
    },
    execute____closure125: function execute____closure125() {
    },
    execute_____closure70: function execute_____closure70(t0, t1) {
      this._box_0 = t0;
      this.w = t1;
    },
    execute___closure84: function execute___closure84(t0) {
      this.tc = t0;
    },
    execute____closure124: function execute____closure124() {
    },
    execute_____closure69: function execute_____closure69(t0, t1) {
      this._box_1 = t0;
      this.w = t1;
    },
    execute___closure85: function execute___closure85(t0) {
      this.tc = t0;
    },
    execute___closure_hook0: function execute___closure_hook0(t0) {
      this._box_2 = t0;
    },
    execute____closure123: function execute____closure123(t0) {
      this._box_2 = t0;
    },
    execute___closure86: function execute___closure86(t0) {
      this.tc = t0;
    },
    execute____closure122: function execute____closure122() {
    },
    execute___closure87: function execute___closure87(t0) {
      this.tc = t0;
    },
    execute____closure121: function execute____closure121() {
    },
    execute__closure14: function execute__closure14(t0) {
      this.tc = t0;
    },
    execute___closure72: function execute___closure72(t0) {
      this.tc = t0;
    },
    execute____closure120: function execute____closure120(t0) {
      this.tc = t0;
    },
    execute___closure73: function execute___closure73(t0) {
      this.tc = t0;
    },
    execute____closure119: function execute____closure119() {
    },
    execute___closure74: function execute___closure74(t0) {
      this.tc = t0;
    },
    execute____closure118: function execute____closure118() {
    },
    execute___closure75: function execute___closure75(t0) {
      this.tc = t0;
    },
    execute____closure117: function execute____closure117() {
    },
    execute___closure76: function execute___closure76(t0) {
      this.tc = t0;
    },
    execute____closure116: function execute____closure116(t0) {
      this.tc = t0;
    },
    execute___closure77: function execute___closure77(t0) {
      this.tc = t0;
    },
    execute____closure115: function execute____closure115(t0) {
      this.tc = t0;
    },
    execute___closure78: function execute___closure78(t0) {
      this.tc = t0;
    },
    execute____closure114: function execute____closure114() {
    },
    execute___closure79: function execute___closure79(t0) {
      this.tc = t0;
    },
    execute____closure113: function execute____closure113() {
    },
    execute___closure80: function execute___closure80(t0) {
      this.tc = t0;
    },
    execute____closure112: function execute____closure112() {
    },
    execute____closure_createTask0: function execute____closure_createTask0(t0, t1, t2) {
      this._box_3 = t0;
      this.w = t1;
      this.completedTasks = t2;
    },
    execute_____createTask_closure0: function execute_____createTask_closure0(t0, t1) {
      this.completedTasks = t0;
      this.id = t1;
    },
    execute___closure81: function execute___closure81(t0) {
      this.tc = t0;
    },
    execute____closure111: function execute____closure111() {
    },
    execute____closure_createTask: function execute____closure_createTask(t0, t1, t2) {
      this._box_4 = t0;
      this.w = t1;
      this.completedTasks = t2;
    },
    execute_____createTask_closure: function execute_____createTask_closure(t0, t1) {
      this.completedTasks = t0;
      this.id = t1;
    },
    execute5(tc) {
      tc.launch$1(new A.execute_closure8(tc));
    },
    execute_closure8: function execute_closure8(t0) {
      this.tc = t0;
    },
    execute__closure9: function execute__closure9(t0) {
      this.tc = t0;
    },
    execute___closure56: function execute___closure56(t0) {
      this.tc = t0;
    },
    execute____closure110: function execute____closure110() {
    },
    execute___closure57: function execute___closure57(t0) {
      this.tc = t0;
    },
    execute____closure109: function execute____closure109() {
    },
    execute___closure58: function execute___closure58(t0) {
      this.tc = t0;
    },
    execute____closure108: function execute____closure108() {
    },
    execute___closure59: function execute___closure59(t0) {
      this.tc = t0;
    },
    execute____closure107: function execute____closure107() {
    },
    execute___closure60: function execute___closure60(t0) {
      this.tc = t0;
    },
    execute___closure_hook: function execute___closure_hook(t0) {
      this._box_0 = t0;
    },
    execute____closure106: function execute____closure106(t0) {
      this._box_0 = t0;
    },
    execute___closure61: function execute___closure61(t0) {
      this.tc = t0;
    },
    execute____closure105: function execute____closure105() {
    },
    execute___closure62: function execute___closure62(t0) {
      this.tc = t0;
    },
    execute____closure104: function execute____closure104() {
    },
    execute___closure63: function execute___closure63(t0) {
      this.tc = t0;
    },
    execute____closure103: function execute____closure103() {
    },
    execute___closure64: function execute___closure64(t0) {
      this.tc = t0;
    },
    execute____closure102: function execute____closure102() {
    },
    execute___closure65: function execute___closure65(t0) {
      this.tc = t0;
    },
    execute____closure101: function execute____closure101() {
    },
    execute___closure66: function execute___closure66(t0) {
      this.tc = t0;
    },
    execute____closure100: function execute____closure100() {
    },
    execute___closure67: function execute___closure67(t0) {
      this.tc = t0;
    },
    execute____closure99: function execute____closure99() {
    },
    execute___closure68: function execute___closure68(t0) {
      this.tc = t0;
    },
    execute____closure98: function execute____closure98() {
    },
    execute___closure69: function execute___closure69(t0) {
      this.tc = t0;
    },
    execute____closure97: function execute____closure97() {
    },
    execute___closure70: function execute___closure70(t0) {
      this.tc = t0;
    },
    execute____closure96: function execute____closure96() {
    },
    execute___closure71: function execute___closure71(t0) {
      this.tc = t0;
    },
    execute____closure95: function execute____closure95() {
    },
    execute6(tc) {
      tc.launch$1(new A.execute_closure7(tc));
    },
    execute_closure7: function execute_closure7(t0) {
      this.tc = t0;
    },
    execute__closure8: function execute__closure8(t0) {
      this.tc = t0;
    },
    execute___closure49: function execute___closure49(t0) {
      this.tc = t0;
    },
    execute____closure94: function execute____closure94() {
    },
    execute_____closure68: function execute_____closure68(t0, t1, t2, t3) {
      var _ = this;
      _.errors = t0;
      _.maxErrors = t1;
      _.sub = t2;
      _.done = t3;
    },
    execute___closure50: function execute___closure50(t0) {
      this.tc = t0;
    },
    execute____closure93: function execute____closure93() {
    },
    execute___closure51: function execute___closure51(t0) {
      this.tc = t0;
    },
    execute____closure92: function execute____closure92() {
    },
    execute___closure52: function execute___closure52(t0) {
      this.tc = t0;
    },
    execute____closure91: function execute____closure91() {
    },
    execute___closure53: function execute___closure53(t0) {
      this.tc = t0;
    },
    execute____closure90: function execute____closure90() {
    },
    execute____closure_pause: function execute____closure_pause(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.sub = t1;
      _.numbers = t2;
      _.errors = t3;
    },
    execute____closure_resume: function execute____closure_resume(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.numbers = t1;
      _.errors = t2;
      _.sub = t3;
    },
    execute___closure54: function execute___closure54(t0) {
      this.tc = t0;
    },
    execute____closure89: function execute____closure89() {
    },
    execute___closure55: function execute___closure55(t0) {
      this.tc = t0;
    },
    execute____closure88: function execute____closure88() {
    },
    execute_____closure66: function execute_____closure66(t0) {
      this._box_1 = t0;
    },
    execute_____closure67: function execute_____closure67(t0) {
      this._box_1 = t0;
    },
    execute7(tc) {
      tc.launch$1(new A.execute_closure4(tc));
    },
    execute_closure4: function execute_closure4(t0) {
      this.tc = t0;
    },
    execute__closure5: function execute__closure5(t0, t1, t2) {
      this.tc = t0;
      this.localService = t1;
      this.regExp = t2;
    },
    execute___closure35: function execute___closure35(t0, t1, t2) {
      this.tc = t0;
      this.localService = t1;
      this.regExp = t2;
    },
    execute____closure58: function execute____closure58(t0) {
      this.localService = t0;
    },
    execute_____closure42: function execute_____closure42() {
    },
    execute____closure59: function execute____closure59(t0, t1, t2) {
      this.localService = t0;
      this.tc = t1;
      this.regExp = t2;
    },
    execute_____closure41: function execute_____closure41(t0, t1) {
      this.tc = t0;
      this.regExp = t1;
    },
    execute______closure46: function execute______closure46(t0) {
      this.regExp = t0;
    },
    execute____closure60: function execute____closure60(t0, t1, t2) {
      this.localService = t0;
      this.tc = t1;
      this.regExp = t2;
    },
    execute_____closure40: function execute_____closure40(t0, t1) {
      this.tc = t0;
      this.regExp = t1;
    },
    execute______closure45: function execute______closure45(t0) {
      this.regExp = t0;
    },
    execute___closure36: function execute___closure36(t0, t1) {
      this.tc = t0;
      this.localService = t1;
    },
    execute____closure55: function execute____closure55(t0) {
      this.localService = t0;
    },
    execute_____closure39: function execute_____closure39() {
    },
    execute____closure56: function execute____closure56(t0, t1) {
      this.localService = t0;
      this.tc = t1;
    },
    execute_____closure38: function execute_____closure38(t0) {
      this.tc = t0;
    },
    execute______closure44: function execute______closure44() {
    },
    execute____closure57: function execute____closure57(t0, t1) {
      this.localService = t0;
      this.tc = t1;
    },
    execute_____closure37: function execute_____closure37(t0) {
      this.tc = t0;
    },
    execute______closure43: function execute______closure43() {
    },
    execute___closure37: function execute___closure37(t0, t1) {
      this.tc = t0;
      this.localService = t1;
    },
    execute____closure52: function execute____closure52(t0) {
      this.localService = t0;
    },
    execute_____closure36: function execute_____closure36(t0) {
      this.list = t0;
    },
    execute____closure53: function execute____closure53(t0, t1) {
      this.localService = t0;
      this.tc = t1;
    },
    execute_____closure35: function execute_____closure35(t0) {
      this.tc = t0;
    },
    execute______closure42: function execute______closure42() {
    },
    execute_______closure4: function execute_______closure4() {
    },
    execute____closure54: function execute____closure54(t0, t1) {
      this.localService = t0;
      this.tc = t1;
    },
    execute_____closure34: function execute_____closure34(t0) {
      this.tc = t0;
    },
    execute______closure41: function execute______closure41() {
    },
    execute_______closure3: function execute_______closure3() {
    },
    execute8(tc) {
      tc.launch$1(new A.execute_closure5(tc));
    },
    execute_closure5: function execute_closure5(t0) {
      this.tc = t0;
    },
    execute__closure6: function execute__closure6(t0) {
      this.tc = t0;
    },
    execute___closure38: function execute___closure38(t0) {
      this.tc = t0;
    },
    execute____closure62: function execute____closure62() {
    },
    execute___closure39: function execute___closure39(t0) {
      this.tc = t0;
    },
    execute____closure61: function execute____closure61(t0) {
      this.tc = t0;
    },
    execute_____closure43: function execute_____closure43(t0, t1) {
      this._box_0 = t0;
      this.cache = t1;
    },
    execute9(tc) {
      tc.launch$1(new A.execute_closure0(tc));
    },
    _testFiniteCancelation(worker, $N, token) {
      return A._testFiniteCancelation$body(worker, $N, token);
    },
    _testFiniteCancelation$body(worker, $N, token) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Record_2_List_int_digits_and_nullable_Object_exception),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], n, ex, t1, exception0, exception, digits, $async$exception0;
      var $async$_testFiniteCancelation = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              exception = null;
              digits = A._setArrayType([], type$.JSArray_int);
              $async$handler = 4;
              t1 = new A._StreamIterator(A.checkNotNullable(worker.finite_20ms$2(50 * $N, token), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 7;
            case 10:
              // for condition
              $async$goto = 12;
              return A._asyncAwait(t1.moveNext$0(), $async$_testFiniteCancelation);
            case 12:
              // returning from await.
              if (!$async$result) {
                // goto after for
                $async$goto = 11;
                break;
              }
              n = t1.get$current();
              J.add$1$ax(digits, n);
              // goto for condition
              $async$goto = 10;
              break;
            case 11:
              // after for
              $async$next.push(9);
              // goto finally
              $async$goto = 8;
              break;
            case 7:
              // uncaught
              $async$next = [4];
            case 8:
              // finally
              $async$handler = 4;
              $async$goto = 13;
              return A._asyncAwait(t1.cancel$0(), $async$_testFiniteCancelation);
            case 13:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 9:
              // after finally
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception0 = $async$errorStack.pop();
              ex = A.unwrapException($async$exception0);
              exception = ex;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              $async$returnValue = new A._Record_2_digits_ex78ception(digits, exception);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$_testFiniteCancelation, $async$completer);
    },
    _testInfiniteCancelation(worker, token) {
      return A._testInfiniteCancelation$body(worker, token);
    },
    _testInfiniteCancelation$body(worker, token) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Record_2_List_int_digits_and_nullable_Object_exception),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], n, ex, t1, exception0, exception, digits, $async$exception0;
      var $async$_testInfiniteCancelation = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              exception = null;
              digits = A._setArrayType([], type$.JSArray_int);
              $async$handler = 4;
              t1 = new A._StreamIterator(A.checkNotNullable(worker.infinite_20ms$1(token), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 7;
            case 10:
              // for condition
              $async$goto = 12;
              return A._asyncAwait(t1.moveNext$0(), $async$_testInfiniteCancelation);
            case 12:
              // returning from await.
              if (!$async$result) {
                // goto after for
                $async$goto = 11;
                break;
              }
              n = t1.get$current();
              J.add$1$ax(digits, n);
              // goto for condition
              $async$goto = 10;
              break;
            case 11:
              // after for
              $async$next.push(9);
              // goto finally
              $async$goto = 8;
              break;
            case 7:
              // uncaught
              $async$next = [4];
            case 8:
              // finally
              $async$handler = 4;
              $async$goto = 13;
              return A._asyncAwait(t1.cancel$0(), $async$_testInfiniteCancelation);
            case 13:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 9:
              // after finally
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception0 = $async$errorStack.pop();
              ex = A.unwrapException($async$exception0);
              exception = ex;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              $async$returnValue = new A._Record_2_digits_ex78ception(digits, exception);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$_testInfiniteCancelation, $async$completer);
    },
    _testFinitePoolCancelation(pool, $N, count, token) {
      return A._testFinitePoolCancelation$body(pool, $N, count, token);
    },
    _testFinitePoolCancelation$body(pool, $N, count, token) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Record_2_int_errors_and_int_success),
        $async$returnValue, t1, _box_0, tasks, i;
      var $async$_testFinitePoolCancelation = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_0 = {};
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              i = _box_0.errors = _box_0.success = 0;
              for (t1 = type$.dynamic; i < count; ++i)
                B.JSArray_methods.add$1(tasks, pool.finite_20ms$2($N, token).toList$0(0).then$1$2$onError(new A._testFinitePoolCancelation_closure(_box_0), new A._testFinitePoolCancelation_closure0(_box_0), t1));
              A.expect(_box_0.success, B._OrderingMatcher_HCW, null);
              A.expect(_box_0.errors, B._OrderingMatcher_HCW, null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t1), $async$_testFinitePoolCancelation);
            case 3:
              // returning from await.
              A.expect(pool._worker_pool$_queue.get$length(0), B._OrderingMatcher_kMx, null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_wait(tasks, false, t1), $async$_testFinitePoolCancelation);
            case 4:
              // returning from await.
              t1 = _box_0.success;
              $async$returnValue = new A._Record_2_errors_success(_box_0.errors, t1);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_testFinitePoolCancelation, $async$completer);
    },
    _testInfinitePoolCancelation(pool, count, token) {
      return A._testInfinitePoolCancelation$body(pool, count, token);
    },
    _testInfinitePoolCancelation$body(pool, count, token) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Record_2_int_errors_and_int_success),
        $async$returnValue, t1, _box_0, tasks, i;
      var $async$_testInfinitePoolCancelation = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_0 = {};
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              i = _box_0.errors = _box_0.success = 0;
              for (t1 = type$.dynamic; i < count; ++i)
                B.JSArray_methods.add$1(tasks, pool.infinite_20ms$1(token).toList$0(0).then$1$2$onError(new A._testInfinitePoolCancelation_closure(_box_0), new A._testInfinitePoolCancelation_closure0(_box_0), t1));
              A.expect(_box_0.success, B._OrderingMatcher_HCW, null);
              A.expect(_box_0.errors, B._OrderingMatcher_HCW, null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t1), $async$_testInfinitePoolCancelation);
            case 3:
              // returning from await.
              A.expect(pool._worker_pool$_queue.get$length(0), B._OrderingMatcher_kMx, null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_wait(tasks, false, t1), $async$_testInfinitePoolCancelation);
            case 4:
              // returning from await.
              t1 = _box_0.success;
              $async$returnValue = new A._Record_2_errors_success(_box_0.errors, t1);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_testInfinitePoolCancelation, $async$completer);
    },
    execute_closure0: function execute_closure0(t0) {
      this.tc = t0;
    },
    execute__closure0: function execute__closure0(t0) {
      this.tc = t0;
    },
    execute___closure2: function execute___closure2(t0) {
      this.tc = t0;
    },
    execute____closure24: function execute____closure24(t0) {
      this.tc = t0;
    },
    execute_____closure29: function execute_____closure29() {
    },
    execute______closure40: function execute______closure40(t0) {
      this._box_0 = t0;
    },
    execute____closure25: function execute____closure25(t0) {
      this.tc = t0;
    },
    execute_____closure28: function execute_____closure28() {
    },
    execute____closure26: function execute____closure26(t0) {
      this.tc = t0;
    },
    execute_____closure27: function execute_____closure27() {
    },
    execute____closure27: function execute____closure27(t0) {
      this.tc = t0;
    },
    execute_____closure26: function execute_____closure26() {
    },
    execute______closure39: function execute______closure39(t0) {
      this._box_1 = t0;
    },
    execute____closure28: function execute____closure28(t0) {
      this.tc = t0;
    },
    execute_____closure25: function execute_____closure25() {
    },
    execute______closure34: function execute______closure34(t0) {
      this._box_2 = t0;
    },
    execute______closure35: function execute______closure35() {
    },
    execute______closure36: function execute______closure36() {
    },
    execute______closure37: function execute______closure37() {
    },
    execute______closure38: function execute______closure38() {
    },
    execute____closure29: function execute____closure29(t0) {
      this.tc = t0;
    },
    execute_____closure24: function execute_____closure24() {
    },
    execute______closure29: function execute______closure29(t0) {
      this._box_3 = t0;
    },
    execute______closure30: function execute______closure30() {
    },
    execute______closure31: function execute______closure31() {
    },
    execute______closure32: function execute______closure32() {
    },
    execute______closure33: function execute______closure33() {
    },
    execute___closure3: function execute___closure3(t0) {
      this.tc = t0;
    },
    execute____closure18: function execute____closure18(t0) {
      this.tc = t0;
    },
    execute_____closure23: function execute_____closure23() {
    },
    execute____closure19: function execute____closure19(t0) {
      this.tc = t0;
    },
    execute_____closure22: function execute_____closure22() {
    },
    execute____closure20: function execute____closure20(t0) {
      this.tc = t0;
    },
    execute_____closure21: function execute_____closure21() {
    },
    execute____closure21: function execute____closure21(t0) {
      this.tc = t0;
    },
    execute_____closure20: function execute_____closure20() {
    },
    execute______closure25: function execute______closure25() {
    },
    execute_______closure2: function execute_______closure2() {
    },
    execute______closure26: function execute______closure26() {
    },
    execute_______closure0: function execute_______closure0() {
    },
    execute_______closure1: function execute_______closure1() {
    },
    execute______closure27: function execute______closure27() {
    },
    execute_______closure: function execute_______closure() {
    },
    execute______closure28: function execute______closure28() {
    },
    execute____closure22: function execute____closure22(t0) {
      this.tc = t0;
    },
    execute_____closure19: function execute_____closure19() {
    },
    execute______closure12: function execute______closure12(t0, t1, t2) {
      this.start = t0;
      this.status = t1;
      this.i = t2;
    },
    execute______closure14: function execute______closure14(t0, t1, t2) {
      this._box_4 = t0;
      this.status = t1;
      this.i = t2;
    },
    execute______closure13: function execute______closure13(t0, t1) {
      this.status = t0;
      this.i = t1;
    },
    execute______closure15: function execute______closure15() {
    },
    execute______closure16: function execute______closure16() {
    },
    execute______closure17: function execute______closure17() {
    },
    execute______closure18: function execute______closure18() {
    },
    execute______closure19: function execute______closure19() {
    },
    execute______closure20: function execute______closure20() {
    },
    execute______closure21: function execute______closure21() {
    },
    execute______closure22: function execute______closure22() {
    },
    execute______closure23: function execute______closure23() {
    },
    execute______closure24: function execute______closure24() {
    },
    execute____closure23: function execute____closure23(t0) {
      this.tc = t0;
    },
    execute_____closure18: function execute_____closure18() {
    },
    execute______closure: function execute______closure(t0, t1, t2) {
      this.start = t0;
      this.status = t1;
      this.i = t2;
    },
    execute______closure1: function execute______closure1(t0, t1, t2) {
      this._box_5 = t0;
      this.status = t1;
      this.i = t2;
    },
    execute______closure0: function execute______closure0(t0, t1) {
      this.status = t0;
      this.i = t1;
    },
    execute______closure2: function execute______closure2() {
    },
    execute______closure3: function execute______closure3() {
    },
    execute______closure4: function execute______closure4() {
    },
    execute______closure5: function execute______closure5() {
    },
    execute______closure6: function execute______closure6() {
    },
    execute______closure7: function execute______closure7() {
    },
    execute______closure8: function execute______closure8() {
    },
    execute______closure9: function execute______closure9() {
    },
    execute______closure10: function execute______closure10() {
    },
    execute______closure11: function execute______closure11() {
    },
    execute___closure4: function execute___closure4(t0) {
      this.tc = t0;
    },
    execute____closure14: function execute____closure14(t0) {
      this.tc = t0;
    },
    execute_____closure17: function execute_____closure17() {
    },
    execute____closure15: function execute____closure15(t0) {
      this.tc = t0;
    },
    execute_____closure16: function execute_____closure16() {
    },
    execute____closure16: function execute____closure16(t0) {
      this.tc = t0;
    },
    execute_____closure15: function execute_____closure15() {
    },
    execute____closure17: function execute____closure17(t0) {
      this.tc = t0;
    },
    execute_____closure14: function execute_____closure14() {
    },
    execute___closure5: function execute___closure5(t0) {
      this.tc = t0;
    },
    execute____closure10: function execute____closure10(t0) {
      this.tc = t0;
    },
    execute_____closure13: function execute_____closure13() {
    },
    execute____closure11: function execute____closure11(t0) {
      this.tc = t0;
    },
    execute_____closure12: function execute_____closure12() {
    },
    execute____closure12: function execute____closure12(t0) {
      this.tc = t0;
    },
    execute_____closure11: function execute_____closure11() {
    },
    execute____closure13: function execute____closure13(t0) {
      this.tc = t0;
    },
    execute_____closure10: function execute_____closure10() {
    },
    execute___closure6: function execute___closure6(t0) {
      this.tc = t0;
    },
    execute____closure6: function execute____closure6(t0) {
      this.tc = t0;
    },
    execute_____closure9: function execute_____closure9() {
    },
    execute____closure7: function execute____closure7(t0) {
      this.tc = t0;
    },
    execute_____closure8: function execute_____closure8() {
    },
    execute____closure8: function execute____closure8(t0) {
      this.tc = t0;
    },
    execute_____closure7: function execute_____closure7() {
    },
    execute____closure9: function execute____closure9(t0) {
      this.tc = t0;
    },
    execute_____closure6: function execute_____closure6() {
    },
    _testFinitePoolCancelation_closure: function _testFinitePoolCancelation_closure(t0) {
      this._box_0 = t0;
    },
    _testFinitePoolCancelation_closure0: function _testFinitePoolCancelation_closure0(t0) {
      this._box_0 = t0;
    },
    _testInfinitePoolCancelation_closure: function _testInfinitePoolCancelation_closure(t0) {
      this._box_0 = t0;
    },
    _testInfinitePoolCancelation_closure0: function _testInfinitePoolCancelation_closure0(t0) {
      this._box_0 = t0;
    },
    execute10(tc) {
      var france = new A.Country(1, "France");
      tc.launch$1(new A.execute_closure1(tc, new A.execute_dob(), new A.City("12345", "fr-12345", france), new A.City("12345", "be-12345", new A.Country(2, "Belgium")), new A.City("67890", "fr-67890", france)));
    },
    execute_dob: function execute_dob() {
    },
    execute_closure1: function execute_closure1(t0, t1, t2, t3, t4) {
      var _ = this;
      _.tc = t0;
      _.dob = t1;
      _.cityAFr = t2;
      _.cityABe = t3;
      _.cityBFr = t4;
    },
    execute__closure1: function execute__closure1(t0, t1, t2, t3, t4) {
      var _ = this;
      _.tc = t0;
      _.dob = t1;
      _.cityAFr = t2;
      _.cityABe = t3;
      _.cityBFr = t4;
    },
    execute__closure_testSum: function execute__closure_testSum() {
    },
    execute___closure7: function execute___closure7(t0, t1, t2) {
      this.tc = t0;
      this.dob = t1;
      this.cityAFr = t2;
    },
    execute____closure41: function execute____closure41(t0, t1) {
      this.dob = t0;
      this.cityAFr = t1;
    },
    execute_____closure32: function execute_____closure32(t0) {
      this.context1 = t0;
    },
    execute_____closure33: function execute_____closure33(t0) {
      this.context2 = t0;
    },
    execute____closure42: function execute____closure42(t0, t1) {
      this.dob = t0;
      this.cityAFr = t1;
    },
    execute_____closure30: function execute_____closure30(t0) {
      this.context1 = t0;
    },
    execute_____closure31: function execute_____closure31(t0) {
      this.context2 = t0;
    },
    execute___closure8: function execute___closure8(t0, t1) {
      this.tc = t0;
      this.testSum = t1;
    },
    execute____closure40: function execute____closure40(t0, t1) {
      this.testSum = t0;
      this.tc = t1;
    },
    execute___closure9: function execute___closure9(t0, t1) {
      this.tc = t0;
      this.testSum = t1;
    },
    execute____closure39: function execute____closure39(t0, t1) {
      this.testSum = t0;
      this.tc = t1;
    },
    execute___closure10: function execute___closure10(t0, t1) {
      this.tc = t0;
      this.testSum = t1;
    },
    execute____closure38: function execute____closure38(t0, t1) {
      this.testSum = t0;
      this.tc = t1;
    },
    execute___closure11: function execute___closure11(t0, t1) {
      this.tc = t0;
      this.testSum = t1;
    },
    execute____closure37: function execute____closure37(t0) {
      this.testSum = t0;
    },
    execute___closure12: function execute___closure12(t0, t1, t2) {
      this.tc = t0;
      this.me = t1;
      this.p1 = t2;
    },
    execute____closure36: function execute____closure36(t0, t1) {
      this.me = t0;
      this.p1 = t1;
    },
    execute___closure13: function execute___closure13(t0, t1, t2, t3, t4) {
      var _ = this;
      _.tc = t0;
      _.me = t1;
      _.p1 = t2;
      _.c1 = t3;
      _.p2 = t4;
    },
    execute____closure35: function execute____closure35(t0, t1, t2, t3) {
      var _ = this;
      _.me = t0;
      _.p1 = t1;
      _.c1 = t2;
      _.p2 = t3;
    },
    execute___closure14: function execute___closure14(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.tc = t0;
      _.p1 = t1;
      _.c1 = t2;
      _.p2 = t3;
      _.c2 = t4;
      _.c3 = t5;
      _.c4 = t6;
      _.p3 = t7;
      _.c5 = t8;
    },
    execute____closure34: function execute____closure34(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.p1 = t0;
      _.c1 = t1;
      _.p2 = t2;
      _.c2 = t3;
      _.c3 = t4;
      _.c4 = t5;
      _.p3 = t6;
      _.c5 = t7;
    },
    execute___closure15: function execute___closure15(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.tc = t0;
      _.c1 = t1;
      _.p1 = t2;
      _.p2 = t3;
      _.c2 = t4;
      _.c3 = t5;
      _.c4 = t6;
      _.c5 = t7;
      _.p3 = t8;
    },
    execute____closure33: function execute____closure33(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.c1 = t0;
      _.p1 = t1;
      _.p2 = t2;
      _.c2 = t3;
      _.c3 = t4;
      _.c4 = t5;
      _.c5 = t6;
      _.p3 = t7;
    },
    execute___closure16: function execute___closure16(t0, t1, t2, t3, t4) {
      var _ = this;
      _.tc = t0;
      _.c1 = t1;
      _.c2 = t2;
      _.c3 = t3;
      _.c4 = t4;
    },
    execute____closure32: function execute____closure32(t0, t1, t2, t3) {
      var _ = this;
      _.c1 = t0;
      _.c2 = t1;
      _.c3 = t2;
      _.c4 = t3;
    },
    execute___closure17: function execute___closure17(t0, t1, t2, t3) {
      var _ = this;
      _.tc = t0;
      _.a = t1;
      _.b = t2;
      _.d = t3;
    },
    execute____closure31: function execute____closure31(t0, t1, t2) {
      this.a = t0;
      this.b = t1;
      this.d = t2;
    },
    execute___closure18: function execute___closure18(t0, t1, t2) {
      this.tc = t0;
      this.a = t1;
      this.d = t2;
    },
    execute____closure30: function execute____closure30(t0, t1) {
      this.a = t0;
      this.d = t1;
    },
    execute11(tc) {
      tc.launch$1(new A.execute_closure6(tc));
    },
    execute_closure6: function execute_closure6(t0) {
      this.tc = t0;
    },
    execute__closure7: function execute__closure7(t0) {
      this.tc = t0;
    },
    execute___closure40: function execute___closure40(t0) {
      this.tc = t0;
    },
    execute____closure87: function execute____closure87(t0) {
      this.tc = t0;
    },
    execute_____closure65: function execute_____closure65() {
    },
    execute______closure54: function execute______closure54(t0, t1) {
      this.completedTasks = t0;
      this.i = t1;
    },
    execute______closure55: function execute______closure55() {
    },
    execute___closure41: function execute___closure41(t0) {
      this.tc = t0;
    },
    execute____closure86: function execute____closure86() {
    },
    execute_____closure64: function execute_____closure64(t0, t1) {
      this._box_0 = t0;
      this.p = t1;
    },
    execute______closure53: function execute______closure53() {
    },
    execute___closure42: function execute___closure42(t0) {
      this.tc = t0;
    },
    execute____closure77: function execute____closure77(t0) {
      this.tc = t0;
    },
    execute_____closure63: function execute_____closure63() {
    },
    execute____closure78: function execute____closure78(t0) {
      this.tc = t0;
    },
    execute_____closure62: function execute_____closure62() {
    },
    execute____closure79: function execute____closure79(t0) {
      this.tc = t0;
    },
    execute_____closure61: function execute_____closure61() {
    },
    execute____closure80: function execute____closure80(t0) {
      this.tc = t0;
    },
    execute_____closure60: function execute_____closure60() {
    },
    execute______closure52: function execute______closure52() {
    },
    execute____closure81: function execute____closure81(t0) {
      this.tc = t0;
    },
    execute_____closure59: function execute_____closure59() {
    },
    execute______closure51: function execute______closure51() {
    },
    execute____closure82: function execute____closure82(t0) {
      this.tc = t0;
    },
    execute_____closure58: function execute_____closure58() {
    },
    execute____closure83: function execute____closure83(t0) {
      this.tc = t0;
    },
    execute_____closure57: function execute_____closure57() {
    },
    execute____closure84: function execute____closure84(t0) {
      this.tc = t0;
    },
    execute_____closure56: function execute_____closure56() {
    },
    execute____closure85: function execute____closure85(t0) {
      this.tc = t0;
    },
    execute_____closure55: function execute_____closure55() {
    },
    execute___closure43: function execute___closure43(t0) {
      this.tc = t0;
    },
    execute____closure75: function execute____closure75(t0) {
      this.tc = t0;
    },
    execute_____closure54: function execute_____closure54() {
    },
    execute____closure76: function execute____closure76(t0) {
      this.tc = t0;
    },
    execute_____closure53: function execute_____closure53() {
    },
    execute___closure44: function execute___closure44(t0) {
      this.tc = t0;
    },
    execute____closure74: function execute____closure74() {
    },
    execute___closure45: function execute___closure45(t0) {
      this.tc = t0;
    },
    execute____closure73: function execute____closure73() {
    },
    execute___closure46: function execute___closure46(t0) {
      this.tc = t0;
    },
    execute____closure72: function execute____closure72() {
    },
    execute___closure47: function execute___closure47(t0) {
      this.tc = t0;
    },
    execute____closure71: function execute____closure71() {
    },
    execute_____closure52: function execute_____closure52(t0) {
      this.p = t0;
    },
    execute___closure48: function execute___closure48(t0) {
      this.tc = t0;
    },
    execute____closure63: function execute____closure63(t0) {
      this.tc = t0;
    },
    execute_____closure51: function execute_____closure51() {
    },
    execute______closure47: function execute______closure47(t0, t1) {
      this.errors = t0;
      this.token = t1;
    },
    execute______closure48: function execute______closure48() {
    },
    execute______closure49: function execute______closure49() {
    },
    execute______closure50: function execute______closure50() {
    },
    execute____closure64: function execute____closure64(t0) {
      this.tc = t0;
    },
    execute_____closure50: function execute_____closure50() {
    },
    execute____closure65: function execute____closure65(t0) {
      this.tc = t0;
    },
    execute_____closure49: function execute_____closure49() {
    },
    execute____closure66: function execute____closure66(t0) {
      this.tc = t0;
    },
    execute_____closure48: function execute_____closure48() {
    },
    execute____closure67: function execute____closure67(t0) {
      this.tc = t0;
    },
    execute_____closure47: function execute_____closure47() {
    },
    execute_____closure_pause: function execute_____closure_pause(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _.sub = t1;
      _.numbers = t2;
      _.errors = t3;
    },
    execute_____closure_resume: function execute_____closure_resume(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _.numbers = t1;
      _.errors = t2;
      _.sub = t3;
    },
    execute____closure68: function execute____closure68(t0) {
      this.tc = t0;
    },
    execute_____closure46: function execute_____closure46() {
    },
    execute____closure69: function execute____closure69(t0) {
      this.tc = t0;
    },
    execute_____closure45: function execute_____closure45() {
    },
    execute____closure70: function execute____closure70(t0) {
      this.tc = t0;
    },
    execute_____closure44: function execute_____closure44() {
    },
    execute12(tc) {
      tc.launch$1(new A.execute_closure(tc));
    },
    execute_closure: function execute_closure(t0) {
      this.tc = t0;
    },
    execute__closure: function execute__closure(t0) {
      this.tc = t0;
    },
    execute___closure: function execute___closure(t0) {
      this.tc = t0;
    },
    execute____closure4: function execute____closure4(t0) {
      this.tc = t0;
    },
    execute_____closure5: function execute_____closure5() {
    },
    execute____closure5: function execute____closure5(t0) {
      this.tc = t0;
    },
    execute_____closure4: function execute_____closure4() {
    },
    execute___closure0: function execute___closure0(t0) {
      this.tc = t0;
    },
    execute____closure2: function execute____closure2(t0) {
      this.tc = t0;
    },
    execute_____closure3: function execute_____closure3() {
    },
    execute____closure3: function execute____closure3(t0) {
      this.tc = t0;
    },
    execute_____closure2: function execute_____closure2() {
    },
    execute___closure1: function execute___closure1(t0) {
      this.tc = t0;
    },
    execute____closure: function execute____closure(t0) {
      this.tc = t0;
    },
    execute_____closure1: function execute_____closure1() {
    },
    execute____closure0: function execute____closure0(t0) {
      this.tc = t0;
    },
    execute_____closure0: function execute_____closure0() {
    },
    execute____closure1: function execute____closure1(t0) {
      this.tc = t0;
    },
    execute_____closure: function execute_____closure() {
    },
    TestEntryPointsExt_set(_this, root, platform) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        ext, t1, t2;
      var $async$TestEntryPointsExt_set = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              switch (platform) {
                case B.SquadronPlatformType_JavaScript_js:
                  root += "/workers/js";
                  ext = "js";
                  break;
                case B.SquadronPlatformType_Dqj:
                  root += "/workers/wasm";
                  ext = "wasm";
                  break;
                default:
                  throw A.wrapException(A.UnsupportedError$("Unsupported platform " + platform.toString$0(0)));
              }
              _this.native = A.mapUrl(root + "/native_worker.js");
              _this.notAWorker = A.mapUrl(root + "/not_a_worker.dart." + ext);
              _this.echo = A.mapUrl(root + "/echo_worker.dart." + ext);
              _this.cache = A.mapUrl(root + "/cache_worker.dart." + ext);
              _this.installable = A.mapUrl(root + "/installable_worker.dart." + ext);
              _this.issues = A.mapUrl(root + "/issues_worker.dart." + ext);
              _this.local = A.mapUrl(root + "/local_client_worker.dart." + ext);
              _this.prime = A.mapUrl(root + "/prime_worker.dart." + ext);
              _this.log = A.mapUrl(root + "/log_worker.dart." + ext);
              _this.streaming = A.mapUrl(root + "/streaming_worker.dart." + ext);
              _this.test = A.mapUrl(root + "/test_worker.dart." + ext);
              _this.person = A.mapUrl(root + "/person_worker.dart." + ext);
              _this.errors = A.mapUrl(root + "/error_worker.dart." + ext);
              t1 = type$.Base64Codec._eval$1("Codec.S")._as(B.C_Utf8Encoder.convert$1('onmessage = (e) => { postMessage(`ECHO "${e.data}"`); };'));
              t1 = A.Uri_parse("data:application/javascript;base64," + B.C_Base64Codec.get$encoder().convert$1(t1));
              _this.inMemory = t1;
              t2 = type$.NonNullsIterable_Uri;
              $async$goto = 2;
              return A._asyncAwait(A._checkWebWorkers(A.CastIterable_CastIterable(new A.NonNullsIterable(A._setArrayType([_this.echo, t1, _this.native, _this.notAWorker, _this.cache, _this.installable, _this.issues, _this.local, _this.prime, _this.log, _this.streaming, _this.test, _this.person, _this.errors, null], type$.JSArray_nullable_Uri), t2), t2._eval$1("Iterable.E"), type$.Uri)), $async$TestEntryPointsExt_set);
            case 2:
              // returning from await.
              _this.missingWorker = A.mapUrl(root + "/missing_worker.dart." + ext);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$TestEntryPointsExt_set, $async$completer);
    },
    _checkWebWorkers(workerUrls) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        t1, t2, t3, t4, messages;
      var $async$_checkWebWorkers = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              messages = A._setArrayType([], type$.JSArray_String);
              t1 = A._instanceType(workerUrls), t2 = t1._eval$1("bool(Iterable.E)")._as(new A._checkWebWorkers_closure()), t3 = workerUrls.get$iterator(0), t1 = new A.WhereIterator(t3, t2, t1._eval$1("WhereIterator<Iterable.E>")), t2 = init.G;
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              t4 = t3.get$current();
              $async$goto = 4;
              return A._asyncAwait(A.UriChecker_exists(t4), $async$_checkWebWorkers);
            case 4:
              // returning from await.
              if (!$async$result) {
                A._asJSObject(t2.console).error("Worker " + t4.toString$0(0) + " not found");
                B.JSArray_methods.add$1(messages, "Worker " + t4.toString$0(0) + " not found");
              }
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              if (messages.length !== 0)
                throw A.wrapException(A.Exception_Exception("\n============================================================================ \nCannot run tests because some workers are missing.\nPlease ensure Web Workers have been compiled prior to running Browser tests.\n\n" + B.JSArray_methods.join$1(messages, "\n") + "\n============================================================================ \n\n"));
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_checkWebWorkers, $async$completer);
    },
    _checkWebWorkers_closure: function _checkWebWorkers_closure() {
    },
    CacheStat: function CacheStat(t0, t1, t2, t3, t4) {
      var _ = this;
      _.hit = t0;
      _.miss = t1;
      _.expired = t2;
      _.size = t3;
      _.maxSize = t4;
    },
    CacheWorker$(context) {
      var t1 = context.entryPoints.cache;
      t1.toString;
      return new A.CacheWorker(t1, null, null, false, new A.Object());
    },
    CacheWorker: function CacheWorker(t0, t1, t2, t3, t4) {
      var _ = this;
      _._entryPoint = t0;
      _.channelLogger = null;
      _._exceptionManager = t1;
      _._threadHook = t2;
      _.__Worker__stats_FI = $;
      _._openChannel = _._channel = null;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
    },
    _CacheWorker_Worker_WorkerVersion: function _CacheWorker_Worker_WorkerVersion() {
    },
    City: function City(t0, t1, t2) {
      this.zip = t0;
      this.name = t1;
      this._country = t2;
    },
    CityMarshaler: function CityMarshaler() {
    },
    main() {
      return A.main$body();
    },
    main$body() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        t2, t3, t4, $$setStatus, t5, t6, t7, t8, $$setPlatformButtons, t9, t10, tests, rootGroups, testCount, _i, g, div, label, label0, checkbox, span, _box_0, t1, $async$temp1;
      var $async$main = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_0 = {};
              t1 = init.G;
              A._asJSObject(t1.document).title = "Squadron 7.2.0 Test Console";
              t2 = A._asJSObjectQ(A._asJSObject(t1.document).querySelector("#test-runner"));
              t2.toString;
              A._asJSObject(t1.window).dartPrint = A._functionToJS1(A.NotifyChildExt_get_notify(t2));
              t3 = A._asJSObjectQ(A._asJSObject(t1.document).querySelector("#tests-cancel"));
              t3.toString;
              t4 = A._asJSObjectQ(A._asJSObject(t1.document).querySelector("#console-status"));
              t4.toString;
              $$setStatus = new A.main_$setStatus(t4);
              _box_0.testRunnerCompleter = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void);
              t4 = type$.JSObject;
              A._EventStreamSubscription$(A._asJSObject(t1.window), "message", type$.nullable_void_Function_JSObject._as(new A.main_closure(_box_0, t3, $$setStatus)), false, t4);
              _box_0.workersPlatform = _box_0.runnerPlatform = B.SquadronPlatformType_JavaScript_js;
              t5 = A._asJSObjectQ(A._asJSObject(t1.document).querySelector("#wasm-runner"));
              t5.toString;
              t6 = A._asJSObjectQ(A._asJSObject(t1.document).querySelector("#wasm-workers"));
              t6.toString;
              t7 = A._asJSObjectQ(A._asJSObject(t1.document).querySelector("#js-runner"));
              t7.toString;
              t8 = A._asJSObjectQ(A._asJSObject(t1.document).querySelector("#js-workers"));
              t8.toString;
              $$setPlatformButtons = new A.main_$setPlatformButtons(_box_0, t7, t5, t8, t6);
              t9 = type$._ElementEventStreamImpl_JSObject;
              t10 = t9._eval$1("~(1)?");
              t9 = t9._precomputed1;
              A._EventStreamSubscription$(t7, "click", t10._as(new A.main_closure0($$setPlatformButtons)), false, t9);
              A._EventStreamSubscription$(t5, "click", t10._as(new A.main_closure1($$setPlatformButtons)), false, t9);
              A._EventStreamSubscription$(t8, "click", t10._as(new A.main_closure2($$setPlatformButtons)), false, t9);
              A._EventStreamSubscription$(t6, "click", t10._as(new A.main_closure3($$setPlatformButtons)), false, t9);
              tests = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, t4);
              t4 = A._asJSObjectQ(A._asJSObject(t1.document).querySelector("#tests-run-selected"));
              t4.toString;
              A._EventStreamSubscription$(t4, "click", t10._as(new A.main_$launch(_box_0, tests, t2, new A.main_$getTestRunnerUrl(_box_0))), false, t9);
              t4 = A._asJSObjectQ(A._asJSObject(t1.document).querySelector("#tests-select-all"));
              t4.toString;
              A._EventStreamSubscription$(t4, "click", t10._as(new A.main_$selectAll(tests)), false, t9);
              t4 = A._asJSObjectQ(A._asJSObject(t1.document).querySelector("#tests-deselect-all"));
              t4.toString;
              A._EventStreamSubscription$(t4, "click", t10._as(new A.main_$deselectAll(tests)), false, t9);
              t4 = A._asJSObjectQ(A._asJSObject(t1.document).querySelector("#tests-toggle"));
              t4.toString;
              A._EventStreamSubscription$(t4, "click", t10._as(new A.main_$toggle(tests)), false, t9);
              A._EventStreamSubscription$(t3, "click", t10._as(new A.main_$cancel(t2, t3)), false, t9);
              t3 = A._asJSObjectQ(A._asJSObject(t1.document).querySelector("#log-clear"));
              t3.toString;
              A._EventStreamSubscription$(t3, "click", t10._as(new A.main_$clear(t2)), false, t9);
              t3 = A._asJSObjectQ(A._asJSObject(t1.document).querySelector("#error-next"));
              t3.toString;
              A._EventStreamSubscription$(t3, "click", t10._as(new A.main_$nextError(t2)), false, t9);
              t3 = A._asJSObjectQ(A._asJSObject(t1.document).querySelector("#error-previous"));
              t3.toString;
              A._EventStreamSubscription$(t3, "click", t10._as(new A.main_$prevError(t2)), false, t9);
              $$setStatus.call$1("Test discovery in progress...");
              A.Log_writeln("Test discovery in progress...", null);
              $async$temp1 = J;
              $async$goto = 2;
              return A._asyncAwait(A.discover(), $async$main);
            case 2:
              // returning from await.
              rootGroups = $async$temp1.toList$0$ax($async$result);
              B.JSArray_methods.sort$1(rootGroups, new A.main_closure4());
              t9 = A._asJSObjectQ(A._asJSObject(t1.document).querySelector("#test-list"));
              t9.toString;
              for (t2 = rootGroups.length, testCount = 0, _i = 0; _i < rootGroups.length; rootGroups.length === t2 || (0, A.throwConcurrentModificationError)(rootGroups), ++_i) {
                g = rootGroups[_i];
                A._asJSObject(t1.document);
                div = A._asJSObject(A._asJSObject(t1.document).createElement("div"));
                A._asJSObject(t1.document);
                label = A._asJSObject(A._asJSObject(t1.document).createElement("label"));
                A._asJSObject(div.appendChild(label));
                label0 = g._0;
                t3 = A._asString(A._asJSObject(t1.CSS).escape(label0));
                A._asJSObject(t1.document);
                checkbox = A._asJSObject(A._asJSObject(t1.document).createElement("input"));
                checkbox.type = "checkbox";
                checkbox.id = t3;
                checkbox.checked = true;
                A._asJSObject(label.appendChild(checkbox));
                tests.$indexSet(0, label0, checkbox);
                if (B.JSString_methods.startsWith$1(label0, "- "))
                  label0 = B.JSString_methods.substring$1(label0, 2);
                t3 = g._1;
                A._asJSObject(t1.document);
                span = A._asJSObject(A._asJSObject(t1.document).createElement("span"));
                span.textContent = label0 + (" (" + t3 + " tests)");
                A._asJSObject(label.appendChild(span));
                A._asJSObject(t9.appendChild(div));
                testCount += t3;
              }
              A.Log_writeln("Discovered " + testCount + " test cases.", A._setArrayType([A.console_to_html_Log_bold$closure()], type$.JSArray_of_String_Function_String));
              $$setStatus.call$1("Checking worker versions...");
              A.Log_writeln("Checking worker versions...", null);
              $async$goto = 3;
              return A._asyncAwait(A.displayVersions(), $async$main);
            case 3:
              // returning from await.
              $$setPlatformButtons.call$0();
              $$setStatus.call$1("Ready");
              A.Log_writeln("Ready", null);
              A.Log_writeln("", null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$main, $async$completer);
    },
    _extension_0_get_code(_this) {
      if (_this === B.SquadronPlatformType_JavaScript_js)
        return "js";
      if (_this === B.SquadronPlatformType_Dqj)
        return "wasm";
      return "unsupported";
    },
    main_$setStatus: function main_$setStatus(t0) {
      this.consoleStatus = t0;
    },
    main_closure: function main_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.cancelButton = t1;
      this.$$setStatus = t2;
    },
    main_$setPlatformButtons: function main_$setPlatformButtons(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.jsRunner = t1;
      _.wasmRunner = t2;
      _.jsWorkers = t3;
      _.wasmWorkers = t4;
    },
    main_closure0: function main_closure0(t0) {
      this.$$setPlatformButtons = t0;
    },
    main_closure1: function main_closure1(t0) {
      this.$$setPlatformButtons = t0;
    },
    main_closure2: function main_closure2(t0) {
      this.$$setPlatformButtons = t0;
    },
    main_closure3: function main_closure3(t0) {
      this.$$setPlatformButtons = t0;
    },
    main_$getTestRunnerUrl: function main_$getTestRunnerUrl(t0) {
      this._box_0 = t0;
    },
    main_$launch: function main_$launch(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.tests = t1;
      _.testRunner = t2;
      _.$$getTestRunnerUrl = t3;
    },
    main_$launch_closure: function main_$launch_closure(t0, t1) {
      this.testRunner = t0;
      this.testIds = t1;
    },
    main_$selectAll: function main_$selectAll(t0) {
      this.tests = t0;
    },
    main_$deselectAll: function main_$deselectAll(t0) {
      this.tests = t0;
    },
    main_$toggle: function main_$toggle(t0) {
      this.tests = t0;
    },
    main_$cancel: function main_$cancel(t0, t1) {
      this.testRunner = t0;
      this.cancelButton = t1;
    },
    main_$nextError: function main_$nextError(t0) {
      this.testRunner = t0;
    },
    main_$prevError: function main_$prevError(t0) {
      this.testRunner = t0;
    },
    main_$clear: function main_$clear(t0) {
      this.testRunner = t0;
    },
    main_closure4: function main_closure4() {
    },
    Log_writeln(text, styles) {
      var _i;
      if (styles != null)
        for (_i = 0; _i < 1; ++_i)
          text = styles[_i].call$1(text);
      A.print(text);
    },
    Log_bold(text) {
      A._asString(text);
      return A.String_String$fromCharCodes($.$get$ConsoleToHtml_boldSeq()._sequence, 0, null) + text + A.String_String$fromCharCodes($.$get$ConsoleToHtml_resetSeq()._sequence, 0, null);
    },
    Log_red(text) {
      A._asString(text);
      return A.String_String$fromCharCodes($.$get$ConsoleToHtml_redSeq()._sequence, 0, null) + text + A.String_String$fromCharCodes($.$get$ConsoleToHtml_resetSeq()._sequence, 0, null);
    },
    Log_green(text) {
      A._asString(text);
      return A.String_String$fromCharCodes($.$get$ConsoleToHtml_greenSeq()._sequence, 0, null) + text + A.String_String$fromCharCodes($.$get$ConsoleToHtml_resetSeq()._sequence, 0, null);
    },
    SequenceReplacement$(_sequence, replacement, closeTag) {
      return new A.SequenceReplacement(_sequence);
    },
    SequenceReplacement: function SequenceReplacement(t0) {
      this._sequence = t0;
    },
    Country: function Country(t0, t1) {
      this.id = t0;
      this.name = t1;
    },
    CountryMarshaler: function CountryMarshaler() {
    },
    ErrorWorkerPool$(context, concurrencySettings) {
      var t1 = A._setArrayType([], type$.JSArray_PoolWorker_ErrorWorker),
        t2 = A._setArrayType([], type$.JSArray_WorkerStat),
        t3 = type$.WorkerTask_dynamic_Worker,
        t4 = A.ListQueue$(t3),
        t5 = type$.dynamic;
      t5 = A.LinkedHashMap_LinkedHashMap$from($.builtinExceptions, t5, t5);
      return new A.ErrorWorkerPool(new A.ErrorWorkerPool_closure(context), new A.ExceptionManager(t5), concurrencySettings, t1, t2, A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function_WorkerStat_bool), t4, A.LinkedHashSet_LinkedHashSet$_empty(t3), false, new A.Object());
    },
    ErrorWorker$(context, exceptionManager) {
      var t1 = context.entryPoints.errors;
      t1.toString;
      return new A.ErrorWorker([0], t1, exceptionManager, null, false, new A.Object());
    },
    ErrorWorkerPool: function ErrorWorkerPool(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._workerFactory = t0;
      _.channelLogger = null;
      _._worker_pool$_exceptionManager = t1;
      _.concurrencySettings = t2;
      _._workers = t3;
      _._deadWorkerStats = t4;
      _._worker_pool$_stopped = false;
      _._maxSize = 0;
      _._workerPoolListeners = t5;
      _._startingWorkers = 0;
      _._worker_pool$_queue = t6;
      _._worker_pool$_executing = t7;
      _._worker_pool$_timer = null;
      _.Releasable__released = t8;
      _.Releasable__token = t9;
    },
    ErrorWorkerPool_closure: function ErrorWorkerPool_closure(t0) {
      this.context = t0;
    },
    ErrorWorkerPool_throwException_closure: function ErrorWorkerPool_throwException_closure() {
    },
    ErrorWorkerPool_throwWorkerException_closure: function ErrorWorkerPool_throwWorkerException_closure() {
    },
    ErrorWorkerPool_throwTaskTimeOutException_closure: function ErrorWorkerPool_throwTaskTimeOutException_closure() {
    },
    ErrorWorkerPool_throwCanceledException_closure: function ErrorWorkerPool_throwCanceledException_closure() {
    },
    ErrorWorkerPool_throwTestException_closure: function ErrorWorkerPool_throwTestException_closure() {
    },
    ErrorWorker: function ErrorWorker(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.args = t0;
      _._entryPoint = t1;
      _.channelLogger = null;
      _._exceptionManager = t2;
      _._threadHook = t3;
      _.__Worker__stats_FI = $;
      _._openChannel = _._channel = null;
      _.Releasable__released = t4;
      _.Releasable__token = t5;
    },
    _ErrorWorker_Worker_WorkerVersion: function _ErrorWorker_Worker_WorkerVersion() {
    },
    _ErrorWorkerPool_WorkerPool_PoolVersion: function _ErrorWorkerPool_WorkerPool_PoolVersion() {
    },
    Fraction_Fraction(numerator, denominator) {
      var d;
      if (denominator === 0)
        throw A.wrapException(A.UnsupportedError$("Division by zero"));
      if (numerator === 0)
        return B.Fraction_0_0;
      d = B.JSInt_methods.gcd$1(numerator, denominator);
      return new A.Fraction(B.JSInt_methods.$tdiv(numerator, d), B.JSInt_methods.$tdiv(denominator, d));
    },
    Fraction: function Fraction(t0, t1) {
      this.numerator = t0;
      this.denominator = t1;
    },
    FractionMarshaler: function FractionMarshaler() {
    },
    NotifyChildExt_get_notify(_this) {
      return new A.NotifyChildExt_get_notify_closure(_this);
    },
    NotifyChildExt_notify(_this, message) {
      var t1;
      if (B.JSString_methods.startsWith$1(J.toString$0$(message), "No tests ran"))
        return;
      t1 = A._asJSObjectQ(_this.contentWindow);
      if (t1 != null)
        t1.postMessage(message, $.$get$origin());
    },
    NotifyChildExt_get_notify_closure: function NotifyChildExt_get_notify_closure(t0) {
      this._this = t0;
    },
    InstallableWorker$(context) {
      var t1 = context.entryPoints.installable;
      t1.toString;
      return new A.InstallableWorker([false, false], t1, null, null, false, new A.Object());
    },
    InstallableWorker: function InstallableWorker(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.args = t0;
      _._entryPoint = t1;
      _.channelLogger = null;
      _._exceptionManager = t2;
      _._threadHook = t3;
      _.__Worker__stats_FI = $;
      _._openChannel = _._channel = null;
      _.Releasable__released = t4;
      _.Releasable__token = t5;
    },
    _InstallableWorker_Worker_WorkerVersion: function _InstallableWorker_Worker_WorkerVersion() {
    },
    IssuesWorkerPool$(context) {
      var t1 = A._setArrayType([], type$.JSArray_PoolWorker_IssuesWorker),
        t2 = A._setArrayType([], type$.JSArray_WorkerStat),
        t3 = type$.WorkerTask_dynamic_Worker,
        t4 = A.ListQueue$(t3),
        t5 = type$.dynamic;
      t5 = A.LinkedHashMap_LinkedHashMap$from($.builtinExceptions, t5, t5);
      return new A.IssuesWorkerPool(new A.IssuesWorkerPool_closure(context), new A.ExceptionManager(t5), B.ConcurrencySettings_1_3_1, t1, t2, A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function_WorkerStat_bool), t4, A.LinkedHashSet_LinkedHashSet$_empty(t3), false, new A.Object());
    },
    IssuesWorker$(context, exceptionManager) {
      var t1 = context.entryPoints.issues;
      t1.toString;
      return new A.IssuesWorker(t1, exceptionManager, null, false, new A.Object());
    },
    IssuesWorkerPool: function IssuesWorkerPool(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._workerFactory = t0;
      _.channelLogger = null;
      _._worker_pool$_exceptionManager = t1;
      _.concurrencySettings = t2;
      _._workers = t3;
      _._deadWorkerStats = t4;
      _._worker_pool$_stopped = false;
      _._maxSize = 0;
      _._workerPoolListeners = t5;
      _._startingWorkers = 0;
      _._worker_pool$_queue = t6;
      _._worker_pool$_executing = t7;
      _._worker_pool$_timer = null;
      _.Releasable__released = t8;
      _.Releasable__token = t9;
    },
    IssuesWorkerPool_closure: function IssuesWorkerPool_closure(t0) {
      this.context = t0;
    },
    IssuesWorkerPool_issue_8_closure: function IssuesWorkerPool_issue_8_closure(t0) {
      this.nums = t0;
    },
    IssuesWorkerPool_issue_23_closure: function IssuesWorkerPool_issue_23_closure(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.bytes = t0;
      _.title = t1;
      _.isLandscape = t2;
      _.columns = t3;
      _.columnWidths = t4;
      _.fontData = t5;
      _.titleFonts = t6;
      _.dataFonts = t7;
    },
    IssuesWorker: function IssuesWorker(t0, t1, t2, t3, t4) {
      var _ = this;
      _._entryPoint = t0;
      _.channelLogger = null;
      _._exceptionManager = t1;
      _._threadHook = t2;
      _.__Worker__stats_FI = $;
      _._openChannel = _._channel = null;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
    },
    _IssuesWorker_Worker_WorkerVersion: function _IssuesWorker_Worker_WorkerVersion() {
    },
    _IssuesWorkerPool_WorkerPool_PoolVersion: function _IssuesWorkerPool_WorkerPool_PoolVersion() {
    },
    LocalClientWorkerPool$(context, localService, concurrencySettings) {
      var t1 = localService.exceptionManager,
        t2 = A._setArrayType([], type$.JSArray_PoolWorker_LocalClientWorker),
        t3 = A._setArrayType([], type$.JSArray_WorkerStat),
        t4 = type$.WorkerTask_dynamic_Worker,
        t5 = A.ListQueue$(t4);
      return new A.LocalClientWorkerPool(new A.LocalClientWorkerPool_closure(context, localService), t1, concurrencySettings, t2, t3, A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function_WorkerStat_bool), t5, A.LinkedHashSet_LinkedHashSet$_empty(t4), false, new A.Object());
    },
    LocalClientWorker$(context, localService) {
      var t1 = context.entryPoints.local;
      t1.toString;
      return new A.LocalClientWorker(localService, t1, localService.exceptionManager, null, false, new A.Object());
    },
    LocalClientWorkerPool: function LocalClientWorkerPool(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._workerFactory = t0;
      _.channelLogger = null;
      _._worker_pool$_exceptionManager = t1;
      _.concurrencySettings = t2;
      _._workers = t3;
      _._deadWorkerStats = t4;
      _._worker_pool$_stopped = false;
      _._maxSize = 0;
      _._workerPoolListeners = t5;
      _._startingWorkers = 0;
      _._worker_pool$_queue = t6;
      _._worker_pool$_executing = t7;
      _._worker_pool$_timer = null;
      _.Releasable__released = t8;
      _.Releasable__token = t9;
    },
    LocalClientWorkerPool_closure: function LocalClientWorkerPool_closure(t0, t1) {
      this.context = t0;
      this.localService = t1;
    },
    LocalClientWorkerPool_checkIds_closure: function LocalClientWorkerPool_checkIds_closure() {
    },
    LocalClientWorkerPool_checkException_closure: function LocalClientWorkerPool_checkException_closure() {
    },
    LocalClientWorkerPool_checkSequence_closure: function LocalClientWorkerPool_checkSequence_closure(t0) {
      this.count = t0;
    },
    LocalClientWorker: function LocalClientWorker(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.localService = t0;
      _._entryPoint = t1;
      _.channelLogger = null;
      _._exceptionManager = t2;
      _._threadHook = t3;
      _.__Worker__stats_FI = $;
      _._openChannel = _._channel = null;
      _.Releasable__released = t4;
      _.Releasable__token = t5;
    },
    _LocalClientWorker_Worker_WorkerVersion: function _LocalClientWorker_Worker_WorkerVersion() {
    },
    _LocalClientWorkerPool_WorkerPool_PoolVersion: function _LocalClientWorkerPool_WorkerPool_PoolVersion() {
    },
    LocalService: function LocalService() {
    },
    LocalServiceImpl: function LocalServiceImpl() {
      this.__LocalServiceImpl_operations_FI = $;
    },
    LocalServiceImpl_operations_closure: function LocalServiceImpl_operations_closure(t0) {
      this.$this = t0;
    },
    LocalServiceImpl_operations_closure0: function LocalServiceImpl_operations_closure0(t0) {
      this.$this = t0;
    },
    LocalServiceImpl_operations_closure1: function LocalServiceImpl_operations_closure1(t0) {
      this.$this = t0;
    },
    LocalServiceImpl_operations_closure2: function LocalServiceImpl_operations_closure2(t0) {
      this.$this = t0;
    },
    _LocalService_Object_SquadronVersion: function _LocalService_Object_SquadronVersion() {
    },
    _LocalServiceImpl_LocalService_SquadronVersion: function _LocalServiceImpl_LocalService_SquadronVersion() {
    },
    LogWorker$(context) {
      var t1 = context.entryPoints.log;
      t1.toString;
      return new A.LogWorker(t1, null, null, false, new A.Object());
    },
    LogWorker: function LogWorker(t0, t1, t2, t3, t4) {
      var _ = this;
      _._entryPoint = t0;
      _.channelLogger = null;
      _._exceptionManager = t1;
      _._threadHook = t2;
      _.__Worker__stats_FI = $;
      _._openChannel = _._channel = null;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
    },
    _LogWorker_Worker_WorkerVersion: function _LogWorker_Worker_WorkerVersion() {
    },
    MemoryLogger$() {
      var t1 = A._setArrayType([], type$.JSArray_String),
        t2 = new A.NoOutput(),
        t3 = new A.EmptyPrinter(),
        t4 = $.$get$Logger_defaultFilter().call$0();
      t1 = new A.MemoryLogger(new A.ProductionFilter(), t1, t4, t3, t2);
      t1.Logger$4$filter$level$output$printer(null, B.Level_0_all, t2, t3);
      return t1;
    },
    MemoryLogger: function MemoryLogger(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memory_logger$_filter = t0;
      _._logs = t1;
      _.__Logger__initialization_F = $;
      _._filter = t2;
      _._printer = t3;
      _._output = t4;
    },
    MemoryLogger_logs_closure: function MemoryLogger_logs_closure() {
    },
    MissingWorker: function MissingWorker(t0, t1, t2, t3, t4) {
      var _ = this;
      _._entryPoint = t0;
      _.channelLogger = null;
      _._exceptionManager = t1;
      _._threadHook = t2;
      _.__Worker__stats_FI = $;
      _._openChannel = _._channel = null;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
    },
    NotAWorker$(context) {
      var t1 = context.entryPoints.notAWorker;
      t1.toString;
      return new A.NotAWorker(t1, null, null, false, new A.Object());
    },
    NotAWorker: function NotAWorker(t0, t1, t2, t3, t4) {
      var _ = this;
      _._entryPoint = t0;
      _.channelLogger = null;
      _._exceptionManager = t1;
      _._threadHook = t2;
      _.__Worker__stats_FI = $;
      _._openChannel = _._channel = null;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
    },
    Person: function Person(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.lastName = t0;
      _.firstName = t1;
      _.dateOfBirth = t2;
      _._placeOfBidth = t3;
      _._parent1 = t4;
      _._parent2 = t5;
      _._friends = null;
    },
    PersonMarshaler: function PersonMarshaler() {
    },
    PersonMarshaler_marshal_closure: function PersonMarshaler_marshal_closure(t0, t1) {
      this.$this = t0;
      this.context = t1;
    },
    PersonMarshaler_unmarshal_$unmarshal: function PersonMarshaler_unmarshal_$unmarshal(t0, t1) {
      this.$this = t0;
      this.context = t1;
    },
    PersonWorker$(context) {
      var t1 = context.entryPoints.person;
      t1.toString;
      return new A.PersonWorker(t1, null, null, false, new A.Object());
    },
    PersonWorker: function PersonWorker(t0, t1, t2, t3, t4) {
      var _ = this;
      _._entryPoint = t0;
      _.channelLogger = null;
      _._exceptionManager = t1;
      _._threadHook = t2;
      _.__Worker__stats_FI = $;
      _._openChannel = _._channel = null;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
    },
    _PersonWorker_Worker_WorkerVersion: function _PersonWorker_Worker_WorkerVersion() {
    },
    PrimeWorkerPool$(context, cache, concurrencySettings) {
      var t1 = A._setArrayType([], type$.JSArray_PoolWorker_PrimeWorker),
        t2 = A._setArrayType([], type$.JSArray_WorkerStat),
        t3 = type$.WorkerTask_dynamic_Worker,
        t4 = A.ListQueue$(t3),
        t5 = type$.dynamic;
      t5 = A.LinkedHashMap_LinkedHashMap$from($.builtinExceptions, t5, t5);
      return new A.PrimeWorkerPool(new A.PrimeWorkerPool_closure(context, cache), new A.ExceptionManager(t5), concurrencySettings, t1, t2, A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function_WorkerStat_bool), t4, A.LinkedHashSet_LinkedHashSet$_empty(t3), false, new A.Object());
    },
    PrimeWorker$(context, cache, exceptionManager) {
      var t1 = context.entryPoints.prime;
      t1.toString;
      return new A.PrimeWorker(cache, t1, exceptionManager, null, false, new A.Object());
    },
    PrimeWorkerPool: function PrimeWorkerPool(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._workerFactory = t0;
      _.channelLogger = null;
      _._worker_pool$_exceptionManager = t1;
      _.concurrencySettings = t2;
      _._workers = t3;
      _._deadWorkerStats = t4;
      _._worker_pool$_stopped = false;
      _._maxSize = 0;
      _._workerPoolListeners = t5;
      _._startingWorkers = 0;
      _._worker_pool$_queue = t6;
      _._worker_pool$_executing = t7;
      _._worker_pool$_timer = null;
      _.Releasable__released = t8;
      _.Releasable__token = t9;
    },
    PrimeWorkerPool_closure: function PrimeWorkerPool_closure(t0, t1) {
      this.context = t0;
      this.cache = t1;
    },
    PrimeWorkerPool_isPrime_closure: function PrimeWorkerPool_isPrime_closure(t0) {
      this.n = t0;
    },
    PrimeWorkerPool_getPrimes_closure: function PrimeWorkerPool_getPrimes_closure(t0, t1) {
      this.min = t0;
      this.max = t1;
    },
    PrimeWorker: function PrimeWorker(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.cache = t0;
      _._entryPoint = t1;
      _.channelLogger = null;
      _._exceptionManager = t2;
      _._threadHook = t3;
      _.__Worker__stats_FI = $;
      _._openChannel = _._channel = null;
      _.Releasable__released = t4;
      _.Releasable__token = t5;
    },
    _PrimeWorker_Worker_WorkerVersion: function _PrimeWorker_Worker_WorkerVersion() {
    },
    _PrimeWorkerPool_WorkerPool_PoolVersion: function _PrimeWorkerPool_WorkerPool_PoolVersion() {
    },
    SquadronVersion: function SquadronVersion() {
    },
    WorkerVersion: function WorkerVersion() {
    },
    PoolVersion: function PoolVersion() {
    },
    StreamingServiceWorker$(context) {
      var t1 = context.entryPoints.streaming;
      t1.toString;
      return new A.StreamingServiceWorker(t1, null, null, false, new A.Object());
    },
    StreamingServiceWorker: function StreamingServiceWorker(t0, t1, t2, t3, t4) {
      var _ = this;
      _._entryPoint = t0;
      _.channelLogger = null;
      _._exceptionManager = t1;
      _._threadHook = t2;
      _.__Worker__stats_FI = $;
      _._openChannel = _._channel = null;
      _.Releasable__released = t3;
      _.Releasable__token = t4;
    },
    _StreamingServiceWorker_Worker_WorkerVersion: function _StreamingServiceWorker_Worker_WorkerVersion() {
    },
    TestContext_init(runMode, root, workerPlatform) {
      return A.TestContext_init$body(runMode, root, workerPlatform);
    },
    TestContext_init$body(runMode, root, workerPlatform) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_TestContext),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], testContext, t1, t2, exception, $async$exception;
      var $async$TestContext_init = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              workerPlatform = workerPlatform;
              if (workerPlatform == null)
                workerPlatform = $.$get$platform();
              t1 = workerPlatform;
              t2 = type$.String;
              testContext = new A.TestContext(runMode, A._setArrayType([], type$.JSArray_TestResult), t1, new A.TestEntryPoints(), A.LinkedHashSet_LinkedHashSet$_empty(type$.Pattern), A.LinkedHashSet_LinkedHashSet$_empty(t2), A.LinkedHashSet_LinkedHashSet$_empty(t2));
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(A.TestEntryPointsExt_set(testContext.entryPoints, root, workerPlatform), $async$TestContext_init);
            case 7:
              // returning from await.
              $async$returnValue = testContext;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$TestContext_init, $async$completer);
    },
    _extension_0_get_shortLabel(_this) {
      if (_this === B.SquadronPlatformType_Rhi)
        return "VM";
      if (_this === B.SquadronPlatformType_JavaScript_js)
        return "JS";
      if (_this === B.SquadronPlatformType_Dqj)
        return "WASM";
      return _this.label;
    },
    RunMode: function RunMode(t0) {
      this._name = t0;
    },
    TestContext: function TestContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.runMode = t0;
      _.testResults = t1;
      _.workerPlatform = t2;
      _.entryPoints = t3;
      _.onlyTests = t4;
      _._testPath = "";
      _._knownGroups = t5;
      _._knownTests = t6;
    },
    TestContext_wait_closure: function TestContext_wait_closure() {
    },
    TestContext_test_closure: function TestContext_test_closure(t0, t1, t2) {
      this.$this = t0;
      this.result = t1;
      this.body = t2;
    },
    TestContext_test__closure: function TestContext_test__closure(t0) {
      this.result = t0;
    },
    TestContext_test__closure0: function TestContext_test__closure0(t0, t1) {
      this.timeout = t0;
      this.result = t1;
    },
    TestContext_rootGroups_closure: function TestContext_rootGroups_closure(t0) {
      this.group = t0;
    },
    TestContext_rootGroups_closure0: function TestContext_rootGroups_closure0(t0) {
      this.group = t0;
    },
    TestEntryPoints: function TestEntryPoints() {
      var _ = this;
      _.errors = _.person = _.test = _.streaming = _.log = _.prime = _.local = _.issues = _.installable = _.cache = _.missingWorker = _.notAWorker = _.native = _.inMemory = _.echo = null;
    },
    TestException0: function TestException0() {
    },
    TestTimeOutException: function TestTimeOutException(t0) {
      this.message = t0;
    },
    TestException$(message, stackTrace, command) {
      var t1 = new A.TestException(command, message, stackTrace);
      t1.SquadronException$init$2(message, stackTrace);
      return t1;
    },
    TestException_deserialize(data) {
      var t1, t2, t3;
      type$.List_dynamic._as(data);
      t1 = J.getInterceptor$asx(data);
      if (J.$eq$(t1.$index(data, 0), "#TEST")) {
        t2 = A._asString(t1.$index(data, 1));
        t3 = A.SquadronException_loadStackTrace(A._asStringQ(t1.$index(data, 2)));
        t1 = t1.$index(data, 3);
        return A.TestException$(t2, t3, t1 == null ? null : J.toInt$0$n(t1));
      }
      return null;
    },
    TestException: function TestException(t0, t1, t2) {
      this._worker_exception$_command = t0;
      this.message = t1;
      this._squadron_exception$_stackTrace = t2;
    },
    NoOutput: function NoOutput() {
    },
    EmptyPrinter: function EmptyPrinter() {
    },
    TestResult$(parentPath, label) {
      var t1 = $.Zone__current,
        t2 = parentPath.length === 0 ? label : parentPath + " " + label;
      return new A.TestResult(parentPath, t2, new A._AsyncCompleter(new A._Future(t1, type$._Future_void), type$._AsyncCompleter_void));
    },
    TestState: function TestState(t0) {
      this._name = t0;
    },
    TestResult: function TestResult(t0, t1, t2) {
      this.parentPath = t0;
      this.testPath = t1;
      this._test_result$_completer = t2;
    },
    TestResult_skip_closure: function TestResult_skip_closure(t0) {
      this.$this = t0;
    },
    TestResult_pass_closure: function TestResult_pass_closure(t0) {
      this.$this = t0;
    },
    TestResult_fail_closure: function TestResult_fail_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    discover() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Iterable_Record_2_String_label_and_int_tests),
        $async$returnValue, t1, t2, _i, t3, context;
      var $async$discover = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.TestContext_init(B.RunMode_0, "~/..", $.$get$Squadron_platformType()), $async$discover);
            case 3:
              // returning from await.
              context = $async$result;
              if (context == null) {
                A.Log_writeln("Failed to initialize a test context", A._setArrayType([A.console_to_html_Log_red$closure()], type$.JSArray_of_String_Function_String));
                $async$returnValue = B.List_empty1;
                // goto return
                $async$goto = 1;
                break;
              }
              for (t1 = context.runMode !== B.RunMode_0, t2 = type$.void_Function_TestContext, _i = 0; _i < 14; ++_i) {
                t3 = t2._as(B.List_ffY[_i].runner);
                if (t1)
                  A.throwExpression(A.UnsupportedError$("Test context was not initialized for discovery"));
                t3.call$1(context);
              }
              $async$goto = 4;
              return A._asyncAwait(context.wait$0(), $async$discover);
            case 4:
              // returning from await.
              $async$returnValue = context.get$rootGroups();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$discover, $async$completer);
    },
    _displayVersion(entryPoint, workerBuilder) {
      return A._displayVersion$body(entryPoint, workerBuilder);
    },
    _displayVersion$body(entryPoint, workerBuilder) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], worker, version, color, ex, exception, t1, $async$exception;
      var $async$_displayVersion = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (entryPoint == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              worker = null;
              $async$handler = 4;
              worker = workerBuilder.call$0();
              $async$goto = 7;
              return A._asyncAwait(worker.getVersion$0(), $async$_displayVersion);
            case 7:
              // returning from await.
              version = $async$result;
              color = J.$eq$(version, "7.2.0") ? A.console_to_html_Log_green$closure() : A.console_to_html_Log_red$closure();
              A.Log_writeln("Worker " + entryPoint.toString$0(0) + ": compiled with Squadron " + A.S(version), A._setArrayType([color], type$.JSArray_of_String_Function_String));
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              ex = A.unwrapException($async$exception);
              A.Log_writeln("Failed to get version for " + entryPoint.toString$0(0) + ": " + A.S(ex), A._setArrayType([A.console_to_html_Log_red$closure()], type$.JSArray_of_String_Function_String));
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              t1 = worker;
              if (t1 != null)
                t1.terminate$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$_displayVersion, $async$completer);
    },
    displayVersions() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, t1, ctx;
      var $async$displayVersions = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.TestContext_init(B.RunMode_0, "~/..", $.$get$Squadron_platformType()), $async$displayVersions);
            case 3:
              // returning from await.
              ctx = $async$result;
              if (ctx == null) {
                A.Log_writeln("Failed to initialize a test context", A._setArrayType([A.console_to_html_Log_red$closure()], type$.JSArray_of_String_Function_String));
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = ctx.entryPoints;
              $async$goto = 4;
              return A._asyncAwait(A.Future_wait(A._setArrayType([A._displayVersion(t1.cache, new A.displayVersions_closure(ctx)), A._displayVersion(t1.installable, new A.displayVersions_closure0(ctx)), A._displayVersion(t1.issues, new A.displayVersions_closure1(ctx)), A._displayVersion(t1.local, new A.displayVersions_closure2(ctx)), A._displayVersion(t1.prime, new A.displayVersions_closure3(ctx)), A._displayVersion(t1.log, new A.displayVersions_closure4(ctx)), A._displayVersion(t1.streaming, new A.displayVersions_closure5(ctx)), A._displayVersion(t1.test, new A.displayVersions_closure6(ctx)), A._displayVersion(t1.errors, new A.displayVersions_closure7(ctx))], type$.JSArray_Future_void), false, type$.void), $async$displayVersions);
            case 4:
              // returning from await.
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$displayVersions, $async$completer);
    },
    displayVersions_closure: function displayVersions_closure(t0) {
      this.ctx = t0;
    },
    displayVersions_closure0: function displayVersions_closure0(t0) {
      this.ctx = t0;
    },
    displayVersions_closure1: function displayVersions_closure1(t0) {
      this.ctx = t0;
    },
    displayVersions_closure2: function displayVersions_closure2(t0) {
      this.ctx = t0;
    },
    displayVersions_closure3: function displayVersions_closure3(t0) {
      this.ctx = t0;
    },
    displayVersions_closure4: function displayVersions_closure4(t0) {
      this.ctx = t0;
    },
    displayVersions_closure5: function displayVersions_closure5(t0) {
      this.ctx = t0;
    },
    displayVersions_closure6: function displayVersions_closure6(t0) {
      this.ctx = t0;
    },
    displayVersions_closure7: function displayVersions_closure7(t0) {
      this.ctx = t0;
    },
    TestWorkerPool$(context, concurrencySettings) {
      var t1 = concurrencySettings == null ? B.ConcurrencySettings_1_4_50 : concurrencySettings,
        t2 = A._setArrayType([], type$.JSArray_PoolWorker_TestWorker),
        t3 = A._setArrayType([], type$.JSArray_WorkerStat),
        t4 = type$.WorkerTask_dynamic_Worker,
        t5 = A.ListQueue$(t4),
        t6 = type$.dynamic;
      t6 = A.LinkedHashMap_LinkedHashMap$from($.builtinExceptions, t6, t6);
      return new A.TestWorkerPool(new A.TestWorkerPool_closure(context), new A.ExceptionManager(t6), t1, t2, t3, A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function_WorkerStat_bool), t5, A.LinkedHashSet_LinkedHashSet$_empty(t4), false, new A.Object());
    },
    TestWorkerPool$throws(context) {
      var t1 = A._setArrayType([], type$.JSArray_PoolWorker_TestWorker),
        t2 = A._setArrayType([], type$.JSArray_WorkerStat),
        t3 = type$.WorkerTask_dynamic_Worker,
        t4 = A.ListQueue$(t3),
        t5 = type$.dynamic;
      t5 = A.LinkedHashMap_LinkedHashMap$from($.builtinExceptions, t5, t5);
      return new A.TestWorkerPool(new A.TestWorkerPool$throws_closure(context), new A.ExceptionManager(t5), B.ConcurrencySettings_1_4_50, t1, t2, A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function_WorkerStat_bool), t4, A.LinkedHashSet_LinkedHashSet$_empty(t3), false, new A.Object());
    },
    TestWorkerPool$missingStartRequest(context) {
      var t1 = A._setArrayType([], type$.JSArray_PoolWorker_TestWorker),
        t2 = A._setArrayType([], type$.JSArray_WorkerStat),
        t3 = type$.WorkerTask_dynamic_Worker,
        t4 = A.ListQueue$(t3),
        t5 = type$.dynamic;
      t5 = A.LinkedHashMap_LinkedHashMap$from($.builtinExceptions, t5, t5);
      return new A.TestWorkerPool(new A.TestWorkerPool$missingStartRequest_closure(context), new A.ExceptionManager(t5), B.ConcurrencySettings_1_4_50, t1, t2, A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function_WorkerStat_bool), t4, A.LinkedHashSet_LinkedHashSet$_empty(t3), false, new A.Object());
    },
    TestWorkerPool$invalid(context) {
      var t1 = A._setArrayType([], type$.JSArray_PoolWorker_TestWorker),
        t2 = A._setArrayType([], type$.JSArray_WorkerStat),
        t3 = type$.WorkerTask_dynamic_Worker,
        t4 = A.ListQueue$(t3),
        t5 = type$.dynamic;
      t5 = A.LinkedHashMap_LinkedHashMap$from($.builtinExceptions, t5, t5);
      return new A.TestWorkerPool(new A.TestWorkerPool$invalid_closure(context), new A.ExceptionManager(t5), B.ConcurrencySettings_1_4_50, t1, t2, A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function_WorkerStat_bool), t4, A.LinkedHashSet_LinkedHashSet$_empty(t3), false, new A.Object());
    },
    TestWorker$(context, exceptionManager, hook) {
      var t1 = context.entryPoints.test;
      t1.toString;
      return new A.TestWorker([0], t1, exceptionManager, hook, false, new A.Object());
    },
    TestWorkerPool: function TestWorkerPool(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _._workerFactory = t0;
      _.channelLogger = null;
      _._worker_pool$_exceptionManager = t1;
      _.concurrencySettings = t2;
      _._workers = t3;
      _._deadWorkerStats = t4;
      _._worker_pool$_stopped = false;
      _._maxSize = 0;
      _._workerPoolListeners = t5;
      _._startingWorkers = 0;
      _._worker_pool$_queue = t6;
      _._worker_pool$_executing = t7;
      _._worker_pool$_timer = null;
      _.Releasable__released = t8;
      _.Releasable__token = t9;
    },
    TestWorkerPool_closure: function TestWorkerPool_closure(t0) {
      this.context = t0;
    },
    TestWorkerPool$throws_closure: function TestWorkerPool$throws_closure(t0) {
      this.context = t0;
    },
    TestWorkerPool$missingStartRequest_closure: function TestWorkerPool$missingStartRequest_closure(t0) {
      this.context = t0;
    },
    TestWorkerPool$invalid_closure: function TestWorkerPool$invalid_closure(t0) {
      this.context = t0;
    },
    TestWorkerPool_io_closure: function TestWorkerPool_io_closure(t0) {
      this.ms = t0;
    },
    TestWorkerPool_cpu_closure: function TestWorkerPool_cpu_closure(t0) {
      this.ms = t0;
    },
    TestWorkerPool_delayed_80ms_closure: function TestWorkerPool_delayed_80ms_closure(t0) {
      this.n = t0;
    },
    TestWorkerPool_ping_closure: function TestWorkerPool_ping_closure() {
    },
    TestWorkerPool_finite_20ms_closure: function TestWorkerPool_finite_20ms_closure(t0, t1) {
      this.count = t0;
      this.token = t1;
    },
    TestWorkerPool_infinite_20ms_closure: function TestWorkerPool_infinite_20ms_closure(t0) {
      this.token = t0;
    },
    TestWorkerPool_getPendingInfiniteWithErrors_closure: function TestWorkerPool_getPendingInfiniteWithErrors_closure() {
    },
    TestWorkerPool_infiniteWithErrors_closure: function TestWorkerPool_infiniteWithErrors_closure(t0) {
      this.token = t0;
    },
    TestWorkerPool_delayedTask_closure: function TestWorkerPool_delayedTask_closure(t0) {
      this.n = t0;
    },
    TestWorkerPool_finiteTask_closure: function TestWorkerPool_finiteTask_closure(t0, t1) {
      this.n = t0;
      this.token = t1;
    },
    TestWorkerPool_infiniteWithErrorsTask_closure: function TestWorkerPool_infiniteWithErrorsTask_closure(t0) {
      this.token = t0;
    },
    TestWorkerPool_map_closure: function TestWorkerPool_map_closure(t0) {
      this.input = t0;
    },
    TestWorker: function TestWorker(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.args = t0;
      _._entryPoint = t1;
      _.channelLogger = null;
      _._exceptionManager = t2;
      _._threadHook = t3;
      _.__Worker__stats_FI = $;
      _._openChannel = _._channel = null;
      _.Releasable__released = t4;
      _.Releasable__token = t5;
    },
    TestWorker_fractionAdd_closure: function TestWorker_fractionAdd_closure(t0, t1) {
      this.marshaler = t0;
      this.cin = t1;
    },
    TestWorker_fractionAdd_closure0: function TestWorker_fractionAdd_closure0(t0, t1) {
      this.marshaler = t0;
      this.cout = t1;
    },
    TestWorker_getPlatformType_closure: function TestWorker_getPlatformType_closure() {
    },
    _TestWorker_Worker_WorkerVersion: function _TestWorker_Worker_WorkerVersion() {
    },
    _TestWorkerPool_WorkerPool_PoolVersion: function _TestWorkerPool_WorkerPool_PoolVersion() {
    },
    TestSuite: function TestSuite(t0) {
      this.runner = t0;
    },
    TestTimeout: function TestTimeout(t0, t1) {
      var _ = this;
      _.duration = t0;
      _._cancelled = false;
      _._test_timeout$_timer = null;
      _._test_timeout$_completer = t1;
    },
    TestTimeout_completion_closure: function TestTimeout_completion_closure(t0) {
      this.$this = t0;
    },
    UnexpectedException$(message) {
      return new A.UnexpectedException(message);
    },
    unexpectedSuccess(process, res) {
      var t1 = "Unexpected: " + process;
      return new A.UnexpectedException(res == null ? t1 + " completed successfully" : t1 + " completed successfully with res=" + A.S(res));
    },
    reports(matcher) {
      return new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$(matcher)));
    },
    failsWith($E) {
      return new A.Throws(A.wrapMatcher(new A.TypeMatcher($E._eval$1("TypeMatcher<0>"))));
    },
    checkOutcome(process, a, b, test, platform, $X, $Y) {
      var ra, rb, exa, sta, rb0, exb, stb, exception, t1;
      try {
        ra = test.call$1(a);
        rb = test.call$1(b);
        A.expect(ra, rb, null);
      } catch (exception) {
        exa = A.unwrapException(exception);
        sta = A.getTraceFromException(exception);
        try {
          rb0 = test.call$1(b);
          A.print(process + " succeeded for " + A.S(b) + " with " + A.S(rb0) + ", failed for " + a.toString$0(0) + " with " + A.S(exa));
          t1 = A.unexpectedSuccess(process, rb0);
          throw A.wrapException(t1);
        } catch (exception) {
          exb = A.unwrapException(exception);
          stb = A.getTraceFromException(exception);
          try {
            A.expect(J.get$runtimeType$(exa), J.get$runtimeType$(exb), null);
            A.expect(J.toString$0$(exa), J.toString$0$(exb), null);
          } catch (exception) {
            A.print(process + " failed with inconsistent errors: for " + a.toString$0(0) + " with " + A.S(exa) + ", for " + A.S(b) + " with " + A.S(exb));
            if (!(platform === B.SquadronPlatformType_Dqj && process === "subList (invalid range)")) {
              A.print("Stacktrace (a): " + A.S(sta));
              A.print("Stacktrace (b): " + A.S(stb));
              throw exception;
            }
          }
        }
      }
    },
    UnexpectedException: function UnexpectedException(t0) {
      this.message = t0;
    },
    Called: function Called(t0, t1, t2) {
      this._featureDescription = t0;
      this._featureName = t1;
      this._custom_matcher$_matcher = t2;
    },
    Reported: function Reported(t0, t1, t2) {
      this._featureDescription = t0;
      this._featureName = t1;
      this._custom_matcher$_matcher = t2;
    },
    LocalWorker_LocalWorker$create(service, $W) {
      var t2, t3, runner,
        operations = service.get$operations(),
        t1 = type$.dynamic;
      t1 = new A.ExceptionManager(A.LinkedHashMap_LinkedHashMap$from($.builtinExceptions, t1, t1));
      t2 = A._asJSObject(new init.G.MessageChannel());
      t3 = new A._WebLocalWorker(operations, t1, t2, false, new A.Object(), $W._eval$1("_WebLocalWorker<0>"));
      runner = A.WorkerRunner_WorkerRunner$use(t3);
      A._asJSObject(t2.port1).onmessage = A._functionToJS1(A.JsWorkerRunnerExt_get_handle(runner));
      t2 = A._asJSObject(t2.port2);
      t1 = new A._WebChannel(t2, A._setArrayType([], type$.JSArray_StreamController_List_dynamic), t1, runner.internalLogger);
      t3.___WebLocalWorker__channel_A = t1;
      return t3;
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    globalContext() {
      return init.G;
    },
    NullableObjectUtilExtension_jsify(_this) {
      return A.jsify(_this);
    },
    JSAnyUtilityExtension_instanceOfString(_this, constructorName) {
      var parts, $constructor, t1, _i, t2;
      if (constructorName.length === 0)
        return false;
      parts = constructorName.split(".");
      $constructor = init.G;
      for (t1 = parts.length, _i = 0; _i < t1; ++_i, $constructor = t2) {
        t2 = $constructor[parts[_i]];
        A._asJSObjectQ(t2);
        if (t2 == null)
          return false;
      }
      return _this instanceof type$.JavaScriptFunction._as($constructor);
    },
    JSObjectUnsafeUtilExtension__callMethod(_this, method, arg1, arg2, arg3, arg4) {
      var t1 = _this[method]();
      return t1;
    },
    JSObjectUnsafeUtilExtension___(_this, property) {
      return _this[property];
    },
    JSFunctionUnsafeUtilExtension_callAsConstructor(_this, arg1, $R) {
      return $R._as(A.callConstructor(_this, [arg1], type$.JSObject));
    },
    indent0(text, first) {
      var t1, t2, t3, t4,
        prefix = B.JSString_methods.$mul(" ", first.length),
        lines = A._setArrayType(text.split("\n"), type$.JSArray_String);
      if (lines.length === 1)
        return first + text;
      t1 = first + B.JSArray_methods.get$first(lines) + "\n";
      for (t2 = A.SubListIterable$(lines, 1, null, type$.String).take$1(0, lines.length - 2), t3 = t2.$ti, t2 = new A.ListIterator(t2, t2.get$length(0), t3._eval$1("ListIterator<ListIterable.E>")), t3 = t3._eval$1("ListIterable.E"); t2.moveNext$0();) {
        t4 = t2.__internal$_current;
        t1 += prefix + (t4 == null ? t3._as(t4) : t4) + "\n";
      }
      t1 += prefix + B.JSArray_methods.get$last(lines);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    current() {
      var exception, t1, path, lastIndex, uri = null;
      try {
        uri = A.Uri_base();
      } catch (exception) {
        if (type$.Exception._is(A.unwrapException(exception))) {
          t1 = $._current;
          if (t1 != null)
            return t1;
          throw exception;
        } else
          throw exception;
      }
      if (J.$eq$(uri, $._currentUriBase)) {
        t1 = $._current;
        t1.toString;
        return t1;
      }
      $._currentUriBase = uri;
      if ($.$get$Style_platform() === $.$get$Style_url())
        t1 = $._current = uri.resolve$1(".").toString$0(0);
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        t1 = $._current = lastIndex === 0 ? path : B.JSString_methods.substring$2(path, 0, lastIndex);
      }
      return t1;
    },
    isAlphabetic(char) {
      var t1;
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    driveLetterEnd(path, index) {
      var t2, t3, _null = null,
        t1 = path.length,
        index0 = index + 2;
      if (t1 < index0)
        return _null;
      if (!(index >= 0 && index < t1))
        return A.ioore(path, index);
      if (!A.isAlphabetic(path.charCodeAt(index)))
        return _null;
      t2 = index + 1;
      if (!(t2 < t1))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 58) {
        t3 = index + 4;
        if (t1 < t3)
          return _null;
        if (B.JSString_methods.substring$2(path, t2, t3).toLowerCase() !== "%3a")
          return _null;
        index = index0;
      }
      t2 = index + 2;
      if (t1 === t2)
        return t2;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 47)
        return _null;
      return index + 3;
    },
    mapUrl(url) {
      var root;
      if (B.JSString_methods.startsWith$1(url, "~")) {
        root = A.getRootUrl();
        if (root != null)
          url = root + B.JSString_methods.substring$1(url, 1);
      }
      return A.Uri_parse(url).normalizePath$0();
    },
    isSameInstance(a, b) {
      var t1;
      A._asObject(a);
      A._asObject(b);
      t1 = type$.JSObject;
      if (t1._is(a))
        t1 = t1._is(b) && A._asBool(init.G.Object.is(a, b));
      else
        t1 = !t1._is(b) && a === b;
      return t1;
    },
    UriChecker_exists(url) {
      return A.UriChecker_exists$body(url);
    },
    UriChecker_exists$body(url) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], res, t1, exception, $async$exception;
      var $async$UriChecker_exists = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (url.isScheme$1("data") || url.isScheme$1("blob")) {
                $async$returnValue = true;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(A.promiseToFuture(A._asJSObject(init.G.fetch(url.toString$0(0), $.$get$UriChecker__headers())), type$.JSObject), $async$UriChecker_exists);
            case 7:
              // returning from await.
              res = $async$result;
              t1 = A._asBool(res.ok) && 200 <= A._asInt(res.status) && A._asInt(res.status) < 300;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$UriChecker_exists, $async$completer);
    },
    microsecTimeStamp() {
      var t1 = Date.now();
      return new A.DateTime(t1, 0, false).toUtc$0().difference$1($.$get$_latestUPDEpoch())._duration;
    },
    Squadron_converter(value) {
      var handler, t1, exception;
      if (value == null)
        value = $.$get$Squadron__platformConverter();
      if ($.$get$Squadron__converter() !== value) {
        $.Squadron__converter = value;
        for (t1 = new A.LinkedHashMapValueIterator($.Squadron__converterChangeHandlers, $.Squadron__converterChangeHandlers.__js_helper$_modifications, $.Squadron__converterChangeHandlers.__js_helper$_first, A._instanceType($.Squadron__converterChangeHandlers)._eval$1("LinkedHashMapValueIterator<2>")); t1.moveNext$0();) {
          handler = t1.__js_helper$_current;
          try {
            handler.call$0();
          } catch (exception) {
          }
        }
      }
    },
    WorkerMessageImpl_unwrapTravelTime(_this) {
      var t1 = J.getInterceptor$asx(_this),
        t2 = A._asNumQ(t1.$index(_this, 0)),
        ts = t2 == null ? null : B.JSNumber_methods.toInt$0(t2);
      if (ts != null)
        t1.$indexSet(_this, 0, A.microsecTimeStamp() - ts);
    },
    WorkerRequestExt_wrapInPlace(_this) {
      var t1 = J.getInterceptor$asx(_this),
        token = t1.$index(_this, 4);
      if (type$.SquadronCancelationToken._is(token))
        t1.$indexSet(_this, 4, token.serialize$0());
      return _this;
    },
    pluralize($name, number) {
      if (number === 1)
        return $name;
      return $name + "s";
    },
    toSentence(iter) {
      var result,
        t1 = iter.length;
      if (t1 === 1)
        return J.toString$0$(B.JSArray_methods.get$first(iter));
      result = A.SubListIterable$(iter, 0, A.checkNotNullable(t1 - 1, "count", type$.int), A._arrayInstanceType(iter)._precomputed1).join$1(0, ", ");
      if (iter.length > 2)
        result += ",";
      return result + " and " + A.S(B.JSArray_methods.get$last(iter));
    },
    indent(text) {
      var t2, t3, t4,
        lines = A._setArrayType(text.split("\n"), type$.JSArray_String),
        t1 = lines.length;
      if (t1 === 1)
        return "  " + text;
      for (t1 = A.SubListIterable$(lines, 0, A.checkNotNullable(t1 - 1, "count", type$.int), type$.String), t2 = t1.$ti, t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"), t3 = ""; t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        t3 += "  " + (t4 == null ? t2._as(t4) : t4) + "\n";
      }
      t1 = t3 + ("  " + B.JSArray_methods.get$last(lines));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    unsendable() {
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._instanceTypeFromConstructor(this));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.bool);
    },
    $isTrustedGetRuntimeType: 1,
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.Null);
    },
    $isTrustedGetRuntimeType: 1,
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {$isJSObject: 1};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return B.Type_JSObject_ttY;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JavaScriptBigInt.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JavaScriptSymbol.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JSArray.prototype = {
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A._arrayInstanceType(receiver)._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, 29);
      receiver.push(value);
    },
    removeAt$1(receiver, index) {
      var t1;
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "removeAt", 1);
      t1 = receiver.length;
      if (index >= t1)
        throw A.wrapException(A.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "insert", 2);
      if (index < 0 || index > receiver.length)
        throw A.wrapException(A.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2(receiver, index, iterable) {
      var insertionLength, end;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "insertAll", 2);
      A.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      if (!type$.EfficientLengthIterable_dynamic._is(iterable))
        iterable = J.toList$0$ax(iterable);
      insertionLength = J.get$length$asx(iterable);
      receiver.length = receiver.length + insertionLength;
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    setAll$2(receiver, index, iterable) {
      var t1, element, index0;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, "setAll");
      A.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0(); index = index0) {
        element = t1.get$current();
        index0 = index + 1;
        if (!(index >= 0 && index < receiver.length))
          return A.ioore(receiver, index);
        receiver[index] = element;
      }
    },
    removeLast$0(receiver) {
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "removeLast", 1);
      if (receiver.length === 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    remove$1(receiver, element) {
      var i;
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "remove", 1);
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    removeWhere$1(receiver, test) {
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, 16);
      this._removeWhere$2(receiver, test, true);
    },
    retainWhere$1(receiver, test) {
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, 17);
      this._removeWhere$2(receiver, test, false);
    },
    _removeWhere$2(receiver, test, removeMatching) {
      var retained, end, i, element, t1;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      retained = [];
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (!test.call$1(element) === removeMatching)
          retained.push(element);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      t1 = retained.length;
      if (t1 === end)
        return;
      this.set$length(receiver, t1);
      for (i = 0; i < retained.length; ++i)
        receiver[i] = retained[i];
    },
    where$1(receiver, f) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.WhereIterable(receiver, t1._eval$1("bool(1)")._as(f), t1._eval$1("WhereIterable<1>"));
    },
    expand$1$1(receiver, f, $T) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.ExpandIterable(receiver, t1._bind$1($T)._eval$1("Iterable<1>(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("ExpandIterable<1,2>"));
    },
    addAll$1(receiver, collection) {
      var t1;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "addAll", 2);
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    clear$0(receiver) {
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "clear", "clear");
      receiver.length = 0;
    },
    forEach$1(receiver, f) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("~(1)")._as(f);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1(receiver, f, $T) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1(receiver, f) {
      return this.map$1$1(receiver, f, type$.dynamic);
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    join$0(receiver) {
      return this.join$1(receiver, "");
    },
    take$1(receiver, n) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(n, "count", type$.int), A._arrayInstanceType(receiver)._precomputed1);
    },
    takeWhile$1(receiver, test) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.TakeWhileIterable(receiver, t1._eval$1("bool(1)")._as(test), t1._eval$1("TakeWhileIterable<1>"));
    },
    skip$1(receiver, n) {
      return A.SubListIterable$(receiver, n, null, A._arrayInstanceType(receiver)._precomputed1);
    },
    skipWhile$1(receiver, test) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.SkipWhileIterable(receiver, t1._eval$1("bool(1)")._as(test), t1._eval$1("SkipWhileIterable<1>"));
    },
    reduce$1(receiver, combine) {
      var $length, value, i;
      A._arrayInstanceType(receiver)._eval$1("1(1,1)")._as(combine);
      $length = receiver.length;
      if ($length === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      if (0 >= $length)
        return A.ioore(receiver, 0);
      value = receiver[0];
      for (i = 1; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if ($length !== receiver.length)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    fold$1$2(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      A._arrayInstanceType(receiver)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    firstWhere$2$orElse(receiver, test, orElse) {
      var end, i, element,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()?")._as(orElse);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (test.call$1(element))
          return element;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A.IterableElementError_noElement());
    },
    lastWhere$2$orElse(receiver, test, orElse) {
      var $length, i, element,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()?")._as(orElse);
      $length = receiver.length;
      for (i = $length - 1; i >= 0; --i) {
        element = receiver[i];
        if (test.call$1(element))
          return element;
        if ($length !== receiver.length)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A.IterableElementError_noElement());
    },
    singleWhere$2$orElse(receiver, test, orElse) {
      var $length, match, matchFound, i, element,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()?")._as(orElse);
      $length = receiver.length;
      for (match = null, matchFound = false, i = 0; i < $length; ++i) {
        element = receiver[i];
        if (test.call$1(element)) {
          if (matchFound)
            throw A.wrapException(A.IterableElementError_tooMany());
          match = element;
          matchFound = true;
        }
        if ($length !== receiver.length)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      if (matchFound)
        return match == null ? t1._precomputed1._as(match) : match;
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A.IterableElementError_noElement());
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, "start", null));
      if (end == null)
        end = receiver.length;
      else if (end < start || end > receiver.length)
        throw A.wrapException(A.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return A._setArrayType([], A._arrayInstanceType(receiver));
      return A._setArrayType(receiver.slice(start, end), A._arrayInstanceType(receiver));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    getRange$2(receiver, start, end) {
      A.RangeError_checkValidRange(start, end, receiver.length);
      return A.SubListIterable$(receiver, start, end, A._arrayInstanceType(receiver)._precomputed1);
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$single(receiver) {
      var t1 = receiver.length;
      if (t1 === 1) {
        if (0 >= t1)
          return A.ioore(receiver, 0);
        return receiver[0];
      }
      if (t1 === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      throw A.wrapException(A.IterableElementError_tooMany());
    },
    removeRange$2(receiver, start, end) {
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, 18);
      A.RangeError_checkValidRange(start, end, receiver.length);
      receiver.splice(start, end - start);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, i;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, 5);
      A.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    fillRange$3(receiver, start, end, fillValue) {
      var checkedFillValue, i,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("1?")._as(fillValue);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, "fillRange");
      A.RangeError_checkValidRange(start, end, receiver.length);
      checkedFillValue = fillValue == null ? t1._precomputed1._as(fillValue) : fillValue;
      for (i = start; i < end; ++i)
        receiver[i] = checkedFillValue;
    },
    replaceRange$3(receiver, start, end, replacement) {
      var removeLength, insertLength, insertEnd, t1, delta, newLength, _this = this;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(replacement);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "replaceRange", "remove from or add to");
      A.RangeError_checkValidRange(start, end, receiver.length);
      if (!type$.EfficientLengthIterable_dynamic._is(replacement))
        replacement = J.toList$0$ax(replacement);
      removeLength = end - start;
      insertLength = J.get$length$asx(replacement);
      insertEnd = start + insertLength;
      t1 = receiver.length;
      if (removeLength >= insertLength) {
        delta = removeLength - insertLength;
        newLength = t1 - delta;
        _this.setRange$3(receiver, start, insertEnd, replacement);
        if (delta !== 0) {
          _this.setRange$4(receiver, insertEnd, newLength, receiver, end);
          _this.set$length(receiver, newLength);
        }
      } else {
        newLength = t1 + (insertLength - removeLength);
        receiver.length = newLength;
        _this.setRange$4(receiver, insertEnd, newLength, receiver, end);
        _this.setRange$3(receiver, start, insertEnd, replacement);
      }
    },
    any$1(receiver, test) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (test.call$1(receiver[i]))
          return true;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1(receiver, test) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (!test.call$1(receiver[i]))
          return false;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    get$reversed(receiver) {
      return new A.ReversedListIterable(receiver, A._arrayInstanceType(receiver)._eval$1("ReversedListIterable<1>"));
    },
    sort$1(receiver, compare) {
      var len, a, b, undefineds, i,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("int(1,1)?")._as(compare);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, "sort");
      len = receiver.length;
      if (len < 2)
        return;
      if (compare == null)
        compare = J._interceptors_JSArray__compareAny$closure();
      if (len === 2) {
        a = receiver[0];
        b = receiver[1];
        t1 = compare.call$2(a, b);
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 0) {
          receiver[0] = b;
          receiver[1] = a;
        }
        return;
      }
      undefineds = 0;
      if (t1._precomputed1._is(null))
        for (i = 0; i < receiver.length; ++i)
          if (receiver[i] === void 0) {
            receiver[i] = null;
            ++undefineds;
          }
      receiver.sort(A.convertDartClosureToJS(compare, 2));
      if (undefineds > 0)
        this._replaceSomeNullsWithUndefined$1(receiver, undefineds);
    },
    _replaceSomeNullsWithUndefined$1(receiver, count) {
      var i0,
        i = receiver.length;
      for (; i0 = i - 1, i > 0; i = i0)
        if (receiver[i0] === null) {
          receiver[i0] = void 0;
          --count;
          if (count === 0)
            break;
        }
    },
    shuffle$1(receiver, random) {
      var $length, pos, t1, tmp;
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, "shuffle");
      $length = receiver.length;
      for (; $length > 1;) {
        pos = random.nextInt$1($length);
        --$length;
        t1 = receiver.length;
        if (!($length < t1))
          return A.ioore(receiver, $length);
        tmp = receiver[$length];
        if (!(pos >= 0 && pos < t1))
          return A.ioore(receiver, pos);
        receiver[$length] = receiver[pos];
        receiver[pos] = tmp;
      }
    },
    indexOf$2(receiver, element, start) {
      var i,
        $length = receiver.length;
      if (start >= $length)
        return -1;
      for (i = start; i < $length; ++i) {
        if (!(i < receiver.length))
          return A.ioore(receiver, i);
        if (J.$eq$(receiver[i], element))
          return i;
      }
      return -1;
    },
    lastIndexOf$2(receiver, element, startIndex) {
      var t1, i,
        start = startIndex == null ? receiver.length - 1 : startIndex;
      if (start < 0)
        return -1;
      t1 = receiver.length;
      if (start >= t1)
        start = t1 - 1;
      for (i = start; i >= 0; --i) {
        if (!(i < receiver.length))
          return A.ioore(receiver, i);
        if (J.$eq$(receiver[i], element))
          return i;
      }
      return -1;
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable(receiver, growable) {
      var t1 = A._setArrayType(receiver.slice(0), A._arrayInstanceType(receiver));
      return t1;
    },
    toList$0(receiver) {
      return this.toList$1$growable(receiver, true);
    },
    toSet$0(receiver) {
      return A.LinkedHashSet_LinkedHashSet$from(receiver, A._arrayInstanceType(receiver)._precomputed1);
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$length(receiver, newLength) {
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "set length", "change the length of");
      if (newLength < 0)
        throw A.wrapException(A.RangeError$range(newLength, 0, null, "newLength", null));
      if (newLength > receiver.length)
        A._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    asMap$0(receiver) {
      return new A.ListMapView(receiver, A._arrayInstanceType(receiver)._eval$1("ListMapView<1>"));
    },
    followedBy$1(receiver, other) {
      var t1 = A._arrayInstanceType(receiver);
      return A.FollowedByIterable_FollowedByIterable$firstEfficient(receiver, t1._eval$1("Iterable<1>")._as(other), t1._precomputed1);
    },
    whereType$1$0(receiver, $T) {
      return new A.WhereTypeIterable(receiver, $T._eval$1("WhereTypeIterable<0>"));
    },
    $add(receiver, other) {
      var t1 = A._arrayInstanceType(receiver);
      t1._eval$1("List<1>")._as(other);
      t1 = A.List_List$_of(receiver, t1._precomputed1);
      this.addAll$1(t1, other);
      return t1;
    },
    indexWhere$2(receiver, test, start) {
      var i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      if (start >= receiver.length)
        return -1;
      for (i = start; i < receiver.length; ++i)
        if (test.call$1(receiver[i]))
          return i;
      return -1;
    },
    lastIndexWhere$2(receiver, test, start) {
      var i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      if (start == null)
        start = receiver.length - 1;
      if (start < 0)
        return -1;
      for (i = start; i >= 0; --i) {
        if (!(i < receiver.length))
          return A.ioore(receiver, i);
        if (test.call$1(receiver[i]))
          return i;
      }
      return -1;
    },
    set$first(receiver, element) {
      var t1;
      A._arrayInstanceType(receiver)._precomputed1._as(element);
      t1 = receiver.length;
      if (t1 === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      if (0 >= t1)
        return A.ioore(receiver, 0);
      receiver[0] = element;
    },
    set$last(receiver, element) {
      var t1, t2;
      A._arrayInstanceType(receiver)._precomputed1._as(element);
      t1 = receiver.length;
      if (t1 === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      t2 = t1 - 1;
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      if (!(t2 >= 0))
        return A.ioore(receiver, t2);
      receiver[t2] = element;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._arrayInstanceType(receiver));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSArraySafeToStringHook.prototype = {
    tryFormat$1(array) {
      var flags, info, base;
      if (!Array.isArray(array))
        return null;
      flags = array.$flags | 0;
      if ((flags & 4) !== 0)
        info = "const, ";
      else if ((flags & 2) !== 0)
        info = "unmodifiable, ";
      else
        info = (flags & 1) !== 0 ? "fixed, " : "";
      base = "Instance of '" + A.Primitives_objectTypeName(array) + "'";
      if (info === "")
        return base;
      return base + " (" + info + "length: " + array.length + ")";
    }
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length) {
        t1 = A.throwConcurrentModificationError(t1);
        throw A.wrapException(t1);
      }
      t2 = _this._index;
      if (t2 >= $length) {
        _this._current = null;
        return false;
      }
      _this._current = t1[t2];
      _this._index = t2 + 1;
      return true;
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      A._asNum(b);
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".round()"));
    },
    toRadixString$1(receiver, radix) {
      var result, t1, t2, match, exponent;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      t1 = result.length;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(result, t2);
      if (result.charCodeAt(t2) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        A.throwExpression(A.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return A.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return A.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + B.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $negate(receiver) {
      return -receiver;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    $shl(receiver, other) {
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr(receiver, other) {
      var t1;
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
      if (0 > other)
        throw A.wrapException(A.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $lt(receiver, other) {
      A._asNum(other);
      return receiver < other;
    },
    $gt(receiver, other) {
      A._asNum(other);
      return receiver > other;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.num);
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    $negate(receiver) {
      return -receiver;
    },
    get$bitLength(receiver) {
      var wordBits,
        t1 = receiver < 0 ? -receiver - 1 : receiver,
        nonneg = t1;
      for (wordBits = 32; nonneg >= 4294967296;) {
        nonneg = this._tdivFast$1(nonneg, 4294967296);
        wordBits += 32;
      }
      return wordBits - Math.clz32(nonneg);
    },
    gcd$1(receiver, other) {
      var x = Math.abs(receiver),
        y = Math.abs(other);
      if (x === 0)
        return y;
      if (y === 0)
        return x;
      if (x === 1 || y === 1)
        return 1;
      return J.JSInt__binaryGcd(x, y, false);
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.int);
    },
    $isTrustedGetRuntimeType: 1,
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.double);
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JSString.prototype = {
    allMatches$2(receiver, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._StringAllMatchesIterable(string, receiver, start);
    },
    allMatches$1(receiver, string) {
      return this.allMatches$2(receiver, string, 0);
    },
    matchAsPrefix$2(receiver, string, start) {
      var t1, t2, i, t3, _null = null;
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, _null, _null));
      t1 = receiver.length;
      t2 = string.length;
      if (start + t1 > t2)
        return _null;
      for (i = 0; i < t1; ++i) {
        t3 = start + i;
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(string, t3);
        if (string.charCodeAt(t3) !== receiver.charCodeAt(i))
          return _null;
      }
      return new A.StringMatch(start, receiver);
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceFirst$2(receiver, from, to) {
      A.RangeError_checkValueInInterval(0, 0, receiver.length, "startIndex");
      return A.stringReplaceFirstUnchecked(receiver, from, to, 0);
    },
    split$1(receiver, pattern) {
      var t1;
      if (typeof pattern == "string")
        return A._setArrayType(receiver.split(pattern), type$.JSArray_String);
      else {
        if (pattern instanceof A.JSSyntaxRegExp) {
          t1 = pattern._hasCapturesCache;
          t1 = !(t1 == null ? pattern._hasCapturesCache = pattern._computeHasCaptures$0() : t1);
        } else
          t1 = false;
        if (t1)
          return A._setArrayType(receiver.split(pattern._nativeRegExp), type$.JSArray_String);
        else
          return this._defaultSplit$1(receiver, pattern);
      }
    },
    replaceRange$3(receiver, start, end, replacement) {
      var e = A.RangeError_checkValidRange(start, end, receiver.length);
      return A.stringReplaceRangeUnchecked(receiver, start, e, replacement);
    },
    _defaultSplit$1(receiver, pattern) {
      var t1, start, $length, match, matchStart, matchEnd,
        result = A._setArrayType([], type$.JSArray_String);
      for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), start = 0, $length = 1; t1.moveNext$0();) {
        match = t1.get$current();
        matchStart = match.get$start();
        matchEnd = match.get$end();
        $length = matchEnd - matchStart;
        if ($length === 0 && start === matchStart)
          continue;
        B.JSArray_methods.add$1(result, this.substring$2(receiver, start, matchStart));
        start = matchEnd;
      }
      if (start < receiver.length || $length > 0)
        B.JSArray_methods.add$1(result, this.substring$1(receiver, start));
      return result;
    },
    startsWith$2(receiver, pattern, index) {
      var endIndex;
      type$.Pattern._as(pattern);
      if (index < 0 || index > receiver.length)
        throw A.wrapException(A.RangeError$range(index, 0, receiver.length, null, null));
      if (typeof pattern == "string") {
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
    },
    startsWith$1(receiver, pattern) {
      return this.startsWith$2(receiver, pattern, 0);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1(receiver, start) {
      return this.substring$2(receiver, start, null);
    },
    trim$0(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (0 >= endIndex)
        return A.ioore(result, 0);
      if (result.charCodeAt(0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      if (!(t1 >= 0))
        return A.ioore(result, t1);
      endIndex0 = result.charCodeAt(t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    trimRight$0(receiver) {
      var t1,
        result = receiver.trimEnd(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      t1 = endIndex - 1;
      if (!(t1 >= 0))
        return A.ioore(result, t1);
      if (result.charCodeAt(t1) !== 133)
        return result;
      return result.substring(0, J.JSString__skipTrailingWhitespace(result, t1));
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    padRight$1(receiver, width) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return receiver + this.$mul(" ", delta);
    },
    indexOf$2(receiver, pattern, start) {
      var match, t1, t2, i;
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      if (typeof pattern == "string")
        return receiver.indexOf(pattern, start);
      if (pattern instanceof A.JSSyntaxRegExp) {
        match = pattern._execGlobal$2(receiver, start);
        return match == null ? -1 : match._match.index;
      }
      for (t1 = receiver.length, t2 = J.getInterceptor$s(pattern), i = start; i <= t1; ++i)
        if (t2.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    indexOf$1(receiver, pattern) {
      return this.indexOf$2(receiver, pattern, 0);
    },
    lastIndexOf$2(receiver, pattern, start) {
      var t1, t2;
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1(receiver, pattern) {
      return this.lastIndexOf$2(receiver, pattern, null);
    },
    contains$1(receiver, other) {
      return A.stringContainsUnchecked(receiver, other, 0);
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    compareTo$1(receiver, other) {
      var t1;
      A._asString(other);
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.String);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $isTrustedGetRuntimeType: 1,
    $isComparable: 1,
    $isPattern: 1,
    $isString: 1
  };
  A._CastIterableBase.prototype = {
    get$iterator(_) {
      return new A.CastIterator(J.get$iterator$ax(this.get$_source()), A._instanceType(this)._eval$1("CastIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    take$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.take$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    elementAt$1(_, index) {
      return A._instanceType(this)._rest[1]._as(J.elementAt$1$ax(this.get$_source(), index));
    },
    get$first(_) {
      return A._instanceType(this)._rest[1]._as(J.get$first$ax(this.get$_source()));
    },
    get$last(_) {
      return A._instanceType(this)._rest[1]._as(J.get$last$ax(this.get$_source()));
    },
    get$single(_) {
      return A._instanceType(this)._rest[1]._as(J.get$single$ax(this.get$_source()));
    },
    contains$1(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    lastWhere$2$orElse(_, test, orElse) {
      var t2, t3, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("bool(2)")._as(test);
      t1._eval$1("2()?")._as(orElse);
      t2 = _this.get$_source();
      t3 = orElse == null ? null : new A._CastIterableBase_lastWhere_closure(_this, orElse);
      return t1._rest[1]._as(J.lastWhere$2$orElse$ax(t2, new A._CastIterableBase_lastWhere_closure0(_this, test), t3));
    },
    toString$0(_) {
      return J.toString$0$(this.get$_source());
    }
  };
  A._CastIterableBase_lastWhere_closure0.prototype = {
    call$1(element) {
      var t1 = A._instanceType(this.$this);
      return this.test.call$1(t1._rest[1]._as(t1._precomputed1._as(element)));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(1)");
    }
  };
  A._CastIterableBase_lastWhere_closure.prototype = {
    call$0() {
      return A._instanceType(this.$this)._precomputed1._as(this.orElse.call$0());
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("1()");
    }
  };
  A.CastIterator.prototype = {
    moveNext$0() {
      return this._source.moveNext$0();
    },
    get$current() {
      return this.$ti._rest[1]._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.CastIterable.prototype = {
    cast$1$0(_, $R) {
      return A.CastIterable_CastIterable(this._source, A._instanceType(this)._precomputed1, $R);
    },
    get$_source() {
      return this._source;
    }
  };
  A._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1};
  A._CastListBase.prototype = {
    $index(_, index) {
      return this.$ti._rest[1]._as(J.$index$asx(this._source, A._asInt(index)));
    },
    $indexSet(_, index, value) {
      var t1 = this.$ti;
      J.$indexSet$ax(this._source, index, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    set$length(_, $length) {
      J.set$length$asx(this._source, $length);
    },
    add$1(_, value) {
      var t1 = this.$ti;
      J.add$1$ax(this._source, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    addAll$1(_, values) {
      var t1 = this.$ti;
      J.addAll$1$ax(this._source, A.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(values), t1._rest[1], t1._precomputed1));
    },
    sort$1(_, compare) {
      var t1;
      this.$ti._eval$1("int(2,2)?")._as(compare);
      t1 = compare == null ? null : new A._CastListBase_sort_closure(this, compare);
      J.sort$1$ax(this._source, t1);
    },
    sort$0(_) {
      return this.sort$1(0, null);
    },
    shuffle$1(_, random) {
      J.shuffle$1$ax(this._source, random);
    },
    insert$2(_, index, element) {
      var t1 = this.$ti;
      J.insert$2$ax(this._source, index, t1._precomputed1._as(t1._rest[1]._as(element)));
    },
    insertAll$2(_, index, elements) {
      var t1 = this.$ti;
      J.insertAll$2$ax(this._source, index, A.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(elements), t1._rest[1], t1._precomputed1));
    },
    setAll$2(_, index, elements) {
      var t1 = this.$ti;
      J.setAll$2$ax(this._source, index, A.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(elements), t1._rest[1], t1._precomputed1));
    },
    remove$1(_, value) {
      return J.remove$1$ax(this._source, value);
    },
    removeAt$1(_, index) {
      return this.$ti._rest[1]._as(J.removeAt$1$ax(this._source, index));
    },
    removeLast$0(_) {
      return this.$ti._rest[1]._as(J.removeLast$0$ax(this._source));
    },
    removeWhere$1(_, test) {
      J.removeWhere$1$ax(this._source, new A._CastListBase_removeWhere_closure(this, this.$ti._eval$1("bool(2)")._as(test)));
    },
    retainWhere$1(_, test) {
      J.retainWhere$1$ax(this._source, new A._CastListBase_retainWhere_closure(this, this.$ti._eval$1("bool(2)")._as(test)));
    },
    getRange$2(_, start, end) {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(J.getRange$2$ax(this._source, start, end), t1._precomputed1, t1._rest[1]);
    },
    setRange$4(_, start, end, iterable, skipCount) {
      var t1 = this.$ti;
      J.setRange$4$ax(this._source, start, end, A.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(iterable), t1._rest[1], t1._precomputed1), skipCount);
    },
    setRange$3(_, start, end, iterable) {
      return this.setRange$4(0, start, end, iterable, 0);
    },
    removeRange$2(_, start, end) {
      J.removeRange$2$ax(this._source, start, end);
    },
    fillRange$3(_, start, end, fillValue) {
      var t1 = this.$ti;
      J.fillRange$3$ax(this._source, start, end, t1._precomputed1._as(t1._eval$1("2?")._as(fillValue)));
    },
    replaceRange$3(_, start, end, replacement) {
      var t1 = this.$ti;
      J.replaceRange$3$asx(this._source, start, end, A.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(replacement), t1._rest[1], t1._precomputed1));
    },
    $isEfficientLengthIterable: 1,
    $isList: 1
  };
  A._CastListBase_sort_closure.prototype = {
    call$2(v1, v2) {
      var t1 = this.$this.$ti,
        t2 = t1._precomputed1;
      t2._as(v1);
      t2._as(v2);
      t1 = t1._rest[1];
      return this.compare.call$2(t1._as(v1), t1._as(v2));
    },
    $signature() {
      return this.$this.$ti._eval$1("int(1,1)");
    }
  };
  A._CastListBase_removeWhere_closure.prototype = {
    call$1(element) {
      var t1 = this.$this.$ti;
      return this.test.call$1(t1._rest[1]._as(t1._precomputed1._as(element)));
    },
    $signature() {
      return this.$this.$ti._eval$1("bool(1)");
    }
  };
  A._CastListBase_retainWhere_closure.prototype = {
    call$1(element) {
      var t1 = this.$this.$ti;
      return this.test.call$1(t1._rest[1]._as(t1._precomputed1._as(element)));
    },
    $signature() {
      return this.$this.$ti._eval$1("bool(1)");
    }
  };
  A.CastList.prototype = {
    cast$1$0(_, $R) {
      return new A.CastList(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    get$_source() {
      return this._source;
    }
  };
  A.CastSet.prototype = {
    cast$1$0(_, $R) {
      return new A.CastSet(this._source, this._emptySet, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastSet<1,2>"));
    },
    addAll$1(_, elements) {
      var t1 = this.$ti;
      this._source.addAll$1(0, A.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(elements), t1._rest[1], t1._precomputed1));
    },
    _clone$0() {
      var emptySet = this._emptySet,
        t1 = this.$ti._rest[1],
        result = emptySet == null ? A.LinkedHashSet_LinkedHashSet(t1) : emptySet.call$1$0(t1);
      result.addAll$1(0, this);
      return result;
    },
    toSet$0(_) {
      return this._clone$0();
    },
    $isEfficientLengthIterable: 1,
    $isSet: 1,
    get$_source() {
      return this._source;
    }
  };
  A.CastMap.prototype = {
    cast$2$0(_, $RK, $RV) {
      return new A.CastMap(this._source, this.$ti._eval$1("@<1,2>")._bind$1($RK)._bind$1($RV)._eval$1("CastMap<1,2,3,4>"));
    },
    containsValue$1(value) {
      return this._source.containsValue$1(value);
    },
    containsKey$1(key) {
      return this._source.containsKey$1(key);
    },
    $index(_, key) {
      return this.$ti._eval$1("4?")._as(this._source.$index(0, key));
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      t1._rest[2]._as(key);
      t1._rest[3]._as(value);
      this._source.$indexSet(0, t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    putIfAbsent$2(key, ifAbsent) {
      var t1 = this.$ti;
      t1._rest[2]._as(key);
      t1._eval$1("4()")._as(ifAbsent);
      return t1._rest[3]._as(this._source.putIfAbsent$2(t1._precomputed1._as(key), new A.CastMap_putIfAbsent_closure(this, ifAbsent)));
    },
    addAll$1(_, other) {
      var t1 = this.$ti;
      this._source.addAll$1(0, new A.CastMap(t1._eval$1("Map<3,4>")._as(other), t1._eval$1("CastMap<3,4,1,2>")));
    },
    remove$1(_, key) {
      return this.$ti._eval$1("4?")._as(this._source.remove$1(0, key));
    },
    clear$0(_) {
      this._source.clear$0(0);
    },
    forEach$1(_, f) {
      this._source.forEach$1(0, new A.CastMap_forEach_closure(this, this.$ti._eval$1("~(3,4)")._as(f)));
    },
    get$keys() {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(this._source.get$keys(), t1._precomputed1, t1._rest[2]);
    },
    get$values() {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(this._source.get$values(), t1._rest[1], t1._rest[3]);
    },
    get$length(_) {
      var t1 = this._source;
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this._source;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._source;
      return t1.get$isNotEmpty(t1);
    },
    update$3$ifAbsent(key, update, ifAbsent) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._rest[2]._as(key);
      t1._eval$1("4(4)")._as(update);
      t1._eval$1("4()?")._as(ifAbsent);
      t1._precomputed1._as(key);
      t2 = ifAbsent == null ? null : new A.CastMap_update_closure(_this, ifAbsent);
      return t1._rest[3]._as(_this._source.update$3$ifAbsent(key, new A.CastMap_update_closure0(_this, update), t2));
    },
    updateAll$1(update) {
      this._source.updateAll$1(new A.CastMap_updateAll_closure(this, this.$ti._eval$1("4(3,4)")._as(update)));
    },
    get$entries() {
      var t1 = this._source.get$entries();
      return t1.map$1$1(t1, new A.CastMap_entries_closure(this), this.$ti._eval$1("MapEntry<3,4>"));
    },
    addEntries$1(entries) {
      var t2, t3, t4, entry,
        t1 = this.$ti;
      for (t2 = t1._eval$1("Iterable<MapEntry<3,4>>")._as(entries).get$iterator(0), t3 = this._source, t4 = t1._precomputed1, t1 = t1._rest[1]; t2.moveNext$0();) {
        entry = t2.__js_helper$_current;
        t3.$indexSet(0, t4._as(entry.key), t1._as(entry.value));
      }
    },
    removeWhere$1(_, test) {
      this._source.removeWhere$1(0, new A.CastMap_removeWhere_closure(this, this.$ti._eval$1("bool(3,4)")._as(test)));
    }
  };
  A.CastMap_putIfAbsent_closure.prototype = {
    call$0() {
      return this.$this.$ti._rest[1]._as(this.ifAbsent.call$0());
    },
    $signature() {
      return this.$this.$ti._eval$1("2()");
    }
  };
  A.CastMap_forEach_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      this.f.call$2(t1._rest[2]._as(key), t1._rest[3]._as(value));
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1,2)");
    }
  };
  A.CastMap_update_closure0.prototype = {
    call$1(value) {
      var t1 = this.$this.$ti,
        t2 = t1._rest[1];
      return t2._as(this.update.call$1(t1._rest[3]._as(t2._as(value))));
    },
    $signature() {
      return this.$this.$ti._eval$1("2(2)");
    }
  };
  A.CastMap_update_closure.prototype = {
    call$0() {
      return this.$this.$ti._rest[1]._as(this.ifAbsent.call$0());
    },
    $signature() {
      return this.$this.$ti._eval$1("2()");
    }
  };
  A.CastMap_updateAll_closure.prototype = {
    call$2(key, value) {
      var t2,
        t1 = this.$this.$ti;
      t1._precomputed1._as(key);
      t2 = t1._rest[1];
      t2._as(value);
      return t2._as(this.update.call$2(t1._rest[2]._as(key), t1._rest[3]._as(value)));
    },
    $signature() {
      return this.$this.$ti._eval$1("2(1,2)");
    }
  };
  A.CastMap_entries_closure.prototype = {
    call$1(e) {
      var t1 = this.$this.$ti;
      t1._eval$1("MapEntry<1,2>")._as(e);
      return new A.MapEntry(t1._rest[2]._as(e.key), t1._rest[3]._as(e.value), t1._eval$1("MapEntry<3,4>"));
    },
    $signature() {
      return this.$this.$ti._eval$1("MapEntry<3,4>(MapEntry<1,2>)");
    }
  };
  A.CastMap_removeWhere_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      return this.test.call$2(t1._rest[2]._as(key), t1._rest[3]._as(value));
    },
    $signature() {
      return this.$this.$ti._eval$1("bool(1,2)");
    }
  };
  A.CastQueue.prototype = {
    cast$1$0(_, $R) {
      return new A.CastQueue(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastQueue<1,2>"));
    },
    $isEfficientLengthIterable: 1,
    $isQueue: 1,
    get$_source() {
      return this._source;
    }
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this.__internal$_message;
    }
  };
  A.CodeUnits.prototype = {
    get$length(_) {
      return this._string.length;
    },
    $index(_, i) {
      var t1;
      A._asInt(i);
      t1 = this._string;
      if (!(i >= 0 && i < t1.length))
        return A.ioore(t1, i);
      return t1.charCodeAt(i);
    }
  };
  A.nullFuture_closure.prototype = {
    call$0() {
      return A.Future_Future$value(null, type$.void);
    },
    $signature: 14
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), A._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$first(_) {
      if (this.get$length(this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    get$last(_) {
      var _this = this;
      if (_this.get$length(_this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return _this.elementAt$1(0, _this.get$length(_this) - 1);
    },
    get$single(_) {
      var _this = this;
      if (_this.get$length(_this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      if (_this.get$length(_this) > 1)
        throw A.wrapException(A.IterableElementError_tooMany());
      return _this.elementAt$1(0, 0);
    },
    contains$1(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return false;
    },
    any$1(_, test) {
      var $length, i, _this = this;
      A._instanceType(_this)._eval$1("bool(ListIterable.E)")._as(test);
      $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (test.call$1(_this.elementAt$1(0, i)))
          return true;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return false;
    },
    lastWhere$2$orElse(_, test, orElse) {
      var $length, i, element, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("bool(ListIterable.E)")._as(test);
      t1._eval$1("ListIterable.E()?")._as(orElse);
      $length = _this.get$length(_this);
      for (i = $length - 1; i >= 0; --i) {
        element = _this.elementAt$1(0, i);
        if (test.call$1(element))
          return element;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A.IterableElementError_noElement());
    },
    join$1(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = A.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    join$0(_) {
      return this.join$1(0, "");
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return new A.MappedListIterable(this, t1._bind$1($T)._eval$1("1(ListIterable.E)")._as(toElement), t1._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1(_, toElement) {
      return this.map$1$1(0, toElement, type$.dynamic);
    },
    fold$1$2(_, initialValue, combine, $T) {
      var $length, value, i, _this = this;
      $T._as(initialValue);
      A._instanceType(_this)._bind$1($T)._eval$1("1(1,ListIterable.E)")._as(combine);
      $length = _this.get$length(_this);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return value;
    },
    skip$1(_, count) {
      return A.SubListIterable$(this, count, null, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    take$1(_, count) {
      return A.SubListIterable$(this, 0, A.checkNotNullable(count, "count", type$.int), A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$1$growable(_, growable) {
      var t1 = A.List_List$_of(this, A._instanceType(this)._eval$1("ListIterable.E"));
      return t1;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    toSet$0(_) {
      var i, _this = this,
        result = A.LinkedHashSet_LinkedHashSet(A._instanceType(_this)._eval$1("ListIterable.E"));
      for (i = 0; i < _this.get$length(_this); ++i)
        result.add$1(0, _this.elementAt$1(0, i));
      return result;
    }
  };
  A.SubListIterable.prototype = {
    SubListIterable$3(_iterable, _start, _endOrLength, $E) {
      var endOrLength,
        t1 = this._start;
      A.RangeError_checkNotNegative(t1, "start");
      endOrLength = this._endOrLength;
      if (endOrLength != null) {
        A.RangeError_checkNotNegative(endOrLength, "end");
        if (t1 > endOrLength)
          throw A.wrapException(A.RangeError$range(t1, 0, endOrLength, "start", null));
      }
    },
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw A.wrapException(A.IndexError$withLength(index, _this.get$length(0), _this, null, "index"));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
      var newStart, endOrLength, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      newStart = _this._start + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new A.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return A.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    take$1(_, count) {
      var endOrLength, t1, newEnd, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      endOrLength = _this._endOrLength;
      t1 = _this._start;
      newEnd = t1 + count;
      if (endOrLength == null)
        return A.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      else {
        if (endOrLength < newEnd)
          return _this;
        return A.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      }
    },
    toList$1$growable(_, growable) {
      var $length, result, i, _this = this,
        start = _this._start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = _this.$ti._precomputed1;
        return growable ? J.JSArray_JSArray$growable(0, t1) : J.JSArray_JSArray$fixed(0, t1);
      }
      result = A.List_List$filled($length, t2.elementAt$1(t1, start), growable, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        B.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.__internal$_current = null;
        return false;
      }
      _this.__internal$_current = t2.elementAt$1(t1, t3);
      ++_this.__internal$_index;
      return true;
    },
    $isIterator: 1
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      return new A.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, A._instanceType(this)._eval$1("MappedIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    get$last(_) {
      return this._f.call$1(J.get$last$ax(this.__internal$_iterable));
    },
    get$single(_) {
      return this._f.call$1(J.get$single$ax(this.__internal$_iterable));
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    }
  };
  A.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.__internal$_current = _this._f.call$1(t1.get$current());
        return true;
      }
      _this.__internal$_current = null;
      return false;
    },
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    $isIterator: 1
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return new A.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    },
    map$1$1(_, toElement, $T) {
      var t1 = this.$ti;
      return new A.MappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(toElement), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    map$1(_, toElement) {
      return this.map$1$1(0, toElement, type$.dynamic);
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (t2.call$1(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.ExpandIterable.prototype = {
    get$iterator(_) {
      return new A.ExpandIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, B.C_EmptyIterator, this.$ti._eval$1("ExpandIterator<1,2>"));
    }
  };
  A.ExpandIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    moveNext$0() {
      var t2, t3, _this = this,
        t1 = _this._currentExpansion;
      if (t1 == null)
        return false;
      for (t2 = _this._iterator, t3 = _this._f; !t1.moveNext$0();) {
        _this.__internal$_current = null;
        if (t2.moveNext$0()) {
          _this._currentExpansion = null;
          t1 = J.get$iterator$ax(t3.call$1(t2.get$current()));
          _this._currentExpansion = t1;
        } else
          return false;
      }
      _this.__internal$_current = _this._currentExpansion.get$current();
      return true;
    },
    $isIterator: 1
  };
  A.TakeIterable.prototype = {
    get$iterator(_) {
      var t1 = this.__internal$_iterable;
      return new A.TakeIterator(t1.get$iterator(t1), this._takeCount, A._instanceType(this)._eval$1("TakeIterator<1>"));
    }
  };
  A.EfficientLengthTakeIterable.prototype = {
    get$length(_) {
      var t1 = this.__internal$_iterable,
        iterableLength = t1.get$length(t1);
      t1 = this._takeCount;
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  A.TakeIterator.prototype = {
    moveNext$0() {
      if (--this._remaining >= 0)
        return this._iterator.moveNext$0();
      this._remaining = -1;
      return false;
    },
    get$current() {
      if (this._remaining < 0) {
        this.$ti._precomputed1._as(null);
        return null;
      }
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.TakeWhileIterable.prototype = {
    get$iterator(_) {
      return new A.TakeWhileIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("TakeWhileIterator<1>"));
    }
  };
  A.TakeWhileIterator.prototype = {
    moveNext$0() {
      var t1, _this = this;
      if (_this._isFinished)
        return false;
      t1 = _this._iterator;
      if (!t1.moveNext$0() || !_this._f.call$1(t1.get$current())) {
        _this._isFinished = true;
        return false;
      }
      return true;
    },
    get$current() {
      if (this._isFinished) {
        this.$ti._precomputed1._as(null);
        return null;
      }
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.SkipIterable.prototype = {
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.SkipIterable(this.__internal$_iterable, this._skipCount + count, A._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator(_) {
      var t1 = this.__internal$_iterable;
      return new A.SkipIterator(t1.get$iterator(t1), this._skipCount, A._instanceType(this)._eval$1("SkipIterator<1>"));
    }
  };
  A.EfficientLengthSkipIterable.prototype = {
    get$length(_) {
      var t1 = this.__internal$_iterable,
        $length = t1.get$length(t1) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  A.SkipIterator.prototype = {
    moveNext$0() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.SkipWhileIterable.prototype = {
    get$iterator(_) {
      return new A.SkipWhileIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("SkipWhileIterator<1>"));
    }
  };
  A.SkipWhileIterator.prototype = {
    moveNext$0() {
      var t1, t2, _this = this;
      if (!_this._hasSkipped) {
        _this._hasSkipped = true;
        for (t1 = _this._iterator, t2 = _this._f; t1.moveNext$0();)
          if (!t2.call$1(t1.get$current()))
            return true;
      }
      return _this._iterator.moveNext$0();
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.EmptyIterable.prototype = {
    get$iterator(_) {
      return B.C_EmptyIterator;
    },
    get$isEmpty(_) {
      return true;
    },
    get$length(_) {
      return 0;
    },
    get$first(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$single(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    elementAt$1(_, index) {
      throw A.wrapException(A.RangeError$range(index, 0, 0, "index", null));
    },
    contains$1(_, element) {
      return false;
    },
    any$1(_, test) {
      this.$ti._eval$1("bool(1)")._as(test);
      return false;
    },
    lastWhere$2$orElse(_, test, orElse) {
      var t1 = this.$ti;
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()?")._as(orElse);
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A.IterableElementError_noElement());
    },
    map$1$1(_, toElement, $T) {
      this.$ti._bind$1($T)._eval$1("1(2)")._as(toElement);
      return new A.EmptyIterable($T._eval$1("EmptyIterable<0>"));
    },
    map$1(_, toElement) {
      return this.map$1$1(0, toElement, type$.dynamic);
    },
    skip$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    },
    take$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    },
    toList$1$growable(_, growable) {
      var t1 = J.JSArray_JSArray$growable(0, this.$ti._precomputed1);
      return t1;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    toSet$0(_) {
      return A.LinkedHashSet_LinkedHashSet(this.$ti._precomputed1);
    }
  };
  A.EmptyIterator.prototype = {
    moveNext$0() {
      return false;
    },
    get$current() {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  A.FollowedByIterable.prototype = {
    get$iterator(_) {
      return new A.FollowedByIterator(J.get$iterator$ax(this.__internal$_first), this.__internal$_second, A._instanceType(this)._eval$1("FollowedByIterator<1>"));
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_first) + J.get$length$asx(this.__internal$_second);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_first) && J.get$isEmpty$asx(this.__internal$_second);
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.__internal$_first) || J.get$isNotEmpty$asx(this.__internal$_second);
    },
    contains$1(_, value) {
      return J.contains$1$asx(this.__internal$_first, value) || J.contains$1$asx(this.__internal$_second, value);
    },
    get$first(_) {
      var iterator = J.get$iterator$ax(this.__internal$_first);
      if (iterator.moveNext$0())
        return iterator.get$current();
      return J.get$first$ax(this.__internal$_second);
    },
    get$last(_) {
      var last,
        iterator = J.get$iterator$ax(this.__internal$_second);
      if (iterator.moveNext$0()) {
        last = iterator.get$current();
        for (; iterator.moveNext$0();)
          last = iterator.get$current();
        return last;
      }
      return J.get$last$ax(this.__internal$_first);
    }
  };
  A.EfficientLengthFollowedByIterable.prototype = {
    elementAt$1(_, index) {
      var t1 = this.__internal$_first,
        t2 = J.getInterceptor$asx(t1),
        firstLength = t2.get$length(t1);
      if (index < firstLength)
        return t2.elementAt$1(t1, index);
      return J.elementAt$1$ax(this.__internal$_second, index - firstLength);
    },
    get$first(_) {
      var t1 = this.__internal$_first,
        t2 = J.getInterceptor$asx(t1);
      if (t2.get$isNotEmpty(t1))
        return t2.get$first(t1);
      return J.get$first$ax(this.__internal$_second);
    },
    get$last(_) {
      var t1 = this.__internal$_second,
        t2 = J.getInterceptor$asx(t1);
      if (t2.get$isNotEmpty(t1))
        return t2.get$last(t1);
      return J.get$last$ax(this.__internal$_first);
    },
    $isEfficientLengthIterable: 1
  };
  A.FollowedByIterator.prototype = {
    moveNext$0() {
      var t1, _this = this;
      if (_this._currentIterator.moveNext$0())
        return true;
      t1 = _this._nextIterable;
      if (t1 != null) {
        t1 = J.get$iterator$ax(t1);
        _this._currentIterator = t1;
        _this._nextIterable = null;
        return t1.moveNext$0();
      }
      return false;
    },
    get$current() {
      return this._currentIterator.get$current();
    },
    $isIterator: 1
  };
  A.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return new A.WhereTypeIterator(J.get$iterator$ax(this._source), this.$ti._eval$1("WhereTypeIterator<1>"));
    }
  };
  A.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0();)
        if (t2._is(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this.$ti._precomputed1._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.NonNullsIterable.prototype = {
    get$_firstNonNull() {
      var t1, element;
      for (t1 = J.get$iterator$ax(this._source); t1.moveNext$0();) {
        element = t1.get$current();
        if (element != null)
          return element;
      }
      return null;
    },
    get$isEmpty(_) {
      return this.get$_firstNonNull() == null;
    },
    get$isNotEmpty(_) {
      return this.get$_firstNonNull() != null;
    },
    get$first(_) {
      var t1 = this.get$_firstNonNull();
      return t1 == null ? A.throwExpression(A.IterableElementError_noElement()) : t1;
    },
    get$iterator(_) {
      return new A.NonNullsIterator(J.get$iterator$ax(this._source), this.$ti._eval$1("NonNullsIterator<1>"));
    }
  };
  A.NonNullsIterator.prototype = {
    moveNext$0() {
      var t1, next;
      this.__internal$_current = null;
      for (t1 = this._source; t1.moveNext$0();) {
        next = t1.get$current();
        if (next != null) {
          this.__internal$_current = next;
          return true;
        }
      }
      return false;
    },
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? A.throwExpression(A.IterableElementError_noElement()) : t1;
    },
    $isIterator: 1
  };
  A.FixedLengthListMixin.prototype = {
    set$length(receiver, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1(receiver, value) {
      A.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    insert$2(receiver, index, value) {
      A.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    insertAll$2(receiver, at, iterable) {
      A.instanceType(receiver)._eval$1("Iterable<FixedLengthListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    addAll$1(receiver, iterable) {
      A.instanceType(receiver)._eval$1("Iterable<FixedLengthListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    remove$1(receiver, element) {
      throw A.wrapException(A.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    removeWhere$1(receiver, test) {
      A.instanceType(receiver)._eval$1("bool(FixedLengthListMixin.E)")._as(test);
      throw A.wrapException(A.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    retainWhere$1(receiver, test) {
      A.instanceType(receiver)._eval$1("bool(FixedLengthListMixin.E)")._as(test);
      throw A.wrapException(A.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    clear$0(receiver) {
      throw A.wrapException(A.UnsupportedError$("Cannot clear a fixed-length list"));
    },
    removeAt$1(receiver, index) {
      throw A.wrapException(A.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    removeLast$0(receiver) {
      throw A.wrapException(A.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    removeRange$2(receiver, start, end) {
      throw A.wrapException(A.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    replaceRange$3(receiver, start, end, iterable) {
      A.instanceType(receiver)._eval$1("Iterable<FixedLengthListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  };
  A.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length(_, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    set$first(_, element) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(element);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$last(_, element) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(element);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setAll$2(_, at, iterable) {
      A._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    add$1(_, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    insert$2(_, index, element) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(element);
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    insertAll$2(_, at, iterable) {
      A._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    addAll$1(_, iterable) {
      A._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    remove$1(_, element) {
      throw A.wrapException(A.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    removeWhere$1(_, test) {
      A._instanceType(this)._eval$1("bool(UnmodifiableListMixin.E)")._as(test);
      throw A.wrapException(A.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    retainWhere$1(_, test) {
      A._instanceType(this)._eval$1("bool(UnmodifiableListMixin.E)")._as(test);
      throw A.wrapException(A.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    sort$1(_, compare) {
      A._instanceType(this)._eval$1("int(UnmodifiableListMixin.E,UnmodifiableListMixin.E)?")._as(compare);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    sort$0(_) {
      return this.sort$1(0, null);
    },
    shuffle$1(_, random) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    clear$0(_) {
      throw A.wrapException(A.UnsupportedError$("Cannot clear an unmodifiable list"));
    },
    removeAt$1(_, index) {
      throw A.wrapException(A.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    removeLast$0(_) {
      throw A.wrapException(A.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    setRange$4(_, start, end, iterable, skipCount) {
      A._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$3(_, start, end, iterable) {
      return this.setRange$4(0, start, end, iterable, 0);
    },
    removeRange$2(_, start, end) {
      throw A.wrapException(A.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    replaceRange$3(_, start, end, iterable) {
      A._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    fillRange$3(_, start, end, fillValue) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E?")._as(fillValue);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    }
  };
  A.UnmodifiableListBase.prototype = {};
  A._ListIndicesIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._backedList);
    },
    elementAt$1(_, index) {
      A.IndexError_check(index, J.get$length$asx(this._backedList), this);
      return index;
    }
  };
  A.ListMapView.prototype = {
    $index(_, key) {
      return this.containsKey$1(key) ? J.$index$asx(this.__internal$_values, A._asInt(key)) : null;
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_values);
    },
    get$values() {
      return A.SubListIterable$(this.__internal$_values, 0, null, this.$ti._precomputed1);
    },
    get$keys() {
      return new A._ListIndicesIterable(this.__internal$_values);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_values);
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.__internal$_values);
    },
    containsValue$1(value) {
      return J.contains$1$asx(this.__internal$_values, value);
    },
    containsKey$1(key) {
      return A._isInt(key) && key >= 0 && key < J.get$length$asx(this.__internal$_values);
    },
    forEach$1(_, f) {
      var t1, t2, $length, i;
      this.$ti._eval$1("~(int,1)")._as(f);
      t1 = this.__internal$_values;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      for (i = 0; i < $length; ++i) {
        f.call$2(i, t2.$index(t1, i));
        if ($length !== t2.get$length(t1))
          throw A.wrapException(A.ConcurrentModificationError$(t1));
      }
    }
  };
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  A.Symbol.prototype = {
    get$hashCode(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 664597 * B.JSString_methods.get$hashCode(this.__internal$_name) & 536870911;
      this._hashCode = hash;
      return hash;
    },
    toString$0(_) {
      return 'Symbol("' + this.__internal$_name + '")';
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Symbol && this.__internal$_name === other.__internal$_name;
    }
  };
  A.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  A._Record_2_digits_ex78ception.prototype = {$recipe: "+digits,exception(1,2)", $shape: 1};
  A._Record_2_errors_success.prototype = {$recipe: "+errors,success(1,2)", $shape: 2};
  A._Record_2_label_tests.prototype = {$recipe: "+label,tests(1,2)", $shape: 3};
  A._Record_2_lazy_ref.prototype = {$recipe: "+lazy,ref(1,2)", $shape: 4};
  A.ConstantMapView.prototype = {};
  A.ConstantMap.prototype = {
    cast$2$0(_, $RK, $RV) {
      var t1 = A._instanceType(this);
      return A.Map_castFrom(this, t1._precomputed1, t1._rest[1], $RK, $RV);
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      A.ConstantMap__throwUnmodifiable();
    },
    putIfAbsent$2(key, ifAbsent) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      A.ConstantMap__throwUnmodifiable();
    },
    remove$1(_, key) {
      A.ConstantMap__throwUnmodifiable();
    },
    clear$0(_) {
      A.ConstantMap__throwUnmodifiable();
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<1,2>")._as(other);
      A.ConstantMap__throwUnmodifiable();
    },
    get$entries() {
      return new A._SyncStarIterable(this.entries$body$ConstantMap(), A._instanceType(this)._eval$1("_SyncStarIterable<MapEntry<1,2>>"));
    },
    entries$body$ConstantMap() {
      var $async$self = this;
      return function() {
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], t1, t2, t3, key, t4;
        return function $async$get$entries($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.get$keys(), t1 = t1.get$iterator(t1), t2 = A._instanceType($async$self), t3 = t2._rest[1], t2 = t2._eval$1("MapEntry<1,2>");
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                key = t1.get$current();
                t4 = $async$self.$index(0, key);
                $async$goto = 4;
                return $async$iterator._async$_current = new A.MapEntry(key, t4 == null ? t3._as(t4) : t4, t2), 1;
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    },
    addEntries$1(entries) {
      var t2, t3, entry, t4, t5,
        t1 = A._instanceType(this);
      for (t2 = t1._eval$1("Iterable<MapEntry<1,2>>")._as(entries).get$iterator(0), t3 = t1._precomputed1, t1 = t1._rest[1]; t2.moveNext$0();) {
        entry = t2.__js_helper$_current;
        t4 = entry.key;
        t5 = entry.value;
        t3._as(t4);
        t1._as(t5);
        A.ConstantMap__throwUnmodifiable();
      }
    },
    map$2$1(_, transform, $K2, $V2) {
      var result = A.LinkedHashMap_LinkedHashMap$_empty($K2, $V2);
      this.forEach$1(0, new A.ConstantMap_map_closure(this, A._instanceType(this)._bind$1($K2)._bind$1($V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), result));
      return result;
    },
    map$1(_, transform) {
      var t1 = type$.dynamic;
      return this.map$2$1(0, transform, t1, t1);
    },
    update$3$ifAbsent(key, update, ifAbsent) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._eval$1("2(2)")._as(update);
      t1._eval$1("2()?")._as(ifAbsent);
      A.ConstantMap__throwUnmodifiable();
    },
    updateAll$1(update) {
      A._instanceType(this)._eval$1("2(1,2)")._as(update);
      A.ConstantMap__throwUnmodifiable();
    },
    removeWhere$1(_, test) {
      A._instanceType(this)._eval$1("bool(1,2)")._as(test);
      A.ConstantMap__throwUnmodifiable();
    },
    $isMap: 1
  };
  A.ConstantMap_map_closure.prototype = {
    call$2(key, value) {
      var t1 = A._instanceType(this.$this),
        entry = this.transform.call$2(t1._precomputed1._as(key), t1._rest[1]._as(value));
      this.result.$indexSet(0, entry.key, entry.value);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this._values.length;
    },
    get$__js_helper$_keys() {
      var keys = this.$keys;
      if (keys == null) {
        keys = Object.keys(this._jsIndex);
        this.$keys = keys;
      }
      return keys;
    },
    containsValue$1(needle) {
      return B.JSArray_methods.contains$1(this._values, needle);
    },
    containsKey$1(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsIndex.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(key))
        return null;
      return this._values[this._jsIndex[key]];
    },
    forEach$1(_, f) {
      var keys, values, t1, i;
      this.$ti._eval$1("~(1,2)")._as(f);
      keys = this.get$__js_helper$_keys();
      values = this._values;
      for (t1 = keys.length, i = 0; i < t1; ++i)
        f.call$2(keys[i], values[i]);
    },
    get$keys() {
      return new A._KeysOrValues(this.get$__js_helper$_keys(), this.$ti._eval$1("_KeysOrValues<1>"));
    },
    get$values() {
      return new A._KeysOrValues(this._values, this.$ti._eval$1("_KeysOrValues<2>"));
    }
  };
  A._KeysOrValues.prototype = {
    get$length(_) {
      return this.__js_helper$_elements.length;
    },
    get$isEmpty(_) {
      return 0 === this.__js_helper$_elements.length;
    },
    get$isNotEmpty(_) {
      return 0 !== this.__js_helper$_elements.length;
    },
    get$iterator(_) {
      var t1 = this.__js_helper$_elements;
      return new A._KeysOrValuesOrElementsIterator(t1, t1.length, this.$ti._eval$1("_KeysOrValuesOrElementsIterator<1>"));
    }
  };
  A._KeysOrValuesOrElementsIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        t1 = _this.__js_helper$_index;
      if (t1 >= _this.__js_helper$_length) {
        _this.__js_helper$_current = null;
        return false;
      }
      _this.__js_helper$_current = _this.__js_helper$_elements[t1];
      _this.__js_helper$_index = t1 + 1;
      return true;
    },
    $isIterator: 1
  };
  A.GeneralConstantMap.prototype = {
    _getMap$0() {
      var _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        backingMap = new A.JsConstantLinkedHashMap(_this.$ti._eval$1("JsConstantLinkedHashMap<1,2>"));
        A.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    containsValue$1(needle) {
      return this._getMap$0().containsValue$1(needle);
    },
    containsKey$1(key) {
      return this._getMap$0().containsKey$1(key);
    },
    $index(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1(_, f) {
      this.$ti._eval$1("~(1,2)")._as(f);
      this._getMap$0().forEach$1(0, f);
    },
    get$keys() {
      var t1 = this._getMap$0();
      return new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>"));
    },
    get$values() {
      var t1 = this._getMap$0();
      return new A.LinkedHashMapValuesIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapValuesIterable<2>"));
    },
    get$length(_) {
      return this._getMap$0().__js_helper$_length;
    }
  };
  A.ConstantSet.prototype = {
    add$1(_, value) {
      A._instanceType(this)._precomputed1._as(value);
      A.ConstantSet__throwUnmodifiable();
    },
    addAll$1(_, elements) {
      A._instanceType(this)._eval$1("Iterable<1>")._as(elements);
      A.ConstantSet__throwUnmodifiable();
    }
  };
  A.GeneralConstantSet.prototype = {
    get$length(_) {
      return this.__js_helper$_elements.length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_elements.length === 0;
    },
    get$isNotEmpty(_) {
      return this.__js_helper$_elements.length !== 0;
    },
    get$iterator(_) {
      var t1 = this.__js_helper$_elements;
      return new A._KeysOrValuesOrElementsIterator(t1, t1.length, this.$ti._eval$1("_KeysOrValuesOrElementsIterator<1>"));
    },
    _getMap$0() {
      var t1, t2, _i, key, _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        backingMap = new A.JsConstantLinkedHashMap(_this.$ti._eval$1("JsConstantLinkedHashMap<1,1>"));
        for (t1 = _this.__js_helper$_elements, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          backingMap.$indexSet(0, key, key);
        }
        _this.$map = backingMap;
      }
      return backingMap;
    },
    contains$1(_, key) {
      return this._getMap$0().containsKey$1(key);
    },
    toSet$0(_) {
      return A.LinkedHashSet_LinkedHashSet$of(this, this.$ti._precomputed1);
    }
  };
  A.Instantiation.prototype = {
    Instantiation$1(_genericClosure) {
      if (false)
        A.instantiatedGenericFunctionType(0, 0);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Instantiation && this._genericClosure.$eq(0, other._genericClosure) && A.getRuntimeTypeOfClosure(this) === A.getRuntimeTypeOfClosure(other);
    },
    get$hashCode(_) {
      return A.Object_hash(this._genericClosure, A.getRuntimeTypeOfClosure(this), B.C_SentinelValue, B.C_SentinelValue);
    },
    toString$0(_) {
      var t1 = B.JSArray_methods.join$1(this.get$_types(), ", ");
      return this._genericClosure.toString$0(0) + " with " + ("<" + t1 + ">");
    }
  };
  A.Instantiation1.prototype = {
    get$_types() {
      return [A.createRuntimeType(this.$ti._precomputed1)];
    },
    call$2(a0, a1) {
      return this._genericClosure.call$1$2(a0, a1, this.$ti._rest[0]);
    },
    call$0() {
      return this._genericClosure.call$1$0(this.$ti._rest[0]);
    },
    call$1(a0) {
      return this._genericClosure.call$1$1(a0, this.$ti._rest[0]);
    },
    call$4(a0, a1, a2, a3) {
      return this._genericClosure.call$1$4(a0, a1, a2, a3, this.$ti._rest[0]);
    },
    $signature() {
      return A.instantiatedGenericFunctionType(A.closureFunctionType(this._genericClosure), this.$ti);
    }
  };
  A.Instantiation2.prototype = {
    get$_types() {
      var t1 = this.$ti;
      return [A.createRuntimeType(t1._precomputed1), A.createRuntimeType(t1._rest[1])];
    },
    call$1(a0) {
      return this._genericClosure.call$2$1(a0, this.$ti._rest[0], this.$ti._rest[1]);
    },
    call$4(a0, a1, a2, a3) {
      return this._genericClosure.call$2$4(a0, a1, a2, a3, this.$ti._rest[0], this.$ti._rest[1]);
    },
    call$5(a0, a1, a2, a3, a4) {
      return this._genericClosure.call$2$5(a0, a1, a2, a3, a4, this.$ti._rest[0], this.$ti._rest[1]);
    },
    $signature() {
      return A.instantiatedGenericFunctionType(A.closureFunctionType(this._genericClosure), this.$ti);
    }
  };
  A.Primitives_initTicker_closure.prototype = {
    call$0() {
      return B.JSNumber_methods.floor$0(1000 * this.performance.now());
    },
    $signature: 12
  };
  A.SafeToStringHook.prototype = {};
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      return "Null check operator used on a null value";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    },
    $isException: 1
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    get$runtimeType(_) {
      var rti = A.closureFunctionType(this);
      return A.createRuntimeType(rti == null ? A.instanceType(this) : rti);
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_length === 0;
    },
    get$isNotEmpty(_) {
      return this.__js_helper$_length !== 0;
    },
    get$keys() {
      return new A.LinkedHashMapKeysIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeysIterable<1>"));
    },
    get$values() {
      return new A.LinkedHashMapValuesIterable(this, A._instanceType(this)._eval$1("LinkedHashMapValuesIterable<2>"));
    },
    get$entries() {
      return new A.LinkedHashMapEntriesIterable(this, A._instanceType(this)._eval$1("LinkedHashMapEntriesIterable<1,2>"));
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string") {
        strings = this.__js_helper$_strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this.__js_helper$_nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    containsValue$1(value) {
      return new A.LinkedHashMapKeysIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeysIterable<1>")).any$1(0, new A.JsLinkedHashMap_containsValue_closure(this, value));
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<1,2>")._as(other).forEach$1(0, new A.JsLinkedHashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this.__js_helper$_strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this.__js_helper$_nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this.__js_helper$_strings;
        _this.__js_helper$_addHashTableEntry$3(strings == null ? _this.__js_helper$_strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this.__js_helper$_nums;
        _this.__js_helper$_addHashTableEntry$3(nums == null ? _this.__js_helper$_nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this.__js_helper$_newLinkedCell$2(key, value)];
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this.__js_helper$_newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2(key, ifAbsent) {
      var t2, value, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (_this.containsKey$1(key)) {
        t2 = _this.$index(0, key);
        return t2 == null ? t1._rest[1]._as(t2) : t2;
      }
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string")
        return _this.__js_helper$_removeHashTableEntry$2(_this.__js_helper$_strings, key);
      else if (typeof key == "number" && (key & 0x3fffffff) === key)
        return _this.__js_helper$_removeHashTableEntry$2(_this.__js_helper$_nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this.__js_helper$_unlinkCell$1(cell);
      if (bucket.length === 0)
        delete rest[hash];
      return cell.hashMapCellValue;
    },
    clear$0(_) {
      var _this = this;
      if (_this.__js_helper$_length > 0) {
        _this.__js_helper$_strings = _this.__js_helper$_nums = _this.__js_helper$_rest = _this.__js_helper$_first = _this.__js_helper$_last = null;
        _this.__js_helper$_length = 0;
        _this.__js_helper$_modified$0();
      }
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this.__js_helper$_first;
      modifications = _this.__js_helper$_modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this.__js_helper$_modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell.__js_helper$_next;
      }
    },
    __js_helper$_addHashTableEntry$3(table, key, value) {
      var cell,
        t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = table[key];
      if (cell == null)
        table[key] = this.__js_helper$_newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    __js_helper$_removeHashTableEntry$2(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = table[key];
      if (cell == null)
        return null;
      this.__js_helper$_unlinkCell$1(cell);
      delete table[key];
      return cell.hashMapCellValue;
    },
    __js_helper$_modified$0() {
      this.__js_helper$_modifications = this.__js_helper$_modifications + 1 & 1073741823;
    },
    __js_helper$_newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this.__js_helper$_first == null)
        _this.__js_helper$_first = _this.__js_helper$_last = cell;
      else {
        t1 = _this.__js_helper$_last;
        t1.toString;
        cell.__js_helper$_previous = t1;
        _this.__js_helper$_last = t1.__js_helper$_next = cell;
      }
      ++_this.__js_helper$_length;
      _this.__js_helper$_modified$0();
      return cell;
    },
    __js_helper$_unlinkCell$1(cell) {
      var _this = this,
        previous = cell.__js_helper$_previous,
        next = cell.__js_helper$_next;
      if (previous == null)
        _this.__js_helper$_first = next;
      else
        previous.__js_helper$_next = next;
      if (next == null)
        _this.__js_helper$_last = previous;
      else
        next.__js_helper$_previous = previous;
      --_this.__js_helper$_length;
      _this.__js_helper$_modified$0();
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    $isLinkedHashMap: 1
  };
  A.JsLinkedHashMap_containsValue_closure.prototype = {
    call$1(each) {
      var t1 = this.$this;
      return J.$eq$(t1.$index(0, A._instanceType(t1)._precomputed1._as(each)), this.value);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(1)");
    }
  };
  A.JsLinkedHashMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeysIterable.prototype = {
    get$length(_) {
      return this.__js_helper$_map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this.__js_helper$_map;
      return new A.LinkedHashMapKeyIterator(t1, t1.__js_helper$_modifications, t1.__js_helper$_first, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
    },
    contains$1(_, element) {
      return this.__js_helper$_map.containsKey$1(element);
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this.__js_helper$_map;
      if (_this.__js_helper$_modifications !== t1.__js_helper$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this.__js_helper$_cell;
      if (cell == null) {
        _this.__js_helper$_current = null;
        return false;
      } else {
        _this.__js_helper$_current = cell.hashMapCellKey;
        _this.__js_helper$_cell = cell.__js_helper$_next;
        return true;
      }
    },
    $isIterator: 1
  };
  A.LinkedHashMapValuesIterable.prototype = {
    get$length(_) {
      return this.__js_helper$_map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this.__js_helper$_map;
      return new A.LinkedHashMapValueIterator(t1, t1.__js_helper$_modifications, t1.__js_helper$_first, this.$ti._eval$1("LinkedHashMapValueIterator<1>"));
    }
  };
  A.LinkedHashMapValueIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this.__js_helper$_map;
      if (_this.__js_helper$_modifications !== t1.__js_helper$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this.__js_helper$_cell;
      if (cell == null) {
        _this.__js_helper$_current = null;
        return false;
      } else {
        _this.__js_helper$_current = cell.hashMapCellValue;
        _this.__js_helper$_cell = cell.__js_helper$_next;
        return true;
      }
    },
    $isIterator: 1
  };
  A.LinkedHashMapEntriesIterable.prototype = {
    get$length(_) {
      return this.__js_helper$_map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this.__js_helper$_map;
      return new A.LinkedHashMapEntryIterator(t1, t1.__js_helper$_modifications, t1.__js_helper$_first, this.$ti._eval$1("LinkedHashMapEntryIterator<1,2>"));
    }
  };
  A.LinkedHashMapEntryIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this.__js_helper$_map;
      if (_this.__js_helper$_modifications !== t1.__js_helper$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this.__js_helper$_cell;
      if (cell == null) {
        _this.__js_helper$_current = null;
        return false;
      } else {
        _this.__js_helper$_current = new A.MapEntry(cell.hashMapCellKey, cell.hashMapCellValue, _this.$ti._eval$1("MapEntry<1,2>"));
        _this.__js_helper$_cell = cell.__js_helper$_next;
        return true;
      }
    },
    $isIterator: 1
  };
  A.JsConstantLinkedHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return A.constantHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    }
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 83
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 242
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 227
  };
  A._Record.prototype = {
    get$runtimeType(_) {
      return A.createRuntimeType(this._getRti$0());
    },
    _getRti$0() {
      return A.evaluateRtiForRecord(this.$recipe, this._getFieldValues$0());
    },
    toString$0(_) {
      return this._toString$1(false);
    },
    _toString$1(safe) {
      var t2, separator, i, key, value,
        keys = this._fieldKeys$0(),
        values = this._getFieldValues$0(),
        t1 = (safe ? "Record " : "") + "(";
      for (t2 = keys.length, separator = "", i = 0; i < t2; ++i, separator = ", ") {
        t1 += separator;
        key = keys[i];
        if (typeof key == "string")
          t1 = t1 + key + ": ";
        if (!(i < values.length))
          return A.ioore(values, i);
        value = values[i];
        t1 = safe ? t1 + A.Primitives_safeToString(value) : t1 + A.S(value);
      }
      t1 += ")";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _fieldKeys$0() {
      var t1,
        shapeTag = this.$shape;
      for (; $._Record__computedFieldKeys.length <= shapeTag;)
        B.JSArray_methods.add$1($._Record__computedFieldKeys, null);
      t1 = $._Record__computedFieldKeys[shapeTag];
      if (t1 == null) {
        t1 = this._computeFieldKeys$0();
        B.JSArray_methods.$indexSet($._Record__computedFieldKeys, shapeTag, t1);
      }
      return t1;
    },
    _computeFieldKeys$0() {
      var i, names, last,
        recipe = this.$recipe,
        position = recipe.indexOf("("),
        joinedNames = recipe.substring(1, position),
        fields = recipe.substring(position),
        arity = fields === "()" ? 0 : fields.replace(/[^,]/g, "").length + 1,
        t1 = type$.Object,
        result = J.JSArray_JSArray$allocateGrowable(arity, t1);
      for (i = 0; i < arity; ++i)
        result[i] = i;
      if (joinedNames !== "") {
        names = joinedNames.split(",");
        i = names.length;
        for (last = arity; i > 0;) {
          --last;
          --i;
          B.JSArray_methods.$indexSet(result, last, names[i]);
        }
      }
      return A.List_List$unmodifiable(result, t1);
    }
  };
  A._Record2.prototype = {
    _getFieldValues$0() {
      return [this._0, this._1];
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._Record2 && this.$shape === other.$shape && J.$eq$(this._0, other._0) && J.$eq$(this._1, other._1);
    },
    get$hashCode(_) {
      return A.Object_hash(this.$shape, this._0, this._1, B.C_SentinelValue);
    }
  };
  A.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, "g");
    },
    get$_nativeAnchoredVersion() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeAnchoredRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, "y");
    },
    _computeHasCaptures$0() {
      var t2,
        t1 = this.pattern;
      if (!B.JSString_methods.contains$1(t1, "("))
        return false;
      t2 = this._nativeRegExp.unicode ? "u" : "";
      return new RegExp("(?:)|" + t1, t2).exec("").length > 1;
    },
    firstMatch$1(string) {
      var m = this._nativeRegExp.exec(string);
      if (m == null)
        return null;
      return new A._MatchImplementation(m);
    },
    allMatches$2(_, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._AllMatchesIterable(this, string, start);
    },
    allMatches$1(_, string) {
      return this.allMatches$2(0, string, 0);
    },
    _execGlobal$2(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      if (regexp == null)
        regexp = A._asObject(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new A._MatchImplementation(match);
    },
    _execAnchored$2(string, start) {
      var match,
        regexp = this.get$_nativeAnchoredVersion();
      if (regexp == null)
        regexp = A._asObject(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new A._MatchImplementation(match);
    },
    matchAsPrefix$2(_, string, start) {
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  A._MatchImplementation.prototype = {
    get$start() {
      return this._match.index;
    },
    get$end() {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    $index(_, index) {
      var t1;
      A._asInt(index);
      t1 = this._match;
      if (!(index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    namedGroup$1($name) {
      var result,
        groups = this._match.groups;
      if (groups != null) {
        result = groups[$name];
        if (result != null || $name in groups)
          return result;
      }
      throw A.wrapException(A.ArgumentError$value($name, "name", "Not a capture group name"));
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  A._AllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._AllMatchesIterator(this._re, this.__js_helper$_string, this.__js_helper$_start);
    }
  };
  A._AllMatchesIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? type$.RegExpMatch._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, t3, match, nextIndex, t4, _this = this,
        string = _this.__js_helper$_string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end();
          if (match._match.index === nextIndex) {
            t1 = false;
            if (t3._nativeRegExp.unicode) {
              t3 = _this._nextIndex;
              t4 = t3 + 1;
              if (t4 < t2) {
                if (!(t3 >= 0 && t3 < t2))
                  return A.ioore(string, t3);
                t3 = string.charCodeAt(t3);
                if (t3 >= 55296 && t3 <= 56319) {
                  if (!(t4 >= 0))
                    return A.ioore(string, t4);
                  t1 = string.charCodeAt(t4);
                  t1 = t1 >= 56320 && t1 <= 57343;
                }
              }
            }
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this.__js_helper$_string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1
  };
  A.StringMatch.prototype = {
    get$end() {
      return this.start + this.pattern.length;
    },
    $index(_, g) {
      A._asInt(g);
      if (g !== 0)
        A.throwExpression(A.RangeError$value(g, null));
      return this.pattern;
    },
    $isMatch: 1,
    get$start() {
      return this.start;
    }
  };
  A._StringAllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first(_) {
      var t1 = this._pattern,
        index = this._input.indexOf(t1, this.__js_helper$_index);
      if (index >= 0)
        return new A.StringMatch(index, t1);
      throw A.wrapException(A.IterableElementError_noElement());
    }
  };
  A._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new A.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    $isIterator: 1
  };
  A._Cell.prototype = {
    _readLocal$0() {
      var t1 = this._value;
      if (t1 === this)
        throw A.wrapException(new A.LateError("Local '" + this.__late_helper$_name + "' has not been initialized."));
      return t1;
    },
    _readField$0() {
      var t1 = this._value;
      if (t1 === this)
        throw A.wrapException(A.LateError$fieldNI(this.__late_helper$_name));
      return t1;
    },
    set$finalLocalValue(v) {
      var _this = this;
      if (_this._value !== _this)
        throw A.wrapException(new A.LateError("Local '" + _this.__late_helper$_name + "' has already been initialized."));
      _this._value = v;
    }
  };
  A.NativeByteBuffer.prototype = {
    get$lengthInBytes(receiver) {
      return receiver.byteLength;
    },
    get$runtimeType(receiver) {
      return B.Type_ByteBuffer_rqD;
    },
    asUint8List$2(receiver, offsetInBytes, $length) {
      A._checkViewArguments(receiver, offsetInBytes, $length);
      return $length == null ? new Uint8Array(receiver, offsetInBytes) : new Uint8Array(receiver, offsetInBytes, $length);
    },
    asUint8List$0(receiver) {
      return this.asUint8List$2(receiver, 0, null);
    },
    asUint32List$2(receiver, offsetInBytes, $length) {
      A._checkViewArguments(receiver, offsetInBytes, $length);
      $length = B.JSInt_methods._tdivFast$1(receiver.byteLength - offsetInBytes, 4);
      return new Uint32Array(receiver, offsetInBytes, $length);
    },
    asUint32List$0(receiver) {
      return this.asUint32List$2(receiver, 0, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeByteBuffer: 1,
    $isByteBuffer: 1
  };
  A.NativeArrayBuffer.prototype = {$isNativeArrayBuffer: 1};
  A.NativeTypedData.prototype = {
    get$buffer(receiver) {
      if (((receiver.$flags | 0) & 2) !== 0)
        return new A._UnmodifiableNativeByteBufferView(receiver.buffer);
      else
        return receiver.buffer;
    },
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = A.RangeError$range(position, 0, $length, $name, null);
      throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isNativeTypedData: 1,
    $isTypedData: 1
  };
  A._UnmodifiableNativeByteBufferView.prototype = {
    get$lengthInBytes(_) {
      return this._data.byteLength;
    },
    asUint8List$2(_, offsetInBytes, $length) {
      var result = A.NativeUint8List_NativeUint8List$view(this._data, offsetInBytes, $length);
      result.$flags = 3;
      return result;
    },
    asUint8List$0(_) {
      return this.asUint8List$2(0, 0, null);
    },
    asUint32List$0(_) {
      var result = A.NativeUint32List_NativeUint32List$view(this._data, 0, null);
      result.$flags = 3;
      return result;
    },
    $isByteBuffer: 1
  };
  A.NativeByteData.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteData_9dB;
    },
    $isTrustedGetRuntimeType: 1,
    $isByteData: 1
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    _setRangeFast$4(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw A.wrapException(A.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (skipCount < 0)
        throw A.wrapException(A.ArgumentError$(skipCount, null));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw A.wrapException(A.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._asDouble(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      type$.Iterable_double._as(iterable);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, 5);
      if (type$.NativeTypedArrayOfDouble._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListBase$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._asInt(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      type$.Iterable_int._as(iterable);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, 5);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListBase$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeFloat32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float32List_9Kz;
    },
    sublist$2(receiver, start, end) {
      return new Float32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isFloat32List: 1
  };
  A.NativeFloat64List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float64List_9Kz;
    },
    sublist$2(receiver, start, end) {
      return new Float64Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isFloat64List: 1
  };
  A.NativeInt16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int16List_s5h;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isInt16List: 1
  };
  A.NativeInt32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int32List_O8Z;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isInt32List: 1
  };
  A.NativeInt8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int8List_rFV;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isInt8List: 1
  };
  A.NativeUint16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint16List_kmP;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isUint16List: 1
  };
  A.NativeUint32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint32List_kmP;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeUint32List: 1,
    $isUint32List: 1
  };
  A.NativeUint8ClampedList.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8ClampedList_04U;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8ClampedArray(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isUint8ClampedList: 1
  };
  A.NativeUint8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8List_8Eb;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    },
    $isType: 1
  };
  A._Error.prototype = {
    toString$0(_) {
      return this._message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(__wc0_formal) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 33
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 253
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 1
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 1
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    },
    _TimerImpl$periodic$2(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setInterval(A.convertDartClosureToJS(new A._TimerImpl$periodic_closure(this, milliseconds, Date.now(), callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("Periodic timer."));
    },
    get$isActive() {
      return this._handle != null;
    },
    cancel$0() {
      if (self.setTimeout != null) {
        var t1 = this._handle;
        if (t1 == null)
          return;
        if (this._once)
          self.clearTimeout(t1);
        else
          self.clearInterval(t1);
        this._handle = null;
      } else
        throw A.wrapException(A.UnsupportedError$("Canceling a timer."));
    },
    $isTimer: 1
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._handle = null;
      t1._tick = 1;
      this.callback.call$0();
    },
    $signature: 2
  };
  A._TimerImpl$periodic_closure.prototype = {
    call$0() {
      var duration, _this = this,
        t1 = _this.$this,
        tick = t1._tick + 1,
        t2 = _this.milliseconds;
      if (t2 > 0) {
        duration = Date.now() - _this.start;
        if (duration > (tick + 1) * t2)
          tick = B.JSInt_methods.$tdiv(duration, t2);
      }
      t1._tick = tick;
      _this.callback.call$1(t1);
    },
    $signature: 1
  };
  A._AsyncAwaitCompleter.prototype = {
    complete$1(value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        value = t1._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(value);
      }
    },
    completeError$2(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeErrorObject$1(new A.AsyncError(e, st));
      else
        t1._asyncCompleteErrorObject$1(new A.AsyncError(e, st));
    },
    $isCompleter: 1
  };
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 16
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 205
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(A._asInt(errorCode), result);
    },
    $signature: 163
  };
  A._SyncStarIterator.prototype = {
    get$current() {
      var t1 = this._async$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    _resumeBody$2(errorCode, errorValue) {
      var body, t1, exception;
      errorCode = A._asInt(errorCode);
      errorValue = errorValue;
      body = this._async$_body;
      for (; true;)
        try {
          t1 = body(this, errorCode, errorValue);
          return t1;
        } catch (exception) {
          errorValue = exception;
          errorCode = 1;
        }
    },
    moveNext$0() {
      var nestedIterator, exception, value, suspendedBodies, _this = this, errorValue = null, errorCode = 0;
      for (; true;) {
        nestedIterator = _this._nestedIterator;
        if (nestedIterator != null)
          try {
            if (nestedIterator.moveNext$0()) {
              _this._async$_current = nestedIterator.get$current();
              return true;
            } else
              _this._nestedIterator = null;
          } catch (exception) {
            errorValue = exception;
            errorCode = 1;
            _this._nestedIterator = null;
          }
        value = _this._resumeBody$2(errorCode, errorValue);
        if (1 === value)
          return true;
        if (0 === value) {
          _this._async$_current = null;
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this._async$_body = A._SyncStarIterator__terminatedBody;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._async$_body = suspendedBodies.pop();
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (2 === value) {
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (3 === value) {
          errorValue = _this._datum;
          _this._datum = null;
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this._async$_current = null;
            _this._async$_body = A._SyncStarIterator__terminatedBody;
            throw errorValue;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._async$_body = suspendedBodies.pop();
          errorCode = 1;
          continue;
        }
        throw A.wrapException(A.StateError$("sync*"));
      }
      return false;
    },
    _yieldStar$1(iterable) {
      var t1, t2, _this = this;
      if (iterable instanceof A._SyncStarIterable) {
        t1 = iterable._outerHelper();
        t2 = _this._suspendedBodies;
        if (t2 == null)
          t2 = _this._suspendedBodies = [];
        B.JSArray_methods.add$1(t2, _this._async$_body);
        _this._async$_body = t1;
        return 2;
      } else {
        _this._nestedIterator = J.get$iterator$ax(iterable);
        return 2;
      }
    },
    $isIterator: 1
  };
  A._SyncStarIterable.prototype = {
    get$iterator(_) {
      return new A._SyncStarIterator(this._outerHelper(), this.$ti._eval$1("_SyncStarIterator<1>"));
    }
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A._BroadcastStream.prototype = {
    get$isBroadcast() {
      return true;
    }
  };
  A._BroadcastSubscription.prototype = {
    _onPause$0() {
    },
    _onResume$0() {
    },
    set$_async$_next(_next) {
      this._async$_next = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_next);
    },
    set$_async$_previous(_previous) {
      this._async$_previous = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_previous);
    }
  };
  A._BroadcastStreamController.prototype = {
    get$stream() {
      return new A._BroadcastStream(this, A._instanceType(this)._eval$1("_BroadcastStream<1>"));
    },
    get$isClosed() {
      return (this._state & 4) !== 0;
    },
    get$_mayAddEvent() {
      return this._state < 4;
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      return t1 == null ? this._doneFuture = new A._Future($.Zone__current, type$._Future_void) : t1;
    },
    _removeListener$1(subscription) {
      var previous, next;
      A._instanceType(this)._eval$1("_BroadcastSubscription<1>")._as(subscription);
      previous = subscription._async$_previous;
      next = subscription._async$_next;
      if (previous == null)
        this._firstSubscription = next;
      else
        previous.set$_async$_next(next);
      if (next == null)
        this._lastSubscription = previous;
      else
        next.set$_async$_previous(previous);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var t2, t3, t4, t5, subscription, oldLast, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 4) !== 0) {
        t2 = $.Zone__current;
        t1 = new A._DoneStreamSubscription(t2, t1._eval$1("_DoneStreamSubscription<1>"));
        A.scheduleMicrotask(t1.get$_onMicrotask());
        if (onDone != null)
          t1._onDone = t2.registerCallback$1$1(onDone, type$.void);
        return t1;
      }
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t4 = onError != null ? 32 : 0;
      t5 = t1._eval$1("_BroadcastSubscription<1>");
      subscription = new A._BroadcastSubscription(_this, A._BufferingStreamSubscription__registerDataHandler(t2, onData, t1._precomputed1), A._BufferingStreamSubscription__registerErrorHandler(t2, onError), A._BufferingStreamSubscription__registerDoneHandler(t2, onDone), t2, t3 | t4, t5);
      subscription._async$_previous = subscription;
      subscription._async$_next = subscription;
      t5._as(subscription);
      subscription._eventState = _this._state & 1;
      oldLast = _this._lastSubscription;
      _this._lastSubscription = subscription;
      subscription.set$_async$_next(null);
      subscription.set$_async$_previous(oldLast);
      if (oldLast == null)
        _this._firstSubscription = subscription;
      else
        oldLast.set$_async$_next(subscription);
      if (_this._firstSubscription == _this._lastSubscription)
        A._runGuarded(_this.onListen);
      return subscription;
    },
    _recordCancel$1(sub) {
      var _this = this,
        t1 = A._instanceType(_this);
      sub = t1._eval$1("_BroadcastSubscription<1>")._as(t1._eval$1("StreamSubscription<1>")._as(sub));
      if (sub._async$_next === sub)
        return null;
      t1 = sub._eventState;
      if ((t1 & 2) !== 0)
        sub._eventState = t1 | 4;
      else {
        _this._removeListener$1(sub);
        if ((_this._state & 2) === 0 && _this._firstSubscription == null)
          _this._callOnCancel$0();
      }
      return null;
    },
    _recordPause$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _recordResume$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _addEventError$0() {
      if ((this._state & 4) !== 0)
        return new A.StateError("Cannot add new events after calling close");
      return new A.StateError("Cannot add new events while doing an addStream");
    },
    add$1(_, data) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(data);
      if (!_this.get$_mayAddEvent())
        throw A.wrapException(_this._addEventError$0());
      _this._sendData$1(data);
    },
    addError$2(error, stackTrace) {
      var _0_0;
      A._asObject(error);
      type$.nullable_StackTrace._as(stackTrace);
      if (!this.get$_mayAddEvent())
        throw A.wrapException(this._addEventError$0());
      _0_0 = A._interceptUserError(error, stackTrace);
      this._sendError$2(_0_0.error, _0_0.stackTrace);
    },
    addError$1(error) {
      return this.addError$2(error, null);
    },
    close$0() {
      var t1, doneFuture, _this = this;
      if ((_this._state & 4) !== 0) {
        t1 = _this._doneFuture;
        t1.toString;
        return t1;
      }
      if (!_this.get$_mayAddEvent())
        throw A.wrapException(_this._addEventError$0());
      _this._state |= 4;
      doneFuture = _this._ensureDoneFuture$0();
      _this._sendDone$0();
      return doneFuture;
    },
    _forEachListener$1(action) {
      var t1, subscription, id, next, _this = this;
      A._instanceType(_this)._eval$1("~(_BufferingStreamSubscription<1>)")._as(action);
      t1 = _this._state;
      if ((t1 & 2) !== 0)
        throw A.wrapException(A.StateError$(string$.Cannotf));
      subscription = _this._firstSubscription;
      if (subscription == null)
        return;
      id = t1 & 1;
      _this._state = t1 ^ 3;
      for (; subscription != null;) {
        t1 = subscription._eventState;
        if ((t1 & 1) === id) {
          subscription._eventState = t1 | 2;
          action.call$1(subscription);
          t1 = subscription._eventState ^= 1;
          next = subscription._async$_next;
          if ((t1 & 4) !== 0)
            _this._removeListener$1(subscription);
          subscription._eventState &= 4294967293;
          subscription = next;
        } else
          subscription = subscription._async$_next;
      }
      _this._state &= 4294967293;
      if (_this._firstSubscription == null)
        _this._callOnCancel$0();
    },
    _callOnCancel$0() {
      if ((this._state & 4) !== 0) {
        var doneFuture = this._doneFuture;
        if ((doneFuture._state & 30) === 0)
          doneFuture._asyncComplete$1(null);
      }
      A._runGuarded(this.onCancel);
    },
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  A._SyncBroadcastStreamController.prototype = {
    get$_mayAddEvent() {
      return A._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0;
    },
    _addEventError$0() {
      if ((this._state & 2) !== 0)
        return new A.StateError(string$.Cannotf);
      return this.super$_BroadcastStreamController$_addEventError();
    },
    _sendData$1(data) {
      var t1, _this = this;
      _this.$ti._precomputed1._as(data);
      t1 = _this._firstSubscription;
      if (t1 == null)
        return;
      if (t1 === _this._lastSubscription) {
        _this._state |= 2;
        t1._add$1(data);
        _this._state &= 4294967293;
        if (_this._firstSubscription == null)
          _this._callOnCancel$0();
        return;
      }
      _this._forEachListener$1(new A._SyncBroadcastStreamController__sendData_closure(_this, data));
    },
    _sendError$2(error, stackTrace) {
      if (this._firstSubscription == null)
        return;
      this._forEachListener$1(new A._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
    },
    _sendDone$0() {
      var _this = this;
      if (_this._firstSubscription != null)
        _this._forEachListener$1(new A._SyncBroadcastStreamController__sendDone_closure(_this));
      else
        _this._doneFuture._asyncComplete$1(null);
    }
  };
  A._SyncBroadcastStreamController__sendData_closure.prototype = {
    call$1(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._add$1(this.data);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  A._SyncBroadcastStreamController__sendError_closure.prototype = {
    call$1(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._addError$2(this.error, this.stackTrace);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  A._SyncBroadcastStreamController__sendDone_closure.prototype = {
    call$1(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._close$0();
    },
    $signature() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  A._AsyncBroadcastStreamController.prototype = {
    _sendData$1(data) {
      var subscription,
        t1 = this.$ti;
      t1._precomputed1._as(data);
      for (subscription = this._firstSubscription, t1 = t1._eval$1("_DelayedData<1>"); subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(new A._DelayedData(data, t1));
    },
    _sendError$2(error, stackTrace) {
      var subscription;
      for (subscription = this._firstSubscription; subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _sendDone$0() {
      var subscription = this._firstSubscription;
      if (subscription != null)
        for (; subscription != null; subscription = subscription._async$_next)
          subscription._addPending$1(B.C__DelayedDone);
      else
        this._doneFuture._asyncComplete$1(null);
    }
  };
  A.Future_Future_closure.prototype = {
    call$0() {
      var e, s, exception, t1, t2, t3, computationResult = null;
      try {
        computationResult = this.computation.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = e;
        t2 = s;
        t3 = A._interceptError(t1, t2);
        if (t3 == null)
          t1 = new A.AsyncError(t1, t2);
        else
          t1 = t3;
        this.result._completeErrorObject$1(t1);
        return;
      }
      this.result._complete$1(computationResult);
    },
    $signature: 2
  };
  A.Future_Future$microtask_closure.prototype = {
    call$0() {
      var e, s, exception, t1, t2, t3, computationResult = null;
      try {
        computationResult = this.computation.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = e;
        t2 = s;
        t3 = A._interceptError(t1, t2);
        if (t3 == null)
          t1 = new A.AsyncError(t1, t2);
        else
          t1 = t3;
        this.result._completeErrorObject$1(t1);
        return;
      }
      this.result._complete$1(computationResult);
    },
    $signature: 2
  };
  A.Future_Future$delayed_closure.prototype = {
    call$0() {
      var computationResult, e, s, exception, t2, t3, _this = this,
        t1 = _this.computation;
      if (t1 == null) {
        _this.T._as(null);
        _this.result._complete$1(null);
      } else {
        computationResult = null;
        try {
          computationResult = t1.call$0();
        } catch (exception) {
          e = A.unwrapException(exception);
          s = A.getTraceFromException(exception);
          t1 = e;
          t2 = s;
          t3 = A._interceptError(t1, t2);
          if (t3 == null)
            t1 = new A.AsyncError(t1, t2);
          else
            t1 = t3;
          _this.result._completeErrorObject$1(t1);
          return;
        }
        _this.result._complete$1(computationResult);
      }
    },
    $signature: 2
  };
  A.Future_wait_handleError.prototype = {
    call$2(theError, theStackTrace) {
      var t1, t2, _this = this;
      A._asObject(theError);
      type$.StackTrace._as(theStackTrace);
      t1 = _this._box_0;
      t2 = --t1.remaining;
      if (t1.values != null) {
        t1.values = null;
        t1.error = theError;
        t1.stackTrace = theStackTrace;
        if (t2 === 0 || _this.eagerError)
          _this._future._completeErrorObject$1(new A.AsyncError(theError, theStackTrace));
      } else if (t2 === 0 && !_this.eagerError) {
        t2 = t1.error;
        t2.toString;
        t1 = t1.stackTrace;
        t1.toString;
        _this._future._completeErrorObject$1(new A.AsyncError(t2, t1));
      }
    },
    $signature: 64
  };
  A.Future_wait_closure.prototype = {
    call$1(value) {
      var remainingResults, valueList, t1, value0, t3, t4, _i, t5, _this = this,
        t2 = _this.T;
      t2._as(value);
      t3 = _this._box_0;
      remainingResults = --t3.remaining;
      valueList = t3.values;
      if (valueList != null) {
        J.$indexSet$ax(valueList, _this.pos, value);
        if (J.$eq$(remainingResults, 0)) {
          t1 = A._setArrayType([], t2._eval$1("JSArray<0>"));
          for (t3 = valueList, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i) {
            value0 = t3[_i];
            t5 = value0;
            if (t5 == null)
              t5 = t2._as(t5);
            J.add$1$ax(t1, t5);
          }
          _this._future._completeWithValue$1(t1);
        }
      } else if (J.$eq$(remainingResults, 0) && !_this.eagerError) {
        t1 = t3.error;
        t1.toString;
        t3 = t3.stackTrace;
        t3.toString;
        _this._future._completeErrorObject$1(new A.AsyncError(t1, t3));
      }
    },
    $signature() {
      return this.T._eval$1("Null(0)");
    }
  };
  A.Future_any_onValue.prototype = {
    call$1(value) {
      var t1;
      this.T._as(value);
      t1 = this.completer;
      if ((t1.future._state & 30) === 0)
        t1.complete$1(value);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A.Future_any_onError.prototype = {
    call$2(error, stack) {
      var t1;
      A._asObject(error);
      type$.StackTrace._as(stack);
      t1 = this.completer;
      if ((t1.future._state & 30) === 0)
        t1.completeError$2(error, stack);
    },
    $signature: 64
  };
  A.Future_forEach_closure.prototype = {
    call$0() {
      var t2, result,
        t1 = this.iterator;
      if (!t1.moveNext$0())
        return false;
      t2 = t1._current;
      t1 = t2 == null ? t1.$ti._precomputed1._as(t2) : t2;
      result = this.action.call$1(t1);
      if (result instanceof A._Future)
        return result.then$1$1(A.async_Future__kTrue$closure(), type$.bool);
      return true;
    },
    $signature: 161
  };
  A.Future_doWhile_closure.prototype = {
    call$1(keepGoing) {
      var result, error, stackTrace, t1, t2, exception, t3, _this = this;
      A._asBool(keepGoing);
      for (t1 = type$.Future_bool, t2 = _this.action; keepGoing;) {
        result = null;
        try {
          result = t2.call$0();
        } catch (exception) {
          error = A.unwrapException(exception);
          stackTrace = A.getTraceFromException(exception);
          t1 = error;
          t2 = stackTrace;
          t3 = A._interceptError(t1, t2);
          if (t3 == null)
            t1 = new A.AsyncError(t1, t2 == null ? A.AsyncError_defaultStackTrace(t1) : t2);
          else
            t1 = t3;
          _this.doneSignal._asyncCompleteErrorObject$1(t1);
          return;
        }
        if (t1._is(result)) {
          t1 = result;
          t2 = _this.nextIteration;
          t3 = t2._value;
          if (t3 === t2)
            A.throwExpression(A.LateError$localNI(t2.__late_helper$_name));
          t1.then$1$2$onError(t3, _this.doneSignal.get$_completeError(), type$.void);
          return;
        }
        keepGoing = result;
      }
      _this.doneSignal._complete$1(null);
    },
    $signature: 105
  };
  A.FutureExtensions_onError_onError.prototype = {
    call$2(error, stackTrace) {
      A._asObject(error);
      type$.StackTrace._as(stackTrace);
      if (!this.E._is(error))
        throw A.wrapException(error);
      return this.handleError.call$2(error, stackTrace);
    },
    $signature() {
      return this.T._eval$1("0/(Object,StackTrace)");
    }
  };
  A.TimeoutException.prototype = {
    toString$0(_) {
      var t1 = this.duration,
        result = t1 != null ? "TimeoutException after " + t1.toString$0(0) : "TimeoutException";
      return result + ": " + this.message;
    },
    $isException: 1,
    get$message() {
      return this.message;
    },
    get$duration() {
      return this.duration;
    }
  };
  A._Completer.prototype = {
    completeError$2(error, stackTrace) {
      A._asObject(error);
      type$.nullable_StackTrace._as(stackTrace);
      if ((this.future._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      this._completeErrorObject$1(A._interceptUserError(error, stackTrace));
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  A._AsyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    },
    complete$0() {
      return this.complete$1(null);
    },
    _completeErrorObject$1(error) {
      this.future._asyncCompleteErrorObject$1(error);
    }
  };
  A._SyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._complete$1(t1._eval$1("1/")._as(value));
    },
    _completeErrorObject$1(error) {
      this.future._completeErrorObject$1(error);
    }
  };
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var exception, _this = this,
        errorCallback = _this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = _this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2);
      try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((_this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    then$1$2$onError(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        f = currentZone.registerUnaryCallback$2$1(f, $R._eval$1("0/"), t1._precomputed1);
        if (onError != null)
          onError = A._registerErrorHandler(onError, currentZone);
      }
      result = new A._Future($.Zone__current, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new A._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _ignore$0() {
      var t1, source, t2;
      if (((this._state |= 1) & 4) !== 0) {
        t1 = type$._Future_dynamic;
        source = this;
        do
          source = t1._as(source._resultOrListeners);
        while (t2 = source._state, (t2 & 4) !== 0);
        source._state = t2 | 1;
      }
    },
    catchError$1(onError) {
      var t1 = this.$ti,
        t2 = $.Zone__current,
        result = new A._Future(t2, t1);
      if (t2 !== B.C__RootZone)
        onError = A._registerErrorHandler(onError, t2);
      this._addListener$1(new A._FutureListener(result, 2, null, onError, t1._eval$1("_FutureListener<1,1>")));
      return result;
    },
    whenComplete$1(action) {
      var t1, t2, result;
      type$.dynamic_Function._as(action);
      t1 = this.$ti;
      t2 = $.Zone__current;
      result = new A._Future(t2, t1);
      if (t2 !== B.C__RootZone)
        action = t2.registerCallback$1$1(action, type$.dynamic);
      this._addListener$1(new A._FutureListener(result, 8, action, null, t1._eval$1("_FutureListener<1,1>")));
      return result;
    },
    _setErrorObject$1(error) {
      this._state = this._state & 1 | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._state = source._state & 30 | this._state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        _this._zone.scheduleMicrotask$1(new A._Future__addListener_closure(_this, listener));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        _this._zone.scheduleMicrotask$1(new A._Future__prependListeners_closure(_box_0, _this));
      }
    },
    _removeListeners$0() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        A._Future__chainCoreFuture(value, _this, true);
      else {
        listeners = _this._removeListeners$0();
        t1._precomputed1._as(value);
        _this._state = 8;
        _this._resultOrListeners = value;
        A._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeWithResultOf$1(source) {
      var t1, t2, listeners, _this = this;
      if ((source._state & 16) !== 0) {
        t1 = _this._zone;
        t2 = source._zone;
        t1 = !(t1 === t2 || t1.get$errorZone() === t2.get$errorZone());
      } else
        t1 = false;
      if (t1)
        return;
      listeners = _this._removeListeners$0();
      _this._cloneResult$1(source);
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeErrorObject$1(error) {
      var listeners = this._removeListeners$0();
      this._setErrorObject$1(error);
      A._Future__propagateToListeners(this, listeners);
    },
    _completeError$2(error, stackTrace) {
      A._asObject(error);
      type$.StackTrace._as(stackTrace);
      this._completeErrorObject$1(new A.AsyncError(error, stackTrace));
    },
    _asyncComplete$1(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(value);
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state ^= 2;
      _this._zone.scheduleMicrotask$1(new A._Future__asyncCompleteWithValue_closure(_this, value));
    },
    _chainFuture$1(value) {
      A._Future__chainCoreFuture(this.$ti._eval$1("Future<1>")._as(value), this, false);
      return;
    },
    _asyncCompleteErrorObject$1(error) {
      this._state ^= 2;
      this._zone.scheduleMicrotask$1(new A._Future__asyncCompleteErrorObject_closure(this, error));
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 2
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 2
  };
  A._Future__chainCoreFuture_closure.prototype = {
    call$0() {
      A._Future__chainCoreFuture(this._box_0.source, this.target, true);
    },
    $signature: 2
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 2
  };
  A._Future__asyncCompleteErrorObject_closure.prototype = {
    call$0() {
      this.$this._completeErrorObject$1(this.error);
    },
    $signature: 2
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, t3, originalSource, joinedResult, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (_this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        } else {
          t1 = e;
          t2 = s;
          if (t2 == null)
            t2 = A.AsyncError_defaultStackTrace(t1);
          t3 = _this._box_0;
          t3.listenerValueOrError = new A.AsyncError(t1, t2);
          t1 = t3;
        }
        t1.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (completeResult instanceof A._Future) {
        originalSource = _this._box_1.source;
        joinedResult = new A._Future(originalSource._zone, originalSource.$ti);
        completeResult.then$1$2$onError(new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(joinedResult, originalSource), new A._Future__propagateToListeners_handleWhenCompleteCallback_closure0(joinedResult), type$.void);
        t1 = _this._box_0;
        t1.listenerValueOrError = joinedResult;
        t1.listenerHasError = false;
      }
    },
    $signature: 2
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(__wc0_formal) {
      this.joinedResult._completeWithResultOf$1(this.originalSource);
    },
    $signature: 33
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure0.prototype = {
    call$2(e, s) {
      A._asObject(e);
      type$.StackTrace._as(s);
      this.joinedResult._completeErrorObject$1(new A.AsyncError(e, s));
    },
    $signature: 71
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = e;
        t2 = s;
        if (t2 == null)
          t2 = A.AsyncError_defaultStackTrace(t1);
        t3 = this._box_0;
        t3.listenerValueOrError = new A.AsyncError(t1, t2);
        t3.listenerHasError = true;
      }
    },
    $signature: 2
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, t3, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        if (t1.error === e) {
          t2 = _this._box_0;
          t2.listenerValueOrError = t1;
          t1 = t2;
        } else {
          t1 = e;
          t2 = s;
          if (t2 == null)
            t2 = A.AsyncError_defaultStackTrace(t1);
          t3 = _this._box_0;
          t3.listenerValueOrError = new A.AsyncError(t1, t2);
          t1 = t3;
        }
        t1.listenerHasError = true;
      }
    },
    $signature: 2
  };
  A._AsyncCallbackEntry.prototype = {};
  A.Stream.prototype = {
    get$isBroadcast() {
      return false;
    },
    map$1$1(_, convert, $S) {
      var t1 = A._instanceType(this);
      return new A._MapStream(t1._bind$1($S)._eval$1("1(Stream.T)")._as(convert), this, t1._eval$1("@<Stream.T>")._bind$1($S)._eval$1("_MapStream<1,2>"));
    },
    map$1(_, convert) {
      return this.map$1$1(0, convert, type$.dynamic);
    },
    get$length(_) {
      var t1 = {},
        future = new A._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new A.Stream_length_closure(t1, this), true, new A.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$isEmpty(_) {
      var future = new A._Future($.Zone__current, type$._Future_bool),
        subscription = this.listen$4$cancelOnError$onDone$onError(null, true, new A.Stream_isEmpty_closure(future), future.get$_completeError());
      subscription.onData$1(new A.Stream_isEmpty_closure0(this, subscription, future));
      return future;
    },
    toList$0(_) {
      var t1 = A._instanceType(this),
        result = A._setArrayType([], t1._eval$1("JSArray<Stream.T>")),
        future = new A._Future($.Zone__current, t1._eval$1("_Future<List<Stream.T>>"));
      this.listen$4$cancelOnError$onDone$onError(new A.Stream_toList_closure(this, result), true, new A.Stream_toList_closure0(future, result), future.get$_completeError());
      return future;
    },
    get$first(_) {
      var future = new A._Future($.Zone__current, A._instanceType(this)._eval$1("_Future<Stream.T>")),
        subscription = this.listen$4$cancelOnError$onDone$onError(null, true, new A.Stream_first_closure(future), future.get$_completeError());
      subscription.onData$1(new A.Stream_first_closure0(this, subscription, future));
      return future;
    }
  };
  A.Stream_Stream$fromFuture_closure.prototype = {
    call$1(value) {
      var t1 = this.controller;
      t1._add$1(this.T._as(value));
      t1._closeUnchecked$0();
    },
    $signature() {
      return this.T._eval$1("Null(0)");
    }
  };
  A.Stream_Stream$fromFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      var t1 = this.controller,
        t2 = error == null ? A._asObject(error) : error;
      t1._addError$2(t2, type$.StackTrace._as(stackTrace));
      t1._closeUnchecked$0();
    },
    $signature: 97
  };
  A.Stream_Stream$fromIterable_closure.prototype = {
    call$1(controller) {
      var e, s, error, t2, exception, error0, zone, t1 = {};
      this.T._eval$1("MultiStreamController<0>")._as(controller);
      t1.iterator = null;
      try {
        t2 = this.elements;
        t1.iterator = t2.get$iterator(t2);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = e;
        t2 = s;
        error0 = A._interceptError(t1, t2);
        if (error0 == null)
          error0 = new A.AsyncError(t1, t2 == null ? A.AsyncError_defaultStackTrace(t1) : t2);
        error = error0;
        controller.addError$2(error.error, error.stackTrace);
        controller.close$0();
        return;
      }
      zone = $.Zone__current;
      t1.isScheduled = true;
      t2 = new A.Stream_Stream$fromIterable_closure_next(t1, controller, zone);
      controller.set$onResume(new A.Stream_Stream$fromIterable__closure(t1, zone, t2));
      zone.scheduleMicrotask$1(t2);
    },
    $signature() {
      return this.T._eval$1("~(MultiStreamController<0>)");
    }
  };
  A.Stream_Stream$fromIterable_closure_next.prototype = {
    call$0() {
      var hasNext, e, s, error, e0, s0, error0, t2, exception, t3, _this = this,
        t1 = _this.controller;
      if ((t1._state & 1) !== 0)
        t2 = (t1.get$_subscription()._state & 4) !== 0;
      else
        t2 = true;
      if (t2) {
        _this._box_0.isScheduled = false;
        return;
      }
      hasNext = null;
      try {
        hasNext = _this._box_0.iterator.moveNext$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t2 = e;
        t3 = s;
        error0 = A._interceptError(t2, t3);
        if (error0 == null)
          error0 = new A.AsyncError(t2, t3 == null ? A.AsyncError_defaultStackTrace(t2) : t3);
        error = error0;
        t1.addErrorSync$2(error.error, error.stackTrace);
        t1.closeSync$0();
        return;
      }
      if (hasNext) {
        try {
          t2 = t1.$ti._precomputed1._as(_this._box_0.iterator.get$current());
          t3 = t1._state;
          if (t3 >= 4)
            A.throwExpression(t1._badEventState$0());
          if ((t3 & 1) !== 0)
            t1.get$_subscription()._add$1(t2);
        } catch (exception) {
          e0 = A.unwrapException(exception);
          s0 = A.getTraceFromException(exception);
          t2 = e0;
          t3 = s0;
          error = A._interceptError(t2, t3);
          if (error == null)
            error = new A.AsyncError(t2, t3 == null ? A.AsyncError_defaultStackTrace(t2) : t3);
          error0 = error;
          t1.addErrorSync$2(error0.error, error0.stackTrace);
        }
        if ((t1._state & 1) !== 0) {
          t1 = t1.get$_subscription()._state;
          t1 = (t1 & 4) === 0;
        } else
          t1 = false;
        if (t1)
          _this.zone.scheduleMicrotask$1(_this);
        else
          _this._box_0.isScheduled = false;
      } else
        t1.closeSync$0();
    },
    $signature: 2
  };
  A.Stream_Stream$fromIterable__closure.prototype = {
    call$0() {
      var t1 = this._box_0;
      if (!t1.isScheduled) {
        t1.isScheduled = true;
        this.zone.scheduleMicrotask$1(this.next);
      }
    },
    $signature: 2
  };
  A.Stream_length_closure.prototype = {
    call$1(__wc0_formal) {
      A._instanceType(this.$this)._eval$1("Stream.T")._as(__wc0_formal);
      ++this._box_0.count;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.Stream_length_closure0.prototype = {
    call$0() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 2
  };
  A.Stream_isEmpty_closure.prototype = {
    call$0() {
      this.future._complete$1(true);
    },
    $signature: 2
  };
  A.Stream_isEmpty_closure0.prototype = {
    call$1(__wc0_formal) {
      A._instanceType(this.$this)._eval$1("Stream.T")._as(__wc0_formal);
      A._cancelAndValue(this.subscription, this.future, false);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.Stream_toList_closure.prototype = {
    call$1(data) {
      B.JSArray_methods.add$1(this.result, A._instanceType(this.$this)._eval$1("Stream.T")._as(data));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.Stream_toList_closure0.prototype = {
    call$0() {
      this.future._complete$1(this.result);
    },
    $signature: 2
  };
  A.Stream_first_closure.prototype = {
    call$0() {
      var t1,
        error = new A.StateError("No element");
      A.Primitives_trySetStackTrace(error, B._StringStackTrace_OdL);
      t1 = A._interceptError(error, B._StringStackTrace_OdL);
      if (t1 == null)
        t1 = new A.AsyncError(error, B._StringStackTrace_OdL);
      this.future._completeErrorObject$1(t1);
    },
    $signature: 2
  };
  A.Stream_first_closure0.prototype = {
    call$1(value) {
      A._cancelAndValue(this.subscription, this.future, A._instanceType(this.$this)._eval$1("Stream.T")._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A._StreamController.prototype = {
    get$stream() {
      return new A._ControllerStream(this, A._instanceType(this)._eval$1("_ControllerStream<1>"));
    },
    get$isClosed() {
      return (this._state & 4) !== 0;
    },
    get$_pendingEvents() {
      var t1, _this = this;
      if ((_this._state & 8) === 0)
        return A._instanceType(_this)._eval$1("_PendingEvents<1>?")._as(_this._varData);
      t1 = A._instanceType(_this);
      return t1._eval$1("_PendingEvents<1>?")._as(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).get$_varData());
    },
    _ensurePendingEvents$0() {
      var events, t1, _this = this;
      if ((_this._state & 8) === 0) {
        events = _this._varData;
        if (events == null)
          events = _this._varData = new A._PendingEvents(A._instanceType(_this)._eval$1("_PendingEvents<1>"));
        return A._instanceType(_this)._eval$1("_PendingEvents<1>")._as(events);
      }
      t1 = A._instanceType(_this);
      events = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).get$_varData();
      return t1._eval$1("_PendingEvents<1>")._as(events);
    },
    get$_subscription() {
      var varData = this._varData;
      if ((this._state & 8) !== 0)
        varData = type$._StreamControllerAddStreamState_nullable_Object._as(varData).get$_varData();
      return A._instanceType(this)._eval$1("_ControllerSubscription<1>")._as(varData);
    },
    _badEventState$0() {
      if ((this._state & 4) !== 0)
        return new A.StateError("Cannot add event after closing");
      return new A.StateError("Cannot add event while adding a stream");
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : new A._Future($.Zone__current, type$._Future_void);
      return t1;
    },
    add$1(_, value) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(value);
      if (_this._state >= 4)
        throw A.wrapException(_this._badEventState$0());
      _this._add$1(value);
    },
    addError$2(error, stackTrace) {
      var _0_0;
      if (this._state >= 4)
        throw A.wrapException(this._badEventState$0());
      _0_0 = A._interceptUserError(error, stackTrace);
      this._addError$2(_0_0.error, _0_0.stackTrace);
    },
    addError$1(error) {
      return this.addError$2(error, null);
    },
    close$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return _this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw A.wrapException(_this._badEventState$0());
      _this._closeUnchecked$0();
      return _this._ensureDoneFuture$0();
    },
    _closeUnchecked$0() {
      var t1 = this._state |= 4;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, B.C__DelayedDone);
    },
    _add$1(value) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(value);
      t2 = _this._state;
      if ((t2 & 1) !== 0)
        _this._sendData$1(value);
      else if ((t2 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new A._DelayedData(value, t1._eval$1("_DelayedData<1>")));
    },
    _addError$2(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new A._DelayedError(error, stackTrace));
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var subscription, pendingEvents, addState, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 3) !== 0)
        throw A.wrapException(A.StateError$("Stream has already been listened to."));
      subscription = A._ControllerSubscription$(_this, onData, onError, onDone, cancelOnError, t1._precomputed1);
      pendingEvents = _this.get$_pendingEvents();
      if (((_this._state |= 1) & 8) !== 0) {
        addState = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
        addState.set$_varData(subscription);
        addState.resume$0();
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new A._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1(subscription) {
      var result, onCancel, cancelResult, e, s, exception, result0, t2, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      result = null;
      if ((_this._state & 8) !== 0)
        result = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).cancel$0();
      _this._varData = null;
      _this._state = _this._state & 4294967286 | 2;
      onCancel = _this.onCancel;
      if (onCancel != null)
        if (result == null)
          try {
            cancelResult = onCancel.call$0();
            if (cancelResult instanceof A._Future)
              result = cancelResult;
          } catch (exception) {
            e = A.unwrapException(exception);
            s = A.getTraceFromException(exception);
            result0 = new A._Future($.Zone__current, type$._Future_void);
            t1 = A._asObject(e);
            t2 = type$.StackTrace._as(s);
            result0._asyncCompleteErrorObject$1(new A.AsyncError(t1, t2));
            result = result0;
          }
        else
          result = result.whenComplete$1(onCancel);
      t1 = new A._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    _recordPause$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).pause$0();
      A._runGuarded(_this.onPause);
    },
    _recordResume$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).resume$0();
      A._runGuarded(_this.onResume);
    },
    set$onListen(onListen) {
      this.onListen = type$.nullable_void_Function._as(onListen);
    },
    set$onPause(onPause) {
      this.onPause = type$.nullable_void_Function._as(onPause);
    },
    set$onResume(onResume) {
      this.onResume = type$.nullable_void_Function._as(onResume);
    },
    set$onCancel(onCancel) {
      this.onCancel = type$.nullable_void_Function._as(onCancel);
    },
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  A._StreamController__subscribe_closure.prototype = {
    call$0() {
      A._runGuarded(this.$this.onListen);
    },
    $signature: 2
  };
  A._StreamController__recordCancel_complete.prototype = {
    call$0() {
      var doneFuture = this.$this._doneFuture;
      if (doneFuture != null && (doneFuture._state & 30) === 0)
        doneFuture._asyncComplete$1(null);
    },
    $signature: 2
  };
  A._SyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      this.$ti._precomputed1._as(data);
      this.get$_subscription()._add$1(data);
    },
    _sendError$2(error, stackTrace) {
      this.get$_subscription()._addError$2(error, stackTrace);
    },
    _sendDone$0() {
      this.get$_subscription()._close$0();
    }
  };
  A._AsyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(data);
      this.get$_subscription()._addPending$1(new A._DelayedData(data, t1._eval$1("_DelayedData<1>")));
    },
    _sendError$2(error, stackTrace) {
      this.get$_subscription()._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _sendDone$0() {
      this.get$_subscription()._addPending$1(B.C__DelayedDone);
    }
  };
  A._AsyncStreamController.prototype = {};
  A._SyncStreamController.prototype = {};
  A._ControllerStream.prototype = {
    get$hashCode(_) {
      return (A.Primitives_objectHashCode(this._controller) ^ 892482866) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A._ControllerStream && other._controller === this._controller;
    }
  };
  A._ControllerSubscription.prototype = {
    _onCancel$0() {
      return this._controller._recordCancel$1(this);
    },
    _onPause$0() {
      this._controller._recordPause$1(this);
    },
    _onResume$0() {
      this._controller._recordResume$1(this);
    }
  };
  A._StreamSinkWrapper.prototype = {$isSink: 1};
  A._BufferingStreamSubscription.prototype = {
    _setPendingEvents$1(pendingEvents) {
      var _this = this;
      A._instanceType(_this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(pendingEvents);
      if (pendingEvents == null)
        return;
      _this._pending = pendingEvents;
      if (pendingEvents.lastPendingEvent != null) {
        _this._state = (_this._state | 128) >>> 0;
        pendingEvents.schedule$1(_this);
      }
    },
    onData$1(handleData) {
      var t1 = A._instanceType(this);
      this._async$_onData = A._BufferingStreamSubscription__registerDataHandler(this._zone, t1._eval$1("~(_BufferingStreamSubscription.T)?")._as(handleData), t1._eval$1("_BufferingStreamSubscription.T"));
    },
    onDone$1(handleDone) {
      this._onDone = A._BufferingStreamSubscription__registerDoneHandler(this._zone, type$.nullable_void_Function._as(handleDone));
    },
    pause$1(resumeSignal) {
      var t2, t3, _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t2 = (t1 + 256 | 4) >>> 0;
      _this._state = t2;
      if (t1 < 256) {
        t3 = _this._pending;
        if (t3 != null)
          if (t3._state === 1)
            t3._state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 64) === 0)
        _this._guardCallback$1(_this.get$_onPause());
    },
    pause$0() {
      return this.pause$1(null);
    },
    resume$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 256) {
        t1 = _this._state = t1 - 256;
        if (t1 < 256)
          if ((t1 & 128) !== 0 && _this._pending.lastPendingEvent != null)
            _this._pending.schedule$1(_this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            _this._state = t1;
            if ((t1 & 64) === 0)
              _this._guardCallback$1(_this.get$_onResume());
          }
      }
    },
    cancel$0() {
      var _this = this,
        t1 = (_this._state & 4294967279) >>> 0;
      _this._state = t1;
      if ((t1 & 8) === 0)
        _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    asFuture$1$1(futureValue, $E) {
      var result, _this = this, t1 = {};
      t1.resultValue = null;
      if (!$E._is(null))
        throw A.wrapException(A.ArgumentError$notNull("futureValue"));
      $E._as(futureValue);
      t1.resultValue = futureValue;
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      _this._onDone = new A._BufferingStreamSubscription_asFuture_closure(t1, result);
      _this._state = (_this._state | 32) >>> 0;
      _this._onError = new A._BufferingStreamSubscription_asFuture_closure0(_this, result);
      return result;
    },
    asFuture$1$0($E) {
      return this.asFuture$1$1(null, $E);
    },
    get$isPaused() {
      return this._state >= 256;
    },
    _cancel$0() {
      var t2, _this = this,
        t1 = _this._state = (_this._state | 8) >>> 0;
      if ((t1 & 128) !== 0) {
        t2 = _this._pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 64) === 0)
        _this._pending = null;
      _this._cancelFuture = _this._onCancel$0();
    },
    _add$1(data) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("_BufferingStreamSubscription.T")._as(data);
      t2 = _this._state;
      if ((t2 & 8) !== 0)
        return;
      if (t2 < 64)
        _this._sendData$1(data);
      else
        _this._addPending$1(new A._DelayedData(data, t1._eval$1("_DelayedData<_BufferingStreamSubscription.T>")));
    },
    _addError$2(error, stackTrace) {
      var t1;
      if (type$.Error._is(error))
        A.Primitives_trySetStackTrace(error, stackTrace);
      t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 64)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _close$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      _this._state = t1;
      if (t1 < 64)
        _this._sendDone$0();
      else
        _this._addPending$1(B.C__DelayedDone);
    },
    _onPause$0() {
    },
    _onResume$0() {
    },
    _onCancel$0() {
      return null;
    },
    _addPending$1($event) {
      var t1, _this = this,
        pending = _this._pending;
      if (pending == null)
        pending = _this._pending = new A._PendingEvents(A._instanceType(_this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>"));
      pending.add$1(0, $event);
      t1 = _this._state;
      if ((t1 & 128) === 0) {
        t1 = (t1 | 128) >>> 0;
        _this._state = t1;
        if (t1 < 256)
          pending.schedule$1(_this);
      }
    },
    _sendData$1(data) {
      var t2, _this = this,
        t1 = A._instanceType(_this)._eval$1("_BufferingStreamSubscription.T");
      t1._as(data);
      t2 = _this._state;
      _this._state = (t2 | 64) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._async$_onData, data, t1);
      _this._state = (_this._state & 4294967231) >>> 0;
      _this._checkState$1((t2 & 4) !== 0);
    },
    _sendError$2(error, stackTrace) {
      var cancelFuture, _this = this,
        t1 = _this._state,
        t2 = new A._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        _this._state = (t1 | 16) >>> 0;
        _this._cancel$0();
        cancelFuture = _this._cancelFuture;
        if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
          cancelFuture.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        _this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0() {
      var cancelFuture, _this = this,
        t1 = new A._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._cancel$0();
      _this._state = (_this._state | 16) >>> 0;
      cancelFuture = _this._cancelFuture;
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1(callback) {
      var t1, _this = this;
      type$.void_Function._as(callback);
      t1 = _this._state;
      _this._state = (t1 | 64) >>> 0;
      callback.call$0();
      _this._state = (_this._state & 4294967231) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1(wasInputPaused) {
      var t2, isInputPaused, _this = this,
        t1 = _this._state;
      if ((t1 & 128) !== 0 && _this._pending.lastPendingEvent == null) {
        t1 = _this._state = (t1 & 4294967167) >>> 0;
        t2 = false;
        if ((t1 & 4) !== 0)
          if (t1 < 256) {
            t2 = _this._pending;
            t2 = t2 == null ? null : t2.lastPendingEvent == null;
            t2 = t2 !== false;
          }
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          _this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          _this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        _this._state = (t1 ^ 64) >>> 0;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        t1 = (_this._state & 4294967231) >>> 0;
        _this._state = t1;
      }
      if ((t1 & 128) !== 0 && t1 < 256)
        _this._pending.schedule$1(_this);
    },
    $isStreamSubscription: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  A._BufferingStreamSubscription_asFuture_closure.prototype = {
    call$0() {
      this.result._complete$1(this._box_0.resultValue);
    },
    $signature: 2
  };
  A._BufferingStreamSubscription_asFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      var cancelFuture, t1;
      A._asObject(error);
      type$.StackTrace._as(stackTrace);
      cancelFuture = this.$this.cancel$0();
      t1 = this.result;
      if (cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new A._BufferingStreamSubscription_asFuture__closure(t1, error, stackTrace));
      else
        t1._completeErrorObject$1(new A.AsyncError(error, stackTrace));
    },
    $signature: 71
  };
  A._BufferingStreamSubscription_asFuture__closure.prototype = {
    call$0() {
      this.result._completeErrorObject$1(new A.AsyncError(this.error, this.stackTrace));
    },
    $signature: 1
  };
  A._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0() {
      var onError, t3, t4,
        t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 64) >>> 0;
      onError = t1._onError;
      t2 = this.error;
      t3 = type$.Object;
      t4 = t1._zone;
      if (type$.void_Function_Object_StackTrace._is(onError))
        t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, type$.StackTrace);
      else
        t4.runUnaryGuarded$1$2(type$.void_Function_Object._as(onError), t2, t3);
      t1._state = (t1._state & 4294967231) >>> 0;
    },
    $signature: 2
  };
  A._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 74) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967231) >>> 0;
    },
    $signature: 2
  };
  A._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = A._instanceType(this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      return this._controller._subscribe$4(t1._eval$1("~(1)?")._as(onData), onError, onDone, cancelOnError === true);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$2$onError(onData, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, onError);
    },
    listen$3$cancelOnError$onError(onData, cancelOnError, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, onError);
    },
    listen$2$cancelOnError(onData, cancelOnError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, null);
    }
  };
  A._DelayedEvent.prototype = {
    set$next(next) {
      this.next = type$.nullable__DelayedEvent_dynamic._as(next);
    },
    get$next() {
      return this.next;
    }
  };
  A._DelayedData.prototype = {
    perform$1(dispatch) {
      this.$ti._eval$1("_EventDispatch<1>")._as(dispatch)._sendData$1(this.value);
    }
  };
  A._DelayedError.prototype = {
    perform$1(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  };
  A._DelayedDone.prototype = {
    perform$1(dispatch) {
      dispatch._sendDone$0();
    },
    get$next() {
      return null;
    },
    set$next(__wc0_formal) {
      throw A.wrapException(A.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1
  };
  A._PendingEvents.prototype = {
    schedule$1(dispatch) {
      var t1, _this = this;
      _this.$ti._eval$1("_EventDispatch<1>")._as(dispatch);
      t1 = _this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      A.scheduleMicrotask(new A._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    },
    get$isEmpty(_) {
      return this.lastPendingEvent == null;
    },
    add$1(_, $event) {
      var _this = this,
        lastEvent = _this.lastPendingEvent;
      if (lastEvent == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        lastEvent.set$next($event);
        _this.lastPendingEvent = $event;
      }
    }
  };
  A._PendingEvents_schedule_closure.prototype = {
    call$0() {
      var t2, $event, nextEvent,
        t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t2 = t1.$ti._eval$1("_EventDispatch<1>")._as(this.dispatch);
      $event = t1.firstPendingEvent;
      nextEvent = $event.get$next();
      t1.firstPendingEvent = nextEvent;
      if (nextEvent == null)
        t1.lastPendingEvent = null;
      $event.perform$1(t2);
    },
    $signature: 2
  };
  A._DoneStreamSubscription.prototype = {
    get$isPaused() {
      return this._state >= 2;
    },
    onData$1(handleData) {
      this.$ti._eval$1("~(1)?")._as(handleData);
    },
    onDone$1(handleDone) {
      type$.nullable_void_Function._as(handleDone);
      if (this._state >= 0) {
        handleDone = this._zone.registerCallback$1$1(handleDone, type$.void);
        this._onDone = handleDone;
      }
    },
    pause$1(resumeSignal) {
      var t1 = this._state;
      if (t1 >= 0)
        this._state = t1 + 2;
    },
    pause$0() {
      return this.pause$1(null);
    },
    resume$0() {
      var _this = this,
        resumeState = _this._state - 2;
      if (resumeState < 0)
        return;
      if (resumeState === 0) {
        _this._state = 1;
        A.scheduleMicrotask(_this.get$_onMicrotask());
      } else
        _this._state = resumeState;
    },
    cancel$0() {
      this._state = -1;
      this._onDone = null;
      return $.$get$Future__nullFuture();
    },
    asFuture$1$1(futureValue, $E) {
      var result, t1 = {};
      t1.resultValue = null;
      if (!$E._is(null))
        throw A.wrapException(A.ArgumentError$notNull("futureValue"));
      $E._as(futureValue);
      t1.resultValue = futureValue;
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      if (this._state >= 0)
        this._onDone = this._zone.registerCallback$1$1(new A._DoneStreamSubscription_asFuture_closure(t1, result), type$.void);
      return result;
    },
    asFuture$1$0($E) {
      return this.asFuture$1$1(null, $E);
    },
    _onMicrotask$0() {
      var _0_0, _this = this,
        unscheduledState = _this._state - 1;
      if (unscheduledState === 0) {
        _this._state = -1;
        _0_0 = _this._onDone;
        if (_0_0 != null) {
          _this._onDone = null;
          _this._zone.runGuarded$1(_0_0);
        }
      } else
        _this._state = unscheduledState;
    },
    $isStreamSubscription: 1
  };
  A._DoneStreamSubscription_asFuture_closure.prototype = {
    call$0() {
      this.result._completeWithValue$1(this._box_0.resultValue);
    },
    $signature: 2
  };
  A._StreamIterator.prototype = {
    get$current() {
      var _this = this;
      if (_this._async$_hasValue)
        return _this.$ti._precomputed1._as(_this._stateData);
      return _this.$ti._precomputed1._as(null);
    },
    moveNext$0() {
      var future, _this = this,
        subscription = _this._subscription;
      if (subscription != null) {
        if (_this._async$_hasValue) {
          future = new A._Future($.Zone__current, type$._Future_bool);
          _this._stateData = future;
          _this._async$_hasValue = false;
          subscription.resume$0();
          return future;
        }
        throw A.wrapException(A.StateError$("Already waiting for next."));
      }
      return _this._initializeOrDone$0();
    },
    _initializeOrDone$0() {
      var future, subscription, _this = this,
        stateData = _this._stateData;
      if (stateData != null) {
        _this.$ti._eval$1("Stream<1>")._as(stateData);
        future = new A._Future($.Zone__current, type$._Future_bool);
        _this._stateData = future;
        subscription = stateData.listen$4$cancelOnError$onDone$onError(_this.get$_async$_onData(), true, _this.get$_onDone(), _this.get$_onError());
        if (_this._stateData != null)
          _this._subscription = subscription;
        return future;
      }
      return $.$get$Future__falseFuture();
    },
    cancel$0() {
      var _this = this,
        subscription = _this._subscription,
        stateData = _this._stateData;
      _this._stateData = null;
      if (subscription != null) {
        _this._subscription = null;
        if (!_this._async$_hasValue)
          type$._Future_bool._as(stateData)._asyncComplete$1(false);
        else
          _this._async$_hasValue = false;
        return subscription.cancel$0();
      }
      return $.$get$Future__nullFuture();
    },
    _async$_onData$1(data) {
      var moveNextFuture, t1, _this = this;
      _this.$ti._precomputed1._as(data);
      if (_this._subscription == null)
        return;
      moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this._stateData = data;
      _this._async$_hasValue = true;
      moveNextFuture._complete$1(true);
      if (_this._async$_hasValue) {
        t1 = _this._subscription;
        if (t1 != null)
          t1.pause$0();
      }
    },
    _onError$2(error, stackTrace) {
      var subscription, moveNextFuture, _this = this;
      A._asObject(error);
      type$.StackTrace._as(stackTrace);
      subscription = _this._subscription;
      moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this._stateData = _this._subscription = null;
      if (subscription != null)
        moveNextFuture._completeErrorObject$1(new A.AsyncError(error, stackTrace));
      else
        moveNextFuture._asyncCompleteErrorObject$1(new A.AsyncError(error, stackTrace));
    },
    _onDone$0() {
      var _this = this,
        subscription = _this._subscription,
        moveNextFuture = type$._Future_bool._as(_this._stateData);
      _this._stateData = _this._subscription = null;
      if (subscription != null)
        moveNextFuture._completeWithValue$1(false);
      else
        moveNextFuture._asyncCompleteWithValue$1(false);
    }
  };
  A._MultiStream.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var controller, _null = null,
        t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      controller = new A._MultiStreamController(_null, _null, _null, _null, t1._eval$1("_MultiStreamController<1>"));
      controller.set$onListen(new A._MultiStream_listen_closure(this, controller));
      return controller._subscribe$4(onData, onError, onDone, cancelOnError === true);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    get$isBroadcast() {
      return this.isBroadcast;
    }
  };
  A._MultiStream_listen_closure.prototype = {
    call$0() {
      this.$this._onListen.call$1(this.controller);
    },
    $signature: 2
  };
  A._MultiStreamController.prototype = {
    addErrorSync$2(error, stackTrace) {
      var t1 = this._state;
      if (t1 >= 4)
        throw A.wrapException(this._badEventState$0());
      if ((t1 & 1) !== 0) {
        t1 = this.get$_subscription();
        t1._addError$2(error, stackTrace);
      }
    },
    closeSync$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return;
      if (t1 >= 4)
        throw A.wrapException(_this._badEventState$0());
      t1 |= 4;
      _this._state = t1;
      if ((t1 & 1) !== 0)
        _this.get$_subscription()._close$0();
    },
    get$stream() {
      throw A.wrapException(A.UnsupportedError$("Not available"));
    },
    $isMultiStreamController: 1
  };
  A._cancelAndValue_closure.prototype = {
    call$0() {
      return this.future._complete$1(this.value);
    },
    $signature: 2
  };
  A._ForwardingStream.prototype = {
    get$isBroadcast() {
      return this._async$_source.get$isBroadcast();
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t2, t3, t4,
        t1 = this.$ti;
      t1._eval$1("~(2)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      t2 = $.Zone__current;
      t3 = cancelOnError === true ? 1 : 0;
      t4 = onError != null ? 32 : 0;
      t1 = new A._ForwardingStreamSubscription(this, A._BufferingStreamSubscription__registerDataHandler(t2, onData, t1._rest[1]), A._BufferingStreamSubscription__registerErrorHandler(t2, onError), A._BufferingStreamSubscription__registerDoneHandler(t2, onDone), t2, t3 | t4, t1._eval$1("_ForwardingStreamSubscription<1,2>"));
      t1._subscription = this._async$_source.listen$3$onDone$onError(t1.get$_handleData(), t1.get$_handleDone(), t1.get$_handleError());
      return t1;
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$cancelOnError$onError(onData, cancelOnError, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, null, onError);
    }
  };
  A._ForwardingStreamSubscription.prototype = {
    _add$1(data) {
      this.$ti._rest[1]._as(data);
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_add(data);
    },
    _addError$2(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    _onPause$0() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.pause$0();
    },
    _onResume$0() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.resume$0();
    },
    _onCancel$0() {
      var subscription = this._subscription;
      if (subscription != null) {
        this._subscription = null;
        return subscription.cancel$0();
      }
      return null;
    },
    _handleData$1(data) {
      this._stream._handleData$2(this.$ti._precomputed1._as(data), this);
    },
    _handleError$2(error, stackTrace) {
      var t1;
      type$.StackTrace._as(stackTrace);
      t1 = error == null ? A._asObject(error) : error;
      this._stream.$ti._eval$1("_EventSink<2>")._as(this)._addError$2(t1, stackTrace);
    },
    _handleDone$0() {
      this._stream.$ti._eval$1("_EventSink<2>")._as(this)._close$0();
    }
  };
  A._MapStream.prototype = {
    _handleData$2(inputEvent, sink) {
      var outputEvent, e, s, exception, error, stackTrace, replacement,
        t1 = this.$ti;
      t1._precomputed1._as(inputEvent);
      t1._eval$1("_EventSink<2>")._as(sink);
      outputEvent = null;
      try {
        outputEvent = this._transform.call$1(inputEvent);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        error = e;
        stackTrace = s;
        replacement = A._interceptError(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
        }
        sink._addError$2(error, stackTrace);
        return;
      }
      sink._add$1(outputEvent);
    }
  };
  A._ZoneFunction.prototype = {};
  A._ZoneSpecification.prototype = {$isZoneSpecification: 1};
  A._ZoneDelegate.prototype = {$isZoneDelegate: 1};
  A._Zone.prototype = {
    _processUncaughtError$3(zone, error, stackTrace) {
      var implZone, handler, parentDelegate, parentZone, currentZone, e, s, implementation, t1, exception;
      type$.StackTrace._as(stackTrace);
      implementation = this.get$_handleUncaughtError();
      implZone = implementation.zone;
      if (implZone === B.C__RootZone) {
        A._rootHandleError(error, stackTrace);
        return;
      }
      handler = implementation.$function;
      parentDelegate = implZone.get$_parentDelegate();
      t1 = implZone.get$parent();
      t1.toString;
      parentZone = t1;
      currentZone = $.Zone__current;
      try {
        $.Zone__current = parentZone;
        handler.call$5(implZone, parentDelegate, zone, error, stackTrace);
        $.Zone__current = currentZone;
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        $.Zone__current = currentZone;
        t1 = error === e ? stackTrace : s;
        parentZone._processUncaughtError$3(implZone, e, t1);
      }
    },
    $isZone: 1
  };
  A._CustomZone.prototype = {
    get$_delegate() {
      var t1 = this._delegateCache;
      return t1 == null ? this._delegateCache = new A._ZoneDelegate(this) : t1;
    },
    get$_parentDelegate() {
      return this.parent.get$_delegate();
    },
    get$errorZone() {
      return this._handleUncaughtError.zone;
    },
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        this.run$1$1(f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this._processUncaughtError$3(this, A._asObject(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        this.runUnary$2$2(f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this._processUncaughtError$3(this, A._asObject(e), type$.StackTrace._as(s));
      }
    },
    runBinaryGuarded$2$3(f, arg1, arg2, $T1, $T2) {
      var e, s, exception;
      $T1._eval$1("@<0>")._bind$1($T2)._eval$1("~(1,2)")._as(f);
      $T1._as(arg1);
      $T2._as(arg2);
      try {
        this.runBinary$3$3(f, arg1, arg2, type$.void, $T1, $T2);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this._processUncaughtError$3(this, A._asObject(e), type$.StackTrace._as(s));
      }
    },
    bindCallback$1$1(f, $R) {
      return new A._CustomZone_bindCallback_closure(this, this.registerCallback$1$1($R._eval$1("0()")._as(f), $R), $R);
    },
    bindUnaryCallback$2$1(f, $R, $T) {
      return new A._CustomZone_bindUnaryCallback_closure(this, this.registerUnaryCallback$2$1($R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f), $R, $T), $T, $R);
    },
    bindCallbackGuarded$1(f) {
      return new A._CustomZone_bindCallbackGuarded_closure(this, this.registerCallback$1$1(type$.void_Function._as(f), type$.void));
    },
    bindUnaryCallbackGuarded$1$1(f, $T) {
      return new A._CustomZone_bindUnaryCallbackGuarded_closure(this, this.registerUnaryCallback$2$1($T._eval$1("~(0)")._as(f), type$.void, $T), $T);
    },
    $index(_, key) {
      var value,
        t1 = this._async$_map,
        result = t1.$index(0, key);
      if (result != null || t1.containsKey$1(key))
        return result;
      value = this.parent.$index(0, key);
      if (value != null)
        t1.$indexSet(0, key, value);
      return value;
    },
    handleUncaughtError$2(error, stackTrace) {
      this._processUncaughtError$3(this, error, type$.StackTrace._as(stackTrace));
    },
    fork$2$specification$zoneValues(specification, zoneValues) {
      var implementation = this._fork,
        t1 = implementation.zone;
      return implementation.$function.call$5(t1, t1.get$_parentDelegate(), this, specification, zoneValues);
    },
    run$1$1(f, $R) {
      var implementation, t1;
      $R._eval$1("0()")._as(f);
      implementation = this._run;
      t1 = implementation.zone;
      return implementation.$function.call$1$4(t1, t1.get$_parentDelegate(), this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      implementation = this._runUnary;
      t1 = implementation.zone;
      return implementation.$function.call$2$5(t1, t1.get$_parentDelegate(), this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, $T1, $T2) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1($T1)._bind$1($T2)._eval$1("1(2,3)")._as(f);
      $T1._as(arg1);
      $T2._as(arg2);
      implementation = this._runBinary;
      t1 = implementation.zone;
      return implementation.$function.call$3$6(t1, t1.get$_parentDelegate(), this, f, arg1, arg2, $R, $T1, $T2);
    },
    registerCallback$1$1(callback, $R) {
      var implementation, t1;
      $R._eval$1("0()")._as(callback);
      implementation = this._registerCallback;
      t1 = implementation.zone;
      return implementation.$function.call$1$4(t1, t1.get$_parentDelegate(), this, callback, $R);
    },
    registerUnaryCallback$2$1(callback, $R, $T) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(callback);
      implementation = this._registerUnaryCallback;
      t1 = implementation.zone;
      return implementation.$function.call$2$4(t1, t1.get$_parentDelegate(), this, callback, $R, $T);
    },
    registerBinaryCallback$3$1(callback, $R, $T1, $T2) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1($T1)._bind$1($T2)._eval$1("1(2,3)")._as(callback);
      implementation = this._registerBinaryCallback;
      t1 = implementation.zone;
      return implementation.$function.call$3$4(t1, t1.get$_parentDelegate(), this, callback, $R, $T1, $T2);
    },
    errorCallback$2(error, stackTrace) {
      var implementation = this._errorCallback,
        implementationZone = implementation.zone;
      if (implementationZone === B.C__RootZone)
        return null;
      return implementation.$function.call$5(implementationZone, implementationZone.get$_parentDelegate(), this, error, stackTrace);
    },
    scheduleMicrotask$1(f) {
      var implementation, t1;
      type$.void_Function._as(f);
      implementation = this._scheduleMicrotask;
      t1 = implementation.zone;
      return implementation.$function.call$4(t1, t1.get$_parentDelegate(), this, f);
    },
    createTimer$2(duration, f) {
      var implementation, t1;
      type$.void_Function._as(f);
      implementation = this._createTimer;
      t1 = implementation.zone;
      return implementation.$function.call$5(t1, t1.get$_parentDelegate(), this, duration, f);
    },
    createPeriodicTimer$2(duration, f) {
      var implementation, t1;
      type$.void_Function_Timer._as(f);
      implementation = this._createPeriodicTimer;
      t1 = implementation.zone;
      return implementation.$function.call$5(t1, t1.get$_parentDelegate(), this, duration, f);
    },
    print$1(line) {
      var implementation = this._print,
        t1 = implementation.zone;
      return implementation.$function.call$4(t1, t1.get$_parentDelegate(), this, line);
    },
    get$_run() {
      return this._run;
    },
    get$_runUnary() {
      return this._runUnary;
    },
    get$_runBinary() {
      return this._runBinary;
    },
    get$_registerCallback() {
      return this._registerCallback;
    },
    get$_registerUnaryCallback() {
      return this._registerUnaryCallback;
    },
    get$_registerBinaryCallback() {
      return this._registerBinaryCallback;
    },
    get$_errorCallback() {
      return this._errorCallback;
    },
    get$_scheduleMicrotask() {
      return this._scheduleMicrotask;
    },
    get$_createTimer() {
      return this._createTimer;
    },
    get$_createPeriodicTimer() {
      return this._createPeriodicTimer;
    },
    get$_print() {
      return this._print;
    },
    get$_fork() {
      return this._fork;
    },
    get$_handleUncaughtError() {
      return this._handleUncaughtError;
    },
    get$parent() {
      return this.parent;
    },
    get$_async$_map() {
      return this._async$_map;
    }
  };
  A._CustomZone_bindCallback_closure.prototype = {
    call$0() {
      return this.$this.run$1$1(this.registered, this.R);
    },
    $signature() {
      return this.R._eval$1("0()");
    }
  };
  A._CustomZone_bindUnaryCallback_closure.prototype = {
    call$1(arg) {
      var _this = this,
        t1 = _this.T;
      return _this.$this.runUnary$2$2(_this.registered, t1._as(arg), _this.R, t1);
    },
    $signature() {
      return this.R._eval$1("@<0>")._bind$1(this.T)._eval$1("1(2)");
    }
  };
  A._CustomZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.registered);
    },
    $signature: 2
  };
  A._CustomZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.registered, t1._as(arg), t1);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A._rootHandleError_closure.prototype = {
    call$0() {
      A.Error_throwWithStackTrace(this.error, this.stackTrace);
    },
    $signature: 2
  };
  A._RootZone.prototype = {
    get$_run() {
      return B._ZoneFunction__RootZone__rootRun;
    },
    get$_runUnary() {
      return B._ZoneFunction__RootZone__rootRunUnary;
    },
    get$_runBinary() {
      return B._ZoneFunction__RootZone__rootRunBinary;
    },
    get$_registerCallback() {
      return B._ZoneFunction__RootZone__rootRegisterCallback;
    },
    get$_registerUnaryCallback() {
      return B._ZoneFunction_Xkh;
    },
    get$_registerBinaryCallback() {
      return B._ZoneFunction_e9o;
    },
    get$_errorCallback() {
      return B._ZoneFunction__RootZone__rootErrorCallback;
    },
    get$_scheduleMicrotask() {
      return B._ZoneFunction__RootZone__rootScheduleMicrotask;
    },
    get$_createTimer() {
      return B._ZoneFunction__RootZone__rootCreateTimer;
    },
    get$_createPeriodicTimer() {
      return B._ZoneFunction_PAY;
    },
    get$_print() {
      return B._ZoneFunction__RootZone__rootPrint;
    },
    get$_fork() {
      return B._ZoneFunction__RootZone__rootFork;
    },
    get$_handleUncaughtError() {
      return B._ZoneFunction_KjJ;
    },
    get$parent() {
      return null;
    },
    get$_async$_map() {
      return $.$get$_RootZone__rootMap();
    },
    get$_delegate() {
      var t1 = $._RootZone__rootDelegate;
      return t1 == null ? $._RootZone__rootDelegate = new A._ZoneDelegate(this) : t1;
    },
    get$_parentDelegate() {
      var t1 = $._RootZone__rootDelegate;
      return t1 == null ? $._RootZone__rootDelegate = new A._ZoneDelegate(this) : t1;
    },
    get$errorZone() {
      return this;
    },
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(A._asObject(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        A._rootRunUnary(null, null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(A._asObject(e), type$.StackTrace._as(s));
      }
    },
    runBinaryGuarded$2$3(f, arg1, arg2, $T1, $T2) {
      var e, s, exception;
      $T1._eval$1("@<0>")._bind$1($T2)._eval$1("~(1,2)")._as(f);
      $T1._as(arg1);
      $T2._as(arg2);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        A._rootRunBinary(null, null, this, f, arg1, arg2, type$.void, $T1, $T2);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(A._asObject(e), type$.StackTrace._as(s));
      }
    },
    bindCallback$1$1(f, $R) {
      return new A._RootZone_bindCallback_closure(this, $R._eval$1("0()")._as(f), $R);
    },
    bindUnaryCallback$2$1(f, $R, $T) {
      return new A._RootZone_bindUnaryCallback_closure(this, $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f), $T, $R);
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1(f, $T) {
      return new A._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    $index(_, key) {
      return null;
    },
    handleUncaughtError$2(error, stackTrace) {
      A._rootHandleError(error, type$.StackTrace._as(stackTrace));
    },
    fork$2$specification$zoneValues(specification, zoneValues) {
      return A._rootFork(null, null, this, specification, zoneValues);
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, $T1, $T2) {
      $R._eval$1("@<0>")._bind$1($T1)._bind$1($T2)._eval$1("1(2,3)")._as(f);
      $T1._as(arg1);
      $T2._as(arg2);
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, $T1, $T2);
    },
    registerCallback$1$1(f, $R) {
      return $R._eval$1("0()")._as(f);
    },
    registerUnaryCallback$2$1(f, $R, $T) {
      return $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
    },
    registerBinaryCallback$3$1(f, $R, $T1, $T2) {
      return $R._eval$1("@<0>")._bind$1($T1)._bind$1($T2)._eval$1("1(2,3)")._as(f);
    },
    errorCallback$2(error, stackTrace) {
      return null;
    },
    scheduleMicrotask$1(f) {
      A._rootScheduleMicrotask(null, null, this, type$.void_Function._as(f));
    },
    createTimer$2(duration, f) {
      return A.Timer__createTimer(duration, type$.void_Function._as(f));
    },
    createPeriodicTimer$2(duration, f) {
      return A.Timer__createPeriodicTimer(duration, type$.void_Function_Timer._as(f));
    },
    print$1(line) {
      A.printString(line);
    }
  };
  A._RootZone_bindCallback_closure.prototype = {
    call$0() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature() {
      return this.R._eval$1("0()");
    }
  };
  A._RootZone_bindUnaryCallback_closure.prototype = {
    call$1(arg) {
      var _this = this,
        t1 = _this.T;
      return _this.$this.runUnary$2$2(_this.f, t1._as(arg), _this.R, t1);
    },
    $signature() {
      return this.R._eval$1("@<0>")._bind$1(this.T)._eval$1("1(2)");
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 2
  };
  A._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A._HashMap.prototype = {
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    get$keys() {
      return new A._HashMapKeyIterable(this, A._instanceType(this)._eval$1("_HashMapKeyIterable<1>"));
    },
    get$values() {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(new A._HashMapKeyIterable(this, t1._eval$1("_HashMapKeyIterable<1>")), new A._HashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    containsValue$1(value) {
      return B.JSArray_methods.any$1(this._computeKeys$0(), new A._HashMap_containsValue_closure(this, value));
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<1,2>")._as(other).forEach$1(0, new A._HashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, t1, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._strings;
        t1 = strings == null ? null : A._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._nums;
        t1 = nums == null ? null : A._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1(key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return null;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string" && key !== "__proto__") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = A._HashMap__newHashTable() : strings, key, value);
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = A._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        A._HashMap__setTableEntry(rest, hash, [key, value]);
        ++_this._collection$_length;
        _this._keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++_this._collection$_length;
          _this._keys = null;
        }
      }
    },
    putIfAbsent$2(key, ifAbsent) {
      var t2, value, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (_this.containsKey$1(key)) {
        t2 = _this.$index(0, key);
        return t2 == null ? t1._rest[1]._as(t2) : t2;
      }
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string" && key !== "__proto__")
        return _this._removeHashTableEntry$2(_this._strings, key);
      else if (typeof key == "number" && (key & 1073741823) === key)
        return _this._removeHashTableEntry$2(_this._nums, key);
      else
        return _this._remove$1(key);
    },
    _remove$1(key) {
      var hash, bucket, index, result, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return null;
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      --_this._collection$_length;
      _this._keys = null;
      result = bucket.splice(index, 2)[1];
      if (0 === bucket.length)
        delete rest[hash];
      return result;
    },
    clear$0(_) {
      var _this = this;
      if (_this._collection$_length > 0) {
        _this._strings = _this._nums = _this._collection$_rest = _this._keys = null;
        _this._collection$_length = 0;
      }
    },
    forEach$1(_, action) {
      var keys, $length, t2, i, key, t3, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1,2)")._as(action);
      keys = _this._computeKeys$0();
      for ($length = keys.length, t2 = t1._precomputed1, t1 = t1._rest[1], i = 0; i < $length; ++i) {
        key = keys[i];
        t2._as(key);
        t3 = _this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
        if (keys !== _this._keys)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0() {
      var strings, index, names, entries, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._keys;
      if (result != null)
        return result;
      result = A.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._strings;
      index = 0;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      }
      nums = _this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._keys = result;
    },
    _addHashTableEntry$3(table, key, value) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (table[key] == null) {
        ++this._collection$_length;
        this._keys = null;
      }
      A._HashMap__setTableEntry(table, key, value);
    },
    _removeHashTableEntry$2(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = A._instanceType(this)._rest[1]._as(A._HashMap__getTableEntry(table, key));
        delete table[key];
        --this._collection$_length;
        this._keys = null;
        return value;
      } else
        return null;
    },
    _computeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _getBucket$2(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq$(bucket[i], key))
          return i;
      return -1;
    },
    $isHashMap: 1
  };
  A._HashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1 = t1.$index(0, t2._precomputed1._as(each));
      return t1 == null ? t2._rest[1]._as(t1) : t1;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A._HashMap_containsValue_closure.prototype = {
    call$1(each) {
      return J.$eq$(this.$this.$index(0, each), this.value);
    },
    $signature: 17
  };
  A._HashMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A._IdentityHashMap.prototype = {
    _computeHashCode$1(key) {
      return A.objectHashCode(key) & 1073741823;
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A._CustomHashMap.prototype = {
    $index(_, key) {
      if (!this._validKey.call$1(key))
        return null;
      return this.super$_HashMap$_get(key);
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      this.super$_HashMap$_set(t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(key) {
      if (!this._validKey.call$1(key))
        return false;
      return this.super$_HashMap$_containsKey(key);
    },
    remove$1(_, key) {
      if (!this._validKey.call$1(key))
        return null;
      return this.super$_HashMap$_remove(key);
    },
    _computeHashCode$1(key) {
      return this._hashCode.call$1(this.$ti._precomputed1._as(key)) & 1073741823;
    },
    _findBucketIndex$2(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this.$ti._precomputed1, t2 = this._equals, i = 0; i < $length; i += 2)
        if (t2.call$2(bucket[i], t1._as(key)))
          return i;
      return -1;
    }
  };
  A._CustomHashMap_closure.prototype = {
    call$1(v) {
      return this.K._is(v);
    },
    $signature: 23
  };
  A._HashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map._collection$_length;
    },
    get$isEmpty(_) {
      return this._map._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._map._collection$_length !== 0;
    },
    get$iterator(_) {
      var t1 = this._map;
      return new A._HashMapKeyIterator(t1, t1._computeKeys$0(), this.$ti._eval$1("_HashMapKeyIterator<1>"));
    },
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    }
  };
  A._HashMapKeyIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        keys = _this._keys,
        offset = _this._offset,
        t1 = _this._map;
      if (keys !== t1._keys)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this._collection$_current = null;
        return false;
      } else {
        _this._collection$_current = keys[offset];
        _this._offset = offset + 1;
        return true;
      }
    },
    $isIterator: 1
  };
  A._HashSet.prototype = {
    _newSet$0() {
      return new A._HashSet(A._instanceType(this)._eval$1("_HashSet<1>"));
    },
    _newSimilarSet$1$0($R) {
      return new A._HashSet($R._eval$1("_HashSet<0>"));
    },
    _newSimilarSet$0() {
      return this._newSimilarSet$1$0(type$.dynamic);
    },
    get$iterator(_) {
      return new A._HashSetIterator(this, this._computeElements$0(), A._instanceType(this)._eval$1("_HashSetIterator<1>"));
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    contains$1(_, object) {
      var strings, nums;
      if (typeof object == "string" && object !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object == "number" && (object & 1073741823) === object) {
        nums = this._nums;
        return nums == null ? false : nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._strings;
        return _this._addHashTableEntry$2(strings == null ? _this._strings = A._HashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._nums;
        return _this._addHashTableEntry$2(nums == null ? _this._nums = A._HashSet__newHashTable() : nums, element);
      } else
        return _this._collection$_add$1(element);
    },
    _collection$_add$1(element) {
      var rest, hash, bucket, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._HashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      ++_this._collection$_length;
      _this._elements = null;
      return true;
    },
    addAll$1(_, objects) {
      var t1;
      A._instanceType(this)._eval$1("Iterable<1>")._as(objects);
      for (t1 = objects.get$iterator(objects); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    _computeElements$0() {
      var strings, index, names, entries, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._elements;
      if (result != null)
        return result;
      result = A.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._strings;
      index = 0;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      }
      nums = _this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._elements = result;
    },
    _addHashTableEntry$2(table, element) {
      A._instanceType(this)._precomputed1._as(element);
      if (table[element] != null)
        return false;
      table[element] = 0;
      ++this._collection$_length;
      this._elements = null;
      return true;
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i], element))
          return i;
      return -1;
    }
  };
  A._CustomHashSet.prototype = {
    _newSet$0() {
      var _this = this;
      return A._CustomHashSet$(_this._equality, _this._hasher, _this._validKey, _this.$ti._precomputed1);
    },
    _newSimilarSet$1$0($R) {
      return new A._HashSet($R._eval$1("_HashSet<0>"));
    },
    _newSimilarSet$0() {
      return this._newSimilarSet$1$0(type$.dynamic);
    },
    _findBucketIndex$2(bucket, element) {
      var $length, t1, i, t2;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this.$ti._precomputed1, i = 0; i < $length; ++i) {
        t2 = bucket[i];
        t1._as(element);
        if (this._equality.call$2(t2, element))
          return i;
      }
      return -1;
    },
    _computeHashCode$1(element) {
      this.$ti._precomputed1._as(element);
      return this._hasher.call$1(element) & 1073741823;
    },
    add$1(_, object) {
      return this.super$_HashSet$_add(this.$ti._precomputed1._as(object));
    },
    contains$1(_, object) {
      if (!this._validKey.call$1(object))
        return false;
      return this.super$_HashSet$_contains(object);
    }
  };
  A._CustomHashSet_closure.prototype = {
    call$1(x) {
      return this.E._is(x);
    },
    $signature: 23
  };
  A._HashSetIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        elements = _this._elements,
        offset = _this._offset,
        t1 = _this._set;
      if (elements !== t1._elements)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        _this._collection$_current = null;
        return false;
      } else {
        _this._collection$_current = elements[offset];
        _this._offset = offset + 1;
        return true;
      }
    },
    $isIterator: 1
  };
  A._LinkedHashSet.prototype = {
    _newSet$0() {
      return new A._LinkedHashSet(A._instanceType(this)._eval$1("_LinkedHashSet<1>"));
    },
    _newSimilarSet$1$0($R) {
      return new A._LinkedHashSet($R._eval$1("_LinkedHashSet<0>"));
    },
    _newSimilarSet$0() {
      return this._newSimilarSet$1$0(type$.dynamic);
    },
    get$iterator(_) {
      var _this = this,
        t1 = new A._LinkedHashSetIterator(_this, _this._modifications, A._instanceType(_this)._eval$1("_LinkedHashSetIterator<1>"));
      t1._cell = _this._first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    contains$1(_, object) {
      var strings, nums;
      if (typeof object == "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(strings[object]) != null;
      } else if (typeof object == "number" && (object & 1073741823) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(nums[object]) != null;
      } else
        return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    get$first(_) {
      var first = this._first;
      if (first == null)
        throw A.wrapException(A.StateError$("No elements"));
      return A._instanceType(this)._precomputed1._as(first._element);
    },
    get$last(_) {
      var last = this._last;
      if (last == null)
        throw A.wrapException(A.StateError$("No elements"));
      return A._instanceType(this)._precomputed1._as(last._element);
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._strings;
        return _this._addHashTableEntry$2(strings == null ? _this._strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._nums;
        return _this._addHashTableEntry$2(nums == null ? _this._nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._collection$_add$1(element);
    },
    _collection$_add$1(element) {
      var rest, hash, bucket, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1(_, object) {
      var _this = this;
      if (typeof object == "string" && object !== "__proto__")
        return _this._removeHashTableEntry$2(_this._strings, object);
      else if (typeof object == "number" && (object & 1073741823) === object)
        return _this._removeHashTableEntry$2(_this._nums, object);
      else
        return _this._remove$1(object);
    },
    _remove$1(object) {
      var hash, bucket, index, cell, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      hash = _this._computeHashCode$1(object);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      cell = bucket.splice(index, 1)[0];
      if (0 === bucket.length)
        delete rest[hash];
      _this._unlinkCell$1(cell);
      return true;
    },
    clear$0(_) {
      var _this = this;
      if (_this._collection$_length > 0) {
        _this._strings = _this._nums = _this._collection$_rest = _this._first = _this._last = null;
        _this._collection$_length = 0;
        _this._modified$0();
      }
    },
    _addHashTableEntry$2(table, element) {
      A._instanceType(this)._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = type$.nullable__LinkedHashSetCell._as(table[element]);
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _modified$0() {
      this._modifications = this._modifications + 1 & 1073741823;
    },
    _newLinkedCell$1(element) {
      var t1, _this = this,
        cell = new A._LinkedHashSetCell(A._instanceType(_this)._precomputed1._as(element));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this._collection$_length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this._collection$_length;
      _this._modified$0();
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    },
    $isLinkedHashSet: 1
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._cell,
        t1 = _this._set;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this._collection$_current = null;
        return false;
      } else {
        _this._collection$_current = _this.$ti._eval$1("1?")._as(cell._element);
        _this._cell = cell._next;
        return true;
      }
    },
    $isIterator: 1
  };
  A.UnmodifiableListView.prototype = {
    cast$1$0(_, $R) {
      return new A.UnmodifiableListView(this._collection$_source.cast$1$0(0, $R), $R._eval$1("UnmodifiableListView<0>"));
    },
    get$length(_) {
      var t1 = this._collection$_source;
      return t1.get$length(t1);
    },
    $index(_, index) {
      var t1 = this._collection$_source;
      return t1.elementAt$1(t1, A._asInt(index));
    }
  };
  A.HashMap_HashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 94
  };
  A.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 94
  };
  A.ListBase.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListBase.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    followedBy$1(receiver, other) {
      var t1 = A.instanceType(receiver);
      return A.FollowedByIterable_FollowedByIterable$firstEfficient(receiver, t1._eval$1("Iterable<ListBase.E>")._as(other), t1._eval$1("ListBase.E"));
    },
    forEach$1(receiver, action) {
      var $length, i;
      A.instanceType(receiver)._eval$1("~(ListBase.E)")._as(action);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    set$first(receiver, value) {
      A.instanceType(receiver)._eval$1("ListBase.E")._as(value);
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      this.$indexSet(receiver, 0, value);
    },
    get$last(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, this.get$length(receiver) - 1);
    },
    set$last(receiver, value) {
      A.instanceType(receiver)._eval$1("ListBase.E")._as(value);
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      this.$indexSet(receiver, this.get$length(receiver) - 1, value);
    },
    get$single(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      if (this.get$length(receiver) > 1)
        throw A.wrapException(A.IterableElementError_tooMany());
      return this.$index(receiver, 0);
    },
    contains$1(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1(receiver, test) {
      var $length, i;
      A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (!test.call$1(this.$index(receiver, i)))
          return false;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    any$1(receiver, test) {
      var $length, i;
      A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (test.call$1(this.$index(receiver, i)))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    firstWhere$2$orElse(receiver, test, orElse) {
      var $length, i, element,
        t1 = A.instanceType(receiver);
      t1._eval$1("bool(ListBase.E)")._as(test);
      t1._eval$1("ListBase.E()?")._as(orElse);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        element = this.$index(receiver, i);
        if (test.call$1(element))
          return element;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A.IterableElementError_noElement());
    },
    lastWhere$2$orElse(receiver, test, orElse) {
      var $length, i, element,
        t1 = A.instanceType(receiver);
      t1._eval$1("bool(ListBase.E)")._as(test);
      t1._eval$1("ListBase.E()?")._as(orElse);
      $length = this.get$length(receiver);
      for (i = $length - 1; i >= 0; --i) {
        element = this.$index(receiver, i);
        if (test.call$1(element))
          return element;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A.IterableElementError_noElement());
    },
    singleWhere$2$orElse(receiver, test, orElse) {
      var $length, match, matchFound, i, element,
        t1 = A.instanceType(receiver);
      t1._eval$1("bool(ListBase.E)")._as(test);
      t1._eval$1("ListBase.E()?")._as(orElse);
      $length = this.get$length(receiver);
      match = A._Cell$named("match");
      for (matchFound = false, i = 0; i < $length; ++i) {
        element = this.$index(receiver, i);
        if (test.call$1(element)) {
          if (matchFound)
            throw A.wrapException(A.IterableElementError_tooMany());
          match._value = element;
          matchFound = true;
        }
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      if (matchFound)
        return match._readLocal$0();
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A.IterableElementError_noElement());
    },
    join$1(receiver, separator) {
      var t1;
      if (this.get$length(receiver) === 0)
        return "";
      t1 = A.StringBuffer__writeAll("", receiver, separator);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    where$1(receiver, test) {
      var t1 = A.instanceType(receiver);
      return new A.WhereIterable(receiver, t1._eval$1("bool(ListBase.E)")._as(test), t1._eval$1("WhereIterable<ListBase.E>"));
    },
    whereType$1$0(receiver, $T) {
      return new A.WhereTypeIterable(receiver, $T._eval$1("WhereTypeIterable<0>"));
    },
    map$1$1(receiver, f, $T) {
      var t1 = A.instanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(ListBase.E)")._as(f), t1._eval$1("@<ListBase.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1(receiver, f) {
      return this.map$1$1(receiver, f, type$.dynamic);
    },
    expand$1$1(receiver, f, $T) {
      var t1 = A.instanceType(receiver);
      return new A.ExpandIterable(receiver, t1._bind$1($T)._eval$1("Iterable<1>(ListBase.E)")._as(f), t1._eval$1("@<ListBase.E>")._bind$1($T)._eval$1("ExpandIterable<1,2>"));
    },
    reduce$1(receiver, combine) {
      var $length, value, i, _this = this;
      A.instanceType(receiver)._eval$1("ListBase.E(ListBase.E,ListBase.E)")._as(combine);
      $length = _this.get$length(receiver);
      if ($length === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      value = _this.$index(receiver, 0);
      for (i = 1; i < $length; ++i) {
        value = combine.call$2(value, _this.$index(receiver, i));
        if ($length !== _this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    fold$1$2(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      A.instanceType(receiver)._bind$1($T)._eval$1("1(1,ListBase.E)")._as(combine);
      $length = this.get$length(receiver);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    skip$1(receiver, count) {
      return A.SubListIterable$(receiver, count, null, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    skipWhile$1(receiver, test) {
      var t1 = A.instanceType(receiver);
      return new A.SkipWhileIterable(receiver, t1._eval$1("bool(ListBase.E)")._as(test), t1._eval$1("SkipWhileIterable<ListBase.E>"));
    },
    take$1(receiver, count) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(count, "count", type$.int), A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    takeWhile$1(receiver, test) {
      var t1 = A.instanceType(receiver);
      return new A.TakeWhileIterable(receiver, t1._eval$1("bool(ListBase.E)")._as(test), t1._eval$1("TakeWhileIterable<ListBase.E>"));
    },
    toList$1$growable(receiver, growable) {
      var t1, first, result, i, _this = this;
      if (_this.get$isEmpty(receiver)) {
        t1 = J.JSArray_JSArray$growable(0, A.instanceType(receiver)._eval$1("ListBase.E"));
        return t1;
      }
      first = _this.$index(receiver, 0);
      result = A.List_List$filled(_this.get$length(receiver), first, true, A.instanceType(receiver)._eval$1("ListBase.E"));
      for (i = 1; i < _this.get$length(receiver); ++i)
        B.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
      return result;
    },
    toList$0(receiver) {
      return this.toList$1$growable(receiver, true);
    },
    toSet$0(receiver) {
      var i,
        result = A.LinkedHashSet_LinkedHashSet(A.instanceType(receiver)._eval$1("ListBase.E"));
      for (i = 0; i < this.get$length(receiver); ++i)
        result.add$1(0, this.$index(receiver, i));
      return result;
    },
    add$1(receiver, element) {
      var t1;
      A.instanceType(receiver)._eval$1("ListBase.E")._as(element);
      t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    addAll$1(receiver, iterable) {
      var i, t1;
      A.instanceType(receiver)._eval$1("Iterable<ListBase.E>")._as(iterable);
      i = this.get$length(receiver);
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
        this.add$1(receiver, t1.get$current());
        ++i;
      }
    },
    remove$1(receiver, element) {
      var i;
      for (i = 0; i < this.get$length(receiver); ++i)
        if (J.$eq$(this.$index(receiver, i), element)) {
          this._closeGap$2(receiver, i, i + 1);
          return true;
        }
      return false;
    },
    _closeGap$2(receiver, start, end) {
      var i, _this = this,
        $length = _this.get$length(receiver),
        size = end - start;
      for (i = end; i < $length; ++i)
        _this.$indexSet(receiver, i - size, _this.$index(receiver, i));
      _this.set$length(receiver, $length - size);
    },
    removeWhere$1(receiver, test) {
      this._collection$_filter$2(receiver, A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test), false);
    },
    retainWhere$1(receiver, test) {
      this._collection$_filter$2(receiver, A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test), true);
    },
    _collection$_filter$2(receiver, test, retainMatching) {
      var retained, $length, i, element, _this = this,
        t1 = A.instanceType(receiver);
      t1._eval$1("bool(ListBase.E)")._as(test);
      retained = A._setArrayType([], t1._eval$1("JSArray<ListBase.E>"));
      $length = _this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        element = _this.$index(receiver, i);
        if (J.$eq$(test.call$1(element), retainMatching))
          B.JSArray_methods.add$1(retained, element);
        if ($length !== _this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      if (retained.length !== _this.get$length(receiver)) {
        _this.setRange$3(receiver, 0, retained.length, retained);
        _this.set$length(receiver, retained.length);
      }
    },
    clear$0(receiver) {
      this.set$length(receiver, 0);
    },
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A.instanceType(receiver)._eval$1("@<ListBase.E>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    removeLast$0(receiver) {
      var result, _this = this;
      if (_this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      result = _this.$index(receiver, _this.get$length(receiver) - 1);
      _this.set$length(receiver, _this.get$length(receiver) - 1);
      return result;
    },
    sort$1(receiver, compare) {
      var t2,
        t1 = A.instanceType(receiver);
      t1._eval$1("int(ListBase.E,ListBase.E)?")._as(compare);
      t2 = compare == null ? A.collection_ListBase__compareAny$closure() : compare;
      A.Sort__doSort(receiver, 0, this.get$length(receiver) - 1, t2, t1._eval$1("ListBase.E"));
    },
    sort$0(receiver) {
      return this.sort$1(receiver, null);
    },
    shuffle$1(receiver, random) {
      var pos, tmp, _this = this,
        $length = _this.get$length(receiver);
      for (; $length > 1;) {
        pos = random.nextInt$1($length);
        --$length;
        tmp = _this.$index(receiver, $length);
        _this.$indexSet(receiver, $length, _this.$index(receiver, pos));
        _this.$indexSet(receiver, pos, tmp);
      }
    },
    asMap$0(receiver) {
      return new A.ListMapView(receiver, A.instanceType(receiver)._eval$1("ListMapView<ListBase.E>"));
    },
    $add(receiver, other) {
      var t1 = A.instanceType(receiver);
      t1._eval$1("List<ListBase.E>")._as(other);
      t1 = A.List_List$_of(receiver, t1._eval$1("ListBase.E"));
      B.JSArray_methods.addAll$1(t1, other);
      return t1;
    },
    sublist$2(receiver, start, end) {
      var t1,
        listLength = this.get$length(receiver);
      if (end == null)
        end = listLength;
      A.RangeError_checkValidRange(start, end, listLength);
      t1 = A.List_List$_of(this.getRange$2(receiver, start, end), A.instanceType(receiver)._eval$1("ListBase.E"));
      return t1;
    },
    getRange$2(receiver, start, end) {
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      return A.SubListIterable$(receiver, start, end, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    removeRange$2(receiver, start, end) {
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      if (end > start)
        this._closeGap$2(receiver, start, end);
    },
    fillRange$3(receiver, start, end, fill) {
      var value, i,
        t1 = A.instanceType(receiver);
      t1._eval$1("ListBase.E?")._as(fill);
      value = fill == null ? t1._eval$1("ListBase.E")._as(fill) : fill;
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, value);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, t1, i;
      A.instanceType(receiver)._eval$1("Iterable<ListBase.E>")._as(iterable);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    replaceRange$3(receiver, start, end, newContents) {
      var removeLength, t1, insertLength, insertEnd, i, element, oldLength, _this = this;
      A.instanceType(receiver)._eval$1("Iterable<ListBase.E>")._as(newContents);
      A.RangeError_checkValidRange(start, end, _this.get$length(receiver));
      if (start === _this.get$length(receiver)) {
        _this.addAll$1(receiver, newContents);
        return;
      }
      if (!type$.EfficientLengthIterable_dynamic._is(newContents))
        newContents = J.toList$0$ax(newContents);
      removeLength = end - start;
      t1 = J.getInterceptor$asx(newContents);
      insertLength = t1.get$length(newContents);
      if (removeLength >= insertLength) {
        insertEnd = start + insertLength;
        _this.setRange$3(receiver, start, insertEnd, newContents);
        if (removeLength > insertLength)
          _this._closeGap$2(receiver, insertEnd, end);
      } else if (end === _this.get$length(receiver))
        for (t1 = t1.get$iterator(newContents), i = start; t1.moveNext$0();) {
          element = t1.get$current();
          if (i < end)
            _this.$indexSet(receiver, i, element);
          else
            _this.add$1(receiver, element);
          ++i;
        }
      else {
        oldLength = _this.get$length(receiver);
        insertEnd = start + insertLength;
        for (i = oldLength - (insertLength - removeLength); i < oldLength; ++i)
          _this.add$1(receiver, _this.$index(receiver, i > 0 ? i : 0));
        if (insertEnd < oldLength)
          _this.setRange$4(receiver, insertEnd, oldLength, receiver, end);
        _this.setRange$3(receiver, start, insertEnd, newContents);
      }
    },
    indexOf$2(receiver, element, start) {
      var i;
      for (i = start; i < this.get$length(receiver); ++i)
        if (J.$eq$(this.$index(receiver, i), element))
          return i;
      return -1;
    },
    indexWhere$2(receiver, test, start) {
      var i;
      A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test);
      for (i = start; i < this.get$length(receiver); ++i)
        if (test.call$1(this.$index(receiver, i)))
          return i;
      return -1;
    },
    lastIndexOf$2(receiver, element, start) {
      var i;
      if (start == null || start >= this.get$length(receiver))
        start = this.get$length(receiver) - 1;
      for (i = start; i >= 0; --i)
        if (J.$eq$(this.$index(receiver, i), element))
          return i;
      return -1;
    },
    lastIndexWhere$2(receiver, test, start) {
      var i;
      A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test);
      if (start == null || start >= this.get$length(receiver))
        start = this.get$length(receiver) - 1;
      for (i = start; i >= 0; --i)
        if (test.call$1(this.$index(receiver, i)))
          return i;
      return -1;
    },
    insert$2(receiver, index, element) {
      var $length, _this = this;
      A.instanceType(receiver)._eval$1("ListBase.E")._as(element);
      A.checkNotNullable(index, "index", type$.int);
      $length = _this.get$length(receiver);
      A.RangeError_checkValueInInterval(index, 0, $length, "index");
      _this.add$1(receiver, element);
      if (index !== $length) {
        _this.setRange$4(receiver, index + 1, $length + 1, receiver, index);
        _this.$indexSet(receiver, index, element);
      }
    },
    removeAt$1(receiver, index) {
      var result = this.$index(receiver, index);
      this._closeGap$2(receiver, index, index + 1);
      return result;
    },
    insertAll$2(receiver, index, iterable) {
      var t1, insertionLength, oldLength, i, oldCopyStart, _this = this;
      A.instanceType(receiver)._eval$1("Iterable<ListBase.E>")._as(iterable);
      A.RangeError_checkValueInInterval(index, 0, _this.get$length(receiver), "index");
      if (index === _this.get$length(receiver)) {
        _this.addAll$1(receiver, iterable);
        return;
      }
      if (!type$.EfficientLengthIterable_dynamic._is(iterable))
        iterable = J.toList$0$ax(iterable);
      t1 = J.getInterceptor$asx(iterable);
      insertionLength = t1.get$length(iterable);
      if (insertionLength === 0)
        return;
      oldLength = _this.get$length(receiver);
      for (i = oldLength - insertionLength; i < oldLength; ++i)
        _this.add$1(receiver, _this.$index(receiver, i > 0 ? i : 0));
      if (t1.get$length(iterable) !== insertionLength) {
        _this.set$length(receiver, _this.get$length(receiver) - insertionLength);
        throw A.wrapException(A.ConcurrentModificationError$(iterable));
      }
      oldCopyStart = index + insertionLength;
      if (oldCopyStart < oldLength)
        _this.setRange$4(receiver, oldCopyStart, oldLength, receiver, index);
      _this.setAll$2(receiver, index, iterable);
    },
    setAll$2(receiver, index, iterable) {
      var t1, index0;
      A.instanceType(receiver)._eval$1("Iterable<ListBase.E>")._as(iterable);
      if (type$.List_dynamic._is(iterable))
        this.setRange$3(receiver, index, index + iterable.length, iterable);
      else
        for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0(); index = index0) {
          index0 = index + 1;
          this.$indexSet(receiver, index, t1.get$current());
        }
    },
    get$reversed(receiver) {
      return new A.ReversedListIterable(receiver, A.instanceType(receiver)._eval$1("ReversedListIterable<ListBase.E>"));
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.MapBase.prototype = {
    cast$2$0(_, $RK, $RV) {
      var t1 = A._instanceType(this);
      return A.Map_castFrom(this, t1._eval$1("MapBase.K"), t1._eval$1("MapBase.V"), $RK, $RV);
    },
    forEach$1(_, action) {
      var t2, key, t3,
        t1 = A._instanceType(this);
      t1._eval$1("~(MapBase.K,MapBase.V)")._as(action);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
      }
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<MapBase.K,MapBase.V>")._as(other).forEach$1(0, new A.MapBase_addAll_closure(this));
    },
    containsValue$1(value) {
      var t1;
      for (t1 = this.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        if (J.$eq$(this.$index(0, t1.get$current()), value))
          return true;
      return false;
    },
    putIfAbsent$2(key, ifAbsent) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("MapBase.K")._as(key);
      t1._eval$1("MapBase.V()")._as(ifAbsent);
      if (_this.containsKey$1(key)) {
        t2 = _this.$index(0, key);
        return t2 == null ? t1._eval$1("MapBase.V")._as(t2) : t2;
      }
      t1 = ifAbsent.call$0();
      _this.$indexSet(0, key, t1);
      return t1;
    },
    update$3$ifAbsent(key, update, ifAbsent) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("MapBase.K")._as(key);
      t1._eval$1("MapBase.V(MapBase.V)")._as(update);
      t1._eval$1("MapBase.V()?")._as(ifAbsent);
      if (_this.containsKey$1(key)) {
        t2 = _this.$index(0, key);
        t1 = update.call$1(t2 == null ? t1._eval$1("MapBase.V")._as(t2) : t2);
        _this.$indexSet(0, key, t1);
        return t1;
      }
      if (ifAbsent != null) {
        t1 = ifAbsent.call$0();
        _this.$indexSet(0, key, t1);
        return t1;
      }
      throw A.wrapException(A.ArgumentError$value(key, "key", "Key not in map."));
    },
    updateAll$1(update) {
      var t2, key, t3, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("MapBase.V(MapBase.K,MapBase.V)")._as(update);
      for (t2 = _this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = _this.$index(0, key);
        _this.$indexSet(0, key, update.call$2(key, t3 == null ? t1._as(t3) : t3));
      }
    },
    get$entries() {
      var t1 = this.get$keys();
      return t1.map$1$1(t1, new A.MapBase_entries_closure(this), A._instanceType(this)._eval$1("MapEntry<MapBase.K,MapBase.V>"));
    },
    map$2$1(_, transform, $K2, $V2) {
      var result, t2, key, t3, entry,
        t1 = A._instanceType(this);
      t1._bind$1($K2)._bind$1($V2)._eval$1("MapEntry<1,2>(MapBase.K,MapBase.V)")._as(transform);
      result = A.LinkedHashMap_LinkedHashMap$_empty($K2, $V2);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        entry = transform.call$2(key, t3 == null ? t1._as(t3) : t3);
        result.$indexSet(0, entry.key, entry.value);
      }
      return result;
    },
    map$1(_, transform) {
      var t1 = type$.dynamic;
      return this.map$2$1(0, transform, t1, t1);
    },
    addEntries$1(newEntries) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(A._instanceType(this)._eval$1("Iterable<MapEntry<MapBase.K,MapBase.V>>")._as(newEntries)); t1.moveNext$0();) {
        t2 = t1.get$current();
        this.$indexSet(0, t2.key, t2.value);
      }
    },
    removeWhere$1(_, test) {
      var keysToRemove, t2, key, t3, _i, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("bool(MapBase.K,MapBase.V)")._as(test);
      keysToRemove = A._setArrayType([], t1._eval$1("JSArray<MapBase.K>"));
      for (t2 = _this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = _this.$index(0, key);
        if (test.call$2(key, t3 == null ? t1._as(t3) : t3))
          B.JSArray_methods.add$1(keysToRemove, key);
      }
      for (t1 = keysToRemove.length, _i = 0; _i < keysToRemove.length; keysToRemove.length === t1 || (0, A.throwConcurrentModificationError)(keysToRemove), ++_i)
        _this.remove$1(0, keysToRemove[_i]);
    },
    containsKey$1(key) {
      var t1 = this.get$keys();
      return t1.contains$1(t1, key);
    },
    get$length(_) {
      var t1 = this.get$keys();
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this.get$keys();
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this.get$keys();
      return t1.get$isNotEmpty(t1);
    },
    get$values() {
      return new A._MapBaseValueIterable(this, A._instanceType(this)._eval$1("_MapBaseValueIterable<MapBase.K,MapBase.V>"));
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.MapBase_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1.$indexSet(0, t2._eval$1("MapBase.K")._as(key), t2._eval$1("MapBase.V")._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(MapBase.K,MapBase.V)");
    }
  };
  A.MapBase_entries_closure.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t2._eval$1("MapBase.K")._as(key);
      t1 = t1.$index(0, key);
      if (t1 == null)
        t1 = t2._eval$1("MapBase.V")._as(t1);
      return new A.MapEntry(key, t1, t2._eval$1("MapEntry<MapBase.K,MapBase.V>"));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("MapEntry<MapBase.K,MapBase.V>(MapBase.K)");
    }
  };
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = A.S(k);
      t1._contents = (t1._contents += t2) + ": ";
      t2 = A.S(v);
      t1._contents += t2;
    },
    $signature: 88
  };
  A.UnmodifiableMapBase.prototype = {};
  A._MapBaseValueIterable.prototype = {
    get$length(_) {
      var t1 = this._map;
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this._map;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._map;
      return t1.get$isNotEmpty(t1);
    },
    get$first(_) {
      var t1 = this._map,
        t2 = t1.get$keys();
      t2 = t1.$index(0, t2.get$first(t2));
      return t2 == null ? this.$ti._rest[1]._as(t2) : t2;
    },
    get$single(_) {
      var t1 = this._map,
        t2 = t1.get$keys();
      t2 = t1.$index(0, t2.get$single(t2));
      return t2 == null ? this.$ti._rest[1]._as(t2) : t2;
    },
    get$last(_) {
      var t1 = this._map,
        t2 = t1.get$keys();
      t2 = t1.$index(0, t2.get$last(t2));
      return t2 == null ? this.$ti._rest[1]._as(t2) : t2;
    },
    get$iterator(_) {
      var t1 = this._map,
        t2 = t1.get$keys();
      return new A._MapBaseValueIterator(t2.get$iterator(t2), t1, this.$ti._eval$1("_MapBaseValueIterator<1,2>"));
    }
  };
  A._MapBaseValueIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._keys;
      if (t1.moveNext$0()) {
        _this._collection$_current = _this._map.$index(0, t1.get$current());
        return true;
      }
      _this._collection$_current = null;
      return false;
    },
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    $isIterator: 1
  };
  A._UnmodifiableMapMixin.prototype = {
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._eval$1("_UnmodifiableMapMixin.K")._as(key);
      t1._eval$1("_UnmodifiableMapMixin.V")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<_UnmodifiableMapMixin.K,_UnmodifiableMapMixin.V>")._as(other);
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    addEntries$1(entries) {
      A._instanceType(this)._eval$1("Iterable<MapEntry<_UnmodifiableMapMixin.K,_UnmodifiableMapMixin.V>>")._as(entries);
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    clear$0(_) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    remove$1(_, key) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    removeWhere$1(_, test) {
      A._instanceType(this)._eval$1("bool(_UnmodifiableMapMixin.K,_UnmodifiableMapMixin.V)")._as(test);
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    putIfAbsent$2(key, ifAbsent) {
      var t1 = A._instanceType(this);
      t1._eval$1("_UnmodifiableMapMixin.K")._as(key);
      t1._eval$1("_UnmodifiableMapMixin.V()")._as(ifAbsent);
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    update$3$ifAbsent(key, update, ifAbsent) {
      var t1 = A._instanceType(this);
      t1._eval$1("_UnmodifiableMapMixin.K")._as(key);
      t1._eval$1("_UnmodifiableMapMixin.V(_UnmodifiableMapMixin.V)")._as(update);
      t1._eval$1("_UnmodifiableMapMixin.V()?")._as(ifAbsent);
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    updateAll$1(update) {
      A._instanceType(this)._eval$1("_UnmodifiableMapMixin.V(_UnmodifiableMapMixin.K,_UnmodifiableMapMixin.V)")._as(update);
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  A.MapView.prototype = {
    cast$2$0(_, $RK, $RV) {
      return this._map.cast$2$0(0, $RK, $RV);
    },
    $index(_, key) {
      return this._map.$index(0, key);
    },
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      this._map.$indexSet(0, t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    addAll$1(_, other) {
      this._map.addAll$1(0, A._instanceType(this)._eval$1("Map<1,2>")._as(other));
    },
    clear$0(_) {
      this._map.clear$0(0);
    },
    putIfAbsent$2(key, ifAbsent) {
      var t1 = A._instanceType(this);
      return this._map.putIfAbsent$2(t1._precomputed1._as(key), t1._eval$1("2()")._as(ifAbsent));
    },
    containsKey$1(key) {
      return this._map.containsKey$1(key);
    },
    containsValue$1(value) {
      return this._map.containsValue$1(value);
    },
    forEach$1(_, action) {
      this._map.forEach$1(0, A._instanceType(this)._eval$1("~(1,2)")._as(action));
    },
    get$isEmpty(_) {
      var t1 = this._map;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._map;
      return t1.get$isNotEmpty(t1);
    },
    get$length(_) {
      var t1 = this._map;
      return t1.get$length(t1);
    },
    get$keys() {
      return this._map.get$keys();
    },
    remove$1(_, key) {
      return this._map.remove$1(0, key);
    },
    toString$0(_) {
      return this._map.toString$0(0);
    },
    get$values() {
      return this._map.get$values();
    },
    get$entries() {
      return this._map.get$entries();
    },
    addEntries$1(entries) {
      this._map.addEntries$1(A._instanceType(this)._eval$1("Iterable<MapEntry<1,2>>")._as(entries));
    },
    map$2$1(_, transform, $K2, $V2) {
      return this._map.map$2$1(0, A._instanceType(this)._bind$1($K2)._bind$1($V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), $K2, $V2);
    },
    map$1(_, transform) {
      var t1 = type$.dynamic;
      return this.map$2$1(0, transform, t1, t1);
    },
    update$3$ifAbsent(key, update, ifAbsent) {
      var t1 = A._instanceType(this);
      return this._map.update$3$ifAbsent(t1._precomputed1._as(key), t1._eval$1("2(2)")._as(update), t1._eval$1("2()?")._as(ifAbsent));
    },
    updateAll$1(update) {
      this._map.updateAll$1(A._instanceType(this)._eval$1("2(1,2)")._as(update));
    },
    removeWhere$1(_, test) {
      this._map.removeWhere$1(0, A._instanceType(this)._eval$1("bool(1,2)")._as(test));
    },
    $isMap: 1
  };
  A.UnmodifiableMapView.prototype = {
    cast$2$0(_, $RK, $RV) {
      return new A.UnmodifiableMapView(this._map.cast$2$0(0, $RK, $RV), $RK._eval$1("@<0>")._bind$1($RV)._eval$1("UnmodifiableMapView<1,2>"));
    }
  };
  A.ListQueue.prototype = {
    cast$1$0(_, $R) {
      return new A.CastQueue(this, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastQueue<1,2>"));
    },
    get$iterator(_) {
      var _this = this;
      return new A._ListQueueIterator(_this, _this._collection$_tail, _this._modificationCount, _this._collection$_head, _this.$ti._eval$1("_ListQueueIterator<1>"));
    },
    get$isEmpty(_) {
      return this._collection$_head === this._collection$_tail;
    },
    get$length(_) {
      return (this._collection$_tail - this._collection$_head & this._collection$_table.length - 1) >>> 0;
    },
    get$first(_) {
      var t2, _this = this,
        t1 = _this._collection$_head;
      if (t1 === _this._collection$_tail)
        throw A.wrapException(A.IterableElementError_noElement());
      t2 = _this._collection$_table;
      if (!(t1 < t2.length))
        return A.ioore(t2, t1);
      t1 = t2[t1];
      return t1 == null ? _this.$ti._precomputed1._as(t1) : t1;
    },
    get$last(_) {
      var t3, _this = this,
        t1 = _this._collection$_head,
        t2 = _this._collection$_tail;
      if (t1 === t2)
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = _this._collection$_table;
      t3 = t1.length;
      t2 = (t2 - 1 & t3 - 1) >>> 0;
      if (!(t2 >= 0 && t2 < t3))
        return A.ioore(t1, t2);
      t2 = t1[t2];
      return t2 == null ? _this.$ti._precomputed1._as(t2) : t2;
    },
    get$single(_) {
      var t1, t2, _this = this;
      if (_this._collection$_head === _this._collection$_tail)
        throw A.wrapException(A.IterableElementError_noElement());
      if (_this.get$length(0) > 1)
        throw A.wrapException(A.IterableElementError_tooMany());
      t1 = _this._collection$_table;
      t2 = _this._collection$_head;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      t2 = t1[t2];
      return t2 == null ? _this.$ti._precomputed1._as(t2) : t2;
    },
    elementAt$1(_, index) {
      var t1, t2, t3, _this = this;
      A.IndexError_check(index, _this.get$length(0), _this);
      t1 = _this._collection$_table;
      t2 = t1.length;
      t3 = (_this._collection$_head + index & t2 - 1) >>> 0;
      if (!(t3 >= 0 && t3 < t2))
        return A.ioore(t1, t3);
      t3 = t1[t3];
      return t3 == null ? _this.$ti._precomputed1._as(t3) : t3;
    },
    toList$1$growable(_, growable) {
      var t1, list, i, t2, t3, _this = this,
        mask = _this._collection$_table.length - 1,
        $length = (_this._collection$_tail - _this._collection$_head & mask) >>> 0;
      if ($length === 0) {
        t1 = J.JSArray_JSArray$growable(0, _this.$ti._precomputed1);
        return t1;
      }
      t1 = _this.$ti._precomputed1;
      list = A.List_List$filled($length, _this.get$first(0), true, t1);
      for (i = 0; i < $length; ++i) {
        t2 = _this._collection$_table;
        t3 = (_this._collection$_head + i & mask) >>> 0;
        if (!(t3 < t2.length))
          return A.ioore(t2, t3);
        t3 = t2[t3];
        B.JSArray_methods.$indexSet(list, i, t3 == null ? t1._as(t3) : t3);
      }
      return list;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    _filterWhere$2(test, removeMatching) {
      var modificationCount, i, t2, element, _this = this,
        t1 = _this.$ti;
      t1._eval$1("bool(1)")._as(test);
      modificationCount = _this._modificationCount;
      i = _this._collection$_head;
      for (t1 = t1._precomputed1; i !== _this._collection$_tail;) {
        t2 = _this._collection$_table;
        if (!(i >= 0 && i < t2.length))
          return A.ioore(t2, i);
        element = t2[i];
        t2 = test.call$1(element == null ? t1._as(element) : element);
        if (modificationCount !== _this._modificationCount)
          A.throwExpression(A.ConcurrentModificationError$(_this));
        if (true === t2) {
          i = _this._remove$1(i);
          modificationCount = ++_this._modificationCount;
        } else
          i = (i + 1 & _this._collection$_table.length - 1) >>> 0;
      }
    },
    clear$0(_) {
      var _this = this,
        i = _this._collection$_head;
      if (i !== _this._collection$_tail) {
        for (; i !== _this._collection$_tail; i = (i + 1 & _this._collection$_table.length - 1) >>> 0)
          B.JSArray_methods.$indexSet(_this._collection$_table, i, null);
        _this._collection$_head = _this._collection$_tail = 0;
        ++_this._modificationCount;
      }
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    removeFirst$0() {
      var t2, result, _this = this,
        t1 = _this._collection$_head;
      if (t1 === _this._collection$_tail)
        throw A.wrapException(A.IterableElementError_noElement());
      ++_this._modificationCount;
      t2 = _this._collection$_table;
      if (!(t1 < t2.length))
        return A.ioore(t2, t1);
      result = t2[t1];
      if (result == null)
        result = _this.$ti._precomputed1._as(result);
      B.JSArray_methods.$indexSet(t2, t1, null);
      _this._collection$_head = (_this._collection$_head + 1 & _this._collection$_table.length - 1) >>> 0;
      return result;
    },
    _collection$_add$1(element) {
      var t2, t3, newTable, split, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(element);
      B.JSArray_methods.$indexSet(_this._collection$_table, _this._collection$_tail, element);
      t2 = _this._collection$_tail;
      t3 = _this._collection$_table.length;
      t2 = (t2 + 1 & t3 - 1) >>> 0;
      _this._collection$_tail = t2;
      if (_this._collection$_head === t2) {
        newTable = A.List_List$filled(t3 * 2, null, false, t1._eval$1("1?"));
        t1 = _this._collection$_table;
        t2 = _this._collection$_head;
        split = t1.length - t2;
        B.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        B.JSArray_methods.setRange$4(newTable, split, split + _this._collection$_head, _this._collection$_table, 0);
        _this._collection$_head = 0;
        _this._collection$_tail = _this._collection$_table.length;
        _this._collection$_table = newTable;
      }
      ++_this._modificationCount;
    },
    _remove$1(offset) {
      var i, prevOffset, nextOffset, _this = this,
        mask = _this._collection$_table.length - 1,
        t1 = _this._collection$_head,
        t2 = _this._collection$_tail;
      if ((offset - t1 & mask) >>> 0 < (t2 - offset & mask) >>> 0) {
        for (i = offset; t1 = _this._collection$_head, i !== t1; i = prevOffset) {
          prevOffset = (i - 1 & mask) >>> 0;
          t1 = _this._collection$_table;
          if (!(prevOffset >= 0 && prevOffset < t1.length))
            return A.ioore(t1, prevOffset);
          t2 = t1[prevOffset];
          if (!(i >= 0 && i < t1.length))
            return A.ioore(t1, i);
          t1[i] = t2;
        }
        B.JSArray_methods.$indexSet(_this._collection$_table, t1, null);
        _this._collection$_head = (_this._collection$_head + 1 & mask) >>> 0;
        return (offset + 1 & mask) >>> 0;
      } else {
        _this._collection$_tail = (t2 - 1 & mask) >>> 0;
        for (i = offset; t1 = _this._collection$_tail, i !== t1; i = nextOffset) {
          nextOffset = (i + 1 & mask) >>> 0;
          t1 = _this._collection$_table;
          if (!(nextOffset >= 0 && nextOffset < t1.length))
            return A.ioore(t1, nextOffset);
          t2 = t1[nextOffset];
          if (!(i >= 0 && i < t1.length))
            return A.ioore(t1, i);
          t1[i] = t2;
        }
        B.JSArray_methods.$indexSet(_this._collection$_table, t1, null);
        return offset;
      }
    },
    $isQueue: 1
  };
  A._ListQueueIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, t3, _this = this,
        t1 = _this._queue;
      if (_this._modificationCount !== t1._modificationCount)
        A.throwExpression(A.ConcurrentModificationError$(t1));
      t2 = _this._position;
      if (t2 === _this._end) {
        _this._collection$_current = null;
        return false;
      }
      t1 = t1._collection$_table;
      t3 = t1.length;
      if (!(t2 < t3))
        return A.ioore(t1, t2);
      _this._collection$_current = t1[t2];
      _this._position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    },
    $isIterator: 1
  };
  A.SetBase.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    cast$1$0(_, $R) {
      return A.Set_castFrom(this, null, A._instanceType(this)._precomputed1, $R);
    },
    addAll$1(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(A._instanceType(this)._eval$1("Iterable<1>")._as(elements)); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    union$1(other) {
      var t1;
      A._instanceType(this)._eval$1("Set<1>")._as(other);
      t1 = this.toSet$0(0);
      t1.addAll$1(0, other);
      return t1;
    },
    toList$1$growable(_, growable) {
      var t1 = A.List_List$_of(this, A._instanceType(this)._precomputed1);
      return t1;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    map$1$1(_, f, $T) {
      var t1 = A._instanceType(this);
      return new A.EfficientLengthMappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    map$1(_, f) {
      return this.map$1$1(0, f, type$.dynamic);
    },
    get$single(_) {
      var it, _this = this;
      if (_this.get$length(_this) > 1)
        throw A.wrapException(A.IterableElementError_tooMany());
      it = _this.get$iterator(_this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    where$1(_, f) {
      var t1 = A._instanceType(this);
      return new A.WhereIterable(this, t1._eval$1("bool(1)")._as(f), t1._eval$1("WhereIterable<1>"));
    },
    fold$1$2(_, initialValue, combine, $T) {
      var t1, value;
      $T._as(initialValue);
      A._instanceType(this)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    every$1(_, f) {
      var t1;
      A._instanceType(this)._eval$1("bool(1)")._as(f);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (!f.call$1(t1.get$current()))
          return false;
      return true;
    },
    any$1(_, test) {
      var t1;
      A._instanceType(this)._eval$1("bool(1)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (test.call$1(t1.get$current()))
          return true;
      return false;
    },
    take$1(_, n) {
      return A.TakeIterable_TakeIterable(this, n, A._instanceType(this)._precomputed1);
    },
    skip$1(_, n) {
      return A.SkipIterable_SkipIterable(this, n, A._instanceType(this)._precomputed1);
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    get$last(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    lastWhere$2$orElse(_, test, orElse) {
      var iterator, result, current,
        t1 = A._instanceType(this);
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()?")._as(orElse);
      iterator = this.get$iterator(this);
      do {
        if (!iterator.moveNext$0()) {
          if (orElse != null)
            return orElse.call$0();
          throw A.wrapException(A.IterableElementError_noElement());
        }
        result = iterator.get$current();
      } while (!test.call$1(result));
      for (; iterator.moveNext$0();) {
        current = iterator.get$current();
        if (test.call$1(current))
          result = current;
      }
      return result;
    },
    elementAt$1(_, index) {
      var iterator, skipCount;
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(this);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0)
          return iterator.get$current();
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, null, "index"));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  A._SetBase.prototype = {
    cast$1$0(_, $R) {
      return A.Set_castFrom(this, this.get$_newSimilarSet(), A._instanceType(this)._precomputed1, $R);
    },
    toSet$0(_) {
      var t1 = this._newSet$0();
      t1.addAll$1(0, this);
      return t1;
    }
  };
  A._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  A._Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 145
  };
  A._Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 145
  };
  A.AsciiCodec.prototype = {
    encode$1(source) {
      return B.AsciiEncoder_127.convert$1(source);
    }
  };
  A._UnicodeSubsetEncoder.prototype = {
    convert$1(string) {
      var stringLength, end, result, t1, i, codeUnit;
      A._asString(string);
      stringLength = string.length;
      end = A.RangeError_checkValidRange(0, null, stringLength);
      result = new Uint8Array(end);
      for (t1 = ~this._subsetMask, i = 0; i < end; ++i) {
        if (!(i < stringLength))
          return A.ioore(string, i);
        codeUnit = string.charCodeAt(i);
        if ((codeUnit & t1) !== 0)
          throw A.wrapException(A.ArgumentError$value(string, "string", "Contains invalid characters."));
        if (!(i < end))
          return A.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    }
  };
  A.AsciiEncoder.prototype = {};
  A.Base64Codec.prototype = {
    get$encoder() {
      return B.C_Base64Encoder;
    },
    normalize$3(source, start, end) {
      var inverseAlphabet, t2, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, t3, digit2, char0, value, t4, endLength, $length,
        _s64_ = string$.ABCDEF,
        _s31_ = "Invalid base64 encoding length ",
        t1 = source.length;
      end = A.RangeError_checkValidRange(start, end, t1);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t2 = inverseAlphabet.length, i = start, sliceStart = i, buffer = null, firstPadding = -1, firstPaddingSourceIndex = -1, paddingCount = 0; i < end; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(source, i);
        char = source.charCodeAt(i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            if (!(i0 < t1))
              return A.ioore(source, i0);
            digit1 = A.hexDigitValue(source.charCodeAt(i0));
            t3 = i0 + 1;
            if (!(t3 < t1))
              return A.ioore(source, t3);
            digit2 = A.hexDigitValue(source.charCodeAt(t3));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          if (!(char0 >= 0 && char0 < t2))
            return A.ioore(inverseAlphabet, char0);
          value = inverseAlphabet[char0];
          if (value >= 0) {
            if (!(value < 64))
              return A.ioore(_s64_, value);
            char0 = _s64_.charCodeAt(value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t3 = buffer == null ? null : buffer._contents.length;
                if (t3 == null)
                  t3 = 0;
                firstPadding = t3 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t3 = buffer;
            } else
              t3 = buffer;
            t3._contents += B.JSString_methods.substring$2(source, sliceStart, i);
            t4 = A.Primitives_stringFromCharCode(char);
            t3._contents += t4;
            sliceStart = i0;
            continue;
          }
        }
        throw A.wrapException(A.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = B.JSString_methods.substring$2(source, sliceStart, end);
        t1 = buffer._contents += t1;
        t2 = t1.length;
        if (firstPadding >= 0)
          A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = B.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw A.wrapException(A.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return B.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = B.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw A.wrapException(A.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = B.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    }
  };
  A.Base64Encoder.prototype = {
    convert$1(input) {
      var t1;
      type$.List_int._as(input);
      t1 = J.getInterceptor$asx(input);
      if (t1.get$isEmpty(input))
        return "";
      t1 = new A._Base64Encoder(string$.ABCDEF).encode$4(input, 0, t1.get$length(input), true);
      t1.toString;
      return A.String_String$fromCharCodes(t1, 0, null);
    }
  };
  A._Base64Encoder.prototype = {
    encode$4(bytes, start, end, isLast) {
      var t1, byteCount, fullChunks, bufferLength, output;
      type$.List_int._as(bytes);
      t1 = this._convert$_state;
      byteCount = (t1 & 3) + (end - start);
      fullChunks = B.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = new Uint8Array(bufferLength);
      this._convert$_state = A._Base64Encoder_encodeChunk(this._alphabet, bytes, start, end, true, output, 0, t1);
      if (bufferLength > 0)
        return output;
      return null;
    }
  };
  A.Codec.prototype = {};
  A._FusedCodec.prototype = {};
  A.Converter.prototype = {};
  A.Encoding.prototype = {};
  A.JsonUnsupportedObjectError.prototype = {
    toString$0(_) {
      var safeString = A.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  A.JsonCyclicError.prototype = {
    toString$0(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  A.JsonCodec.prototype = {
    encode$2$toEncodable(value, toEncodable) {
      var t1 = this.get$encoder();
      t1 = A._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
      return t1;
    },
    get$encoder() {
      return B.JsonEncoder_null_null;
    }
  };
  A.JsonEncoder.prototype = {};
  A._JsonStringifier.prototype = {
    writeStringContent$1(s) {
      var offset, i, charCode, t1, t2, _this = this,
        $length = s.length;
      for (offset = 0, i = 0; i < $length; ++i) {
        charCode = s.charCodeAt(i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t1 = charCode & 64512;
            if (t1 === 55296) {
              t2 = i + 1;
              t2 = !(t2 < $length && (s.charCodeAt(t2) & 64512) === 56320);
            } else
              t2 = false;
            if (!t2)
              if (t1 === 56320) {
                t1 = i - 1;
                t1 = !(t1 >= 0 && (s.charCodeAt(t1) & 64512) === 55296);
              } else
                t1 = false;
            else
              t1 = true;
            if (t1) {
              if (i > offset)
                _this.writeStringSlice$3(s, offset, i);
              offset = i + 1;
              _this.writeCharCode$1(92);
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(100);
              t1 = charCode >>> 8 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          switch (charCode) {
            case 8:
              _this.writeCharCode$1(98);
              break;
            case 9:
              _this.writeCharCode$1(116);
              break;
            case 10:
              _this.writeCharCode$1(110);
              break;
            case 12:
              _this.writeCharCode$1(102);
              break;
            case 13:
              _this.writeCharCode$1(114);
              break;
            default:
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(48);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          _this.writeCharCode$1(charCode);
        }
      }
      if (offset === 0)
        _this.writeString$1(s);
      else if (offset < $length)
        _this.writeStringSlice$3(s, offset, $length);
    },
    _checkCycle$1(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw A.wrapException(new A.JsonCyclicError(object, null));
      }
      B.JSArray_methods.add$1(t1, object);
    },
    writeObject$1(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = A.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw A.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw A.wrapException(t1);
      }
    },
    writeJsonValue$1(object) {
      var t1, success, _this = this;
      if (typeof object == "number") {
        if (!isFinite(object))
          return false;
        _this.writeNumber$1(object);
        return true;
      } else if (object === true) {
        _this.writeString$1("true");
        return true;
      } else if (object === false) {
        _this.writeString$1("false");
        return true;
      } else if (object == null) {
        _this.writeString$1("null");
        return true;
      } else if (typeof object == "string") {
        _this.writeString$1('"');
        _this.writeStringContent$1(object);
        _this.writeString$1('"');
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return success;
      } else
        return false;
    },
    writeList$1(list) {
      var t1, i, _this = this;
      _this.writeString$1("[");
      t1 = J.getInterceptor$asx(list);
      if (t1.get$isNotEmpty(list)) {
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          _this.writeString$1(",");
          _this.writeObject$1(t1.$index(list, i));
        }
      }
      _this.writeString$1("]");
    },
    writeMap$1(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = A.List_List$filled(t1, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new A._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{");
      for (separator = '"'; i < t1; i += 2, separator = ',"') {
        _this.writeString$1(separator);
        _this.writeStringContent$1(A._asString(keyValueList[i]));
        _this.writeString$1('":');
        t2 = i + 1;
        if (!(t2 < t1))
          return A.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      _this.writeString$1("}");
      return true;
    }
  };
  A._JsonStringifier_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      B.JSArray_methods.$indexSet(t1, t2.i++, key);
      B.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 88
  };
  A._JsonPrettyPrintMixin.prototype = {
    writeList$1(list) {
      var i, _this = this,
        t1 = J.getInterceptor$asx(list);
      if (t1.get$isEmpty(list))
        _this.writeString$1("[]");
      else {
        _this.writeString$1("[\n");
        _this.writeIndentation$1(++_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          _this.writeString$1(",\n");
          _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
          _this.writeObject$1(t1.$index(list, i));
        }
        _this.writeString$1("\n");
        _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1("]");
      }
    },
    writeMap$1(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = A.List_List$filled(t1, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new A._JsonPrettyPrintMixin_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{\n");
      ++_this._JsonPrettyPrintMixin__indentLevel;
      for (separator = ""; i < t1; i += 2, separator = ",\n") {
        _this.writeString$1(separator);
        _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1('"');
        _this.writeStringContent$1(A._asString(keyValueList[i]));
        _this.writeString$1('": ');
        t2 = i + 1;
        if (!(t2 < t1))
          return A.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      _this.writeString$1("\n");
      _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
      _this.writeString$1("}");
      return true;
    }
  };
  A._JsonPrettyPrintMixin_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      B.JSArray_methods.$indexSet(t1, t2.i++, key);
      B.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 88
  };
  A._JsonStringStringifier.prototype = {
    get$_partialResult() {
      var t1 = this._sink._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    writeNumber$1(number) {
      this._sink._contents += B.JSNumber_methods.toString$0(number);
    },
    writeString$1(string) {
      this._sink._contents += string;
    },
    writeStringSlice$3(string, start, end) {
      this._sink._contents += B.JSString_methods.substring$2(string, start, end);
    },
    writeCharCode$1(charCode) {
      var t1 = this._sink,
        t2 = A.Primitives_stringFromCharCode(charCode);
      t1._contents += t2;
    }
  };
  A._JsonStringStringifierPretty.prototype = {
    writeIndentation$1(count) {
      var t1, t2, i;
      for (t1 = this._indent, t2 = this._sink, i = 0; i < count; ++i)
        t2._contents += t1;
    }
  };
  A.Utf8Codec.prototype = {};
  A.Utf8Encoder.prototype = {
    convert$1(string) {
      var stringLength, end, t1, encoder, t2;
      A._asString(string);
      stringLength = string.length;
      end = A.RangeError_checkValidRange(0, null, stringLength);
      if (end === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array(end * 3);
      encoder = new A._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        t2 = end - 1;
        if (!(t2 >= 0 && t2 < stringLength))
          return A.ioore(string, t2);
        encoder._writeReplacementCharacter$0();
      }
      return B.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    }
  };
  A._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var t4, _this = this,
        t1 = _this._convert$_buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1;
      t1.$flags & 2 && A.throwUnsupportedOperation(t1);
      t4 = t1.length;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      if (!(t3 < t4))
        return A.ioore(t1, t3);
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, t4, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._convert$_buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t4 = t1.length;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1, t2, t3, t4, stringIndex, codeUnit, t5, t6, _this = this;
      if (start !== end) {
        t1 = end - 1;
        if (!(t1 >= 0 && t1 < str.length))
          return A.ioore(str, t1);
        t1 = (str.charCodeAt(t1) & 64512) === 55296;
      } else
        t1 = false;
      if (t1)
        --end;
      for (t1 = _this._convert$_buffer, t2 = t1.$flags | 0, t3 = t1.length, t4 = str.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        if (!(stringIndex < t4))
          return A.ioore(str, stringIndex);
        codeUnit = str.charCodeAt(stringIndex);
        if (codeUnit <= 127) {
          t5 = _this._bufferIndex;
          if (t5 >= t3)
            break;
          _this._bufferIndex = t5 + 1;
          t2 & 2 && A.throwUnsupportedOperation(t1);
          t1[t5] = codeUnit;
        } else {
          t5 = codeUnit & 64512;
          if (t5 === 55296) {
            if (_this._bufferIndex + 4 > t3)
              break;
            t5 = stringIndex + 1;
            if (!(t5 < t4))
              return A.ioore(str, t5);
            if (_this._writeSurrogate$2(codeUnit, str.charCodeAt(t5)))
              stringIndex = t5;
          } else if (t5 === 56320) {
            if (_this._bufferIndex + 3 > t3)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t5 = _this._bufferIndex;
            t6 = t5 + 1;
            if (t6 >= t3)
              break;
            _this._bufferIndex = t6;
            t2 & 2 && A.throwUnsupportedOperation(t1);
            if (!(t5 < t3))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t6 + 1;
            t1[t6] = codeUnit & 63 | 128;
          } else {
            t5 = _this._bufferIndex;
            if (t5 + 2 >= t3)
              break;
            t6 = _this._bufferIndex = t5 + 1;
            t2 & 2 && A.throwUnsupportedOperation(t1);
            if (!(t5 < t3))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit >>> 12 | 224;
            t5 = _this._bufferIndex = t6 + 1;
            if (!(t6 < t3))
              return A.ioore(t1, t6);
            t1[t6] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t5 + 1;
            if (!(t5 < t3))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  A.Utf8Decoder.prototype = {
    convert$1(codeUnits) {
      return new A._Utf8Decoder(this._allowMalformed)._convertGeneral$4(type$.List_int._as(codeUnits), 0, null, true);
    }
  };
  A._Utf8Decoder.prototype = {
    _convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var end, casted, bytes, errorOffset, t1, result, message, _this = this;
      type$.List_int._as(codeUnits);
      end = A.RangeError_checkValidRange(start, maybeEnd, J.get$length$asx(codeUnits));
      if (start === end)
        return "";
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        bytes = casted;
        errorOffset = 0;
      } else {
        bytes = A._Utf8Decoder__makeNativeUint8List(codeUnits, start, end);
        end -= start;
        errorOffset = start;
        start = 0;
      }
      if (end - start >= 15) {
        t1 = _this.allowMalformed;
        result = A._Utf8Decoder__convertInterceptedUint8List(t1, bytes, start, end);
        if (result != null) {
          if (!t1)
            return result;
          if (result.indexOf("\ufffd") < 0)
            return result;
        }
      }
      result = _this._decodeRecursive$4(bytes, start, end, true);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = A._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw A.wrapException(A.FormatException$(message, codeUnits, errorOffset + _this._charOrIndex));
      }
      return result;
    },
    _decodeRecursive$4(bytes, start, end, single) {
      var mid, s1, _this = this;
      if (end - start > 1000) {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._decodeRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0)
          return s1;
        return s1 + _this._decodeRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    decodeGeneral$4(bytes, start, end, single) {
      var byte, t2, type, t3, i0, markEnd, i1, m, _this = this,
        _s256_ = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE",
        _s144_ = " \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA",
        _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new A.StringBuffer(""),
        i = start + 1,
        t1 = bytes.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(bytes, start);
      byte = bytes[start];
      $label0$0:
        for (t2 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            if (!(byte >= 0 && byte < 256))
              return A.ioore(_s256_, byte);
            type = _s256_.charCodeAt(byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            t3 = state + type;
            if (!(t3 >= 0 && t3 < 144))
              return A.ioore(_s144_, t3);
            state = _s144_.charCodeAt(t3);
            if (state === 0) {
              t3 = A.Primitives_stringFromCharCode(char);
              buffer._contents += t3;
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t2)
                switch (state) {
                  case 69:
                  case 67:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents += t3;
                    break;
                  case 65:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents += t3;
                    --i;
                    break;
                  default:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents = (buffer._contents += t3) + t3;
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
              return A.ioore(bytes, i);
            byte = bytes[i];
          }
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(bytes, i);
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              if (!(i0 >= 0 && i0 < t1))
                return A.ioore(bytes, i0);
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m) {
                if (!(m < t1))
                  return A.ioore(bytes, m);
                t3 = A.Primitives_stringFromCharCode(bytes[m]);
                buffer._contents += t3;
              }
            else {
              t3 = A.String_String$fromCharCodes(bytes, i, markEnd);
              buffer._contents += t3;
            }
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t2) {
          t1 = A.Primitives_stringFromCharCode(_65533);
          buffer._contents += t1;
        } else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin.prototype = {};
  A._BigIntImpl.prototype = {
    $negate(_) {
      var t2, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return _this;
      t2 = !_this._isNegative;
      t3 = _this._digits;
      t1 = A._BigIntImpl__normalize(t1, t3);
      return new A._BigIntImpl(t1 === 0 ? false : t2, t3, t1);
    },
    _drShift$1(n) {
      var resultUsed, digits, resultDigits, t1, i, t2, t3, result, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used - n;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, i = n; i < used; ++i) {
        t2 = i - n;
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t2 = _this._isNegative;
      t3 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t3 === 0 ? false : t2, resultDigits, t3);
      if (t2)
        for (i = 0; i < n; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      return result;
    },
    $shr(_, shiftAmount) {
      var t1, digitShift, bitShift, resultUsed, digits, resultDigits, t2, result, i, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      bitShift = B.JSInt_methods.$mod(shiftAmount, 16);
      if (bitShift === 0)
        return _this._drShift$1(digitShift);
      resultUsed = t1 - digitShift;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__rsh(digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
      if (t1) {
        t1 = digits.length;
        if (!(digitShift >= 0 && digitShift < t1))
          return A.ioore(digits, digitShift);
        if ((digits[digitShift] & B.JSInt_methods.$shl(1, bitShift) - 1) >>> 0 !== 0)
          return result.$sub(0, $.$get$_BigIntImpl_one());
        for (i = 0; i < digitShift; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      }
      return result;
    },
    compareTo$1(_, other) {
      var t1, result;
      type$._BigIntImpl._as(other);
      t1 = this._isNegative;
      if (t1 === other._isNegative) {
        result = A._BigIntImpl__compareDigits(this._digits, this._used, other._digits, other._used);
        return t1 ? 0 - result : result;
      }
      return t1 ? -1 : 1;
    },
    _absAddSetSign$2(other, isNegative) {
      var resultUsed, resultDigits, t1, _this = this,
        used = _this._used,
        otherUsed = other._used;
      if (used < otherUsed)
        return other._absAddSetSign$2(_this, isNegative);
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultUsed = used + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__absAdd(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absSubSetSign$2(other, isNegative) {
      var otherUsed, resultDigits, t1, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      otherUsed = other._used;
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultDigits = new Uint16Array(used);
      A._BigIntImpl__absSub(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(used, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    $add(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other;
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative === other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $sub(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other.$negate(0);
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative !== other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $mul(_, other) {
      var resultUsed, digits, otherDigits, resultDigits, t1, i, t2,
        used = this._used,
        otherUsed = other._used;
      if (used === 0 || otherUsed === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + otherUsed;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (!(i < t1))
          return A.ioore(otherDigits, i);
        A._BigIntImpl__mulAdd(otherDigits[i], digits, 0, resultDigits, i, used);
        ++i;
      }
      t1 = this._isNegative !== other._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _div$1(other) {
      var lastQuo_used, quo_digits, t1, quo;
      if (this._used < other._used)
        return $.$get$_BigIntImpl_zero();
      this._divRem$1(other);
      lastQuo_used = $._BigIntImpl____lastQuoRemUsed._readField$0() - $._BigIntImpl____lastRemUsed._readField$0();
      quo_digits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastQuoRemUsed._readField$0(), lastQuo_used);
      t1 = A._BigIntImpl__normalize(lastQuo_used, quo_digits);
      quo = new A._BigIntImpl(false, quo_digits, t1);
      return this._isNegative !== other._isNegative && t1 > 0 ? quo.$negate(0) : quo;
    },
    _rem$1(other) {
      var remDigits, t1, rem, _this = this;
      if (_this._used < other._used)
        return _this;
      _this._divRem$1(other);
      remDigits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), 0, $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastRemUsed._readField$0());
      t1 = A._BigIntImpl__normalize($._BigIntImpl____lastRemUsed._readField$0(), remDigits);
      rem = new A._BigIntImpl(false, remDigits, t1);
      if ($._BigIntImpl____lastRem_nsh._readField$0() > 0)
        rem = rem.$shr(0, $._BigIntImpl____lastRem_nsh._readField$0());
      return _this._isNegative && rem._used > 0 ? rem.$negate(0) : rem;
    },
    _divRem$1(other) {
      var yDigits, yUsed, t1, nsh, yDigits0, yUsed0, resultDigits, resultUsed0, topDigitDivisor, j, tmpDigits, tmpUsed, resultUsed1, nyDigits, i, estimatedQuotientDigit, _this = this,
        resultUsed = _this._used;
      if (resultUsed === $._BigIntImpl__lastDividendUsed && other._used === $._BigIntImpl__lastDivisorUsed && _this._digits === $._BigIntImpl__lastDividendDigits && other._digits === $._BigIntImpl__lastDivisorDigits)
        return;
      yDigits = other._digits;
      yUsed = other._used;
      t1 = yUsed - 1;
      if (!(t1 >= 0 && t1 < yDigits.length))
        return A.ioore(yDigits, t1);
      nsh = 16 - B.JSInt_methods.get$bitLength(yDigits[t1]);
      if (nsh > 0) {
        yDigits0 = new Uint16Array(yUsed + 5);
        yUsed0 = A._BigIntImpl__lShiftDigits(yDigits, yUsed, nsh, yDigits0);
        resultDigits = new Uint16Array(resultUsed + 5);
        resultUsed0 = A._BigIntImpl__lShiftDigits(_this._digits, resultUsed, nsh, resultDigits);
      } else {
        resultDigits = A._BigIntImpl__cloneDigits(_this._digits, 0, resultUsed, resultUsed + 2);
        yUsed0 = yUsed;
        yDigits0 = yDigits;
        resultUsed0 = resultUsed;
      }
      t1 = yUsed0 - 1;
      if (!(t1 >= 0 && t1 < yDigits0.length))
        return A.ioore(yDigits0, t1);
      topDigitDivisor = yDigits0[t1];
      j = resultUsed0 - yUsed0;
      tmpDigits = new Uint16Array(resultUsed0);
      tmpUsed = A._BigIntImpl__dlShiftDigits(yDigits0, yUsed0, j, tmpDigits);
      resultUsed1 = resultUsed0 + 1;
      t1 = resultDigits.$flags | 0;
      if (A._BigIntImpl__compareDigits(resultDigits, resultUsed0, tmpDigits, tmpUsed) >= 0) {
        t1 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(resultUsed0 >= 0 && resultUsed0 < resultDigits.length))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 1;
        A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
      } else {
        t1 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(resultUsed0 >= 0 && resultUsed0 < resultDigits.length))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 0;
      }
      t1 = yUsed0 + 2;
      nyDigits = new Uint16Array(t1);
      if (!(yUsed0 >= 0 && yUsed0 < t1))
        return A.ioore(nyDigits, yUsed0);
      nyDigits[yUsed0] = 1;
      A._BigIntImpl__absSub(nyDigits, yUsed0 + 1, yDigits0, yUsed0, nyDigits);
      i = resultUsed0 - 1;
      for (t1 = resultDigits.length; j > 0;) {
        estimatedQuotientDigit = A._BigIntImpl__estimateQuotientDigit(topDigitDivisor, resultDigits, i);
        --j;
        A._BigIntImpl__mulAdd(estimatedQuotientDigit, nyDigits, 0, resultDigits, j, yUsed0);
        if (!(i >= 0 && i < t1))
          return A.ioore(resultDigits, i);
        if (resultDigits[i] < estimatedQuotientDigit) {
          tmpUsed = A._BigIntImpl__dlShiftDigits(nyDigits, yUsed0, j, tmpDigits);
          A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
          for (; --estimatedQuotientDigit, resultDigits[i] < estimatedQuotientDigit;)
            A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
        }
        --i;
      }
      $._BigIntImpl__lastDividendDigits = _this._digits;
      $._BigIntImpl__lastDividendUsed = resultUsed;
      $._BigIntImpl__lastDivisorDigits = yDigits;
      $._BigIntImpl__lastDivisorUsed = yUsed;
      $._BigIntImpl____lastQuoRemDigits._value = resultDigits;
      $._BigIntImpl____lastQuoRemUsed._value = resultUsed1;
      $._BigIntImpl____lastRemUsed._value = yUsed0;
      $._BigIntImpl____lastRem_nsh._value = nsh;
    },
    get$hashCode(_) {
      var hash, t2, t3, i,
        combine = new A._BigIntImpl_hashCode_combine(),
        t1 = this._used;
      if (t1 === 0)
        return 6707;
      hash = this._isNegative ? 83585 : 429689;
      for (t2 = this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        hash = combine.call$2(hash, t2[i]);
      }
      return new A._BigIntImpl_hashCode_finish().call$1(hash);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._BigIntImpl && this.compareTo$1(0, other) === 0;
    },
    $lt(_, other) {
      return this.compareTo$1(0, type$._BigIntImpl._as(other)) < 0;
    },
    $gt(_, other) {
      return this.compareTo$1(0, type$._BigIntImpl._as(other)) > 0;
    },
    toInt$0(_) {
      var i, t1, t2, result;
      for (i = this._used - 1, t1 = this._digits, t2 = t1.length, result = 0; i >= 0; --i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        result = result * 65536 + t1[i];
      }
      return this._isNegative ? -result : result;
    },
    toString$0(_) {
      var decimalDigitChunks, rest, t2, digits4, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        if (_this._isNegative) {
          t1 = _this._digits;
          if (0 >= t1.length)
            return A.ioore(t1, 0);
          return B.JSInt_methods.toString$0(-t1[0]);
        }
        t1 = _this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        return B.JSInt_methods.toString$0(t1[0]);
      }
      decimalDigitChunks = A._setArrayType([], type$.JSArray_String);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (; rest._used > 1;) {
        t2 = $.$get$_BigIntImpl__bigInt10000();
        if (t2._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        digits4 = rest._rem$1(t2).toString$0(0);
        B.JSArray_methods.add$1(decimalDigitChunks, digits4);
        t3 = digits4.length;
        if (t3 === 1)
          B.JSArray_methods.add$1(decimalDigitChunks, "000");
        if (t3 === 2)
          B.JSArray_methods.add$1(decimalDigitChunks, "00");
        if (t3 === 3)
          B.JSArray_methods.add$1(decimalDigitChunks, "0");
        rest = rest._div$1(t2);
      }
      t2 = rest._digits;
      if (0 >= t2.length)
        return A.ioore(t2, 0);
      B.JSArray_methods.add$1(decimalDigitChunks, B.JSInt_methods.toString$0(t2[0]));
      if (t1)
        B.JSArray_methods.add$1(decimalDigitChunks, "-");
      return new A.ReversedListIterable(decimalDigitChunks, type$.ReversedListIterable_String).join$0(0);
    },
    $isBigInt: 1,
    $isComparable: 1
  };
  A._BigIntImpl_hashCode_combine.prototype = {
    call$2(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    $signature: 139
  };
  A._BigIntImpl_hashCode_finish.prototype = {
    call$1(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    $signature: 135
  };
  A.DateTime.prototype = {
    _addMicroseconds$1(durationMicroseconds) {
      var _1000 = 1000,
        durationLo = B.JSInt_methods.$mod(durationMicroseconds, _1000),
        durationHi = B.JSInt_methods._tdivFast$1(durationMicroseconds - durationLo, _1000),
        sumLo = this._microsecond + durationLo,
        microsecond = B.JSInt_methods.$mod(sumLo, _1000),
        t1 = this.isUtc;
      return new A.DateTime(A.DateTime__validate(this._core$_value + B.JSInt_methods._tdivFast$1(sumLo - microsecond, _1000) + durationHi, microsecond, t1), microsecond, t1);
    },
    difference$1(other) {
      return A.Duration$(0, 0, this._microsecond - other._microsecond, this._core$_value - other._core$_value, 0);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DateTime && this._core$_value === other._core$_value && this._microsecond === other._microsecond && this.isUtc === other.isUtc;
    },
    get$hashCode(_) {
      return A.Object_hash(this._core$_value, this._microsecond, B.C_SentinelValue, B.C_SentinelValue);
    },
    compareTo$1(_, other) {
      var r;
      type$.DateTime._as(other);
      r = B.JSInt_methods.compareTo$1(this._core$_value, other._core$_value);
      if (r !== 0)
        return r;
      return B.JSInt_methods.compareTo$1(this._microsecond, other._microsecond);
    },
    toUtc$0() {
      var _this = this;
      if (_this.isUtc)
        return _this;
      return new A.DateTime(_this._core$_value, _this._microsecond, true);
    },
    toString$0(_) {
      var _this = this,
        y = A.DateTime__fourDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this)),
        t1 = _this._microsecond,
        us = t1 === 0 ? "" : A.DateTime__threeDigits(t1);
      t1 = y + "-" + m;
      if (_this.isUtc)
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us + "Z";
      else
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us;
    },
    $isComparable: 1
  };
  A.Duration.prototype = {
    $lt(_, other) {
      return this._duration < type$.Duration._as(other)._duration;
    },
    $gt(_, other) {
      return this._duration > type$.Duration._as(other)._duration;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && this._duration === other._duration;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._duration, type$.Duration._as(other)._duration);
    },
    toString$0(_) {
      var sign, minutes, minutesPadding, seconds, secondsPadding,
        microseconds = this._duration,
        hours = B.JSInt_methods._tdivFast$1(microseconds, 3600000000),
        microseconds0 = microseconds % 3600000000;
      if (microseconds < 0) {
        hours = 0 - hours;
        microseconds = 0 - microseconds0;
        sign = "-";
      } else {
        microseconds = microseconds0;
        sign = "";
      }
      minutes = B.JSInt_methods._tdivFast$1(microseconds, 60000000);
      microseconds %= 60000000;
      minutesPadding = minutes < 10 ? "0" : "";
      seconds = B.JSInt_methods._tdivFast$1(microseconds, 1000000);
      secondsPadding = seconds < 10 ? "0" : "";
      return sign + hours + ":" + minutesPadding + minutes + ":" + secondsPadding + seconds + "." + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(microseconds % 1000000), 6, "0");
    },
    $isComparable: 1
  };
  A._Enum.prototype = {
    toString$0(_) {
      return this._enumToString$0();
    }
  };
  A.Error.prototype = {
    get$stackTrace() {
      return A.Primitives_extractStackTrace(this);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue());
    },
    get$invalidValue() {
      return this.invalidValue;
    }
  };
  A.RangeError.prototype = {
    get$invalidValue() {
      return A._asNumQ(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$invalidValue() {
      return A._asInt(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      var message = this.message;
      return message != null ? "UnimplementedError: " + message : "UnimplementedError";
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    },
    $isException: 1
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var t1, lineEnd, lineNum, lineStart, previousCharWasCR, i, char, prefix, postfix, end, start,
        message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = B.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineEnd = source.length, lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          if (!(i < lineEnd))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        for (i = offset; i < lineEnd; ++i) {
          if (!(i >= 0))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        prefix = "";
        if (lineEnd - lineStart > 78) {
          postfix = "...";
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
            }
            prefix = "...";
          }
        } else {
          end = lineEnd;
          start = lineStart;
          postfix = "";
        }
        return report + prefix + B.JSString_methods.substring$2(source, start, end) + postfix + "\n" + B.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + A.S(offset) + ")") : report;
    },
    $isException: 1,
    get$message() {
      return this.message;
    }
  };
  A.IntegerDivisionByZeroException.prototype = {
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      return "IntegerDivisionByZeroException";
    },
    $isError: 1,
    $isException: 1
  };
  A.Iterable.prototype = {
    cast$1$0(_, $R) {
      return A.CastIterable_CastIterable(this, A._instanceType(this)._eval$1("Iterable.E"), $R);
    },
    followedBy$1(_, other) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("Iterable<Iterable.E>")._as(other);
      if (type$.EfficientLengthIterable_dynamic._is(_this))
        return A.FollowedByIterable_FollowedByIterable$firstEfficient(_this, other, t1._eval$1("Iterable.E"));
      return new A.FollowedByIterable(_this, other, t1._eval$1("FollowedByIterable<Iterable.E>"));
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(this, t1._bind$1($T)._eval$1("1(Iterable.E)")._as(toElement), t1._eval$1("Iterable.E"), $T);
    },
    map$1(_, toElement) {
      return this.map$1$1(0, toElement, type$.dynamic);
    },
    where$1(_, test) {
      var t1 = A._instanceType(this);
      return new A.WhereIterable(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("WhereIterable<Iterable.E>"));
    },
    whereType$1$0(_, $T) {
      return new A.WhereTypeIterable(this, $T._eval$1("WhereTypeIterable<0>"));
    },
    expand$1$1(_, toElements, $T) {
      var t1 = A._instanceType(this);
      return new A.ExpandIterable(this, t1._bind$1($T)._eval$1("Iterable<1>(Iterable.E)")._as(toElements), t1._eval$1("@<Iterable.E>")._bind$1($T)._eval$1("ExpandIterable<1,2>"));
    },
    contains$1(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(), element))
          return true;
      return false;
    },
    forEach$1(_, action) {
      var t1;
      A._instanceType(this)._eval$1("~(Iterable.E)")._as(action);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        action.call$1(t1.get$current());
    },
    reduce$1(_, combine) {
      var iterator, value;
      A._instanceType(this)._eval$1("Iterable.E(Iterable.E,Iterable.E)")._as(combine);
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      value = iterator.get$current();
      for (; iterator.moveNext$0();)
        value = combine.call$2(value, iterator.get$current());
      return value;
    },
    fold$1$2(_, initialValue, combine, $T) {
      var t1, value;
      $T._as(initialValue);
      A._instanceType(this)._bind$1($T)._eval$1("1(1,Iterable.E)")._as(combine);
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    every$1(_, test) {
      var t1;
      A._instanceType(this)._eval$1("bool(Iterable.E)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (!test.call$1(t1.get$current()))
          return false;
      return true;
    },
    join$1(_, separator) {
      var first, t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      first = J.toString$0$(iterator.get$current());
      if (!iterator.moveNext$0())
        return first;
      if (separator.length === 0) {
        t1 = first;
        do
          t1 += J.toString$0$(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        t1 = first;
        do
          t1 = t1 + separator + J.toString$0$(iterator.get$current());
        while (iterator.moveNext$0());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    join$0(_) {
      return this.join$1(0, "");
    },
    any$1(_, test) {
      var t1;
      A._instanceType(this)._eval$1("bool(Iterable.E)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (test.call$1(t1.get$current()))
          return true;
      return false;
    },
    toList$1$growable(_, growable) {
      var t1 = A._instanceType(this)._eval$1("Iterable.E");
      if (growable)
        t1 = A.List_List$_of(this, t1);
      else {
        t1 = A.List_List$_of(this, t1);
        t1.$flags = 1;
        t1 = t1;
      }
      return t1;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    toSet$0(_) {
      return A.LinkedHashSet_LinkedHashSet$of(this, A._instanceType(this)._eval$1("Iterable.E"));
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty(_) {
      return !this.get$isEmpty(this);
    },
    take$1(_, count) {
      return A.TakeIterable_TakeIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    takeWhile$1(_, test) {
      var t1 = A._instanceType(this);
      return new A.TakeWhileIterable(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("TakeWhileIterable<Iterable.E>"));
    },
    skip$1(_, count) {
      return A.SkipIterable_SkipIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    skipWhile$1(_, test) {
      var t1 = A._instanceType(this);
      return new A.SkipWhileIterable(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("SkipWhileIterable<Iterable.E>"));
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    get$last(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    get$single(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      result = it.get$current();
      if (it.moveNext$0())
        throw A.wrapException(A.IterableElementError_tooMany());
      return result;
    },
    firstWhere$2$orElse(_, test, orElse) {
      var element,
        t1 = A._instanceType(this);
      t1._eval$1("bool(Iterable.E)")._as(test);
      t1._eval$1("Iterable.E()?")._as(orElse);
      for (t1 = this.get$iterator(this); t1.moveNext$0();) {
        element = t1.get$current();
        if (test.call$1(element))
          return element;
      }
      t1 = orElse.call$0();
      return t1;
    },
    lastWhere$2$orElse(_, test, orElse) {
      var iterator, result, current,
        t1 = A._instanceType(this);
      t1._eval$1("bool(Iterable.E)")._as(test);
      t1._eval$1("Iterable.E()?")._as(orElse);
      iterator = this.get$iterator(this);
      do {
        if (!iterator.moveNext$0()) {
          if (orElse != null)
            return orElse.call$0();
          throw A.wrapException(A.IterableElementError_noElement());
        }
        result = iterator.get$current();
      } while (!test.call$1(result));
      for (; iterator.moveNext$0();) {
        current = iterator.get$current();
        if (test.call$1(current))
          result = current;
      }
      return result;
    },
    singleWhere$2$orElse(_, test, orElse) {
      var iterator, result,
        t1 = A._instanceType(this);
      t1._eval$1("bool(Iterable.E)")._as(test);
      t1._eval$1("Iterable.E()?")._as(orElse);
      iterator = this.get$iterator(this);
      do {
        if (!iterator.moveNext$0()) {
          t1 = orElse.call$0();
          return t1;
        }
        result = iterator.get$current();
      } while (!test.call$1(result));
      for (; iterator.moveNext$0();)
        if (test.call$1(iterator.get$current()))
          throw A.wrapException(A.IterableElementError_tooMany());
      return result;
    },
    elementAt$1(_, index) {
      var iterator, skipCount;
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(this);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0)
          return iterator.get$current();
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, null, "index"));
    },
    toString$0(_) {
      return A.Iterable_iterableToShortString(this, "(", ")");
    }
  };
  A._GeneratorIterable.prototype = {
    elementAt$1(_, index) {
      A.IndexError_check(index, this.length, this);
      return this._generator.call$1(index);
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, 0);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    get$runtimeType(_) {
      return A.getRuntimeTypeOfDartObject(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return this._stackTrace;
    },
    $isStackTrace: 1
  };
  A.Stopwatch.prototype = {
    get$elapsedMicroseconds() {
      var ticks = this.get$elapsedTicks();
      if ($.$get$Stopwatch__frequency() === 1000000)
        return ticks;
      return ticks * 1000;
    },
    get$elapsedMilliseconds() {
      var ticks = this.get$elapsedTicks();
      if ($.$get$Stopwatch__frequency() === 1000)
        return ticks;
      return B.JSInt_methods._tdivFast$1(ticks, 1000);
    },
    start$0() {
      var _this = this,
        $stop = _this._stop;
      if ($stop != null) {
        _this._core$_start = _this._core$_start + ($.Primitives_timerTicks.call$0() - $stop);
        _this._stop = null;
      }
    },
    reset$0() {
      var t1 = this._stop;
      this._core$_start = t1 == null ? $.Primitives_timerTicks.call$0() : t1;
    },
    get$elapsedTicks() {
      var t1 = this._stop;
      if (t1 == null)
        t1 = $.Primitives_timerTicks.call$0();
      return t1 - this._core$_start;
    }
  };
  A.Runes.prototype = {
    get$iterator(_) {
      return new A.RuneIterator(this.string);
    },
    get$last(_) {
      var t3, code, previousCode,
        t1 = this.string,
        t2 = t1.length;
      if (t2 === 0)
        throw A.wrapException(A.StateError$("No elements."));
      t3 = t2 - 1;
      if (!(t3 >= 0))
        return A.ioore(t1, t3);
      code = t1.charCodeAt(t3);
      if ((code & 64512) === 56320 && t2 > 1) {
        t3 = t2 - 2;
        if (!(t3 >= 0))
          return A.ioore(t1, t3);
        previousCode = t1.charCodeAt(t3);
        if ((previousCode & 64512) === 55296)
          return A._combineSurrogatePair(previousCode, code);
      }
      return code;
    }
  };
  A.RuneIterator.prototype = {
    get$current() {
      return this._currentCodePoint;
    },
    moveNext$0() {
      var codeUnit, nextPosition, nextCodeUnit, _this = this,
        t1 = _this._core$_position = _this._nextPosition,
        t2 = _this.string,
        t3 = t2.length;
      if (t1 === t3) {
        _this._currentCodePoint = -1;
        return false;
      }
      if (!(t1 < t3))
        return A.ioore(t2, t1);
      codeUnit = t2.charCodeAt(t1);
      nextPosition = t1 + 1;
      if ((codeUnit & 64512) === 55296 && nextPosition < t3) {
        if (!(nextPosition < t3))
          return A.ioore(t2, nextPosition);
        nextCodeUnit = t2.charCodeAt(nextPosition);
        if ((nextCodeUnit & 64512) === 56320) {
          _this._nextPosition = nextPosition + 1;
          _this._currentCodePoint = A._combineSurrogatePair(codeUnit, nextCodeUnit);
          return true;
        }
      }
      _this._nextPosition = nextPosition;
      _this._currentCodePoint = codeUnit;
      return true;
    },
    $isIterator: 1
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$isEmpty(_) {
      return this._contents.length === 0;
    },
    get$isNotEmpty(_) {
      return this._contents.length !== 0;
    },
    $isStringSink: 1
  };
  A.Uri__parseIPv4Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 325
  };
  A.Uri_parseIPv6Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    $signature: 132
  };
  A.Uri_parseIPv6Address_parseHex.prototype = {
    call$2(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = A.int_parse(B.JSString_methods.substring$2(this.host, start, end), 16);
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 139
  };
  A._Uri.prototype = {
    get$_text() {
      var t1, t2, t3, t4, _this = this,
        value = _this.___Uri__text_FI;
      if (value === $) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? t1 + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._core$_port;
          if (t2 != null)
            t1 = t1 + ":" + A.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        value = _this.___Uri__text_FI = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return value;
    },
    get$pathSegments() {
      var pathToSplit, t1, result, _this = this,
        value = _this.___Uri_pathSegments_FI;
      if (value === $) {
        pathToSplit = _this.path;
        t1 = pathToSplit.length;
        if (t1 !== 0) {
          if (0 >= t1)
            return A.ioore(pathToSplit, 0);
          t1 = pathToSplit.charCodeAt(0) === 47;
        } else
          t1 = false;
        if (t1)
          pathToSplit = B.JSString_methods.substring$1(pathToSplit, 1);
        result = pathToSplit.length === 0 ? B.List_empty0 : A.List_List$unmodifiable(new A.MappedListIterable(A._setArrayType(pathToSplit.split("/"), type$.JSArray_String), type$.dynamic_Function_String._as(A.core_Uri_decodeComponent$closure()), type$.MappedListIterable_String_dynamic), type$.String);
        _this.___Uri_pathSegments_FI !== $ && A.throwLateFieldADI("pathSegments");
        value = _this.___Uri_pathSegments_FI = result;
      }
      return value;
    },
    get$hashCode(_) {
      var result, _this = this,
        value = _this.___Uri_hashCode_FI;
      if (value === $) {
        result = B.JSString_methods.get$hashCode(_this.get$_text());
        _this.___Uri_hashCode_FI !== $ && A.throwLateFieldADI("hashCode");
        _this.___Uri_hashCode_FI = result;
        value = result;
      }
      return value;
    },
    get$userInfo() {
      return this._userInfo;
    },
    get$host() {
      var host = this._host;
      if (host == null)
        return "";
      if (B.JSString_methods.startsWith$1(host, "[") && !B.JSString_methods.startsWith$2(host, "v", 1))
        return B.JSString_methods.substring$2(host, 1, host.length - 1);
      return host;
    },
    get$port() {
      var t1 = this._core$_port;
      return t1 == null ? A._Uri__defaultPort(this.scheme) : t1;
    },
    get$query() {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    isScheme$1(scheme) {
      var thisScheme = this.scheme;
      if (scheme.length !== thisScheme.length)
        return false;
      return A._caseInsensitiveCompareStart(scheme, thisScheme, 0) >= 0;
    },
    replace$2$path$scheme(path, scheme) {
      var schemeChanged, isFile, userInfo, port, host, hasAuthority, t1, currentPath, _this = this,
        scheme0 = _this.scheme;
      if (scheme != null) {
        scheme = A._Uri__makeScheme(scheme, 0, scheme.length);
        schemeChanged = scheme !== scheme0;
      } else {
        scheme = scheme0;
        schemeChanged = false;
      }
      isFile = scheme === "file";
      userInfo = _this._userInfo;
      port = _this._core$_port;
      if (schemeChanged)
        port = A._Uri__makePort(port, scheme);
      host = _this._host;
      if (!(host != null))
        host = userInfo.length !== 0 || port != null || isFile ? "" : null;
      hasAuthority = host != null;
      if (path != null) {
        t1 = path.length;
        path = A._Uri__makePath(path, 0, t1, null, scheme, hasAuthority);
      } else {
        currentPath = _this.path;
        if (!isFile)
          t1 = hasAuthority && currentPath.length !== 0;
        else
          t1 = true;
        if (t1 && !B.JSString_methods.startsWith$1(currentPath, "/"))
          currentPath = "/" + currentPath;
        path = currentPath;
      }
      return A._Uri$_internal(scheme, userInfo, host, port, path, _this._query, _this._fragment);
    },
    replace$1$path(path) {
      return this.replace$2$path$scheme(path, null);
    },
    replace$1$scheme(scheme) {
      return this.replace$2$path$scheme(null, scheme);
    },
    normalizePath$0() {
      var _this = this,
        t1 = _this.path,
        path = A._Uri__normalizePath(t1, _this.scheme, _this._host != null);
      if (path === t1)
        return _this;
      return _this.replace$1$path(path);
    },
    _mergePaths$2(base, reference) {
      var backCount, refStart, baseEnd, t1, newEnd, delta, t2, t3, t4;
      for (backCount = 0, refStart = 0; B.JSString_methods.startsWith$2(reference, "../", refStart);) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = B.JSString_methods.lastIndexOf$1(base, "/");
      t1 = base.length;
      while (true) {
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = B.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t2 = delta !== 2;
        t3 = false;
        if (!t2 || delta === 3) {
          t4 = newEnd + 1;
          if (!(t4 < t1))
            return A.ioore(base, t4);
          if (base.charCodeAt(t4) === 46)
            if (t2) {
              t2 = newEnd + 2;
              if (!(t2 < t1))
                return A.ioore(base, t2);
              t2 = base.charCodeAt(t2) === 46;
            } else
              t2 = true;
          else
            t2 = t3;
        } else
          t2 = t3;
        if (t2)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return B.JSString_methods.replaceRange$3(base, baseEnd + 1, null, B.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1(reference) {
      return this.resolveUri$1(A.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      var targetScheme, t1, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, packageNameEnd, packageName, mergedPath, fragment, _this = this;
      if (reference.get$scheme().length !== 0)
        return reference;
      else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          t1 = reference.replace$1$scheme(targetScheme);
          return t1;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._core$_port;
          targetPath = _this.path;
          if (reference.get$hasEmptyPath())
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _this._query;
          else {
            packageNameEnd = A._Uri__packageNameEnd(_this, targetPath);
            if (packageNameEnd > 0) {
              packageName = B.JSString_methods.substring$2(targetPath, 0, packageNameEnd);
              targetPath = reference.get$hasAbsolutePath() ? packageName + A._Uri__removeDotSegments(reference.get$path()) : packageName + A._Uri__removeDotSegments(_this._mergePaths$2(B.JSString_methods.substring$1(targetPath, packageName.length), reference.get$path()));
            } else if (reference.get$hasAbsolutePath())
              targetPath = A._Uri__removeDotSegments(reference.get$path());
            else if (targetPath.length === 0)
              if (targetHost == null)
                targetPath = targetScheme.length === 0 ? reference.get$path() : A._Uri__removeDotSegments(reference.get$path());
              else
                targetPath = A._Uri__removeDotSegments("/" + reference.get$path());
            else {
              mergedPath = _this._mergePaths$2(targetPath, reference.get$path());
              t1 = targetScheme.length === 0;
              if (!t1 || targetHost != null || B.JSString_methods.startsWith$1(targetPath, "/"))
                targetPath = A._Uri__removeDotSegments(mergedPath);
              else
                targetPath = A._Uri__normalizeRelativePath(mergedPath, !t1 || targetHost != null);
            }
            targetQuery = reference.get$hasQuery() ? reference.get$query() : null;
          }
        }
      }
      fragment = reference.get$hasFragment() ? reference.get$fragment() : null;
      return A._Uri$_internal(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, fragment);
    },
    get$hasAuthority() {
      return this._host != null;
    },
    get$hasQuery() {
      return this._query != null;
    },
    get$hasFragment() {
      return this._fragment != null;
    },
    get$hasEmptyPath() {
      return this.path.length === 0;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$1(this.path, "/");
    },
    toFilePath$0() {
      var pathSegments, _this = this,
        t1 = _this.scheme;
      if (t1 !== "" && t1 !== "file")
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + t1 + " URI"));
      t1 = _this._query;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannotefq));
      t1 = _this._fragment;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannoteff));
      if (_this._host != null && _this.get$host() !== "")
        A.throwExpression(A.UnsupportedError$(string$.Cannoten));
      pathSegments = _this.get$pathSegments();
      A._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
      t1 = A.StringBuffer__writeAll(B.JSString_methods.startsWith$1(_this.path, "/") ? "/" : "", pathSegments, "/");
      t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
      return t1;
    },
    toString$0(_) {
      return this.get$_text();
    },
    $eq(_, other) {
      var t1, t2, t3, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      t1 = false;
      if (type$.Uri._is(other))
        if (_this.scheme === other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo === other.get$userInfo())
              if (_this.get$host() === other.get$host())
                if (_this.get$port() === other.get$port())
                  if (_this.path === other.get$path()) {
                    t2 = _this._query;
                    t3 = t2 == null;
                    if (!t3 === other.get$hasQuery()) {
                      if (t3)
                        t2 = "";
                      if (t2 === other.get$query()) {
                        t2 = _this._fragment;
                        t3 = t2 == null;
                        if (!t3 === other.get$hasFragment()) {
                          t1 = t3 ? "" : t2;
                          t1 = t1 === other.get$fragment();
                        }
                      }
                    }
                  }
      return t1;
    },
    $isUri: 1,
    get$scheme() {
      return this.scheme;
    },
    get$path() {
      return this.path;
    }
  };
  A._Uri__makePath_closure.prototype = {
    call$1(s) {
      return A._Uri__uriEncode(64, A._asString(s), B.C_Utf8Codec, false);
    },
    $signature: 31
  };
  A.UriData.prototype = {
    get$uri() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 == null) {
        t1 = _this._separatorIndices;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t2 = _this._text;
        t1 = t1[0] + 1;
        queryIndex = B.JSString_methods.indexOf$2(t2, "?", t1);
        end = t2.length;
        if (queryIndex >= 0) {
          query = A._Uri__normalizeOrSubstring(t2, queryIndex + 1, end, 256, false, false);
          end = queryIndex;
        } else
          query = _null;
        t1 = _this._uriCache = new A._DataUri("data", "", _null, _null, A._Uri__normalizeOrSubstring(t2, t1, end, 128, false, false), query, _null);
      }
      return t1;
    },
    toString$0(_) {
      var t2,
        t1 = this._separatorIndices;
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      t2 = this._text;
      return t1[0] === -1 ? "data:" + t2 : t2;
    }
  };
  A._SimpleUri.prototype = {
    get$hasAuthority() {
      return this._hostStart > 0;
    },
    get$hasPort() {
      return this._hostStart > 0 && this._portStart + 1 < this._pathStart;
    },
    get$hasQuery() {
      return this._queryStart < this._fragmentStart;
    },
    get$hasFragment() {
      return this._fragmentStart < this._uri.length;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$2(this._uri, "/", this._pathStart);
    },
    get$hasEmptyPath() {
      return this._pathStart === this._queryStart;
    },
    isScheme$1(scheme) {
      var t1 = scheme.length;
      if (t1 === 0)
        return this._schemeEnd < 0;
      if (t1 !== this._schemeEnd)
        return false;
      return A._caseInsensitiveCompareStart(scheme, this._uri, 0) >= 0;
    },
    get$scheme() {
      var t1 = this._schemeCache;
      return t1 == null ? this._schemeCache = this._computeScheme$0() : t1;
    },
    _computeScheme$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = t1 === 4;
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return "http";
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return "https";
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "file"))
        return "file";
      if (t1 === 7 && B.JSString_methods.startsWith$1(_this._uri, "package"))
        return "package";
      return B.JSString_methods.substring$2(_this._uri, 0, t1);
    },
    get$userInfo() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? B.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host() {
      var t1 = this._hostStart;
      return t1 > 0 ? B.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port() {
      var t1, _this = this;
      if (_this.get$hasPort())
        return A.int_parse(B.JSString_methods.substring$2(_this._uri, _this._portStart + 1, _this._pathStart), null);
      t1 = _this._schemeEnd;
      if (t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return 80;
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return 443;
      return 0;
    },
    get$path() {
      return B.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      return t1 < t2 ? B.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? B.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    get$pathSegments() {
      var parts, t2, i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri;
      if (B.JSString_methods.startsWith$2(t1, "/", start))
        ++start;
      if (start === end)
        return B.List_empty0;
      parts = A._setArrayType([], type$.JSArray_String);
      for (t2 = t1.length, i = start; i < end; ++i) {
        if (!(i >= 0 && i < t2))
          return A.ioore(t1, i);
        if (t1.charCodeAt(i) === 47) {
          B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(t1, start, i));
          start = i + 1;
        }
      }
      B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(t1, start, end));
      return A.List_List$unmodifiable(parts, type$.String);
    },
    _isPort$1(port) {
      var portDigitStart = this._portStart + 1;
      return portDigitStart + port.length === this._pathStart && B.JSString_methods.startsWith$2(this._uri, port, portDigitStart);
    },
    normalizePath$0() {
      return this;
    },
    removeFragment$0() {
      var _this = this,
        t1 = _this._fragmentStart,
        t2 = _this._uri;
      if (t1 >= t2.length)
        return _this;
      return new A._SimpleUri(B.JSString_methods.substring$2(t2, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    replace$1$scheme(scheme) {
      var schemeChanged, isFile, t1, userInfo, port, host, t2, path, t3, query, fragment, _this = this, _null = null;
      scheme = A._Uri__makeScheme(scheme, 0, scheme.length);
      schemeChanged = !(_this._schemeEnd === scheme.length && B.JSString_methods.startsWith$1(_this._uri, scheme));
      isFile = scheme === "file";
      t1 = _this._hostStart;
      userInfo = t1 > 0 ? B.JSString_methods.substring$2(_this._uri, _this._schemeEnd + 3, t1) : "";
      port = _this.get$hasPort() ? _this.get$port() : _null;
      if (schemeChanged)
        port = A._Uri__makePort(port, scheme);
      t1 = _this._hostStart;
      if (t1 > 0)
        host = B.JSString_methods.substring$2(_this._uri, t1, _this._portStart);
      else
        host = userInfo.length !== 0 || port != null || isFile ? "" : _null;
      t1 = _this._uri;
      t2 = _this._queryStart;
      path = B.JSString_methods.substring$2(t1, _this._pathStart, t2);
      if (!isFile)
        t3 = host != null && path.length !== 0;
      else
        t3 = true;
      if (t3 && !B.JSString_methods.startsWith$1(path, "/"))
        path = "/" + path;
      t3 = _this._fragmentStart;
      query = t2 < t3 ? B.JSString_methods.substring$2(t1, t2 + 1, t3) : _null;
      t2 = _this._fragmentStart;
      fragment = t2 < t1.length ? B.JSString_methods.substring$1(t1, t2 + 1) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragment);
    },
    resolve$1(reference) {
      return this.resolveUri$1(A.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      if (reference instanceof A._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2(base, ref) {
      var t2, t3, t4, isSimple, delta, refStart, basePathStart, packageNameEnd, basePathStart0, baseStart, baseEnd, baseUri, baseStart0, backCount, refStart0, insert,
        t1 = ref._schemeEnd;
      if (t1 > 0)
        return ref;
      t2 = ref._hostStart;
      if (t2 > 0) {
        t3 = base._schemeEnd;
        if (t3 <= 0)
          return ref;
        t4 = t3 === 4;
        if (t4 && B.JSString_methods.startsWith$1(base._uri, "file"))
          isSimple = ref._pathStart !== ref._queryStart;
        else if (t4 && B.JSString_methods.startsWith$1(base._uri, "http"))
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !(t3 === 5 && B.JSString_methods.startsWith$1(base._uri, "https")) || !ref._isPort$1("443");
        if (isSimple) {
          delta = t3 + 1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, delta) + B.JSString_methods.substring$1(ref._uri, t1 + 1), t3, t2 + delta, ref._portStart + delta, ref._pathStart + delta, ref._queryStart + delta, ref._fragmentStart + delta, base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      refStart = ref._pathStart;
      t1 = ref._queryStart;
      if (refStart === t1) {
        t2 = ref._fragmentStart;
        if (t1 < t2) {
          t3 = base._queryStart;
          delta = t3 - t1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(ref._uri, t1), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, t1 + delta, t2 + delta, base._schemeCache);
        }
        t1 = ref._uri;
        if (t2 < t1.length) {
          t3 = base._fragmentStart;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(t1, t2), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t2 + (t3 - t2), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      t2 = ref._uri;
      if (B.JSString_methods.startsWith$2(t2, "/", refStart)) {
        basePathStart = base._pathStart;
        packageNameEnd = A._SimpleUri__packageNameEnd(this);
        basePathStart0 = packageNameEnd > 0 ? packageNameEnd : basePathStart;
        delta = basePathStart0 - refStart;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, basePathStart0) + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, basePathStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      if (baseStart === baseEnd && base._hostStart > 0) {
        for (; B.JSString_methods.startsWith$2(t2, "../", refStart);)
          refStart += 3;
        delta = baseStart - refStart + 1;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, baseStart) + "/" + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseUri = base._uri;
      packageNameEnd = A._SimpleUri__packageNameEnd(this);
      if (packageNameEnd >= 0)
        baseStart0 = packageNameEnd;
      else
        for (baseStart0 = baseStart; B.JSString_methods.startsWith$2(baseUri, "../", baseStart0);)
          baseStart0 += 3;
      backCount = 0;
      while (true) {
        refStart0 = refStart + 3;
        if (!(refStart0 <= t1 && B.JSString_methods.startsWith$2(t2, "../", refStart)))
          break;
        ++backCount;
        refStart = refStart0;
      }
      for (t3 = baseUri.length, insert = ""; baseEnd > baseStart0;) {
        --baseEnd;
        if (!(baseEnd >= 0 && baseEnd < t3))
          return A.ioore(baseUri, baseEnd);
        if (baseUri.charCodeAt(baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && base._schemeEnd <= 0 && !B.JSString_methods.startsWith$2(baseUri, "/", baseStart)) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      return new A._SimpleUri(B.JSString_methods.substring$2(baseUri, 0, baseEnd) + insert + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
    },
    toFilePath$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 >= 0) {
        t2 = !(t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "file"));
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + _this.get$scheme() + " URI"));
      t1 = _this._queryStart;
      t2 = _this._uri;
      if (t1 < t2.length) {
        if (t1 < _this._fragmentStart)
          throw A.wrapException(A.UnsupportedError$(string$.Cannotefq));
        throw A.wrapException(A.UnsupportedError$(string$.Cannoteff));
      }
      if (_this._hostStart < _this._portStart)
        A.throwExpression(A.UnsupportedError$(string$.Cannoten));
      t1 = B.JSString_methods.substring$2(t2, _this._pathStart, t1);
      return t1;
    },
    get$hashCode(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = B.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return type$.Uri._is(other) && this._uri === other.toString$0(0);
    },
    _toNonSimple$0() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = _this._hostStart > 0 ? _this.get$host() : _null,
        t4 = _this.get$hasPort() ? _this.get$port() : _null,
        t5 = _this._uri,
        t6 = _this._queryStart,
        t7 = B.JSString_methods.substring$2(t5, _this._pathStart, t6),
        t8 = _this._fragmentStart;
      t6 = t6 < t8 ? _this.get$query() : _null;
      return A._Uri$_internal(t1, t2, t3, t4, t7, t6, t8 < t5.length ? _this.get$fragment() : _null);
    },
    toString$0(_) {
      return this._uri;
    },
    $isUri: 1
  };
  A._DataUri.prototype = {};
  A.Expando.prototype = {};
  A.jsify__convert.prototype = {
    call$1(o) {
      var t1, convertedMap, key, convertedList;
      if (A._noJsifyRequired(o))
        return o;
      t1 = this._convertedObjects;
      if (t1.containsKey$1(o))
        return t1.$index(0, o);
      if (type$.Map_dynamic_dynamic._is(o)) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = o.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          key = t1.get$current();
          convertedMap[key] = this.call$1(o.$index(0, key));
        }
        return convertedMap;
      } else if (type$.Iterable_dynamic._is(o)) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        B.JSArray_methods.addAll$1(convertedList, J.map$1$1$ax(o, this, type$.dynamic));
        return convertedList;
      } else
        return o;
    },
    $signature: 32
  };
  A.promiseToFuture_closure.prototype = {
    call$1(r) {
      return this.completer.complete$1(this.T._eval$1("0/?")._as(r));
    },
    $signature: 16
  };
  A.promiseToFuture_closure0.prototype = {
    call$1(e) {
      if (e == null)
        return this.completer.completeError$1(new A.NullRejectionException(e === undefined));
      return this.completer.completeError$1(e);
    },
    $signature: 16
  };
  A.dartify_convert.prototype = {
    call$1(o) {
      var t1, proto, t2, dartObject, originalKeys, dartKeys, i, jsKey, dartKey, l, $length;
      if (A._noDartifyRequired(o))
        return o;
      t1 = this._convertedObjects;
      o.toString;
      if (t1.containsKey$1(o))
        return t1.$index(0, o);
      if (o instanceof Date)
        return new A.DateTime(A.DateTime__validate(o.getTime(), 0, true), 0, true);
      if (o instanceof RegExp)
        throw A.wrapException(A.ArgumentError$("structured clone of RegExp", null));
      if (typeof Promise != "undefined" && o instanceof Promise)
        return A.promiseToFuture(o, type$.nullable_Object);
      proto = Object.getPrototypeOf(o);
      if (proto === Object.prototype || proto === null) {
        t2 = type$.nullable_Object;
        dartObject = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        t1.$indexSet(0, o, dartObject);
        originalKeys = Object.keys(o);
        dartKeys = [];
        for (t1 = J.getInterceptor$ax(originalKeys), t2 = t1.get$iterator(originalKeys); t2.moveNext$0();)
          dartKeys.push(A.dartify(t2.get$current()));
        for (i = 0; i < t1.get$length(originalKeys); ++i) {
          jsKey = t1.$index(originalKeys, i);
          if (!(i < dartKeys.length))
            return A.ioore(dartKeys, i);
          dartKey = dartKeys[i];
          if (jsKey != null)
            dartObject.$indexSet(0, dartKey, this.call$1(o[jsKey]));
        }
        return dartObject;
      }
      if (o instanceof Array) {
        l = o;
        dartObject = [];
        t1.$indexSet(0, o, dartObject);
        $length = A._asInt(o.length);
        for (t1 = J.getInterceptor$asx(l), i = 0; i < $length; ++i)
          dartObject.push(this.call$1(t1.$index(l, i)));
        return dartObject;
      }
      return o;
    },
    $signature: 32
  };
  A.NullRejectionException.prototype = {
    toString$0(_) {
      return "Promise was rejected with a value of `" + (this.isUndefined ? "undefined" : "null") + "`.";
    },
    $isException: 1
  };
  A._JSRandom.prototype = {
    nextInt$1(max) {
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$(string$.max_mu + max));
      return Math.random() * max >>> 0;
    },
    $isRandom: 1
  };
  A._Random.prototype = {
    _Random$1(seed) {
      var low, high, tmplow, low0, t1, t2, t3, _this = this, _4294967296 = 4294967296,
        empty_seed = seed < 0 ? -1 : 0;
      do {
        low = seed >>> 0;
        seed = B.JSInt_methods._tdivFast$1(seed - low, _4294967296);
        high = seed >>> 0;
        seed = B.JSInt_methods._tdivFast$1(seed - high, _4294967296);
        tmplow = (~low >>> 0) + (low << 21 >>> 0);
        low0 = tmplow >>> 0;
        high = (~high >>> 0) + ((high << 21 | low >>> 11) >>> 0) + B.JSInt_methods._tdivFast$1(tmplow - low0, _4294967296) >>> 0;
        tmplow = ((low0 ^ (low0 >>> 24 | high << 8)) >>> 0) * 265;
        low = tmplow >>> 0;
        high = ((high ^ high >>> 24) >>> 0) * 265 + B.JSInt_methods._tdivFast$1(tmplow - low, _4294967296) >>> 0;
        tmplow = ((low ^ (low >>> 14 | high << 18)) >>> 0) * 21;
        low = tmplow >>> 0;
        high = ((high ^ high >>> 14) >>> 0) * 21 + B.JSInt_methods._tdivFast$1(tmplow - low, _4294967296) >>> 0;
        low = (low ^ (low >>> 28 | high << 4)) >>> 0;
        high = (high ^ high >>> 28) >>> 0;
        tmplow = (low << 31 >>> 0) + low;
        low0 = tmplow >>> 0;
        t1 = B.JSInt_methods._tdivFast$1(tmplow - low0, _4294967296);
        tmplow = _this._lo * 1037;
        t2 = _this._lo = tmplow >>> 0;
        t3 = _this._hi * 1037 + B.JSInt_methods._tdivFast$1(tmplow - t2, _4294967296) >>> 0;
        _this._hi = t3;
        t2 = (t2 ^ low0) >>> 0;
        _this._lo = t2;
        t1 = (t3 ^ high + ((high << 31 | low >>> 1) >>> 0) + t1 >>> 0) >>> 0;
        _this._hi = t1;
      } while (seed !== empty_seed);
      if (t1 === 0 && t2 === 0)
        _this._lo = 23063;
      _this._nextState$0();
      _this._nextState$0();
      _this._nextState$0();
      _this._nextState$0();
    },
    _nextState$0() {
      var _this = this,
        t1 = _this._lo,
        tmpHi = 4294901760 * t1,
        tmpHiLo = tmpHi >>> 0,
        tmpLo = 55905 * t1,
        tmpLoLo = tmpLo >>> 0,
        newLo = tmpLoLo + tmpHiLo + _this._hi;
      t1 = newLo >>> 0;
      _this._lo = t1;
      _this._hi = B.JSInt_methods._tdivFast$1(tmpLo - tmpLoLo + (tmpHi - tmpHiLo) + (newLo - t1), 4294967296) >>> 0;
    },
    nextInt$1(max) {
      var t1, rnd32, result, _this = this;
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$(string$.max_mu + max));
      t1 = max - 1;
      if ((max & t1) >>> 0 === 0) {
        _this._nextState$0();
        return (_this._lo & t1) >>> 0;
      }
      do {
        _this._nextState$0();
        rnd32 = _this._lo;
        result = rnd32 % max;
      } while (rnd32 - result + max >= 4294967296);
      return result;
    },
    $isRandom: 1
  };
  A._JSSecureRandom.prototype = {
    _JSSecureRandom$0() {
      var $crypto = self.crypto;
      if ($crypto != null)
        if ($crypto.getRandomValues != null)
          return;
      throw A.wrapException(A.UnsupportedError$("No source of cryptographically secure random numbers available."));
    },
    nextInt$1(max) {
      var byteCount, t1, start, randomLimit, t2, t3, random, result;
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$(string$.max_mu + max));
      if (max > 255)
        if (max > 65535)
          byteCount = max > 16777215 ? 4 : 3;
        else
          byteCount = 2;
      else
        byteCount = 1;
      t1 = this._math$_buffer;
      t1.$flags & 2 && A.throwUnsupportedOperation(t1, 11);
      t1.setUint32(0, 0, false);
      start = 4 - byteCount;
      randomLimit = A._asInt(Math.pow(256, byteCount));
      for (t2 = max - 1, t3 = (max & t2) >>> 0 === 0; true;) {
        crypto.getRandomValues(J.asUint8List$2$x(B.NativeByteData_methods.get$buffer(t1), start, byteCount));
        random = t1.getUint32(0, false);
        if (t3)
          return (random & t2) >>> 0;
        result = random % max;
        if (random - result + max < randomLimit)
          return result;
      }
    },
    $isRandom: 1
  };
  A.AsyncMemoizer.prototype = {
    runOnce$1(computation) {
      var t2, t3,
        t1 = this.$ti;
      t1._eval$1("1/()")._as(computation);
      t2 = this._async_memoizer$_completer;
      t3 = t2.future;
      if ((t3._state & 30) === 0)
        t2.complete$1(A.Future_Future$sync(computation, t1._precomputed1));
      return t3;
    }
  };
  A.DelegatingSink.prototype = {$isSink: 1};
  A.FutureGroup.prototype = {
    add$1(_, task) {
      var t1, index, _this = this;
      _this.$ti._eval$1("Future<1>")._as(task);
      if (_this._future_group$_closed)
        throw A.wrapException(A.StateError$("The FutureGroup is closed."));
      t1 = _this._future_group$_values;
      index = t1.length;
      B.JSArray_methods.add$1(t1, null);
      ++_this._future_group$_pending;
      task.then$1$1(new A.FutureGroup_add_closure(_this, index), type$.Null).catchError$1(new A.FutureGroup_add_closure0(_this));
    },
    close$0() {
      var t1, t2, _this = this;
      _this._future_group$_closed = true;
      if (_this._future_group$_pending !== 0)
        return;
      t1 = _this._future_group$_completer;
      if ((t1.future._state & 30) !== 0)
        return;
      t2 = _this.$ti._eval$1("WhereTypeIterable<1>");
      t2 = A.List_List$_of(new A.WhereTypeIterable(_this._future_group$_values, t2), t2._eval$1("Iterable.E"));
      t1.complete$1(t2);
    },
    $isSink: 1
  };
  A.FutureGroup_add_closure.prototype = {
    call$1(value) {
      var t3, t4,
        t1 = this.$this,
        t2 = t1.$ti;
      t2._precomputed1._as(value);
      t3 = t1._future_group$_completer;
      if ((t3.future._state & 30) !== 0)
        return null;
      --t1._future_group$_pending;
      t4 = t1._future_group$_values;
      B.JSArray_methods.$indexSet(t4, this.index, value);
      if (t1._future_group$_pending !== 0)
        return null;
      if (!t1._future_group$_closed)
        return null;
      t1 = t2._eval$1("WhereTypeIterable<1>");
      t1 = A.List_List$_of(new A.WhereTypeIterable(t4, t1), t1._eval$1("Iterable.E"));
      t3.complete$1(t1);
    },
    $signature() {
      return this.$this.$ti._eval$1("Null(1)");
    }
  };
  A.FutureGroup_add_closure0.prototype = {
    call$2(error, stackTrace) {
      var t1;
      A._asObject(error);
      type$.StackTrace._as(stackTrace);
      t1 = this.$this._future_group$_completer;
      if ((t1.future._state & 30) !== 0)
        return null;
      t1.completeError$2(error, stackTrace);
    },
    $signature: 71
  };
  A.StreamGroup.prototype = {
    add$1(_, stream) {
      var t1, _this = this;
      _this.$ti._eval$1("Stream<1>")._as(stream);
      if (_this._stream_group$_closed)
        throw A.wrapException(A.StateError$("Can't add a Stream to a closed StreamGroup."));
      t1 = _this._stream_group$_state;
      if (t1 === B._StreamGroupState_dormant)
        _this._stream_group$_subscriptions.putIfAbsent$2(stream, new A.StreamGroup_add_closure());
      else if (t1 === B._StreamGroupState_canceled)
        return stream.listen$1(null).cancel$0();
      else
        _this._stream_group$_subscriptions.putIfAbsent$2(stream, new A.StreamGroup_add_closure0(_this, stream));
      return null;
    },
    _stream_group$_onListen$0() {
      var stream, t1, t2, t3, _i, entry, exception, _this = this;
      _this._stream_group$_state = B._StreamGroupState_listening;
      t1 = _this._stream_group$_subscriptions;
      t2 = A.List_List$_of(new A.LinkedHashMapEntriesIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapEntriesIterable<1,2>")), _this.$ti._eval$1("MapEntry<Stream<1>,StreamSubscription<1>?>"));
      t3 = t2.length;
      _i = 0;
      for (; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
        entry = t2[_i];
        if (entry.value != null)
          continue;
        stream = entry.key;
        try {
          t1.$indexSet(0, stream, _this._listenToStream$1(stream));
        } catch (exception) {
          t1 = _this._stream_group$_onCancel$0();
          if (t1 != null)
            t1.catchError$1(new A.StreamGroup__onListen_closure());
          throw exception;
        }
      }
    },
    _stream_group$_onCancel$0() {
      var t1, t2, t3, futures;
      this._stream_group$_state = B._StreamGroupState_canceled;
      t1 = this._stream_group$_subscriptions;
      t2 = A._instanceType(t1)._eval$1("LinkedHashMapEntriesIterable<1,2>");
      t3 = type$.NonNullsIterable_Future_void;
      futures = A.List_List$_of(new A.NonNullsIterable(A.MappedIterable_MappedIterable(new A.LinkedHashMapEntriesIterable(t1, t2), t2._eval$1("Future<~>?(Iterable.E)")._as(new A.StreamGroup__onCancel_closure(this)), t2._eval$1("Iterable.E"), type$.nullable_Future_void), t3), t3._eval$1("Iterable.E"));
      t1.clear$0(0);
      return futures.length === 0 ? null : A.Future_wait(futures, false, type$.void);
    },
    _onCancelBroadcast$0() {
      this._stream_group$_state = B._StreamGroupState_dormant;
      this._stream_group$_subscriptions.forEach$1(0, new A.StreamGroup__onCancelBroadcast_closure(this));
    },
    _listenToStream$1(stream) {
      var t2, subscription, _this = this,
        t1 = _this.$ti;
      t1._eval$1("Stream<1>")._as(stream);
      t2 = _this.__StreamGroup__controller_A;
      t2 === $ && A.throwLateFieldNI("_controller");
      subscription = stream.listen$3$onDone$onError(t1._eval$1("~(1)")._as(t2.get$add(t2)), new A.StreamGroup__listenToStream_closure(_this, stream), t2.get$addError());
      if (_this._stream_group$_state === B._StreamGroupState_paused)
        subscription.pause$0();
      return subscription;
    },
    close$0() {
      var t1, _this = this,
        _s11_ = "_controller";
      if (_this._stream_group$_closed) {
        t1 = _this.__StreamGroup__controller_A;
        t1 === $ && A.throwLateFieldNI(_s11_);
        return t1._ensureDoneFuture$0();
      }
      _this._stream_group$_closed = true;
      if (_this._stream_group$_subscriptions.__js_helper$_length === 0) {
        t1 = _this.__StreamGroup__controller_A;
        t1 === $ && A.throwLateFieldNI(_s11_);
        t1.close$0();
      }
      t1 = _this.__StreamGroup__controller_A;
      t1 === $ && A.throwLateFieldNI(_s11_);
      return t1._ensureDoneFuture$0();
    },
    $isSink: 1
  };
  A.StreamGroup_add_closure.prototype = {
    call$0() {
      return null;
    },
    $signature: 1
  };
  A.StreamGroup_add_closure0.prototype = {
    call$0() {
      return this.$this._listenToStream$1(this.stream);
    },
    $signature() {
      return this.$this.$ti._eval$1("StreamSubscription<1>()");
    }
  };
  A.StreamGroup__onListen_closure.prototype = {
    call$1(_) {
    },
    $signature: 33
  };
  A.StreamGroup__onCancel_closure.prototype = {
    call$1(entry) {
      var subscription, t1, exception;
      this.$this.$ti._eval$1("MapEntry<Stream<1>,StreamSubscription<1>?>")._as(entry);
      subscription = entry.value;
      try {
        if (subscription != null) {
          t1 = subscription.cancel$0();
          return t1;
        }
        t1 = entry.key.listen$1(null).cancel$0();
        return t1;
      } catch (exception) {
        return null;
      }
    },
    $signature() {
      return this.$this.$ti._eval$1("Future<~>?(MapEntry<Stream<1>,StreamSubscription<1>?>)");
    }
  };
  A.StreamGroup__onCancelBroadcast_closure.prototype = {
    call$2(stream, subscription) {
      var t1 = this.$this,
        t2 = t1.$ti;
      t2._eval$1("Stream<1>")._as(stream);
      t2._eval$1("StreamSubscription<1>?")._as(subscription);
      if (!stream.get$isBroadcast())
        return;
      subscription.cancel$0();
      t1._stream_group$_subscriptions.$indexSet(0, stream, null);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(Stream<1>,StreamSubscription<1>?)");
    }
  };
  A.StreamGroup__listenToStream_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._stream_group$_subscriptions,
        subscription = t2.remove$1(0, t1.$ti._eval$1("Stream<1>")._as(this.stream)),
        future = subscription == null ? null : subscription.cancel$0();
      if (t2.__js_helper$_length === 0)
        if (t1._stream_group$_closed) {
          t1 = t1.__StreamGroup__controller_A;
          t1 === $ && A.throwLateFieldNI("_controller");
          A.scheduleMicrotask(t1.get$close());
        }
      return future;
    },
    $signature: 2
  };
  A._StreamGroupState.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.All.prototype = {
    evaluate$1(semantics) {
      type$.bool_Function_String._as(semantics);
      return true;
    },
    intersection$1(other) {
      return other;
    },
    validate$1(isDefined) {
      type$.bool_Function_String._as(isDefined);
    },
    toString$0(_) {
      return "<all>";
    },
    $isBooleanSelector: 1
  };
  A.CancelationToken.prototype = {
    get$isCanceled() {
      return this.get$exception() != null;
    },
    throwIfCanceled$0() {
      if (this.get$exception() != null) {
        var t1 = this.get$exception();
        t1.toString;
        throw A.wrapException(t1);
      }
    }
  };
  A.CanceledException.prototype = {
    toString$0(_) {
      var t1 = this.message;
      return B.JSString_methods.trim$0(t1).length === 0 ? A.getRuntimeTypeOfDartObject(this).toString$0(0) : A.getRuntimeTypeOfDartObject(this).toString$0(0) + ": " + t1;
    },
    $isException: 1,
    get$message() {
      return this.message;
    },
    get$stackTrace() {
      return null;
    }
  };
  A.CanceledExceptions.prototype = {
    get$innerExceptions() {
      var t1 = this._canceled_exceptions$_exceptions,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("CanceledException(1)")._as(B.CONSTANT0), t2._eval$1("MappedListIterable<1,CanceledException>"));
    },
    get$message() {
      var t1 = this._canceled_exceptions$_exceptions,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.CanceledExceptions_message_closure()), t2._eval$1("MappedListIterable<1,String>")).join$1(0, "\n");
    },
    get$stackTrace() {
      return null;
    },
    $isException: 1,
    $isCanceledException: 1
  };
  A.CanceledExceptions_message_closure.prototype = {
    call$1(e) {
      return type$.CanceledException._as(e).get$message();
    },
    $signature: 324
  };
  A.TimeoutCanceledException.prototype = {$isTimeoutException: 1,
    get$duration() {
      return null;
    }
  };
  A.CancelableToken.prototype = {
    get$exception() {
      return this._cancelable_token$_exception;
    },
    get$onCanceled() {
      return this._cancelable_token$_canceler.future;
    },
    ensureStarted$0() {
    },
    cancel$1(exception) {
      var t1, t2;
      type$.nullable_CanceledException._as(exception);
      t1 = this._cancelable_token$_exception;
      if (t1 == null)
        t1 = this._cancelable_token$_exception = exception == null ? new A.CanceledException("Operation was canceled.") : exception;
      t2 = this._cancelable_token$_canceler;
      if ((t2.future._state & 30) === 0)
        t2.complete$1(t1);
      return $.$get$CancelableToken__canceledFuture();
    },
    cancel$0() {
      return this.cancel$1(null);
    }
  };
  A._Mode.prototype = {
    _enumToString$0() {
      return "_Mode." + this._name;
    }
  };
  A.CompositeToken.prototype = {
    CompositeToken$_$2(tokens, _mode) {
      var t1, t2, idx;
      this._checkTokens$0();
      for (t1 = this._tokens, t2 = type$.void, idx = 0; idx < t1.length; ++idx)
        t1[idx].get$onCanceled().then$1$1(new A.CompositeToken$__closure(this, idx), t2);
    },
    get$onCanceled() {
      return this._canceler.future;
    },
    get$exception() {
      return this._composite_token$_exception;
    },
    ensureStarted$0() {
      var t1, t2, _i;
      for (t1 = this._tokens, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].ensureStarted$0();
    },
    _checkTokens$1(idx) {
      var t1, pending, first, i, t2, ex, t3, _this = this;
      if (_this._composite_token$_exception == null) {
        t1 = _this._tokens;
        pending = t1.length;
        for (first = null, i = 0; t2 = t1.length, i < t2; ++i) {
          ex = t1[i].get$exception();
          if (ex != null) {
            --pending;
            if (first == null)
              first = ex;
          }
        }
        switch (_this._mode) {
          case B._Mode_0:
            if (_this._composite_token$_exception == null) {
              if (idx != null) {
                if (idx >>> 0 !== idx || idx >= t2)
                  return A.ioore(t1, idx);
                t1 = t1[idx].get$exception();
              } else
                t1 = first;
              _this._composite_token$_exception = t1;
            }
            break;
          case B._Mode_1:
            if (_this._composite_token$_exception == null) {
              if (pending === 0) {
                t2 = A._arrayInstanceType(t1);
                t3 = type$.WhereTypeIterable_CanceledException;
                t1 = A.List_List$_of(new A.WhereTypeIterable(new A.MappedListIterable(t1, t2._eval$1("CanceledException?(1)")._as(new A.CompositeToken__checkTokens_closure()), t2._eval$1("MappedListIterable<1,CanceledException?>")), t3), t3._eval$1("Iterable.E"));
                t1 = new A.CanceledExceptions(t1);
              } else
                t1 = null;
              _this._composite_token$_exception = t1;
            }
            break;
        }
        t1 = _this._canceler;
        if ((t1.future._state & 30) === 0 && _this._composite_token$_exception != null)
          t1.complete$1(_this._composite_token$_exception);
      }
    },
    _checkTokens$0() {
      return this._checkTokens$1(null);
    }
  };
  A.CompositeToken$__closure.prototype = {
    call$1(_) {
      type$.CanceledException._as(_);
      return this.$this._checkTokens$1(this.idx);
    },
    $signature: 322
  };
  A.CompositeToken__checkTokens_closure.prototype = {
    call$1(e) {
      return type$.CancelationToken._as(e).get$exception();
    },
    $signature: 321
  };
  A.TimeoutToken.prototype = {
    get$exception() {
      return (this._timeout_token$_canceler.future._state & 30) !== 0 ? this._timeout_token$_exception : null;
    },
    get$onCanceled() {
      return this._timeout_token$_canceler.future;
    },
    ensureStarted$0() {
      var _this = this,
        t1 = _this.timeout;
      if (t1._duration === 0)
        _this._timeout_token$_cancel$0();
      else if (_this._timeout_token$_timer == null)
        _this._timeout_token$_timer = A.Timer_Timer$periodic(t1, new A.TimeoutToken_ensureStarted_closure(_this));
    },
    _timeout_token$_cancel$0() {
      var t2,
        t1 = this._timeout_token$_exception;
      if (t1 == null)
        t1 = this._timeout_token$_exception = new A.TimeoutCanceledException("Operation timed out.");
      t2 = this._timeout_token$_canceler;
      if ((t2.future._state & 30) === 0)
        t2.complete$1(t1);
    }
  };
  A.TimeoutToken_ensureStarted_closure.prototype = {
    call$1(t) {
      type$.Timer._as(t);
      this.$this._timeout_token$_cancel$0();
      t.cancel$0();
    },
    $signature: 111
  };
  A.EmptyUnmodifiableSet.prototype = {
    get$iterator(_) {
      return B.C_EmptyIterator;
    },
    get$length(_) {
      return 0;
    },
    cast$1$0(_, $T) {
      return new A.EmptyUnmodifiableSet($T._eval$1("EmptyUnmodifiableSet<0>"));
    },
    contains$1(_, element) {
      return false;
    },
    toSet$0(_) {
      return A.LinkedHashSet_LinkedHashSet$_empty(this.$ti._precomputed1);
    },
    $isEfficientLengthIterable: 1,
    $isSet: 1
  };
  A._EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin.prototype = {};
  A.mergeMaps_closure.prototype = {
    call$2(key, mapValue) {
      var t1, t2, t3, _this = this;
      _this.K._as(key);
      t1 = _this.V;
      t1._as(mapValue);
      t2 = _this.result;
      if (t2.containsKey$1(key)) {
        t3 = t2.$index(0, key);
        t1 = t3 == null ? t1._as(t3) : t3;
        t1 = _this.value.call$2(t1, mapValue);
      } else
        t1 = mapValue;
      t2.$indexSet(0, key, t1);
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("~(1,2)");
    }
  };
  A.QueueList.prototype = {
    add$1(_, element) {
      this._queue_list$_add$1(A._instanceType(this)._eval$1("QueueList.E")._as(element));
    },
    addAll$1(_, iterable) {
      var addCount, $length, t1, endSpace, t2, preSpace, _this = this;
      A._instanceType(_this)._eval$1("Iterable<QueueList.E>")._as(iterable);
      if (type$.List_dynamic._is(iterable)) {
        addCount = iterable.length;
        $length = _this.get$length(0);
        t1 = $length + addCount;
        if (t1 >= J.get$length$asx(_this._table)) {
          _this._preGrow$1(t1);
          J.setRange$4$ax(_this._table, $length, t1, iterable, 0);
          _this.set$_tail(_this.get$_tail() + addCount);
        } else {
          endSpace = J.get$length$asx(_this._table) - _this.get$_tail();
          t1 = _this._table;
          t2 = J.getInterceptor$ax(t1);
          if (addCount < endSpace) {
            t2.setRange$4(t1, _this.get$_tail(), _this.get$_tail() + addCount, iterable, 0);
            _this.set$_tail(_this.get$_tail() + addCount);
          } else {
            preSpace = addCount - endSpace;
            t2.setRange$4(t1, _this.get$_tail(), _this.get$_tail() + endSpace, iterable, 0);
            J.setRange$4$ax(_this._table, 0, preSpace, iterable, endSpace);
            _this.set$_tail(preSpace);
          }
        }
      } else
        for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();)
          _this._queue_list$_add$1(t1.get$current());
    },
    cast$1$0(_, $T) {
      return new A._CastQueueList(this, J.cast$1$0$ax(this._table, $T), -1, -1, A._instanceType(this)._eval$1("@<QueueList.E>")._bind$1($T)._eval$1("_CastQueueList<1,2>"));
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    removeLast$0(_) {
      var result, _this = this;
      if (_this.get$_head() === _this.get$_tail())
        throw A.wrapException(A.StateError$("No element"));
      _this.set$_tail((_this.get$_tail() - 1 & J.get$length$asx(_this._table) - 1) >>> 0);
      result = J.$index$asx(_this._table, _this.get$_tail());
      if (result == null)
        result = A._instanceType(_this)._eval$1("QueueList.E")._as(result);
      J.$indexSet$ax(_this._table, _this.get$_tail(), null);
      return result;
    },
    get$length(_) {
      return (this.get$_tail() - this.get$_head() & J.get$length$asx(this._table) - 1) >>> 0;
    },
    set$length(_, value) {
      var delta, newTail, t1, t2, _this = this;
      if (value < 0)
        throw A.wrapException(A.RangeError$("Length " + value + " may not be negative."));
      if (value > _this.get$length(0) && !A._instanceType(_this)._eval$1("QueueList.E")._is(null))
        throw A.wrapException(A.UnsupportedError$("The length can only be increased when the element type is nullable, but the current element type is `" + A.createRuntimeType(A._instanceType(_this)._eval$1("QueueList.E")).toString$0(0) + "`."));
      delta = value - _this.get$length(0);
      if (delta >= 0) {
        if (J.get$length$asx(_this._table) <= value)
          _this._preGrow$1(value);
        _this.set$_tail((_this.get$_tail() + delta & J.get$length$asx(_this._table) - 1) >>> 0);
        return;
      }
      newTail = _this.get$_tail() + delta;
      t1 = _this._table;
      if (newTail >= 0)
        J.fillRange$3$ax(t1, newTail, _this.get$_tail(), null);
      else {
        newTail += J.get$length$asx(t1);
        J.fillRange$3$ax(_this._table, 0, _this.get$_tail(), null);
        t1 = _this._table;
        t2 = J.getInterceptor$asx(t1);
        t2.fillRange$3(t1, newTail, t2.get$length(t1), null);
      }
      _this.set$_tail(newTail);
    },
    $index(_, index) {
      var t1, _this = this;
      A._asInt(index);
      if (index < 0 || index >= _this.get$length(0))
        throw A.wrapException(A.RangeError$("Index " + index + " must be in the range [0.." + _this.get$length(0) + ")."));
      t1 = J.$index$asx(_this._table, (_this.get$_head() + index & J.get$length$asx(_this._table) - 1) >>> 0);
      return t1 == null ? A._instanceType(_this)._eval$1("QueueList.E")._as(t1) : t1;
    },
    $indexSet(_, index, value) {
      var _this = this;
      A._instanceType(_this)._eval$1("QueueList.E")._as(value);
      if (index < 0 || index >= _this.get$length(0))
        throw A.wrapException(A.RangeError$("Index " + index + " must be in the range [0.." + _this.get$length(0) + ")."));
      J.$indexSet$ax(_this._table, (_this.get$_head() + index & J.get$length$asx(_this._table) - 1) >>> 0, value);
    },
    _queue_list$_add$1(element) {
      var newTable, split, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("QueueList.E")._as(element);
      J.$indexSet$ax(_this._table, _this.get$_tail(), element);
      _this.set$_tail((_this.get$_tail() + 1 & J.get$length$asx(_this._table) - 1) >>> 0);
      if (_this.get$_head() === _this.get$_tail()) {
        newTable = A.List_List$filled(J.get$length$asx(_this._table) * 2, null, false, t1._eval$1("QueueList.E?"));
        split = J.get$length$asx(_this._table) - _this.get$_head();
        B.JSArray_methods.setRange$4(newTable, 0, split, _this._table, _this.get$_head());
        B.JSArray_methods.setRange$4(newTable, split, split + _this.get$_head(), _this._table, 0);
        _this.set$_head(0);
        _this.set$_tail(J.get$length$asx(_this._table));
        _this._table = newTable;
      }
    },
    _writeToList$1(target) {
      var $length, firstPartSize, _this = this;
      A._instanceType(_this)._eval$1("List<QueueList.E?>")._as(target);
      if (_this.get$_head() <= _this.get$_tail()) {
        $length = _this.get$_tail() - _this.get$_head();
        B.JSArray_methods.setRange$4(target, 0, $length, _this._table, _this.get$_head());
        return $length;
      } else {
        firstPartSize = J.get$length$asx(_this._table) - _this.get$_head();
        B.JSArray_methods.setRange$4(target, 0, firstPartSize, _this._table, _this.get$_head());
        B.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + _this.get$_tail(), _this._table, 0);
        return _this.get$_tail() + firstPartSize;
      }
    },
    _preGrow$1(newElementCount) {
      var _this = this,
        newTable = A.List_List$filled(A.QueueList__nextPowerOf2(newElementCount + B.JSInt_methods._shrOtherPositive$1(newElementCount, 1)), null, false, A._instanceType(_this)._eval$1("QueueList.E?"));
      _this.set$_tail(_this._writeToList$1(newTable));
      _this._table = newTable;
      _this.set$_head(0);
    },
    set$_head(_head) {
      this._head = A._asInt(_head);
    },
    set$_tail(_tail) {
      this._tail = A._asInt(_tail);
    },
    $isEfficientLengthIterable: 1,
    $isQueue: 1,
    $isIterable: 1,
    $isList: 1,
    get$_head() {
      return this._head;
    },
    get$_tail() {
      return this._tail;
    }
  };
  A._CastQueueList.prototype = {
    get$_head() {
      return this._queue_list$_delegate.get$_head();
    },
    set$_head(value) {
      this._queue_list$_delegate.set$_head(value);
    },
    get$_tail() {
      return this._queue_list$_delegate.get$_tail();
    },
    set$_tail(value) {
      this._queue_list$_delegate.set$_tail(value);
    }
  };
  A._QueueList_Object_ListMixin.prototype = {};
  A.UnionSet.prototype = {
    get$length(_) {
      var t1 = this._sets.fold$1$2(0, 0, new A.UnionSet_length_closure(this), type$.int);
      return t1;
    },
    get$iterator(_) {
      var t1 = this.get$_union_set$_iterable();
      return t1.get$iterator(t1);
    },
    get$_union_set$_iterable() {
      var t1 = this._sets,
        t2 = this.$ti._precomputed1,
        t3 = A._instanceType(t1),
        t4 = t3._bind$1(t2)._eval$1("Iterable<1>(2)")._as(new A.UnionSet__iterable_closure(this));
      return new A.ExpandIterable(t1, t4, t3._eval$1("@<1>")._bind$1(t2)._eval$1("ExpandIterable<1,2>"));
    },
    contains$1(_, element) {
      return this._sets.any$1(0, new A.UnionSet_contains_closure(this, element));
    },
    toSet$0(_) {
      var t2, t3, t4,
        t1 = A.LinkedHashSet_LinkedHashSet$_empty(this.$ti._precomputed1);
      for (t2 = this._sets, t2 = A._LinkedHashSetIterator$(t2, t2._modifications, A._instanceType(t2)._precomputed1), t3 = t2.$ti._precomputed1; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        t1.addAll$1(0, t4 == null ? t3._as(t4) : t4);
      }
      return t1;
    }
  };
  A.UnionSet_length_closure.prototype = {
    call$2($length, set) {
      A._asInt($length);
      this.$this.$ti._eval$1("Set<1>")._as(set);
      return $length + set.get$length(set);
    },
    $signature() {
      return this.$this.$ti._eval$1("int(int,Set<1>)");
    }
  };
  A.UnionSet__iterable_closure.prototype = {
    call$1(set) {
      return this.$this.$ti._eval$1("Set<1>")._as(set);
    },
    $signature() {
      return this.$this.$ti._eval$1("Set<1>(Set<1>)");
    }
  };
  A.UnionSet_contains_closure.prototype = {
    call$1(set) {
      return this.$this.$ti._eval$1("Set<1>")._as(set).contains$1(0, this.element);
    },
    $signature() {
      return this.$this.$ti._eval$1("bool(Set<1>)");
    }
  };
  A._UnionSet_SetBase_UnmodifiableSetMixin.prototype = {};
  A.UnionSetController.prototype = {};
  A.UnmodifiableSetView.prototype = {};
  A.UnmodifiableSetMixin.prototype = {
    add$1(_, value) {
      A._instanceType(this)._precomputed1._as(value);
      return A.UnmodifiableSetMixin__throw();
    },
    addAll$1(_, elements) {
      A._instanceType(this)._eval$1("Iterable<1>")._as(elements);
      return A.UnmodifiableSetMixin__throw();
    }
  };
  A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin.prototype = {};
  A._DelegatingIterableBase.prototype = {
    any$1(_, test) {
      A._instanceType(this)._eval$1("bool(1)")._as(test);
      return this.get$_base().any$1(0, test);
    },
    cast$1$0(_, $T) {
      return this.get$_base().cast$1$0(0, $T);
    },
    contains$1(_, element) {
      return this.get$_base().contains$1(0, element);
    },
    elementAt$1(_, index) {
      return this.get$_base().elementAt$1(0, index);
    },
    every$1(_, test) {
      A._instanceType(this)._eval$1("bool(1)")._as(test);
      return this.get$_base().every$1(0, test);
    },
    get$first(_) {
      var t1 = this.get$_base();
      return t1.get$first(t1);
    },
    get$isEmpty(_) {
      var t1 = this.get$_base();
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this.get$_base();
      return t1.get$isNotEmpty(t1);
    },
    get$iterator(_) {
      var t1 = this.get$_base();
      return t1.get$iterator(t1);
    },
    get$last(_) {
      var t1 = this.get$_base();
      return t1.get$last(t1);
    },
    lastWhere$2$orElse(_, test, orElse) {
      var t1 = A._instanceType(this);
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()?")._as(orElse);
      return this.get$_base().lastWhere$2$orElse(0, test, orElse);
    },
    get$length(_) {
      var t1 = this.get$_base();
      return t1.get$length(t1);
    },
    map$1$1(_, f, $T) {
      A._instanceType(this)._bind$1($T)._eval$1("1(2)")._as(f);
      return this.get$_base().map$1$1(0, f, $T);
    },
    map$1(_, f) {
      return this.map$1$1(0, f, type$.dynamic);
    },
    get$single(_) {
      var t1 = this.get$_base();
      return t1.get$single(t1);
    },
    skip$1(_, n) {
      return this.get$_base().skip$1(0, n);
    },
    take$1(_, n) {
      return this.get$_base().take$1(0, n);
    },
    toList$1$growable(_, growable) {
      return this.get$_base().toList$1$growable(0, true);
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    toSet$0(_) {
      return this.get$_base().toSet$0(0);
    },
    where$1(_, test) {
      A._instanceType(this)._eval$1("bool(1)")._as(test);
      return this.get$_base().where$1(0, test);
    },
    toString$0(_) {
      return this.get$_base().toString$0(0);
    },
    $isIterable: 1
  };
  A.DelegatingSet.prototype = {
    addAll$1(_, elements) {
      this._base.addAll$1(0, A._instanceType(this)._eval$1("Iterable<1>")._as(elements));
    },
    cast$1$0(_, $T) {
      return this._base.cast$1$0(0, $T);
    },
    union$1(other) {
      return this._base.union$1(A._instanceType(this)._eval$1("Set<1>")._as(other));
    },
    toSet$0(_) {
      return new A.DelegatingSet(this._base.toSet$0(0), A._instanceType(this)._eval$1("DelegatingSet<1>"));
    },
    $isEfficientLengthIterable: 1,
    $isSet: 1,
    get$_base() {
      return this._base;
    }
  };
  A.DevelopmentFilter.prototype = {
    shouldLog$1($event) {
      return false;
    }
  };
  A.ProductionFilter.prototype = {
    shouldLog$1($event) {
      var t1 = this._level;
      if (t1 == null)
        t1 = B.Level_1000_trace;
      return $event.level.value >= t1.value;
    }
  };
  A.LogEvent.prototype = {};
  A.LogFilter.prototype = {
    init$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$init$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$init$0, $async$completer);
    }
  };
  A.Level.prototype = {
    _enumToString$0() {
      return "Level." + this._name;
    },
    $lt(_, other) {
      return B.JSInt_methods.$lt(this.value, type$.Level._as(other).get$value());
    },
    $gt(_, other) {
      return B.JSInt_methods.$gt(this.value, type$.Level._as(other).get$value());
    }
  };
  A.LogOutput.prototype = {
    init$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$init$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$init$0, $async$completer);
    }
  };
  A.LogPrinter.prototype = {
    init$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$init$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$init$0, $async$completer);
    }
  };
  A.Logger.prototype = {
    Logger$4$filter$level$output$printer(filter, level, output, printer) {
      var _this = this,
        t1 = _this._filter,
        filterInit = t1.init$0();
      if (level != null)
        t1._level = level;
      t1 = A.Future_wait(A._setArrayType([filterInit, _this._printer.init$0(), _this._output.init$0()], type$.JSArray_Future_void), false, type$.void);
      _this.__Logger__initialization_F !== $ && A.throwLateFieldAI("_initialization");
      _this.__Logger__initialization_F = t1;
    },
    t$1(message) {
      this.log$5$error$stackTrace$time(B.Level_1000_trace, message, null, null, null);
    },
    d$1(message) {
      this.log$5$error$stackTrace$time(B.Level_2000_debug, message, null, null, null);
    },
    e$1(message) {
      this.log$5$error$stackTrace$time(B.Level_5000_error, message, null, null, null);
    },
    log$5$error$stackTrace$time(level, message, error, stackTrace, time) {
      var outputEvent, callback, e, s, logEvent, t1, t2, callback0, output, exception;
      if (error != null && type$.StackTrace._is(error))
        throw A.wrapException(A.ArgumentError$("Error parameter cannot take a StackTrace!", null));
      else if (level === B.Level_0_all)
        throw A.wrapException(A.ArgumentError$("Log events cannot have Level.all", null));
      else if (level === B.Level_10000_off || level === B.Level_9999_nothing)
        throw A.wrapException(A.ArgumentError$("Log events cannot have Level.off", null));
      logEvent = new A.LogEvent(level, message, error, stackTrace, time == null ? new A.DateTime(Date.now(), 0, false) : time);
      for (t1 = A._LinkedHashSetIterator$($.Logger__logCallbacks, $.Logger__logCallbacks._modifications, A._instanceType($.Logger__logCallbacks)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        callback0 = t1._collection$_current;
        (callback0 == null ? t2._as(callback0) : callback0).call$1(logEvent);
      }
      if (this._filter.shouldLog$1(logEvent)) {
        output = this._printer.log$1(logEvent);
        if (output.length !== 0) {
          outputEvent = new A.OutputEvent(output);
          try {
            for (t1 = A._LinkedHashSetIterator$($.Logger__outputCallbacks, $.Logger__outputCallbacks._modifications, A._instanceType($.Logger__outputCallbacks)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
              callback0 = t1._collection$_current;
              callback = callback0 == null ? t2._as(callback0) : callback0;
              callback.call$1(outputEvent);
            }
            this._output.output$1(outputEvent);
          } catch (exception) {
            e = A.unwrapException(exception);
            s = A.getTraceFromException(exception);
            A.print(e);
            A.print(s);
          }
        }
      }
    }
  };
  A.Logger_defaultFilter_closure.prototype = {
    call$0() {
      return new A.DevelopmentFilter();
    },
    $signature: 306
  };
  A.OutputEvent.prototype = {};
  A._Empty.prototype = {
    matches$2(item, matchState) {
      return A._asBool(J.get$isEmpty$asx(item));
    },
    describe$1(description) {
      description._out._contents += "empty";
      return description;
    }
  };
  A._NotEmpty.prototype = {
    matches$2(item, matchState) {
      return A._asBool(J.get$isNotEmpty$asx(item));
    },
    describe$1(description) {
      description._out._contents += "non-empty";
      return description;
    }
  };
  A._IsNull.prototype = {
    matches$2(item, matchState) {
      return item == null;
    },
    describe$1(description) {
      description._out._contents += "null";
      return description;
    }
  };
  A._IsNotNull.prototype = {
    matches$2(item, matchState) {
      return item != null;
    },
    describe$1(description) {
      description._out._contents += "not null";
      return description;
    }
  };
  A._IsTrue.prototype = {
    matches$2(item, matchState) {
      return J.$eq$(item, true);
    },
    describe$1(description) {
      description._out._contents += "true";
      return description;
    }
  };
  A._IsFalse.prototype = {
    matches$2(item, matchState) {
      return J.$eq$(item, false);
    },
    describe$1(description) {
      description._out._contents += "false";
      return description;
    }
  };
  A._IsNaN.prototype = {
    typedMatches$2(item, matchState) {
      return B.JSNumber_methods.compareTo$1(0 / 0, A._asNum(item)) === 0;
    },
    describe$1(description) {
      description._out._contents += "NaN";
      return description;
    }
  };
  A._HasLength.prototype = {
    matches$2(item, matchState) {
      var $length, t1, exception;
      try {
        $length = J.get$length$asx(item);
        t1 = this._core_matchers$_matcher.matches$2($length, matchState);
        return t1;
      } catch (exception) {
        return false;
      }
    },
    describe$1(description) {
      description._out._contents += "an object with length of ";
      return description.addDescriptionOf$1(this._core_matchers$_matcher);
    },
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      var $length, t1, exception;
      type$.Map_dynamic_dynamic._as(matchState);
      try {
        $length = J.get$length$asx(item);
        mismatchDescription._out._contents += "has length of ";
        t1 = mismatchDescription.addDescriptionOf$1($length);
        return t1;
      } catch (exception) {
        mismatchDescription._out._contents += "has no length property";
        return mismatchDescription;
      }
    }
  };
  A._Contains.prototype = {
    matches$2(item, matchState) {
      var t1,
        expected = this._core_matchers$_expected;
      if (typeof item == "string")
        return type$.Pattern._is(expected) && B.JSString_methods.contains$1(item, expected);
      else if (type$.Iterable_dynamic._is(item)) {
        t1 = J.getInterceptor$asx(item);
        if (expected instanceof A.Matcher)
          return t1.any$1(item, new A._Contains_matches_closure(expected, matchState));
        else
          return t1.contains$1(item, expected);
      } else if (type$.Map_dynamic_dynamic._is(item))
        return item.containsKey$1(expected);
      return false;
    },
    describe$1(description) {
      description._out._contents += "contains ";
      return description.addDescriptionOf$1(this._core_matchers$_expected);
    },
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      var t2,
        t1 = type$.Map_dynamic_dynamic;
      t1._as(matchState);
      t1 = typeof item == "string" || type$.Iterable_dynamic._is(item) || t1._is(item);
      t2 = mismatchDescription._out;
      if (t1) {
        this.super$Matcher$describeMismatch(item, mismatchDescription, matchState, false);
        t2._contents += "does not contain ";
        mismatchDescription.addDescriptionOf$1(this._core_matchers$_expected);
        return mismatchDescription;
      } else {
        t2._contents += "is not a string, map or iterable";
        return mismatchDescription;
      }
    }
  };
  A._Contains_matches_closure.prototype = {
    call$1(e) {
      var t1 = this.expected,
        t2 = this.matchState;
      return t1.super$TypeMatcher$matches(e, t2) && t1.typedMatches$2(A._instanceType(t1)._eval$1("FeatureMatcher.T")._as(e), t2);
    },
    $signature: 17
  };
  A._Predicate.prototype = {
    typedMatches$2(item, matchState) {
      return this._core_matchers$_matcher.call$1(this.$ti._precomputed1._as(item));
    },
    describe$1(description) {
      description._out._contents += this._core_matchers$_description;
      return description;
    }
  };
  A.CustomMatcher.prototype = {
    featureValueOf$1(actual) {
      return actual;
    },
    matches$2(item, matchState) {
      var f, exception, stack, t1, exception0;
      try {
        f = this.featureValueOf$1(item);
        if (this._custom_matcher$_matcher.matches$2(f, matchState))
          return true;
        t1 = type$.dynamic;
        A.addStateInfo(matchState, A.LinkedHashMap_LinkedHashMap$_literal(["custom.feature", f], t1, t1));
      } catch (exception0) {
        exception = A.unwrapException(exception0);
        stack = A.getTraceFromException(exception0);
        t1 = type$.dynamic;
        A.addStateInfo(matchState, A.LinkedHashMap_LinkedHashMap$_literal(["custom.exception", J.toString$0$(exception), "custom.stack", A.Chain_Chain$forTrace(stack).foldFrames$2$terse(new A.CustomMatcher_matches_closure(), true).toString$0(0)], t1, t1));
      }
      return false;
    },
    describe$1(description) {
      var t1 = description._out;
      t1._contents = (t1._contents += this._featureDescription) + " ";
      return description.addDescriptionOf$1(this._custom_matcher$_matcher);
    },
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      var t2, t3,
        _s16_ = "custom.exception",
        _s14_ = "custom.feature",
        t1 = type$.Map_dynamic_dynamic;
      t1._as(matchState);
      if (matchState.$index(0, _s16_) != null) {
        mismatchDescription._out._contents += "threw ";
        t1 = mismatchDescription.addDescriptionOf$1(matchState.$index(0, _s16_))._out;
        t1._contents += "\n";
        t2 = J.toString$0$(matchState.$index(0, "custom.stack"));
        t1._contents += t2;
        return mismatchDescription;
      }
      t2 = mismatchDescription._out;
      t3 = (t2._contents += "has ") + this._featureName;
      t2._contents = t3;
      t2._contents = t3 + " with value ";
      mismatchDescription.addDescriptionOf$1(matchState.$index(0, _s14_));
      t3 = new A.StringBuffer("");
      this._custom_matcher$_matcher.describeMismatch$4(matchState.$index(0, _s14_), new A.StringDescription(t3), t1._as(matchState.$index(0, "state")), false);
      if (t3._contents.length > 0) {
        t1 = t2._contents += " which ";
        t3 = t3._contents;
        t2._contents = t1 + (t3.charCodeAt(0) == 0 ? t3 : t3);
      }
      return mismatchDescription;
    }
  };
  A.CustomMatcher_matches_closure.prototype = {
    call$1(frame) {
      return frame.get$$package() === "test" || frame.get$$package() === "stream_channel" || frame.get$$package() === "matcher";
    },
    $signature: 102
  };
  A.StringDescription.prototype = {
    get$length(_) {
      return this._out._contents.length;
    },
    toString$0(_) {
      var t1 = this._out._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    addDescriptionOf$1(value) {
      var t1, t2;
      if (value instanceof A.Matcher)
        value.describe$1(this);
      else {
        t1 = A.prettyPrint(value, 25, 80);
        t2 = this._out;
        t2._contents += t1;
      }
      return this;
    },
    addAll$4(_, start, separator, end, list) {
      var t2, separate, _i, item, t3,
        t1 = this._out;
      t1._contents += start;
      for (t2 = list.length, separate = false, _i = 0; _i < list.length; list.length === t2 || (0, A.throwConcurrentModificationError)(list), ++_i, separate = true) {
        item = list[_i];
        if (separate)
          t1._contents += separator;
        if (item instanceof A.Matcher)
          item.describe$1(this);
        else {
          t3 = A.prettyPrint(item, 25, 80);
          t1._contents += t3;
        }
      }
      t1._contents += end;
      return this;
    },
    $isDescription: 1
  };
  A._StringEqualsMatcher.prototype = {
    typedMatches$2(item, matchState) {
      return this._equals_matcher$_value === A._asString(item);
    },
    describe$1(description) {
      return description.addDescriptionOf$1(this._equals_matcher$_value);
    },
    describeTypedMismatch$4(item, mismatchDescription, matchState, verbose) {
      var buff, escapedItem, escapedValue, minLength, minLength0, minLength1, start, t1, i;
      A._asString(item);
      buff = new A.StringBuffer("");
      buff._contents = "is different.";
      escapedItem = A.escape(item);
      escapedValue = A.escape(this._equals_matcher$_value);
      minLength = escapedItem.length;
      minLength0 = escapedValue.length;
      minLength1 = minLength < minLength0 ? minLength : minLength0;
      for (start = 0; start < minLength1; ++start) {
        if (!(start < minLength0))
          return A.ioore(escapedValue, start);
        if (!(start < minLength))
          return A.ioore(escapedItem, start);
        if (escapedValue.charCodeAt(start) !== escapedItem.charCodeAt(start))
          break;
      }
      if (start === minLength1) {
        t1 = buff._contents;
        if (minLength0 < minLength) {
          buff._contents = t1 + " Both strings start the same, but the actual value also has the following trailing characters: ";
          A._StringEqualsMatcher__writeTrailing(buff, escapedItem, minLength0);
        } else {
          buff._contents = t1 + " Both strings start the same, but the actual value is missing the following trailing characters: ";
          A._StringEqualsMatcher__writeTrailing(buff, escapedValue, minLength);
        }
      } else {
        buff._contents += "\nExpected: ";
        A._StringEqualsMatcher__writeLeading(buff, escapedValue, start);
        A._StringEqualsMatcher__writeTrailing(buff, escapedValue, start);
        buff._contents += "\n  Actual: ";
        A._StringEqualsMatcher__writeLeading(buff, escapedItem, start);
        A._StringEqualsMatcher__writeTrailing(buff, escapedItem, start);
        t1 = buff._contents += "\n          ";
        i = start > 10 ? 14 : start;
        for (; i > 0; --i) {
          t1 += " ";
          buff._contents = t1;
        }
        buff._contents = t1 + ("^\n Differ at offset " + start);
      }
      t1 = buff._contents;
      mismatchDescription._out._contents += t1.charCodeAt(0) == 0 ? t1 : t1;
      return mismatchDescription;
    }
  };
  A._DeepMatcher.prototype = {
    _compareIterables$5(expected, actual, matcher, depth, $location) {
      var expectedIterator, actualIterator, t1, index, expectedNext, actualNext, t2, newLocation, rp;
      type$.nullable__Mismatch_Function_4_nullable_Object_and_nullable_Object_and_String_and_int._as(matcher);
      if (type$.Iterable_dynamic._is(actual)) {
        expectedIterator = J.get$iterator$ax(expected);
        actualIterator = J.get$iterator$ax(actual);
        for (t1 = $location + "[", index = 0; true; ++index) {
          expectedNext = expectedIterator.moveNext$0();
          actualNext = actualIterator.moveNext$0();
          t2 = !expectedNext;
          if (t2 && !actualNext)
            return null;
          newLocation = t1 + index + "]";
          if (t2)
            return A._Mismatch$simple(newLocation, actual, "longer than expected");
          if (!actualNext)
            return A._Mismatch$simple(newLocation, actual, "shorter than expected");
          rp = matcher.call$4(expectedIterator.get$current(), actualIterator.get$current(), newLocation, depth);
          if (rp != null)
            return rp;
        }
      } else
        return A._Mismatch$simple($location, actual, "is not Iterable");
    },
    _compareSets$5(expected, actual, matcher, depth, $location) {
      var other, t1, expectedElement;
      type$.nullable__Mismatch_Function_4_nullable_Object_and_nullable_Object_and_String_and_int._as(matcher);
      if (type$.Iterable_dynamic._is(actual)) {
        other = J.toSet$0$ax(actual);
        for (t1 = expected.get$iterator(expected); t1.moveNext$0();) {
          expectedElement = t1.get$current();
          if (other.every$1(0, new A._DeepMatcher__compareSets_closure(matcher, expectedElement, $location, depth)))
            return new A._Mismatch($location, actual, new A._DeepMatcher__compareSets_closure0(expectedElement), false);
        }
        if (other.get$length(other) > expected.get$length(expected))
          return A._Mismatch$simple($location, actual, "larger than expected");
        else if (other.get$length(other) < expected.get$length(expected))
          return A._Mismatch$simple($location, actual, "smaller than expected");
        else
          return null;
      } else
        return A._Mismatch$simple($location, actual, "is not Iterable");
    },
    _recursiveMatch$4(expected, actual, $location, depth) {
      var e, t1, matchState, exception, err, key, t2, t3, rp, _this = this, _null = null;
      if (expected instanceof A.Matcher) {
        t1 = type$.dynamic;
        matchState = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
        if (expected.matches$2(actual, matchState))
          return _null;
        return new A._Mismatch($location, actual, new A._DeepMatcher__recursiveMatch_closure(expected, actual, matchState, depth), false);
      } else
        try {
          if (J.$eq$(expected, actual))
            return _null;
        } catch (exception) {
          e = A.unwrapException(exception);
          return new A._Mismatch($location, actual, new A._DeepMatcher__recursiveMatch_closure0(e), false);
        }
      t1 = _this._limit;
      if (depth > t1)
        return A._Mismatch$simple($location, actual, "recursion depth limit exceeded");
      if (depth === 0 || t1 > 1)
        if (type$.Set_dynamic._is(expected))
          return _this._compareSets$5(expected, actual, _this.get$_recursiveMatch(), depth + 1, $location);
        else if (type$.Iterable_dynamic._is(expected))
          return _this._compareIterables$5(expected, actual, _this.get$_recursiveMatch(), depth + 1, $location);
        else {
          t1 = type$.Map_dynamic_dynamic;
          if (t1._is(expected)) {
            if (!t1._is(actual))
              return A._Mismatch$simple($location, actual, "expected a map");
            err = expected.get$length(expected) === actual.get$length(actual) ? "" : "has different length and ";
            for (t1 = expected.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
              key = t1.get$current();
              if (!actual.containsKey$1(key))
                return new A._Mismatch($location, actual, new A._DeepMatcher__recursiveMatch_closure1(err, key), false);
            }
            for (t1 = actual.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
              key = t1.get$current();
              if (!expected.containsKey$1(key))
                return new A._Mismatch($location, actual, new A._DeepMatcher__recursiveMatch_closure2(err, key), false);
            }
            for (t1 = expected.get$keys(), t1 = t1.get$iterator(t1), t2 = $location + "['", t3 = depth + 1; t1.moveNext$0();) {
              key = t1.get$current();
              rp = _this._recursiveMatch$4(expected.$index(0, key), actual.$index(0, key), t2 + A.S(key) + "']", t3);
              if (rp != null)
                return rp;
            }
            return _null;
          }
        }
      if (depth > 0)
        return new A._Mismatch($location, actual, new A._DeepMatcher__recursiveMatch_closure3(expected), true);
      else
        return new A._Mismatch($location, actual, _null, false);
    },
    matches$2(actual, matchState) {
      var t1,
        mismatch = this._recursiveMatch$4(this._expected, actual, "", 0);
      if (mismatch == null)
        return true;
      t1 = type$.dynamic;
      A.addStateInfo(matchState, A.LinkedHashMap_LinkedHashMap$_literal(["mismatch", mismatch], t1, t1));
      return false;
    },
    describe$1(description) {
      return description.addDescriptionOf$1(this._expected);
    },
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      var t2,
        mismatch = type$._Mismatch._as(type$.Map_dynamic_dynamic._as(matchState).$index(0, "mismatch")),
        describeProblem = mismatch.describeProblem,
        t1 = mismatch.location;
      if (t1.length !== 0) {
        t2 = mismatchDescription._out;
        t1 = (t2._contents += "at location ") + t1;
        t2._contents = t1;
        t2._contents = t1 + " is ";
        mismatchDescription.addDescriptionOf$1(mismatch.actual);
        if (describeProblem != null) {
          t1 = " " + (mismatch.instead ? "instead of" : "which") + " ";
          t2._contents += t1;
          describeProblem.call$2(mismatchDescription, false);
        }
      } else if (describeProblem == null) {
        t1 = mismatchDescription._out;
        t2 = t1._contents;
        if (t2.length > 0) {
          t1._contents = t2 + "is ";
          mismatchDescription.addDescriptionOf$1(item);
        }
      } else
        describeProblem.call$2(mismatchDescription, false);
      return mismatchDescription;
    }
  };
  A._DeepMatcher__compareSets_closure.prototype = {
    call$1(actualElement) {
      var _this = this;
      return _this.matcher.call$4(_this.expectedElement, actualElement, _this.location, _this.depth) != null;
    },
    $signature: 17
  };
  A._DeepMatcher__compareSets_closure0.prototype = {
    call$2(description, verbose) {
      description._out._contents += "does not contain ";
      return description.addDescriptionOf$1(this.expectedElement);
    },
    $signature: 50
  };
  A._DeepMatcher__recursiveMatch_closure.prototype = {
    call$2(description, verbose) {
      var _this = this,
        t1 = description._out,
        t2 = t1._contents,
        t3 = _this.expected;
      t3.describeMismatch$4(_this.actual, description, _this.matchState, false);
      if (_this.depth > 0 && t1._contents.length === t2.length) {
        t1._contents += "does not match ";
        t3.describe$1(description);
      }
    },
    $signature: 50
  };
  A._DeepMatcher__recursiveMatch_closure0.prototype = {
    call$2(description, verbose) {
      description._out._contents += "== threw ";
      return description.addDescriptionOf$1(this.e);
    },
    $signature: 50
  };
  A._DeepMatcher__recursiveMatch_closure1.prototype = {
    call$2(description, verbose) {
      description._out._contents += this.err + "is missing map key ";
      return description.addDescriptionOf$1(this.key);
    },
    $signature: 50
  };
  A._DeepMatcher__recursiveMatch_closure2.prototype = {
    call$2(description, verbose) {
      description._out._contents += this.err + "has extra map key ";
      return description.addDescriptionOf$1(this.key);
    },
    $signature: 50
  };
  A._DeepMatcher__recursiveMatch_closure3.prototype = {
    call$2(description, verbose) {
      return description.addDescriptionOf$1(this.expected);
    },
    $signature: 50
  };
  A._Mismatch.prototype = {};
  A._Mismatch$simple_closure.prototype = {
    call$2(description, verbose) {
      description._out._contents += this.problem;
      return description;
    },
    $signature: 50
  };
  A.AsyncMatcher.prototype = {
    matches$2(item, matchState) {
      var result = this.matchAsync$1(item);
      A.expect(result, A.anyOf(A._setArrayType([new A._DeepMatcher(null, 100), B.C_TypeMatcher, B.C_TypeMatcher0], type$.JSArray_Matcher), null, null), string$.matchA);
      if (result instanceof A._Future)
        result.then$1$1(new A.AsyncMatcher_matches_closure(this, item, A.TestHandle_current().markPending$0()), type$.Null);
      else if (typeof result == "string") {
        matchState.$indexSet(0, this, result);
        return false;
      }
      return true;
    },
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      var t1 = new A.StringBuffer("");
      t1._contents = A._asString(type$.Map_dynamic_dynamic._as(matchState).$index(0, this));
      return new A.StringDescription(t1);
    }
  };
  A.AsyncMatcher_matches_closure.prototype = {
    call$1(realResult) {
      if (realResult != null)
        A.fail(A.formatFailure(this.$this, this.item, A._asString(realResult), null));
      this.outstandingWork.complete$0();
    },
    $signature: 33
  };
  A._expect_closure2.prototype = {
    call$5(actual, matcher, reason, matchState, verbose) {
      var t1 = new A.StringBuffer("");
      matcher.describeMismatch$4(actual, new A.StringDescription(t1), matchState, false);
      t1 = t1._contents;
      return A.formatFailure(matcher, actual, t1.charCodeAt(0) == 0 ? t1 : t1, reason);
    },
    $signature: 284
  };
  A._expect_closure.prototype = {
    call$1(realResult) {
      var t1;
      if (realResult == null)
        return;
      t1 = this._box_0;
      A.fail(A.formatFailure(type$.Matcher._as(t1.matcher), this.actual, A._asString(realResult), t1.reason));
    },
    $signature: 33
  };
  A._expect_closure0.prototype = {
    call$0() {
    },
    $signature: 1
  };
  A._expect_closure1.prototype = {
    call$0() {
    },
    $signature: 1
  };
  A.Throws.prototype = {
    matchAsync$1(item) {
      var value, error, trace, exception,
        t1 = type$.Function;
      if (!t1._is(item) && !(item instanceof A._Future))
        return "was not a Function or Future";
      if (item instanceof A._Future)
        return this._matchFuture$2(item, "emitted ");
      try {
        value = t1._as(item).call$0();
        if (value instanceof A._Future) {
          t1 = this._matchFuture$2(value, "returned a Future that emitted ");
          return t1;
        }
        t1 = new A.StringDescription(new A.StringBuffer("")).addDescriptionOf$1(value)._out._contents;
        t1 = A.indent0(t1.charCodeAt(0) == 0 ? t1 : t1, "returned ");
        return t1;
      } catch (exception) {
        error = A.unwrapException(exception);
        trace = A.getTraceFromException(exception);
        t1 = this._check$2(error, trace);
        return t1;
      }
    },
    _matchFuture$2(future, messagePrefix) {
      return this._matchFuture$body$Throws(future, messagePrefix);
    },
    _matchFuture$body$Throws(future, messagePrefix) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_String),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$self = this, value, error, trace, t1, exception, $async$exception;
      var $async$_matchFuture$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(future, $async$_matchFuture$2);
            case 7:
              // returning from await.
              value = $async$result;
              t1 = new A.StringDescription(new A.StringBuffer("")).addDescriptionOf$1(value)._out._contents;
              t1 = A.indent0(t1.charCodeAt(0) == 0 ? t1 : t1, messagePrefix);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              error = A.unwrapException($async$exception);
              trace = A.getTraceFromException($async$exception);
              t1 = $async$self._check$2(error, trace);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$_matchFuture$2, $async$completer);
    },
    describe$1(description) {
      description._out._contents += "throws ";
      return description.addDescriptionOf$1(this._matcher);
    },
    _check$2(error, trace) {
      var t1, matchState, result;
      type$.nullable_StackTrace._as(trace);
      t1 = type$.dynamic;
      matchState = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      t1 = this._matcher;
      if (t1.matches$2(error, matchState))
        return null;
      t1 = t1.describeMismatch$4(error, new A.StringDescription(new A.StringBuffer("")), matchState, false)._out._contents;
      result = t1.charCodeAt(0) == 0 ? t1 : t1;
      t1 = new A.StringDescription(new A.StringBuffer("")).addDescriptionOf$1(error)._out._contents;
      t1 = A.indent0(t1.charCodeAt(0) == 0 ? t1 : t1, "threw ") + "\n";
      if (trace != null)
        t1 += A.indent0(A.TestHandle_current()._stackTraceFormatter.formatStackTrace$1(trace).toString$0(0), "stack ") + "\n";
      if (result.length !== 0)
        t1 += A.indent0(result, "which ") + "\n";
      return B.JSString_methods.trimRight$0(t1.charCodeAt(0) == 0 ? t1 : t1);
    }
  };
  A.FeatureMatcher.prototype = {
    matches$2(item, matchState) {
      return this.super$TypeMatcher$matches(item, matchState) && this.typedMatches$2(A._instanceType(this)._eval$1("FeatureMatcher.T")._as(item), matchState);
    },
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      type$.Map_dynamic_dynamic._as(matchState);
      if (A._instanceType(this)._eval$1("FeatureMatcher.T")._is(item))
        return this.describeTypedMismatch$4(item, mismatchDescription, matchState, false);
      mismatchDescription._out._contents += "not an ";
      return this.super$TypeMatcher$describe(mismatchDescription);
    },
    describeTypedMismatch$4(item, mismatchDescription, matchState, verbose) {
      A._instanceType(this)._eval$1("FeatureMatcher.T")._as(item);
      return mismatchDescription;
    }
  };
  A.Matcher.prototype = {
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      type$.Map_dynamic_dynamic._as(matchState);
      return mismatchDescription;
    }
  };
  A._EveryElement.prototype = {
    typedMatches$2(item, matchState) {
      var t1, t2, i, element, innerState;
      for (t1 = J.get$iterator$ax(type$.Iterable_dynamic._as(item)), t2 = this._iterable_matchers$_matcher, i = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (!t2.matches$2(element, matchState)) {
          t1 = type$.dynamic;
          t2 = A.LinkedHashMap_LinkedHashMap$_literal(["index", i, "element", element], t1, t1);
          innerState = A.LinkedHashMap_LinkedHashMap(t1, t1);
          innerState.addAll$1(0, matchState);
          matchState.clear$0(0);
          matchState.$indexSet(0, "state", innerState);
          matchState.addAll$1(0, t2);
          return false;
        }
        ++i;
      }
      return true;
    },
    describe$1(description) {
      var t1;
      description._out._contents += "every element(";
      t1 = description.addDescriptionOf$1(this._iterable_matchers$_matcher);
      t1._out._contents += ")";
      return t1;
    },
    describeTypedMismatch$4(item, mismatchDescription, matchState, verbose) {
      var index, element, t1, t2, t3, t4;
      if (matchState.$index(0, "index") != null) {
        index = matchState.$index(0, "index");
        element = matchState.$index(0, "element");
        t1 = mismatchDescription._out;
        t1._contents += "has value ";
        mismatchDescription.addDescriptionOf$1(element)._out._contents += " which ";
        t2 = new A.StringBuffer("");
        t3 = this._iterable_matchers$_matcher;
        t3.describeMismatch$4(element, new A.StringDescription(t2), type$.Map_dynamic_dynamic._as(matchState.$index(0, "state")), false);
        t2 = t2._contents;
        t4 = t1._contents;
        if (t2.length > 0)
          t1._contents = t4 + (t2.charCodeAt(0) == 0 ? t2 : t2);
        else {
          t1._contents = t4 + "doesn't match ";
          t3.describe$1(mismatchDescription);
        }
        t2 = " at index " + A.S(index);
        t1._contents += t2;
        return mismatchDescription;
      }
      return this.super$FeatureMatcher$describeMismatch(item, mismatchDescription, matchState, false);
    }
  };
  A._IterableMatcher.prototype = {};
  A._UnorderedMatches.prototype = {
    _test$1(values) {
      var edges, _i, v, m, t4, matched, t5, valueIndex, matcherIndex, remainingUnmatched,
        t1 = this._iterable_matchers$_expected,
        t2 = t1.length,
        t3 = values.length;
      if (t2 > t3)
        return "has too few elements (" + t3 + " < " + t2 + ")";
      if (t3 > 4294967295)
        A.throwExpression(A.RangeError$range(t3, 0, 4294967295, "length", null));
      edges = J.JSArray_JSArray$markFixed(new Array(t3), type$.List_int);
      for (t2 = type$.JSArray_int, _i = 0; _i < t3; ++_i)
        edges[_i] = A._setArrayType([], t2);
      for (t2 = type$.dynamic, t3 = edges.length, v = 0; v < values.length; ++v)
        for (m = 0; m < t1.length; ++m) {
          t4 = t1[m];
          if (!(v < values.length))
            return A.ioore(values, v);
          if (t4.matches$2(values[v], A.LinkedHashMap_LinkedHashMap$_empty(t2, t2))) {
            if (!(v < t3))
              return A.ioore(edges, v);
            B.JSArray_methods.add$1(edges[v], m);
          }
        }
      t2 = t1.length;
      matched = A.List_List$filled(t2, null, false, type$.nullable_int);
      for (t3 = type$.List_List_int, t4 = type$.List_nullable_int, t5 = type$.int, valueIndex = 0; valueIndex < values.length; ++valueIndex)
        this._findPairingInner$4(t3._as(edges), valueIndex, t4._as(matched), A.LinkedHashSet_LinkedHashSet$_empty(t5));
      for (t3 = t1.length, matcherIndex = 0; matcherIndex < t3; ++matcherIndex) {
        if (!(matcherIndex < t2))
          return A.ioore(matched, matcherIndex);
        if (matched[matcherIndex] == null) {
          t2 = new A.StringBuffer("");
          t2._contents = "has no match for ";
          if (!(matcherIndex < t1.length))
            return A.ioore(t1, matcherIndex);
          t1[matcherIndex].describe$1(new A.StringDescription(t2));
          t2._contents += " at index " + matcherIndex;
          t1 = B.JSArray_methods.sublist$1(matched, matcherIndex + 1);
          t3 = A._arrayInstanceType(t1);
          remainingUnmatched = new A.WhereIterable(t1, t3._eval$1("bool(1)")._as(new A._UnorderedMatches__test_closure()), t3._eval$1("WhereIterable<1>")).get$length(0);
          t1 = t2._contents;
          if (remainingUnmatched === 0)
            t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
          else {
            t1 = t2._contents = t1 + (" along with " + remainingUnmatched + " other unmatched");
            t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
          }
          return t1;
        }
      }
      return null;
    },
    typedMatches$2(item, mismatchState) {
      return this._test$1(J.toList$0$ax(type$.Iterable_dynamic._as(item))) == null;
    },
    describe$1(description) {
      var t1;
      description._out._contents += "matches ";
      t1 = description.addAll$4(0, "[", ", ", "]", this._iterable_matchers$_expected);
      t1._out._contents += " unordered";
      return t1;
    },
    describeTypedMismatch$4(item, mismatchDescription, matchState, verbose) {
      var t1 = this._test$1(type$.List_dynamic._as(J.toList$0$ax(item)));
      t1.toString;
      mismatchDescription._out._contents += t1;
      return mismatchDescription;
    },
    _findPairingInner$4(edges, valueIndex, matched, reserved) {
      var t1, t2, t3, t4, previouslyMatched;
      type$.List_List_int._as(edges);
      type$.List_nullable_int._as(matched);
      type$.Set_int._as(reserved);
      if (!(valueIndex < edges.length))
        return A.ioore(edges, valueIndex);
      t1 = edges[valueIndex];
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("bool(1)")._as(new A._UnorderedMatches__findPairingInner_closure(reserved));
      for (t1 = B.JSArray_methods.get$iterator(t1), t2 = new A.WhereIterator(t1, t3, t2._eval$1("WhereIterator<1>")), t3 = matched.length; t2.moveNext$0();) {
        t4 = t1.get$current();
        reserved.add$1(0, t4);
        if (t4 >>> 0 !== t4 || t4 >= t3)
          return A.ioore(matched, t4);
        previouslyMatched = matched[t4];
        if (previouslyMatched == null || this._findPairingInner$4(edges, previouslyMatched, matched, reserved)) {
          B.JSArray_methods.$indexSet(matched, t4, valueIndex);
          return true;
        }
      }
      return false;
    }
  };
  A._UnorderedMatches__test_closure.prototype = {
    call$1(m) {
      return A._asIntQ(m) == null;
    },
    $signature: 90
  };
  A._UnorderedMatches__findPairingInner_closure.prototype = {
    call$1(m) {
      return !this.reserved.contains$1(0, A._asInt(m));
    },
    $signature: 149
  };
  A._ContainsAll.prototype = {
    describe$1(description) {
      description._out._contents += "contains all of ";
      return description.addDescriptionOf$1(this._unwrappedExpected);
    }
  };
  A._IsNot.prototype = {
    matches$2(item, matchState) {
      return !this._operator_matchers$_matcher.matches$2(item, matchState);
    },
    describe$1(description) {
      description._out._contents += "not ";
      return description.addDescriptionOf$1(this._operator_matchers$_matcher);
    }
  };
  A._AllOf.prototype = {
    matches$2(item, matchState) {
      var t1, t2, _i, matcher, innerState;
      for (t1 = this._matchers, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        matcher = t1[_i];
        if (!matcher.matches$2(item, matchState)) {
          t1 = type$.dynamic;
          t2 = A.LinkedHashMap_LinkedHashMap$_literal(["matcher", matcher], t1, t1);
          innerState = A.LinkedHashMap_LinkedHashMap(t1, t1);
          innerState.addAll$1(0, matchState);
          matchState.clear$0(0);
          matchState.$indexSet(0, "state", innerState);
          matchState.addAll$1(0, t2);
          return false;
        }
      }
      return true;
    },
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      type$.Map_dynamic_dynamic._as(matchState);
      matchState.$index(0, "matcher").describeMismatch$4(item, mismatchDescription, matchState.$index(0, "state"), false);
      return mismatchDescription;
    },
    describe$1(description) {
      return description.addAll$4(0, "(", " and ", ")", this._matchers);
    }
  };
  A._AnyOf.prototype = {
    matches$2(item, matchState) {
      var t1, t2, _i;
      for (t1 = this._matchers, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        if (t1[_i].matches$2(item, matchState))
          return true;
      return false;
    },
    describe$1(description) {
      return description.addAll$4(0, "(", " or ", ")", this._matchers);
    }
  };
  A._wrapArgs_closure.prototype = {
    call$1(e) {
      return e != null;
    },
    $signature: 23
  };
  A._OrderingMatcher.prototype = {
    matches$2(item, matchState) {
      var _this = this,
        t1 = _this._order_matchers$_value,
        t2 = J.getInterceptor$(item);
      if (t2.$eq(item, t1))
        return _this._equalValue;
      else if (t2.$lt(item, t1))
        return _this._lessThanValue;
      else if (t2.$gt(item, t1))
        return _this._greaterThanValue;
      else
        return false;
    },
    describe$1(description) {
      var t1 = this._comparisonDescription,
        t2 = description._out,
        t3 = t2._contents;
      if (this._valueInDescription) {
        t1 = t3 + t1;
        t2._contents = t1;
        t2._contents = t1 + " ";
        return description.addDescriptionOf$1(this._order_matchers$_value);
      } else {
        t2._contents = t3 + t1;
        return description;
      }
    },
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      type$.Map_dynamic_dynamic._as(matchState);
      mismatchDescription._out._contents += "is not ";
      return this.describe$1(mismatchDescription);
    }
  };
  A.prettyPrint_prettyPrintImpl.prototype = {
    call$4(object, indent, seen, $top) {
      var description, type, t2, strings, t3, singleLine, value, defaultToString, _this = this, t1 = {};
      t1.seen = seen;
      if (object instanceof A.Matcher) {
        description = new A.StringDescription(new A.StringBuffer(""));
        object.describe$1(description);
        return "<" + description.toString$0(0) + ">";
      }
      if (seen.contains$1(0, object))
        return "(recursive)";
      t1.seen = seen.union$1(A.LinkedHashSet_LinkedHashSet$_literal([object], type$.nullable_Object));
      t1 = new A.prettyPrint_prettyPrintImpl_pp(t1, _this, indent);
      if (type$.Iterable_dynamic._is(object)) {
        type = type$.List_dynamic._is(object) ? "" : A._typeName(object) + ":";
        t2 = type$.String;
        strings = J.map$1$1$ax(object, t1, t2).toList$0(0);
        t1 = strings.length;
        t3 = _this.maxItems;
        if (t1 > t3)
          B.JSArray_methods.replaceRange$3(strings, t3 - 1, t1, A._setArrayType(["..."], type$.JSArray_String));
        singleLine = type + "[" + B.JSArray_methods.join$1(strings, ", ") + "]";
        if (singleLine.length + indent <= _this.maxLineLength && !B.JSString_methods.contains$1(singleLine, "\n"))
          return singleLine;
        t1 = A._arrayInstanceType(strings);
        return type + "[\n" + new A.MappedListIterable(strings, t1._eval$1("String(1)")._as(new A.prettyPrint_prettyPrintImpl_closure(indent)), t1._eval$1("MappedListIterable<1,String>")).join$1(0, ",\n") + "\n" + B.JSArray_methods.join$1(A.List_List$filled(indent, " ", false, t2), "") + "]";
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        t2 = object.get$keys();
        t3 = type$.String;
        strings = t2.map$1$1(t2, new A.prettyPrint_prettyPrintImpl_closure0(t1, object), t3).toList$0(0);
        t1 = strings.length;
        t2 = _this.maxItems;
        if (t1 > t2)
          B.JSArray_methods.replaceRange$3(strings, t2 - 1, t1, A._setArrayType(["..."], type$.JSArray_String));
        singleLine = "{" + B.JSArray_methods.join$1(strings, ", ") + "}";
        if (singleLine.length + indent <= _this.maxLineLength && !B.JSString_methods.contains$1(singleLine, "\n"))
          return singleLine;
        t1 = A._arrayInstanceType(strings);
        return "{\n" + new A.MappedListIterable(strings, t1._eval$1("String(1)")._as(new A.prettyPrint_prettyPrintImpl_closure1(indent)), t1._eval$1("MappedListIterable<1,String>")).join$1(0, ",\n") + "\n" + B.JSArray_methods.join$1(A.List_List$filled(indent, " ", false, t3), "") + "}";
      } else {
        t1 = type$.String;
        if (typeof object == "string")
          return "'" + new A.MappedListIterable(A._setArrayType(object.split("\n"), type$.JSArray_String), type$.String_Function_String._as(A.pretty_print___escapeString$closure()), type$.MappedListIterable_String_String).join$1(0, "\\n'\n" + B.JSArray_methods.join$1(A.List_List$filled(indent + 2, " ", false, t1), "") + "'") + "'";
        else {
          t2 = J.toString$0$(object);
          t1 = B.JSArray_methods.join$1(A.List_List$filled(indent, " ", false, t1), "");
          value = A.stringReplaceAllUnchecked(t2, "\n", t1 + "\n");
          defaultToString = B.JSString_methods.startsWith$1(value, "Instance of ");
          if ($top)
            value = "<" + value + ">";
          if (typeof object == "number" || A._isBool(object) || type$.Function._is(object) || object instanceof A.JSSyntaxRegExp || object instanceof A.MapEntry || object instanceof A.Expando || object == null || defaultToString)
            return value;
          else
            return A._typeName(object) + ":" + value;
        }
      }
    },
    $signature: 282
  };
  A.prettyPrint_prettyPrintImpl_pp.prototype = {
    call$1(child) {
      return this.prettyPrintImpl.call$4(child, this.indent + 2, this._box_0.seen, false);
    },
    $signature: 81
  };
  A.prettyPrint_prettyPrintImpl_closure.prototype = {
    call$1(string) {
      A._asString(string);
      return B.JSArray_methods.join$1(A.List_List$filled(this.indent + 2, " ", false, type$.String), "") + string;
    },
    $signature: 31
  };
  A.prettyPrint_prettyPrintImpl_closure0.prototype = {
    call$1(key) {
      var t1 = this.pp;
      return A.S(t1.call$1(key)) + ": " + A.S(t1.call$1(this.object.$index(0, key)));
    },
    $signature: 281
  };
  A.prettyPrint_prettyPrintImpl_closure1.prototype = {
    call$1(string) {
      A._asString(string);
      return B.JSArray_methods.join$1(A.List_List$filled(this.indent + 2, " ", false, type$.String), "") + string;
    },
    $signature: 31
  };
  A._MatchesRegExp.prototype = {
    typedMatches$2(item, matchState) {
      A._asString(item);
      return this._regexp._nativeRegExp.test(item);
    },
    describe$1(description) {
      description._out._contents += "match '" + this._regexp.pattern + "'";
      return description;
    }
  };
  A.TypeMatcher.prototype = {
    describe$1(description) {
      var t1 = A._rtiToString(A.createRuntimeType(A._instanceType(this)._eval$1("TypeMatcher.T"))._rti, null),
        t2 = $.$get$_dart2DynamicArgs(),
        $name = A.stringReplaceAllUnchecked(t1, t2, "");
      t1 = "<Instance of '" + $name + "'>";
      t2 = description._out;
      t2._contents += t1;
      return description;
    },
    matches$2(item, matchState) {
      return A._instanceType(this)._eval$1("TypeMatcher.T")._is(item);
    },
    describeMismatch$4(item, mismatchDescription, matchState, verbose) {
      var t1, t2, $name;
      type$.Map_dynamic_dynamic._as(matchState);
      t1 = A._rtiToString(A.createRuntimeType(A._instanceType(this)._eval$1("TypeMatcher.T"))._rti, null);
      t2 = $.$get$_dart2DynamicArgs();
      $name = A.stringReplaceAllUnchecked(t1, t2, "");
      t1 = "is not an instance of '" + $name + "'";
      t2 = mismatchDescription._out;
      t2._contents += t1;
      return mismatchDescription;
    }
  };
  A.wrapMatcher_closure.prototype = {
    call$1(a) {
      return A._asBool(this.valueOrMatcher.call$1(a));
    },
    $signature: 23
  };
  A.escape_closure.prototype = {
    call$1(match) {
      var t1,
        mapped = B.Map_EU2Kv.$index(0, match.$index(0, 0));
      if (mapped != null)
        return mapped;
      t1 = match.$index(0, 0);
      t1.toString;
      return A._getHexLiteral(t1);
    },
    $signature: 280
  };
  A.Context.prototype = {
    absolute$15(part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15) {
      var t1;
      A._validateArgList("absolute", A._setArrayType([part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15], type$.JSArray_nullable_String));
      t1 = this.style;
      t1 = t1.rootLength$1(part1) > 0 && !t1.isRootRelative$1(part1);
      if (t1)
        return part1;
      t1 = this._context$_current;
      return this.join$16(0, t1 == null ? A.current() : t1, part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15);
    },
    absolute$1(part1) {
      var _null = null;
      return this.absolute$15(part1, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    join$16(_, part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15, part16) {
      var parts = A._setArrayType([part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15, part16], type$.JSArray_nullable_String);
      A._validateArgList("join", parts);
      return this.joinAll$1(new A.WhereTypeIterable(parts, type$.WhereTypeIterable_String));
    },
    join$2(_, part1, part2) {
      var _null = null;
      return this.join$16(0, part1, part2, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    joinAll$1(parts) {
      var t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, t4, t5, parsed, path, t6;
      type$.Iterable_String._as(parts);
      for (t1 = parts.$ti, t2 = t1._eval$1("bool(Iterable.E)")._as(new A.Context_joinAll_closure()), t3 = parts.get$iterator(0), t1 = new A.WhereIterator(t3, t2, t1._eval$1("WhereIterator<Iterable.E>")), t2 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false, t4 = ""; t1.moveNext$0();) {
        t5 = t3.get$current();
        if (t2.isRootRelative$1(t5) && isAbsoluteAndNotRootRelative) {
          parsed = A.ParsedPath_ParsedPath$parse(t5, t2);
          path = t4.charCodeAt(0) == 0 ? t4 : t4;
          t4 = B.JSString_methods.substring$2(path, 0, t2.rootLength$2$withDrive(path, true));
          parsed.root = t4;
          if (t2.needsSeparator$1(t4))
            B.JSArray_methods.$indexSet(parsed.separators, 0, t2.get$separator());
          t4 = parsed.toString$0(0);
        } else if (t2.rootLength$1(t5) > 0) {
          isAbsoluteAndNotRootRelative = !t2.isRootRelative$1(t5);
          t4 = t5;
        } else {
          t6 = t5.length;
          if (t6 !== 0) {
            if (0 >= t6)
              return A.ioore(t5, 0);
            t6 = t2.containsSeparator$1(t5[0]);
          } else
            t6 = false;
          if (!t6)
            if (needsSeparator)
              t4 += t2.get$separator();
          t4 += t5;
        }
        needsSeparator = t2.needsSeparator$1(t5);
      }
      return t4.charCodeAt(0) == 0 ? t4 : t4;
    },
    split$1(_, path) {
      var parsed = A.ParsedPath_ParsedPath$parse(path, this.style),
        t1 = parsed.parts,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("WhereIterable<1>");
      t1 = A.List_List$_of(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Context_split_closure()), t3), t3._eval$1("Iterable.E"));
      parsed.set$parts(t1);
      t1 = parsed.root;
      if (t1 != null)
        B.JSArray_methods.insert$2(parsed.parts, 0, t1);
      return parsed.parts;
    },
    normalize$1(path) {
      var parsed;
      if (!this._needsNormalization$1(path))
        return path;
      parsed = A.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.normalize$0();
      return parsed.toString$0(0);
    },
    _needsNormalization$1(path) {
      var t2, i, start, previous, previousPrevious, codeUnit, t3,
        t1 = this.style,
        root = t1.rootLength$1(path);
      if (root !== 0) {
        if (t1 === $.$get$Style_windows())
          for (t2 = path.length, i = 0; i < root; ++i) {
            if (!(i < t2))
              return A.ioore(path, i);
            if (path.charCodeAt(i) === 47)
              return true;
          }
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      for (t2 = path.length, i = start, previousPrevious = null; i < t2; ++i, previousPrevious = previous, previous = codeUnit) {
        if (!(i >= 0))
          return A.ioore(path, i);
        codeUnit = path.charCodeAt(i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t1 === $.$get$Style_windows() && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t3 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t3 = false;
          if (t3)
            return true;
        }
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$1(path) {
      var from, fromParsed, pathParsed, t3, t4, t5, t6, _this = this,
        _s26_ = 'Unable to find a path to "',
        t1 = _this.style,
        t2 = t1.rootLength$1(path);
      if (t2 <= 0)
        return _this.normalize$1(path);
      t2 = _this._context$_current;
      from = t2 == null ? A.current() : t2;
      if (t1.rootLength$1(from) <= 0 && t1.rootLength$1(path) > 0)
        return _this.normalize$1(path);
      if (t1.rootLength$1(path) <= 0 || t1.isRootRelative$1(path))
        path = _this.absolute$1(path);
      if (t1.rootLength$1(path) <= 0 && t1.rootLength$1(from) > 0)
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      fromParsed = A.ParsedPath_ParsedPath$parse(from, t1);
      fromParsed.normalize$0();
      pathParsed = A.ParsedPath_ParsedPath$parse(path, t1);
      pathParsed.normalize$0();
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return A.ioore(t2, 0);
        t2 = t2[0] === ".";
      } else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      t2 = fromParsed.root;
      t3 = pathParsed.root;
      if (t2 != t3)
        t2 = t2 == null || t3 == null || !t1.pathsEqual$2(t2, t3);
      else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      while (true) {
        t2 = fromParsed.parts;
        t3 = t2.length;
        t4 = false;
        if (t3 !== 0) {
          t5 = pathParsed.parts;
          t6 = t5.length;
          if (t6 !== 0) {
            if (0 >= t3)
              return A.ioore(t2, 0);
            t2 = t2[0];
            if (0 >= t6)
              return A.ioore(t5, 0);
            t5 = t1.pathsEqual$2(t2, t5[0]);
            t2 = t5;
          } else
            t2 = t4;
        } else
          t2 = t4;
        if (!t2)
          break;
        B.JSArray_methods.removeAt$1(fromParsed.parts, 0);
        B.JSArray_methods.removeAt$1(fromParsed.separators, 1);
        B.JSArray_methods.removeAt$1(pathParsed.parts, 0);
        B.JSArray_methods.removeAt$1(pathParsed.separators, 1);
      }
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return A.ioore(t2, 0);
        t2 = t2[0] === "..";
      } else
        t2 = false;
      if (t2)
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      t2 = type$.String;
      B.JSArray_methods.insertAll$2(pathParsed.parts, 0, A.List_List$filled(t3, "..", false, t2));
      B.JSArray_methods.$indexSet(pathParsed.separators, 0, "");
      B.JSArray_methods.insertAll$2(pathParsed.separators, 1, A.List_List$filled(fromParsed.parts.length, t1.get$separator(), false, t2));
      t1 = pathParsed.parts;
      t2 = t1.length;
      if (t2 === 0)
        return ".";
      if (t2 > 1 && B.JSArray_methods.get$last(t1) === ".") {
        B.JSArray_methods.removeLast$0(pathParsed.parts);
        t1 = pathParsed.separators;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        B.JSArray_methods.add$1(t1, "");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(0);
    },
    toUri$1(path) {
      var t2,
        t1 = this.style;
      if (t1.rootLength$1(path) <= 0)
        return t1.relativePathToUri$1(path);
      else {
        t2 = this._context$_current;
        return t1.absolutePathToUri$1(this.join$2(0, t2 == null ? A.current() : t2, path));
      }
    },
    prettyUri$1(uri) {
      var path, rel, _this = this,
        typedUri = A._parseUri(uri);
      if (typedUri.get$scheme() === "file" && _this.style === $.$get$Style_url())
        return typedUri.toString$0(0);
      else if (typedUri.get$scheme() !== "file" && typedUri.get$scheme() !== "" && _this.style !== $.$get$Style_url())
        return typedUri.toString$0(0);
      path = _this.normalize$1(_this.style.pathFromUri$1(A._parseUri(typedUri)));
      rel = _this.relative$1(path);
      return _this.split$1(0, rel).length > _this.split$1(0, path).length ? path : rel;
    }
  };
  A.Context_joinAll_closure.prototype = {
    call$1(part) {
      return A._asString(part) !== "";
    },
    $signature: 8
  };
  A.Context_split_closure.prototype = {
    call$1(part) {
      return A._asString(part).length !== 0;
    },
    $signature: 8
  };
  A._validateArgList_closure.prototype = {
    call$1(arg) {
      A._asStringQ(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 250
  };
  A.InternalStyle.prototype = {
    getRoot$1(path) {
      var t1,
        $length = this.rootLength$1(path);
      if ($length > 0)
        return B.JSString_methods.substring$2(path, 0, $length);
      if (this.isRootRelative$1(path)) {
        if (0 >= path.length)
          return A.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    },
    relativePathToUri$1(path) {
      var segments, t2, _null = null,
        t1 = path.length;
      if (t1 === 0)
        return A._Uri__Uri(_null, _null, _null, _null);
      segments = A.Context_Context(this).split$1(0, path);
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      if (this.isSeparator$1(path.charCodeAt(t2)))
        B.JSArray_methods.add$1(segments, "");
      return A._Uri__Uri(_null, _null, segments, _null);
    },
    pathsEqual$2(path1, path2) {
      return path1 === path2;
    }
  };
  A.ParsedPath.prototype = {
    get$hasTrailingSeparator() {
      var t1 = this.parts;
      if (t1.length !== 0)
        t1 = B.JSArray_methods.get$last(t1) === "" || B.JSArray_methods.get$last(this.separators) !== "";
      else
        t1 = false;
      return t1;
    },
    removeTrailingSeparators$0() {
      var t1, t2, _this = this;
      while (true) {
        t1 = _this.parts;
        if (!(t1.length !== 0 && B.JSArray_methods.get$last(t1) === ""))
          break;
        B.JSArray_methods.removeLast$0(_this.parts);
        t1 = _this.separators;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      }
      t1 = _this.separators;
      t2 = t1.length;
      if (t2 !== 0)
        B.JSArray_methods.$indexSet(t1, t2 - 1, "");
    },
    normalize$0() {
      var t1, t2, leadingDoubles, _i, part, t3, _this = this,
        newParts = A._setArrayType([], type$.JSArray_String);
      for (t1 = _this.parts, t2 = t1.length, leadingDoubles = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        part = t1[_i];
        if (!(part === "." || part === ""))
          if (part === "..") {
            t3 = newParts.length;
            if (t3 !== 0) {
              if (0 >= t3)
                return A.ioore(newParts, -1);
              newParts.pop();
            } else
              ++leadingDoubles;
          } else
            B.JSArray_methods.add$1(newParts, part);
      }
      if (_this.root == null)
        B.JSArray_methods.insertAll$2(newParts, 0, A.List_List$filled(leadingDoubles, "..", false, type$.String));
      if (newParts.length === 0 && _this.root == null)
        B.JSArray_methods.add$1(newParts, ".");
      _this.parts = newParts;
      t1 = _this.style;
      _this.separators = A.List_List$filled(newParts.length + 1, t1.get$separator(), true, type$.String);
      t2 = _this.root;
      if (t2 == null || newParts.length === 0 || !t1.needsSeparator$1(t2))
        B.JSArray_methods.$indexSet(_this.separators, 0, "");
      t2 = _this.root;
      if (t2 != null && t1 === $.$get$Style_windows())
        _this.root = A.stringReplaceAllUnchecked(t2, "/", "\\");
      _this.removeTrailingSeparators$0();
    },
    toString$0(_) {
      var t2, t3, t4, t5, i,
        t1 = this.root;
      t1 = t1 != null ? t1 : "";
      for (t2 = this.parts, t3 = t2.length, t4 = this.separators, t5 = t4.length, i = 0; i < t3; ++i) {
        if (!(i < t5))
          return A.ioore(t4, i);
        t1 = t1 + t4[i] + t2[i];
      }
      t1 += B.JSArray_methods.get$last(t4);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$parts(parts) {
      this.parts = type$.List_String._as(parts);
    }
  };
  A.PathException.prototype = {
    toString$0(_) {
      return "PathException: " + this.message;
    },
    $isException: 1
  };
  A.Style.prototype = {
    toString$0(_) {
      return this.get$name();
    }
  };
  A.PosixStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 !== 0) {
        t2 = t1 - 1;
        if (!(t2 >= 0))
          return A.ioore(path, t2);
        t2 = path.charCodeAt(t2) !== 47;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t1 = path.charCodeAt(0) === 47;
      } else
        t1 = false;
      if (t1)
        return 1;
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return false;
    },
    pathFromUri$1(uri) {
      var t1;
      if (uri.get$scheme() === "" || uri.get$scheme() === "file") {
        t1 = uri.get$path();
        return A._Uri__uriDecode(t1, 0, t1.length, B.C_Utf8Codec, false);
      }
      throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
    },
    absolutePathToUri$1(path) {
      var parsed = A.ParsedPath_ParsedPath$parse(path, this),
        t1 = parsed.parts;
      if (t1.length === 0)
        B.JSArray_methods.addAll$1(t1, A._setArrayType(["", ""], type$.JSArray_String));
      else if (parsed.get$hasTrailingSeparator())
        B.JSArray_methods.add$1(parsed.parts, "");
      return A._Uri__Uri(null, null, parsed.parts, "file");
    },
    get$name() {
      return "posix";
    },
    get$separator() {
      return "/";
    }
  };
  A.UrlStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 === 0)
        return false;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 47)
        return true;
      return B.JSString_methods.endsWith$1(path, "://") && this.rootLength$1(path) === t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var i, codeUnit, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (0 >= t1)
        return A.ioore(path, 0);
      if (path.charCodeAt(0) === 47)
        return 1;
      for (i = 0; i < t1; ++i) {
        codeUnit = path.charCodeAt(i);
        if (codeUnit === 47)
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = B.JSString_methods.indexOf$2(path, "/", B.JSString_methods.startsWith$2(path, "//", i + 1) ? i + 3 : i);
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!B.JSString_methods.startsWith$1(path, "file://"))
            return index;
          t1 = A.driveLetterEnd(path, index + 1);
          return t1 == null ? index : t1;
        }
      }
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      var t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t1 = path.charCodeAt(0) === 47;
      } else
        t1 = false;
      return t1;
    },
    pathFromUri$1(uri) {
      return uri.toString$0(0);
    },
    relativePathToUri$1(path) {
      return A.Uri_parse(path);
    },
    absolutePathToUri$1(path) {
      return A.Uri_parse(path);
    },
    get$name() {
      return "url";
    },
    get$separator() {
      return "/";
    }
  };
  A.WindowsStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 === 0)
        return false;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      t2 = path.charCodeAt(t2);
      return !(t2 === 47 || t2 === 92);
    },
    rootLength$2$withDrive(path, withDrive) {
      var t2, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (0 >= t1)
        return A.ioore(path, 0);
      if (path.charCodeAt(0) === 47)
        return 1;
      if (path.charCodeAt(0) === 92) {
        if (t1 >= 2) {
          if (1 >= t1)
            return A.ioore(path, 1);
          t2 = path.charCodeAt(1) !== 92;
        } else
          t2 = true;
        if (t2)
          return 1;
        index = B.JSString_methods.indexOf$2(path, "\\", 2);
        if (index > 0) {
          index = B.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (t1 < 3)
        return 0;
      if (!A.isAlphabetic(path.charCodeAt(0)))
        return 0;
      if (path.charCodeAt(1) !== 58)
        return 0;
      t1 = path.charCodeAt(2);
      if (!(t1 === 47 || t1 === 92))
        return 0;
      return 3;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return this.rootLength$1(path) === 1;
    },
    pathFromUri$1(uri) {
      var path, t1;
      if (uri.get$scheme() !== "" && uri.get$scheme() !== "file")
        throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
      path = uri.get$path();
      if (uri.get$host() === "") {
        if (path.length >= 3 && B.JSString_methods.startsWith$1(path, "/") && A.driveLetterEnd(path, 1) != null)
          path = B.JSString_methods.replaceFirst$2(path, "/", "");
      } else
        path = "\\\\" + uri.get$host() + path;
      t1 = A.stringReplaceAllUnchecked(path, "/", "\\");
      return A._Uri__uriDecode(t1, 0, t1.length, B.C_Utf8Codec, false);
    },
    absolutePathToUri$1(path) {
      var rootParts, t2,
        parsed = A.ParsedPath_ParsedPath$parse(path, this),
        t1 = parsed.root;
      t1.toString;
      if (B.JSString_methods.startsWith$1(t1, "\\\\")) {
        rootParts = new A.WhereIterable(A._setArrayType(t1.split("\\"), type$.JSArray_String), type$.bool_Function_String._as(new A.WindowsStyle_absolutePathToUri_closure()), type$.WhereIterable_String);
        B.JSArray_methods.insert$2(parsed.parts, 0, rootParts.get$last(0));
        if (parsed.get$hasTrailingSeparator())
          B.JSArray_methods.add$1(parsed.parts, "");
        return A._Uri__Uri(rootParts.get$first(0), null, parsed.parts, "file");
      } else {
        if (parsed.parts.length === 0 || parsed.get$hasTrailingSeparator())
          B.JSArray_methods.add$1(parsed.parts, "");
        t1 = parsed.parts;
        t2 = parsed.root;
        t2.toString;
        t2 = A.stringReplaceAllUnchecked(t2, "/", "");
        B.JSArray_methods.insert$2(t1, 0, A.stringReplaceAllUnchecked(t2, "\\", ""));
        return A._Uri__Uri(null, null, parsed.parts, "file");
      }
    },
    codeUnitsEqual$2(codeUnit1, codeUnit2) {
      var upperCase1;
      if (codeUnit1 === codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if ((codeUnit1 ^ codeUnit2) !== 32)
        return false;
      upperCase1 = codeUnit1 | 32;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2(path1, path2) {
      var t1, t2, i;
      if (path1 === path2)
        return true;
      t1 = path1.length;
      t2 = path2.length;
      if (t1 !== t2)
        return false;
      for (i = 0; i < t1; ++i) {
        if (!(i < t2))
          return A.ioore(path2, i);
        if (!this.codeUnitsEqual$2(path1.charCodeAt(i), path2.charCodeAt(i)))
          return false;
      }
      return true;
    },
    get$name() {
      return "windows";
    },
    get$separator() {
      return "\\";
    }
  };
  A.WindowsStyle_absolutePathToUri_closure.prototype = {
    call$1(part) {
      return A._asString(part) !== "";
    },
    $signature: 8
  };
  A.Pool.prototype = {
    request$0() {
      var t1, t2, _this = this;
      if ((_this._pool$_closeMemo._async_memoizer$_completer.future._state & 30) !== 0)
        throw A.wrapException(A.StateError$("request() may not be called on a closed Pool."));
      t1 = _this._allocatedResources;
      if (t1 < _this._maxAllocatedResources) {
        _this._allocatedResources = t1 + 1;
        return A.Future_Future$value(new A.PoolResource(_this), type$.PoolResource);
      } else {
        t1 = _this._onReleaseCallbacks;
        if (!t1.get$isEmpty(0))
          return _this._runOnRelease$1(t1.removeFirst$0());
        else {
          t1 = new A._Future($.Zone__current, type$._Future_PoolResource);
          t2 = _this._requestedResources;
          t2._collection$_add$1(t2.$ti._precomputed1._as(new A._AsyncCompleter(t1, type$._AsyncCompleter_PoolResource)));
          _this._resetTimer$0();
          return t1;
        }
      }
    },
    _pool$_close$0() {
      var t2, t3, t4, callback, t5, _this = this,
        t1 = _this._closeGroup;
      if (t1 != null)
        return t1._future_group$_completer.future;
      _this._resetTimer$0();
      _this._closeGroup = new A.FutureGroup(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_List_dynamic), type$._AsyncCompleter_List_dynamic), [], type$.FutureGroup_dynamic);
      for (t1 = _this._onReleaseCallbacks, t2 = A._ListQueueIterator$(t1, t1.$ti._precomputed1), t3 = type$.dynamic, t4 = t2.$ti._precomputed1; t2.moveNext$0();) {
        callback = t2._collection$_current;
        if (callback == null)
          callback = t4._as(callback);
        t5 = _this._closeGroup;
        t5.toString;
        t5.add$1(0, A.Future_Future$sync(callback, t3));
      }
      _this._allocatedResources = _this._allocatedResources - t1.get$length(0);
      t1.clear$0(0);
      if (_this._allocatedResources === 0)
        _this._closeGroup.close$0();
      return _this._closeGroup._future_group$_completer.future;
    },
    _onResourceReleaseAllowed$1(onRelease) {
      var t1, zone, _this = this;
      type$.void_Function._as(onRelease);
      _this._resetTimer$0();
      t1 = _this._requestedResources;
      if (!t1.get$isEmpty(0))
        t1.removeFirst$0().complete$1(_this._runOnRelease$1(onRelease));
      else if ((_this._pool$_closeMemo._async_memoizer$_completer.future._state & 30) !== 0) {
        t1 = _this._closeGroup;
        t1.toString;
        t1.add$1(0, A.Future_Future$sync(onRelease, type$.dynamic));
        if (--_this._allocatedResources === 0)
          _this._closeGroup.close$0();
      } else {
        zone = $.Zone__current;
        t1 = _this._onReleaseCallbacks;
        t1._collection$_add$1(t1.$ti._precomputed1._as(new A.Pool__onResourceReleaseAllowed_closure(zone, zone.registerCallback$1$1(onRelease, type$.void))));
      }
    },
    _runOnRelease$1(onRelease) {
      var t1, t2;
      A.Future_Future$sync(type$.void_Function._as(onRelease), type$.void).then$1$1(new A.Pool__runOnRelease_closure(this), type$.Null).catchError$1(new A.Pool__runOnRelease_closure0(this));
      t1 = new A._Future($.Zone__current, type$._Future_PoolResource);
      t2 = this._onReleaseCompleters;
      t2._collection$_add$1(t2.$ti._precomputed1._as(new A._SyncCompleter(t1, type$._SyncCompleter_PoolResource)));
      return t1;
    },
    _resetTimer$0() {
      var t2,
        t1 = this._timer;
      if (t1 == null)
        return;
      t2 = this._requestedResources;
      if (t2._collection$_head === t2._collection$_tail)
        t1._restartable_timer$_timer.cancel$0();
      else {
        t1._restartable_timer$_timer.cancel$0();
        t1._restartable_timer$_timer = A.Timer_Timer(t1._restartable_timer$_duration, t1._callback);
      }
    }
  };
  A.Pool__onResourceReleaseAllowed_closure.prototype = {
    call$0() {
      return this.zone.run$1$1(this.registered, type$.void);
    },
    $signature: 2
  };
  A.Pool__runOnRelease_closure.prototype = {
    call$1(value) {
      var t1 = this.$this;
      t1._onReleaseCompleters.removeFirst$0().complete$1(new A.PoolResource(t1));
    },
    $signature: 118
  };
  A.Pool__runOnRelease_closure0.prototype = {
    call$2(error, stackTrace) {
      A._asObject(error);
      type$.StackTrace._as(stackTrace);
      this.$this._onReleaseCompleters.removeFirst$0().completeError$2(error, stackTrace);
    },
    $signature: 71
  };
  A.PoolResource.prototype = {};
  A.openChannel_fail.prototype = {
    call$1(ex) {
      var t1 = this.ready;
      if ((t1.future._state & 30) === 0)
        t1.completeError$1(ex);
      t1 = this.completer;
      if ((t1.future._state & 30) === 0)
        t1.completeError$1(ex);
    },
    $signature: 246
  };
  A.openChannel_success.prototype = {
    call$1(channel) {
      var t1;
      if ((this.ready.future._state & 30) === 0)
        throw A.wrapException(A.SquadronError$_("Invalid state: worker is not ready", null, null));
      t1 = this.completer;
      if ((t1.future._state & 30) === 0)
        t1.complete$1(channel);
    },
    $signature: 245
  };
  A.openChannel_$errorHandler.prototype = {
    call$1(e) {
      var err, error, t1, t2;
      A._asJSObjectQ(e);
      err = A.$JSEventExt_get_$dartError(e);
      error = A.SquadronError$_(J.toString$0$(err), null, null);
      t1 = this.logger;
      if (t1 != null)
        t1.e$1(new A.openChannel_$errorHandler_closure(error));
      this.fail.call$1(error);
      t2 = this.entryPoint;
      A.UriChecker_exists(t2).then$1$1(new A.openChannel_$errorHandler_closure0(e, t2, err, t1), type$.Null);
    },
    $signature: 117
  };
  A.openChannel_$errorHandler_closure.prototype = {
    call$0() {
      return "Connection to Web Worker failed: " + this.error.toString$0(0);
    },
    $signature: 18
  };
  A.openChannel_$errorHandler_closure0.prototype = {
    call$1(found) {
      var msg, t1, t2, t3, t4, exception, _this = this;
      A._asBool(found);
      try {
        t1 = _this.e;
        t2 = _this.entryPoint;
        t3 = _this.err;
        t4 = J.getInterceptor$(t3);
        msg = t1 != null ? t2.toString$0(0) + " => " + t4.get$runtimeType(t3).toString$0(0) + " " + A.S(t3) + " [" + A._asString(t1.filename) + "(" + A._asInt(t1.lineno) + ")]" : t2.toString$0(0) + " => " + t4.get$runtimeType(t3).toString$0(0) + " " + A.S(t3);
        t1 = _this.logger;
        t3 = t1 == null;
        if (!t3)
          t1.e$1(new A.openChannel_$errorHandler__closure(msg));
        if (!found)
          if (!t3)
            t1.e$1(new A.openChannel_$errorHandler__closure0(t2));
      } catch (exception) {
      }
    },
    $signature: 243
  };
  A.openChannel_$errorHandler__closure.prototype = {
    call$0() {
      return "Unhandled error from Web Worker: " + this.msg + ".";
    },
    $signature: 18
  };
  A.openChannel_$errorHandler__closure0.prototype = {
    call$0() {
      return "It seems no Web Worker lives at " + this.entryPoint.toString$0(0) + ".";
    },
    $signature: 18
  };
  A.openChannel_closure.prototype = {
    call$1(e) {
      var response, error, ex, st, t1, t2, exception, _this = this;
      A._asJSObjectQ(e);
      try {
        t1 = type$.nullable_List_dynamic._as(A.$JSEventExt__getMessageEventData(e));
        t1.toString;
        response = A.WorkerResponseImpl_from(t1);
        if (!A.WorkerResponseImpl_unwrapInPlace(response, _this.disconnected))
          return;
        error = type$.nullable_SquadronException._as(J.$index$asx(response, 2));
        if (error != null) {
          t1 = _this.logger;
          if (t1 != null)
            t1.e$1(new A.openChannel__closure1(error));
          _this.fail.call$1(error);
        } else {
          t1 = _this.ready;
          if ((t1.future._state & 30) === 0) {
            t2 = _this.logger;
            if (t2 != null)
              t2.t$1("Web Worker is ready");
            t1.complete$1(type$.nullable_FutureOr_bool._as(A.WorkerResponse_get_result(response)));
          }
        }
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        t1 = _this.fail.call$1(A.SquadronException_from(ex, st, null));
        return t1;
      }
    },
    $signature: 117
  };
  A.openChannel__closure1.prototype = {
    call$0() {
      return "Connection to Web Worker failed: " + this.error.toString$0(0);
    },
    $signature: 18
  };
  A.openChannel_closure0.prototype = {
    call$1(e) {
      var response, error, webCh, _this = this,
        t1 = type$.nullable_List_dynamic._as(A.$JSEventExt__getMessageEventData(A._asJSObject(e)));
      t1.toString;
      response = A.WorkerResponseImpl_from(t1);
      if (!A.WorkerResponseImpl_unwrapInPlace(response, _this.disconnected))
        return;
      error = type$.nullable_SquadronException._as(J.$index$asx(response, 2));
      if (error != null) {
        t1 = _this.logger;
        if (t1 != null)
          t1.e$1(new A.openChannel__closure(error));
        _this.fail.call$1(error);
      } else if (A._asBool(J.$index$asx(response, 3))) {
        t1 = _this.logger;
        if (t1 != null)
          t1.log$5$error$stackTrace$time(B.Level_4000_warning, "Disconnecting from Web Worker", null, null, null);
        t1 = _this._box_0.channel;
        if (t1 != null)
          t1.close$0();
      } else {
        t1 = _this.logger;
        if ((_this.completer.future._state & 30) === 0) {
          if (t1 != null)
            t1.t$1("Connected to Web Worker");
          webCh = new A._WebChannel(A._asJSObject(A.WorkerResponse_get_result(response)), A._setArrayType([], type$.JSArray_StreamController_List_dynamic), _this.exceptionManager, t1);
          webCh.set$_thread(_this.worker._readLocal$0());
          _this._box_0.channel = webCh;
          _this.success.call$1(webCh);
        } else if (t1 != null)
          t1.d$1(new A.openChannel__closure0(response));
      }
    },
    $signature: 24
  };
  A.openChannel__closure.prototype = {
    call$0() {
      return "Connection to Web Worker failed: " + this.error.toString$0(0);
    },
    $signature: 18
  };
  A.openChannel__closure0.prototype = {
    call$0() {
      return "Unexpected response: " + A.S(this.response);
    },
    $signature: 18
  };
  A.openChannel_closure1.prototype = {
    call$0() {
      return "Failed to post connection request " + A.S(this.startRequest) + ": " + A.S(this.ex);
    },
    $signature: 18
  };
  A.openChannel_closure2.prototype = {
    call$0() {
      return "Connection to Web Worker failed: " + A.S(this.ex);
    },
    $signature: 18
  };
  A._WebForwardChannel.prototype = {
    _forward$1(e) {
      var transfer, ex, st, exception, t1;
      A._asJSObject(e);
      if (this._closed)
        throw A.wrapException(A.SquadronError$_("Channel is closed", null, null));
      try {
        transfer = type$.JSArray_nullable_Object._as(new init.G.Array());
        A.$transferify(e.data, transfer);
        this._remote.postMessage(e.data, transfer);
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        t1 = this.logger;
        if (t1 != null)
          t1.e$1(new A._WebForwardChannel__forward_closure(e, ex));
        throw A.wrapException(A.SquadronError$_("Failed to post request: " + A.S(ex), st, null));
      }
    },
    close$0() {
      if (!this._closed) {
        A._asJSObject(this._com.port1).close();
        this._closed = true;
      }
    }
  };
  A._WebForwardChannel__forward_closure.prototype = {
    call$0() {
      return "Failed to post request " + A.S(this.e) + ": " + A.S(this.ex);
    },
    $signature: 18
  };
  A._WebChannel.prototype = {
    share$0() {
      var t1 = A._asJSObject(new init.G.MessageChannel()),
        t2 = new A._WebForwardChannel(this._sendPort, t1, A._asJSObject(t1.port2), A._setArrayType([], type$.JSArray_StreamController_List_dynamic), this.exceptionManager, this.logger);
      A._asJSObject(t1.port1).onmessage = A._functionToJS1(t2.get$_forward());
      return t2;
    },
    _postRequest$2$force(req, force) {
      var data, transfer, msg, ex, st, t1, t2, exception, _null = null;
      if (this._closed && !force)
        throw A.wrapException(A.SquadronError$_("Channel is closed", _null, _null));
      try {
        t1 = J.getInterceptor$asx(req);
        t2 = type$.nullable_SquadronCancelationToken._as(t1.$index(req, 4));
        if (t2 != null)
          t2.ensureStarted$0();
        data = A.WorkerRequestExt_wrapInPlace(req);
        transfer = type$.JSArray_nullable_Object._as(new init.G.Array());
        if (A._asJSObjectQ(t1.$index(req, 1)) != null)
          A._asInt(transfer.push(A._asJSObjectQ(t1.$index(req, 1))));
        msg = A.$jsify(data, _null);
        this._sendPort.postMessage(msg, transfer);
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        t1 = this.logger;
        if (t1 != null)
          t1.e$1(new A._WebChannel__postRequest_closure(req, ex));
        throw A.wrapException(A.SquadronError$_("Failed to post request: " + A.S(ex), st, _null));
      }
    },
    _postRequest$1(req) {
      return this._postRequest$2$force(req, false);
    },
    _inspectAndPostRequest$1(req) {
      var transfer, msg, ex, st, t1, t2, t3, exception;
      if (this._closed)
        throw A.wrapException(A.SquadronError$_("Channel is closed", null, null));
      t1 = J.getInterceptor$asx(req);
      t2 = type$.nullable_SquadronCancelationToken;
      t3 = t2._as(t1.$index(req, 4));
      if (t3 != null)
        t3.ensureStarted$0();
      t1 = t2._as(t1.$index(req, 4));
      if (t1 != null)
        t1.throwIfCanceled$0();
      try {
        transfer = type$.JSArray_nullable_Object._as(new init.G.Array());
        msg = A.$jsify(A.WorkerRequestExt_wrapInPlace(req), transfer);
        this._sendPort.postMessage(msg, transfer);
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        t1 = this.logger;
        if (t1 != null)
          t1.e$1(new A._WebChannel__inspectAndPostRequest_closure(req, ex));
        throw A.wrapException(A.SquadronError$_("Failed to post request: " + A.S(ex), st, null));
      }
    },
    close$0() {
      if (!this._closed) {
        this._postRequest$1([A.microsecTimeStamp(), null, -4, null, null, null, null]);
        this._closed = true;
      }
    },
    cancelToken$1(token) {
      if (token != null)
        this._postRequest$2$force([A.microsecTimeStamp(), null, -3, null, token, null, null], true);
    },
    _getResponseStream$4$streaming(com, req, post, streaming) {
      var t1, t2,
        _s11_ = "_controller";
      type$.void_Function_List_dynamic._as(post);
      t1 = A.ResultStream$(this, req, new A._WebChannel__getResponseStream_$sendRequest(this, A._asInt(J.$index$asx(req, 2)), com, post, req), streaming).__ResultStream__controller_F;
      t1 === $ && A.throwLateFieldNI(_s11_);
      t2 = t1.__ForwardStreamController__controller_F;
      t2 === $ && A.throwLateFieldNI(_s11_);
      A.FutureExtensions_ignore(t2._ensureDoneFuture$0().whenComplete$1(new A._WebChannel__getResponseStream_closure(com)), type$.void);
      t1 = t1.__ForwardStreamController__controller_F;
      t1 === $ && A.throwLateFieldNI(_s11_);
      return new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>"));
    },
    sendRequest$5$inspectRequest$inspectResponse$token(command, args, inspectRequest, inspectResponse, token) {
      var t1 = new A._Future($.Zone__current, type$._Future_dynamic),
        completer = new A._AsyncCompleter(t1, type$._AsyncCompleter_dynamic),
        sub = A._Cell$named("sub"),
        t2 = new A._WebChannel_sendRequest_$fail(sub, completer),
        com = A._asJSObject(new init.G.MessageChannel()),
        t3 = A._asJSObject(com.port2),
        t4 = A.microsecTimeStamp(),
        post = inspectRequest ? this.get$_inspectAndPostRequest() : this.get$_postRequest();
      sub.set$finalLocalValue(this._getResponseStream$4$streaming(com, [t4, t3, command, args, token, null, inspectResponse], post, false).listen$3$onDone$onError(new A._WebChannel_sendRequest_$success(sub, completer), new A._WebChannel_sendRequest_$done(sub, completer, t2, command), t2));
      return t1;
    },
    sendRequest$2(command, args) {
      return this.sendRequest$5$inspectRequest$inspectResponse$token(command, args, false, false, null);
    },
    sendStreamingRequest$5$inspectRequest$inspectResponse$token(command, args, inspectRequest, inspectResponse, token) {
      var com = A._asJSObject(new init.G.MessageChannel()),
        t1 = A._asJSObject(com.port2),
        t2 = A.microsecTimeStamp();
      return this._getResponseStream$4$streaming(com, [t2, t1, command, args, token, null, false], this.get$_postRequest(), true);
    },
    sendStreamingRequest$2(command, args) {
      return this.sendStreamingRequest$5$inspectRequest$inspectResponse$token(command, args, false, false, null);
    },
    set$_thread(_thread) {
      this._thread = A._asJSObjectQ(_thread);
    },
    $isChannel: 1,
    get$exceptionManager() {
      return this.exceptionManager;
    },
    get$logger() {
      return this.logger;
    }
  };
  A._WebChannel__postRequest_closure.prototype = {
    call$0() {
      return "Failed to post request " + A.S(this.req) + ": " + A.S(this.ex);
    },
    $signature: 18
  };
  A._WebChannel__inspectAndPostRequest_closure.prototype = {
    call$0() {
      return "Failed to post request " + A.S(this.req) + ": " + A.S(this.ex);
    },
    $signature: 18
  };
  A._WebChannel__getResponseStream_$sendRequest.prototype = {
    call$0() {
      var _this = this,
        controller = A._Cell$named("controller"),
        t1 = new A._WebChannel__getResponseStream_$sendRequest_$forwardMessage(controller),
        t2 = _this.command,
        t3 = new A._WebChannel__getResponseStream_$sendRequest_$forwardError(controller, t2),
        buffer = new A.EventBuffer(t1, t3, A._setArrayType([], type$.JSArray_of_void_Function), type$.EventBuffer_List_dynamic),
        t4 = _this.$this,
        t5 = _this.com,
        t6 = new A._WebChannel__getResponseStream_$sendRequest_$close(t4, t5, controller);
      controller.set$finalLocalValue(A.StreamController_StreamController(t6, new A._WebChannel__getResponseStream_$sendRequest_closure(t4, controller, t5, t2, buffer, t3, t1, _this.post, _this.req, t6), buffer.get$activate(), buffer.get$deactivate(), type$.List_dynamic));
      return controller._readLocal$0().get$stream();
    },
    $signature: 238
  };
  A._WebChannel__getResponseStream_$sendRequest_$forwardMessage.prototype = {
    call$1(msg) {
      type$.List_dynamic._as(msg);
      return J.add$1$ax(this.controller._readLocal$0(), msg);
    },
    $signature: 72
  };
  A._WebChannel__getResponseStream_$sendRequest_$forwardError.prototype = {
    call$2(error, st) {
      A._asObject(error);
      type$.nullable_StackTrace._as(st);
      return this.controller._readLocal$0().addError$1(A.SquadronException_from(error, st, this.command));
    },
    $signature: 121
  };
  A._WebChannel__getResponseStream_$sendRequest_$close.prototype = {
    call$0() {
      var t1 = this.com;
      A._asJSObject(t1.port1).close();
      A._asJSObject(t1.port2).close();
      t1 = type$.StreamController_List_dynamic._as(this.controller._readLocal$0());
      B.JSArray_methods.remove$1(this.$this._activeConnections, t1);
      return t1.close$0();
    },
    $signature: 14
  };
  A._WebChannel__getResponseStream_$sendRequest_closure.prototype = {
    call$0() {
      var ex, st, t2, t3, t4, exception, _this = this,
        t1 = _this.controller;
      if (t1._readLocal$0().get$isClosed())
        return;
      t2 = _this.com;
      t3 = _this.buffer;
      t4 = _this.$$forwardError;
      A._asJSObject(t2.port1).onmessageerror = A._functionToJS1(new A._WebChannel__getResponseStream_$sendRequest__closure(_this.command, t3, t4));
      A._asJSObject(t2.port1).onmessage = A._functionToJS1(new A._WebChannel__getResponseStream_$sendRequest__closure0(t3, _this.$$forwardMessage));
      try {
        B.JSArray_methods.add$1(_this.$this._activeConnections, type$.StreamController_List_dynamic._as(t1._readLocal$0()));
        _this.post.call$1(_this.req);
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        t2 = _this.$$close;
        if (t3.__event_buffer$_pauses > 0) {
          t3.addError$2(ex, st);
          t3.set$onDeactivate(t2);
        } else {
          t4.call$2(ex, st);
          t2.call$0();
        }
        t1 = type$.StreamController_List_dynamic._as(t1._readLocal$0());
        B.JSArray_methods.remove$1(_this.$this._activeConnections, t1);
        t1.close$0();
      }
    },
    $signature: 2
  };
  A._WebChannel__getResponseStream_$sendRequest__closure.prototype = {
    call$1(e) {
      var ex = A.SquadronException_from(A.$JSEventExt_get_$dartError(A._asJSObject(e)), null, this.command),
        t1 = this.buffer;
      (t1.__event_buffer$_pauses > 0 ? t1.get$addError() : this.$$forwardError).call$2(ex, null);
    },
    $signature: 24
  };
  A._WebChannel__getResponseStream_$sendRequest__closure0.prototype = {
    call$1(e) {
      var res,
        t1 = type$.nullable_List_dynamic._as(A.$JSEventExt__getMessageEventData(A._asJSObject(e)));
      t1.toString;
      res = A.WorkerResponseImpl_from(t1);
      t1 = this.buffer;
      (t1.__event_buffer$_pauses > 0 ? type$.void_Function_List_dynamic._as(t1.get$add(t1)) : this.$$forwardMessage).call$1(res);
    },
    $signature: 24
  };
  A._WebChannel__getResponseStream_closure.prototype = {
    call$0() {
      var t1 = this.com;
      A._asJSObject(t1.port1).close();
      A._asJSObject(t1.port2).close();
    },
    $signature: 1
  };
  A._WebChannel_sendRequest_$success.prototype = {
    call$1(data) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self.sub._readLocal$0().cancel$0(), $async$call$1);
            case 2:
              // returning from await.
              t1 = $async$self.completer;
              if ((t1.future._state & 30) === 0)
                t1.complete$1(data);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 16
  };
  A._WebChannel_sendRequest_$fail.prototype = {
    $call$body$_WebChannel_sendRequest_$fail(ex, st) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$call$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self.sub._readLocal$0().cancel$0(), $async$call$2);
            case 2:
              // returning from await.
              t1 = $async$self.completer;
              if ((t1.future._state & 30) === 0)
                t1.completeError$2(ex, st);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$2, $async$completer);
    },
    call$2(ex, st) {
      return this.$call$body$_WebChannel_sendRequest_$fail(A._asObject(ex), type$.nullable_StackTrace._as(st));
    },
    call$1(ex) {
      return this.call$2(ex, null);
    },
    $signature: 58
  };
  A._WebChannel_sendRequest_$done.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self.sub._readLocal$0().cancel$0(), $async$call$0);
            case 2:
              // returning from await.
              if (($async$self.completer.future._state & 30) === 0)
                $async$self.$$fail.call$1(A.WorkerException$("No response from worker", null, $async$self.command));
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 2
  };
  A.EntryPointUri.prototype = {
    release$0() {
      if (this._revoke)
        init.G.URL.revokeObjectURL(this.uri);
      this.super$Releasable$release();
    }
  };
  A._EntryPointUri_Object_Releasable.prototype = {};
  A.EventBuffer.prototype = {
    activate$0() {
      return this.__event_buffer$_pauses++;
    },
    deactivate$0() {
      var t1, t2, _i, _this = this;
      if (_this.__event_buffer$_pauses === 1) {
        for (t1 = _this._buffer, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].call$0();
        B.JSArray_methods.clear$0(t1);
        t1 = _this.onDeactivate;
        if (t1 != null)
          t1.call$0();
      }
      t1 = _this.__event_buffer$_pauses;
      if (t1 > 0)
        _this.__event_buffer$_pauses = t1 - 1;
    },
    add$1(_, value) {
      return B.JSArray_methods.add$1(this._buffer, new A.EventBuffer_add_closure(this, this.$ti._precomputed1._as(value)));
    },
    addError$2(err, st) {
      return B.JSArray_methods.add$1(this._buffer, new A.EventBuffer_addError_closure(this, err, type$.nullable_StackTrace._as(st)));
    },
    set$onDeactivate(onDeactivate) {
      this.onDeactivate = type$.nullable_void_Function._as(onDeactivate);
    }
  };
  A.EventBuffer_add_closure.prototype = {
    call$0() {
      return this.$this._processValue.call$1(this.value);
    },
    $signature: 2
  };
  A.EventBuffer_addError_closure.prototype = {
    call$0() {
      return this.$this._processError.call$2(this.err, this.st);
    },
    $signature: 2
  };
  A._WebLocalWorker.prototype = {$isLocalWorker: 1, $isWorkerService: 1};
  A.__WebLocalWorker_Object_Releasable.prototype = {};
  A.$transferify_closure.prototype = {
    call$1(js) {
      var t1, t2, len, i, t3, keys, res, entry, t4, values, value, _this = this, _null = null;
      if (js == null)
        return;
      t1 = init.G;
      t2 = A._asJSObject(t1.Object);
      t1 = type$.JavaScriptFunction._as(t2.getPrototypeOf.apply(t2, [A._asJSObject(t1.Int8Array)]));
      if (js instanceof t1) {
        t1 = type$.NativeTypedData._as(js).buffer;
        t1.toString;
        js = t1;
      }
      if (!_this.registered.add$1(0, js))
        return;
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "ArrayBuffer");
      if (t1) {
        A._asInt(_this.transfer.push(js));
        return;
      }
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "Array");
      if (t1) {
        type$.JSArray_nullable_Object._as(js);
        len = A._asInt(js.length);
        for (t1 = _this.squadronTransferify, t2 = t1.__late_helper$_name, i = 0; i < len; ++i) {
          t3 = t1._value;
          if (t3 === t1)
            A.throwExpression(A.LateError$localNI(t2));
          t3.call$1(js.at(i));
        }
        return;
      }
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "Map");
      if (t1) {
        keys = A._asJSObject(A._asJSObject(js).entries());
        for (t1 = _this.squadronTransferify, t2 = type$.JSArray_nullable_Object, t3 = t1.__late_helper$_name; true;) {
          res = A._asJSObjectQ(A.JSObjectUnsafeUtilExtension__callMethod(keys, $.$get$_$JSProps_next(), _null, _null, _null, _null));
          if (res == null || !!res[$.$get$_$JSProps_done()])
            break;
          entry = t2._as(res[$.$get$_$JSProps_value()]);
          t4 = t1._value;
          if (t4 === t1)
            A.throwExpression(A.LateError$localNI(t3));
          t4.call$1(entry.at(0));
          t4 = t1._value;
          if (t4 === t1)
            A.throwExpression(A.LateError$localNI(t3));
          t4.call$1(entry.at(1));
        }
        return;
      }
      t1 = A.JSAnyUtilityExtension_instanceOfString(js, "Set");
      if (t1) {
        values = A._asJSObject(A._asJSObject(js).values());
        for (t1 = _this.squadronTransferify, t2 = t1.__late_helper$_name; true;) {
          res = A._asJSObjectQ(A.JSObjectUnsafeUtilExtension__callMethod(values, $.$get$_$JSProps_next(), _null, _null, _null, _null));
          if (res == null || !!res[$.$get$_$JSProps_done()])
            break;
          value = res[$.$get$_$JSProps_value()];
          t3 = t1._value;
          if (t3 === t1)
            A.throwExpression(A.LateError$localNI(t2));
          t3.call$1(value);
        }
        return;
      }
      if (A._isTransferable(js))
        A._asInt(_this.transfer.push(js));
    },
    $signature: 37
  };
  A.$jsify_closure.prototype = {
    call$1(js) {
      A._asObject(js);
    },
    $signature: 100
  };
  A.$jsify_closure0.prototype = {
    call$1(js) {
      var t1, t2;
      A._asObject(js);
      t1 = init.G;
      t2 = A._asJSObject(t1.Object);
      t1 = type$.JavaScriptFunction._as(t2.getPrototypeOf.apply(t2, [A._asJSObject(t1.Int8Array)]));
      if (js instanceof t1) {
        t1 = type$.NativeTypedData._as(js).buffer;
        t1.toString;
        t2 = this.cache;
        if (t2.containsKey$1(t1))
          return;
        t2.$indexSet(0, t1, t1);
        js = t1;
      }
      if (A._isTransferable(js))
        A._asInt(this.transfer.push(js));
    },
    $signature: 100
  };
  A.$jsify_closure1.prototype = {
    call$1(obj) {
      var t1, cached, jsifier, t2, len, jsArray, i, kjsifier, vjsifier, jsMap, jsSet, res, _this = this;
      if (obj == null)
        return null;
      t1 = _this.cache;
      cached = t1.$index(0, obj);
      if (cached != null)
        return cached;
      if (type$.List_dynamic._is(obj) && !type$.TypedData._is(obj)) {
        if (type$.List_nullable_String._is(obj))
          jsifier = A._patch___toJSStr$closure();
        else if (type$.List_nullable_bool._is(obj))
          jsifier = A._patch___toJSBool$closure();
        else if (type$.List_nullable_num._is(obj))
          jsifier = A._patch___toJSNum$closure();
        else if (type$.List_nullable_BigInt._is(obj))
          jsifier = A._patch___toJSBigInt$closure();
        else
          jsifier = type$.List_nullable_DateTime._is(obj) ? A._patch___toJSDate$closure() : _this.squadronJsify._readLocal$0();
        t2 = J.getInterceptor$asx(obj);
        len = t2.get$length(obj);
        jsArray = type$.JSArray_nullable_Object._as(new init.G.Array());
        t1.$indexSet(0, obj, jsArray);
        for (i = 0; i < len; ++i)
          A._asInt(jsArray.push(jsifier.call$1(t2.$index(obj, i))));
        return jsArray;
      }
      if (type$.Map_dynamic_dynamic._is(obj)) {
        if (type$.Map_of_nullable_String_and_dynamic._is(obj))
          kjsifier = A._patch___toJSStr$closure();
        else if (type$.Map_of_nullable_bool_and_dynamic._is(obj))
          kjsifier = A._patch___toJSBool$closure();
        else if (type$.Map_of_nullable_num_and_dynamic._is(obj))
          kjsifier = A._patch___toJSNum$closure();
        else if (type$.Map_of_nullable_BigInt_and_dynamic._is(obj))
          kjsifier = A._patch___toJSBigInt$closure();
        else
          kjsifier = type$.Map_of_nullable_DateTime_and_dynamic._is(obj) ? A._patch___toJSDate$closure() : _this.squadronJsify._readLocal$0();
        if (type$.Map_of_dynamic_and_nullable_String._is(obj))
          vjsifier = A._patch___toJSStr$closure();
        else if (type$.Map_of_dynamic_and_nullable_bool._is(obj))
          vjsifier = A._patch___toJSBool$closure();
        else if (type$.Map_of_dynamic_and_nullable_num._is(obj))
          vjsifier = A._patch___toJSNum$closure();
        else if (type$.Map_of_dynamic_and_nullable_BigInt._is(obj))
          vjsifier = A._patch___toJSBigInt$closure();
        else
          vjsifier = type$.Map_of_dynamic_and_nullable_DateTime._is(obj) ? A._patch___toJSDate$closure() : _this.squadronJsify._readLocal$0();
        jsMap = A._asJSObject(new init.G.Map());
        t1.$indexSet(0, obj, jsMap);
        for (t1 = obj.get$entries(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          t2 = t1.get$current();
          A._asJSObject(jsMap.set(kjsifier.call$1(t2.key), vjsifier.call$1(t2.value)));
        }
        return jsMap;
      }
      if (type$.Set_dynamic._is(obj)) {
        if (type$.Set_nullable_String._is(obj))
          jsifier = A._patch___toJSStr$closure();
        else if (type$.Set_nullable_bool._is(obj))
          jsifier = A._patch___toJSBool$closure();
        else if (type$.Set_nullable_num._is(obj))
          jsifier = A._patch___toJSNum$closure();
        else if (type$.Set_nullable_BigInt._is(obj))
          jsifier = A._patch___toJSBigInt$closure();
        else
          jsifier = type$.Set_nullable_DateTime._is(obj) ? A._patch___toJSDate$closure() : _this.squadronJsify._readLocal$0();
        jsSet = A._asJSObject(new init.G.Set());
        t1.$indexSet(0, obj, jsSet);
        for (t1 = obj.get$iterator(obj); t1.moveNext$0();)
          A._asJSObject(jsSet.add(jsifier.call$1(t1.get$current())));
        return jsSet;
      }
      if (obj instanceof A._BigIntImpl)
        return A._toJSBigInt(obj);
      if (obj instanceof A.DateTime) {
        _this = obj._core$_value;
        t1 = A.JSFunctionUnsafeUtilExtension_callAsConstructor($.$get$_$JSDateFunction(), _this, type$.JSObject);
        return t1;
      }
      res = A.jsify(obj);
      if (res != null) {
        if (typeof obj != "number" && !A._isBool(obj) && typeof obj != "string")
          t1.$indexSet(0, obj, res);
        _this.$$registerTransferable.call$1(res);
      }
      return res;
    },
    $signature: 32
  };
  A.$jsify2_closure0.prototype = {
    call$1(js) {
      A._asObject(js);
    },
    $signature: 100
  };
  A.$jsify2_closure.prototype = {
    call$1(obj) {
      var t1, cached, t2, len, jsArray, t3, i, t4, jsMap, t5, t6, jsSet, value, res, _this = this;
      if (obj == null)
        return null;
      t1 = _this.cache;
      cached = t1.$index(0, obj);
      if (cached != null)
        return cached;
      if (type$.List_dynamic._is(obj) && !type$.TypedData._is(obj)) {
        t2 = J.getInterceptor$asx(obj);
        len = t2.get$length(obj);
        jsArray = type$.JSArray_nullable_Object._as(new init.G.Array());
        t1.$indexSet(0, obj, jsArray);
        for (t1 = _this.squadronJsify, t3 = t1.__late_helper$_name, i = 0; i < len; ++i) {
          t4 = t1._value;
          if (t4 === t1)
            A.throwExpression(A.LateError$localNI(t3));
          A._asInt(jsArray.push(t4.call$1(t2.$index(obj, i))));
        }
        return jsArray;
      }
      if (type$.Map_dynamic_dynamic._is(obj)) {
        jsMap = A._asJSObject(new init.G.Map());
        t1.$indexSet(0, obj, jsMap);
        for (t1 = obj.get$entries(), t1 = t1.get$iterator(t1), t2 = _this.squadronJsify, t3 = t2.__late_helper$_name; t1.moveNext$0();) {
          t4 = t1.get$current();
          t5 = t2._value;
          if (t5 === t2)
            A.throwExpression(A.LateError$localNI(t3));
          t5 = t5.call$1(t4.key);
          t6 = t2._value;
          if (t6 === t2)
            A.throwExpression(A.LateError$localNI(t3));
          A._asJSObject(jsMap.set(t5, t6.call$1(t4.value)));
        }
        return jsMap;
      }
      if (type$.Set_dynamic._is(obj)) {
        jsSet = A._asJSObject(new init.G.Set());
        t1.$indexSet(0, obj, jsSet);
        for (t1 = obj.get$iterator(obj), t2 = _this.squadronJsify, t3 = t2.__late_helper$_name; t1.moveNext$0();) {
          value = t1.get$current();
          t4 = t2._value;
          if (t4 === t2)
            A.throwExpression(A.LateError$localNI(t3));
          A._asJSObject(jsSet.add(t4.call$1(value)));
        }
        return jsSet;
      }
      if (obj instanceof A._BigIntImpl)
        return A._toJSBigInt(obj);
      if (obj instanceof A.DateTime) {
        _this = obj._core$_value;
        t1 = A.JSFunctionUnsafeUtilExtension_callAsConstructor($.$get$_$JSDateFunction(), _this, type$.JSObject);
        return t1;
      }
      res = A.jsify(obj);
      if (res != null) {
        if (typeof obj != "number" && !A._isBool(obj) && typeof obj != "string")
          t1.$indexSet(0, obj, res);
        _this.$$registerTransferable.call$1(res);
      }
      return res;
    },
    $signature: 32
  };
  A.$dartify_closure.prototype = {
    call$1(js) {
      var t1, cached, t2, len, dartList, i, t3, keys, dartMap, res, entry, t4, t5, values, dartSet, _this = this, _null = null;
      if (js == null)
        return _null;
      t1 = _this.cache;
      cached = t1.$index(0, js);
      if (cached != null)
        return cached;
      t2 = A.JSAnyUtilityExtension_instanceOfString(js, "Array");
      if (t2) {
        type$.JSArray_nullable_Object._as(js);
        len = A._asInt(js.length);
        dartList = [];
        t1.$indexSet(0, js, dartList);
        for (t1 = _this.squadronDartify, t2 = t1.__late_helper$_name, i = 0; i < len; ++i) {
          t3 = t1._value;
          if (t3 === t1)
            A.throwExpression(A.LateError$localNI(t2));
          dartList.push(t3.call$1(js.at(i)));
        }
        return dartList;
      }
      t2 = A.JSAnyUtilityExtension_instanceOfString(js, "Map");
      if (t2) {
        A._asJSObject(js);
        keys = A._asJSObject(js.entries());
        t2 = type$.dynamic;
        dartMap = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        t1.$indexSet(0, js, dartMap);
        for (t1 = _this.squadronDartify, t2 = type$.JSArray_nullable_Object, t3 = t1.__late_helper$_name; true;) {
          res = A._asJSObjectQ(A.JSObjectUnsafeUtilExtension__callMethod(keys, $.$get$_$JSProps_next(), _null, _null, _null, _null));
          if (res == null || !!res[$.$get$_$JSProps_done()])
            break;
          entry = t2._as(res[$.$get$_$JSProps_value()]);
          t4 = t1._value;
          if (t4 === t1)
            A.throwExpression(A.LateError$localNI(t3));
          t4 = t4.call$1(entry.at(0));
          t5 = t1._value;
          if (t5 === t1)
            A.throwExpression(A.LateError$localNI(t3));
          dartMap.$indexSet(0, t4, t5.call$1(entry.at(1)));
        }
        return dartMap;
      }
      t2 = A.JSAnyUtilityExtension_instanceOfString(js, "Set");
      if (t2) {
        A._asJSObject(js);
        values = A._asJSObject(js.values());
        dartSet = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
        t1.$indexSet(0, js, dartSet);
        for (t1 = _this.squadronDartify, t2 = t1.__late_helper$_name; true;) {
          res = A._asJSObjectQ(A.JSObjectUnsafeUtilExtension__callMethod(values, $.$get$_$JSProps_next(), _null, _null, _null, _null));
          if (res == null || !!res[$.$get$_$JSProps_done()])
            break;
          t3 = t1._value;
          if (t3 === t1)
            A.throwExpression(A.LateError$localNI(t2));
          dartSet.add$1(0, t3.call$1(res[$.$get$_$JSProps_value()]));
        }
        return dartSet;
      }
      if (typeof js === "bigint")
        return A._BigIntImpl_parse(A._asString(type$.JavaScriptBigInt._as(js).toString()), _null);
      t2 = A.JSAnyUtilityExtension_instanceOfString(js, "Date");
      if (t2)
        return new A.DateTime(A.DateTime__validate(A._asInt(A._asJSObject(js).getTime()), 0, false), 0, false);
      res = A.dartify(js);
      if (res != null && typeof res != "number" && !A._isBool(res) && typeof res != "string")
        t1.$indexSet(0, js, res);
      return res;
    },
    $signature: 32
  };
  A._WebWorkerChannel.prototype = {
    _postResponse$1(res) {
      var ex, st, exception;
      try {
        this.__worker_channel$_sendPort.postMessage(A.$jsify(A.WorkerResponseImpl_wrapInPlace(res), null));
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        this._logger.e$1(new A._WebWorkerChannel__postResponse_closure(res, ex));
        throw A.wrapException(A.SquadronError$_("Failed to post response: " + A.S(ex), st, null));
      }
    },
    _inspectAndPostResponse$1(res) {
      var data, transfer, message, ex, st, exception;
      try {
        data = A.WorkerResponseImpl_wrapInPlace(res);
        transfer = type$.JSArray_nullable_Object._as(new init.G.Array());
        message = A.$jsify(data, transfer);
        this.__worker_channel$_sendPort.postMessage(message, transfer);
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        this._logger.e$1(new A._WebWorkerChannel__inspectAndPostResponse_closure(res, ex));
        throw A.wrapException(A.SquadronError$_("Failed to post response: " + A.S(ex), st, null));
      }
    },
    reply$1(data) {
      return this._postResponse$1([A.microsecTimeStamp(), data, null, null, null]);
    },
    inspectAndReply$1(data) {
      return this._inspectAndPostResponse$1([A.microsecTimeStamp(), data, null, null, null]);
    },
    error$3(err, stackTrace, command) {
      var ex = A.SquadronException_from(err, type$.nullable_StackTrace._as(stackTrace), command);
      this._postResponse$1([A.microsecTimeStamp(), null, ex, null, null]);
    },
    error$2(err, stackTrace) {
      return this.error$3(err, stackTrace, null);
    },
    error$1(err) {
      return this.error$3(err, null, null);
    },
    $isWorkerChannel: 1
  };
  A._WebWorkerChannel__postResponse_closure.prototype = {
    call$0() {
      return "Failed to post response " + A.S(this.res) + ": " + A.S(this.ex);
    },
    $signature: 18
  };
  A._WebWorkerChannel__inspectAndPostResponse_closure.prototype = {
    call$0() {
      return "Failed to post response " + A.S(this.res) + ": " + A.S(this.ex);
    },
    $signature: 18
  };
  A.JsWorkerRunnerExt_get_handle_closure.prototype = {
    call$1($event) {
      var t1 = type$.nullable_List_dynamic._as(A.$JSEventExt__getMessageEventData(A._asJSObject($event)));
      t1.toString;
      if (J.get$length$asx(t1) !== 7)
        A.throwExpression(A.SquadronError$_("Invalid worker request", null, null));
      return this._this.processRequest$1(t1);
    },
    $signature: 27
  };
  A.DisconnectedChannel.prototype = {
    _disconnectedError$0() {
      return A.throwExpression(A.SquadronError$_("Channel is not connected", null, null));
    },
    cancelToken$1(token) {
      return this._disconnectedError$0();
    },
    close$0() {
      return this._disconnectedError$0();
    },
    sendRequest$5$inspectRequest$inspectResponse$token(command, args, inspectRequest, inspectResponse, token) {
      return this._disconnectedError$0();
    },
    sendStreamingRequest$5$inspectRequest$inspectResponse$token(command, args, inspectRequest, inspectResponse, token) {
      return this._disconnectedError$0();
    },
    share$0() {
      return this._disconnectedError$0();
    },
    $isChannel: 1,
    get$exceptionManager() {
      return this.exceptionManager;
    },
    get$logger() {
      return this.logger;
    }
  };
  A.ForwardCompleter.prototype = {};
  A.ForwardStreamController.prototype = {
    add$1(_, data) {
      var t1, _this = this,
        _s11_ = "_controller";
      _this.$ti._precomputed1._as(data);
      if (!_this.__forward_stream_controller$_closed) {
        t1 = _this.__ForwardStreamController__controller_F;
        t1 === $ && A.throwLateFieldNI(_s11_);
        t1 = (t1._state & 4) !== 0;
      } else
        t1 = true;
      if (!t1) {
        t1 = _this.__ForwardStreamController__controller_F;
        t1 === $ && A.throwLateFieldNI(_s11_);
        t1.add$1(0, data);
      }
    },
    close$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$close$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.__forward_stream_controller$_closed = true;
              t1 = $async$self._sub;
              t1 = t1 == null ? null : t1.cancel$0();
              $async$goto = 2;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$close$0);
            case 2:
              // returning from await.
              $async$self._sub = null;
              t1 = $async$self.__ForwardStreamController__controller_F;
              t1 === $ && A.throwLateFieldNI("_controller");
              t1.close$0();
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$close$0, $async$completer);
    },
    _pause$0() {
      ++this._pauses;
    },
    _resume$0() {
      var t1 = this._pauses;
      if (t1 > 0)
        this._pauses = t1 - 1;
    },
    attachSubscription$1(sub) {
      var t1, _this = this;
      _this.$ti._eval$1("StreamSubscription<1>")._as(sub);
      if (_this._sub != null)
        throw A.wrapException(A.SquadronError$_("Invalid state: a subscription is already attached", null, null));
      _this._sub = sub;
      for (; t1 = _this._pauses, t1 > 0;) {
        _this._pauses = t1 - 1;
        sub.pause$0();
      }
      t1 = _this.__ForwardStreamController__controller_F;
      t1 === $ && A.throwLateFieldNI("_controller");
      t1.set$onPause(sub.get$pause());
      t1.set$onResume(sub.get$resume());
      if (t1.onCancel == null)
        t1.set$onCancel(sub.get$cancel());
    }
  };
  A.InternalLogger.prototype = {};
  A._NoLogOutput.prototype = {
    output$1($event) {
    }
  };
  A._DummyPrinter.prototype = {
    log$1($event) {
      return B.List_4i6;
    }
  };
  A._LogAllFilter.prototype = {
    shouldLog$1($event) {
      return true;
    }
  };
  A.ResultStream.prototype = {
    ResultStream$4(channel, req, sendRequest, streaming) {
      var _this = this,
        streamIdCompleter = streaming ? new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_nullable_int), type$._AsyncCompleter_nullable_int) : null,
        t1 = J.getInterceptor$asx(req),
        command = A._asInt(t1.$index(req, 2)),
        token = type$.nullable_SquadronCancelationToken._as(t1.$index(req, 4));
      t1 = A.ForwardStreamController$(new A.ResultStream_$onCancel(_this, streamIdCompleter, new A.ResultStream_$getStreamId(streamIdCompleter), channel), new A.ResultStream_$onListen(_this, token, sendRequest, streaming, new A.ResultStream_$decodeStreamOfResponses(_this, channel, streamIdCompleter, command, token), new A.ResultStream_$decodeSingleResponse(_this, channel, command), new A.ResultStream_$closeWithError(_this, command)), type$.dynamic);
      _this.__ResultStream__controller_F !== $ && A.throwLateFieldAI("_controller");
      _this.__ResultStream__controller_F = t1;
    }
  };
  A.ResultStream_$decodeStreamOfResponses.prototype = {
    call$1(res) {
      var ex, st, t1, t2, t3, t4, error, exception, canceled, _this = this, _null = null,
        _s11_ = "_controller";
      type$.List_dynamic._as(res);
      t1 = _this.channel;
      if (!A.WorkerResponseImpl_unwrapInPlace(res, t1))
        return;
      t2 = _this.streamIdCompleter;
      t3 = (t2.future._state & 30) === 0;
      t4 = J.getInterceptor$asx(res);
      if (A._asBool(t4.$index(res, 3))) {
        if (t3) {
          t2.complete$1(_null);
          t1 = t1.logger;
          if (t1 != null)
            t1.e$1("Invalid state: unexpected endOfStream for command " + _this.command);
          t1 = _this.$this.__ResultStream__controller_F;
          t1 === $ && A.throwLateFieldNI(_s11_);
          t2 = A.SquadronError$_("Invalid state: unexpected endOfStream", _null, _this.command);
          if (!t1.__forward_stream_controller$_closed) {
            t3 = t1.__ForwardStreamController__controller_F;
            t3 === $ && A.throwLateFieldNI(_s11_);
            t3 = (t3._state & 4) !== 0;
          } else
            t3 = true;
          if (!t3) {
            t1 = t1.__ForwardStreamController__controller_F;
            t1 === $ && A.throwLateFieldNI(_s11_);
            t1.addError$1(t2);
          }
        }
        t1 = _this.$this.__ResultStream__controller_F;
        t1 === $ && A.throwLateFieldNI(_s11_);
        t1.close$0();
        return;
      }
      error = type$.nullable_SquadronException._as(t4.$index(res, 2));
      t1 = error == null;
      if (t1 && t3)
        t2.complete$1(B.JSNumber_methods.toInt$0(A._asNum(A.WorkerResponse_get_result(res))));
      else if (!t1) {
        t1 = _this.$this.__ResultStream__controller_F;
        t1 === $ && A.throwLateFieldNI(_s11_);
        if (!t1.__forward_stream_controller$_closed) {
          t4 = t1.__ForwardStreamController__controller_F;
          t4 === $ && A.throwLateFieldNI(_s11_);
          t4 = (t4._state & 4) !== 0;
        } else
          t4 = true;
        if (!t4) {
          t4 = t1.__ForwardStreamController__controller_F;
          t4 === $ && A.throwLateFieldNI(_s11_);
          t4.addError$1(error);
        }
        if (t3) {
          t2.complete$1(_null);
          t1.close$0();
          return;
        }
      } else
        try {
          t1 = _this.$this.__ResultStream__controller_F;
          t1 === $ && A.throwLateFieldNI(_s11_);
          t2 = t1.$ti._precomputed1._as(A.WorkerResponse_get_result(res));
          if (!t1.__forward_stream_controller$_closed) {
            t3 = t1.__ForwardStreamController__controller_F;
            t3 === $ && A.throwLateFieldNI(_s11_);
            t3 = (t3._state & 4) !== 0;
          } else
            t3 = true;
          if (!t3) {
            t1 = t1.__ForwardStreamController__controller_F;
            t1 === $ && A.throwLateFieldNI(_s11_);
            t1.add$1(0, t2);
          }
        } catch (exception) {
          ex = A.unwrapException(exception);
          st = A.getTraceFromException(exception);
          t1 = _this.$this.__ResultStream__controller_F;
          t1 === $ && A.throwLateFieldNI(_s11_);
          t2 = A.SquadronException_from(ex, st, _this.command);
          if (!t1.__forward_stream_controller$_closed) {
            t3 = t1.__ForwardStreamController__controller_F;
            t3 === $ && A.throwLateFieldNI(_s11_);
            t3 = (t3._state & 4) !== 0;
          } else
            t3 = true;
          if (!t3) {
            t1 = t1.__ForwardStreamController__controller_F;
            t1 === $ && A.throwLateFieldNI(_s11_);
            t1.addError$1(t2);
          }
        }
      t1 = _this.token;
      canceled = t1 == null ? _null : t1.get$exception();
      if (canceled != null) {
        t1 = _this.$this.__ResultStream__controller_F;
        t1 === $ && A.throwLateFieldNI(_s11_);
        if (!t1.__forward_stream_controller$_closed) {
          t2 = t1.__ForwardStreamController__controller_F;
          t2 === $ && A.throwLateFieldNI(_s11_);
          t2 = (t2._state & 4) !== 0;
        } else
          t2 = true;
        if (!t2) {
          t2 = t1.__ForwardStreamController__controller_F;
          t2 === $ && A.throwLateFieldNI(_s11_);
          t2.addError$1(canceled);
        }
        t1.close$0();
      }
    },
    $signature: 72
  };
  A.ResultStream_$decodeSingleResponse.prototype = {
    call$1(res) {
      var ex, st, error, t1, t2, t3, exception, _this = this,
        _s11_ = "_controller";
      type$.List_dynamic._as(res);
      if (!A.WorkerResponseImpl_unwrapInPlace(res, _this.channel))
        return;
      error = type$.nullable_SquadronException._as(J.$index$asx(res, 2));
      if (error != null) {
        t1 = _this.$this.__ResultStream__controller_F;
        t1 === $ && A.throwLateFieldNI(_s11_);
        if (!t1.__forward_stream_controller$_closed) {
          t2 = t1.__ForwardStreamController__controller_F;
          t2 === $ && A.throwLateFieldNI(_s11_);
          t2 = (t2._state & 4) !== 0;
        } else
          t2 = true;
        if (!t2) {
          t1 = t1.__ForwardStreamController__controller_F;
          t1 === $ && A.throwLateFieldNI(_s11_);
          t1.addError$1(error);
        }
      } else
        try {
          t1 = _this.$this.__ResultStream__controller_F;
          t1 === $ && A.throwLateFieldNI(_s11_);
          t2 = t1.$ti._precomputed1._as(A.WorkerResponse_get_result(res));
          if (!t1.__forward_stream_controller$_closed) {
            t3 = t1.__ForwardStreamController__controller_F;
            t3 === $ && A.throwLateFieldNI(_s11_);
            t3 = (t3._state & 4) !== 0;
          } else
            t3 = true;
          if (!t3) {
            t1 = t1.__ForwardStreamController__controller_F;
            t1 === $ && A.throwLateFieldNI(_s11_);
            t1.add$1(0, t2);
          }
        } catch (exception) {
          ex = A.unwrapException(exception);
          st = A.getTraceFromException(exception);
          t1 = _this.$this.__ResultStream__controller_F;
          t1 === $ && A.throwLateFieldNI(_s11_);
          t2 = A.SquadronException_from(ex, st, _this.command);
          if (!t1.__forward_stream_controller$_closed) {
            t3 = t1.__ForwardStreamController__controller_F;
            t3 === $ && A.throwLateFieldNI(_s11_);
            t3 = (t3._state & 4) !== 0;
          } else
            t3 = true;
          if (!t3) {
            t1 = t1.__ForwardStreamController__controller_F;
            t1 === $ && A.throwLateFieldNI(_s11_);
            t1.addError$1(t2);
          }
        }
      t1 = _this.$this.__ResultStream__controller_F;
      t1 === $ && A.throwLateFieldNI(_s11_);
      t1.close$0();
    },
    $signature: 72
  };
  A.ResultStream_$getStreamId.prototype = {
    call$1(sub) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_int),
        $async$returnValue, $async$self = this, count, streamId, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.streamIdCompleter;
              if (t1 == null)
                type$.Completer_nullable_int._as(t1);
              count = 0;
              if (sub.get$isPaused() && (t1.future._state & 30) === 0)
                for (; sub.get$isPaused();) {
                  ++count;
                  sub.resume$0();
                }
              $async$goto = 3;
              return A._asyncAwait(t1.future, $async$call$1);
            case 3:
              // returning from await.
              streamId = $async$result;
              for (; count > 0;) {
                --count;
                sub.pause$0();
              }
              $async$returnValue = streamId;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 236
  };
  A.ResultStream_$onCancel.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, sub, streamId, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this.__ResultStream__controller_F;
              t1 === $ && A.throwLateFieldNI("_controller");
              sub = t1._sub;
              $async$goto = $async$self.streamIdCompleter != null && sub != null ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return A._asyncAwait($async$self.$$getStreamId.call$1(sub), $async$call$0);
            case 4:
              // returning from await.
              streamId = $async$result;
              if (streamId != null)
                $async$self.channel._postRequest$2$force([A.microsecTimeStamp(), null, -2, null, null, streamId, null], true);
              $async$goto = 5;
              return A._asyncAwait(sub.cancel$0(), $async$call$0);
            case 5:
              // returning from await.
            case 3:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 14
  };
  A.ResultStream_$closeWithError.prototype = {
    call$2(error, st) {
      var t1, t2, t3,
        _s11_ = "_controller";
      A._asObject(error);
      type$.nullable_StackTrace._as(st);
      t1 = this.$this.__ResultStream__controller_F;
      t1 === $ && A.throwLateFieldNI(_s11_);
      t2 = A.SquadronException_from(error, st, this.command);
      if (!t1.__forward_stream_controller$_closed) {
        t3 = t1.__ForwardStreamController__controller_F;
        t3 === $ && A.throwLateFieldNI(_s11_);
        t3 = (t3._state & 4) !== 0;
      } else
        t3 = true;
      if (!t3) {
        t3 = t1.__ForwardStreamController__controller_F;
        t3 === $ && A.throwLateFieldNI(_s11_);
        t3.addError$1(t2);
      }
      t1.close$0();
    },
    call$1(error) {
      return this.call$2(error, null);
    },
    $signature: 58
  };
  A.ResultStream_$onListen.prototype = {
    call$0() {
      var ex, st, t1, t2, t3, exception, _this = this;
      try {
        t1 = _this.token;
        if (t1 != null)
          t1.throwIfCanceled$0();
        t1 = _this.$this.__ResultStream__controller_F;
        t1 === $ && A.throwLateFieldNI("_controller");
        t2 = _this.sendRequest.call$0();
        t3 = _this.streaming ? _this.$$decodeStreamOfResponses : _this.$$decodeSingleResponse;
        t1.attachSubscription$1(t2.listen$4$cancelOnError$onDone$onError(t3, false, t1.get$close(), _this.$$closeWithError));
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        _this.$$closeWithError.call$2(ex, st);
      }
    },
    $signature: 2
  };
  A.WorkerRunner.prototype = {
    _checkOperations$0() {
      var t2, t3, invalidKeys,
        t1 = this._operations;
      t1.toString;
      t2 = A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>");
      t3 = t2._eval$1("WhereIterable<Iterable.E>");
      invalidKeys = A.List_List$_of(new A.WhereIterable(new A.LinkedHashMapKeysIterable(t1, t2), t2._eval$1("bool(Iterable.E)")._as(new A.WorkerRunner__checkOperations_closure()), t3), t3._eval$1("Iterable.E"));
      t1 = invalidKeys.length;
      if (t1 !== 0) {
        t1 = t1 > 1 ? "s" : "";
        throw A.wrapException(A.SquadronError$_("Invalid command identifier" + t1 + " in service operations map: " + B.JSArray_methods.join$1(invalidKeys, ", ") + ". Command ids must be positive.", null, null));
      }
    },
    processRequest$1(request) {
      return this.processRequest$body$WorkerRunner(request);
    },
    processRequest$body$WorkerRunner(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], $async$self = this, pendingInstallation, token, canceler, token0, tokenRef, cmd, op, result, reply, replyWithError, $$postError, post, ex, st, t1, t2, ex0, t3, t4, exception, channel, $async$exception;
      var $async$processRequest$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              channel = null;
              $async$handler = 4;
              A.WorkerMessageImpl_unwrapTravelTime(request);
              t1 = J.getInterceptor$asx(request);
              t1.$indexSet(request, 2, B.JSNumber_methods.toInt$0(A._asNum(t1.$index(request, 2))));
              t2 = A._asNumQ(t1.$index(request, 5));
              t1.$indexSet(request, 5, t2 == null ? null : B.JSNumber_methods.toInt$0(t2));
              t2 = A._asJSObjectQ(t1.$index(request, 1));
              t1.$indexSet(request, 1, t2 == null ? null : new A._WebWorkerChannel(t2, $async$self.internalLogger));
              t1.$indexSet(request, 4, A.SquadronCancelationToken_deserialize(type$.nullable_List_dynamic._as(t1.$index(request, 4))));
              if (t1.$index(request, 6) == null)
                t1.$indexSet(request, 6, false);
              if (t1.$index(request, 3) == null)
                t1.$indexSet(request, 3, B.List_empty);
              t2 = type$.nullable_WorkerChannel;
              channel = t2._as(t1.$index(request, 1));
              if (A._asInt(t1.$index(request, 2)) === -4) {
                $async$self._terminationRequested = true;
                if ($async$self._executing === 0)
                  $async$self._unmount$0();
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              pendingInstallation = null;
              $async$goto = pendingInstallation != null ? 7 : 8;
              break;
            case 7:
              // then
              $async$goto = 9;
              return A._asyncAwait(pendingInstallation, $async$processRequest$1);
            case 9:
              // returning from await.
              $async$self._installCompleter = null;
            case 8:
              // join
              if (A._asInt(t1.$index(request, 2)) === -3) {
                t1 = type$.nullable_SquadronCancelationToken._as(t1.$index(request, 4));
                t1.toString;
                token = t1;
                t1 = $async$self._getTokenRef$1(token);
                ex0 = type$.SquadronCancelationToken._as(token).get$exception();
                if (ex0 != null && (t1._completer.future._state & 30) === 0) {
                  t1.__cancelation_token_ref$_exception = ex0;
                  t1._completer.complete$1(ex0);
                }
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              } else if (A._asInt(t1.$index(request, 2)) === -2) {
                canceler = $async$self._streamCancelers.$index(0, A._asIntQ(t1.$index(request, 5)));
                t1 = canceler;
                t1 = t1 == null ? null : t1.call$0();
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              }
              if (A._asInt(t1.$index(request, 2)) === -1) {
                t1 = A.SquadronError$_("Unexpected connection request: " + A.S(request), null, null);
                throw A.wrapException(t1);
              } else if ($async$self._operations == null) {
                t1 = A.SquadronError$_("Worker service is not ready", null, null);
                throw A.wrapException(t1);
              }
              if (channel == null) {
                t1 = A.SquadronError$_("Missing client for request: " + A.S(request), null, null);
                throw A.wrapException(t1);
              }
              t3 = type$.nullable_SquadronCancelationToken;
              token0 = t3._as(t1.$index(request, 4));
              t4 = token0;
              if (t4 != null)
                t4.throwIfCanceled$0();
              ++$async$self._executing;
              token = $async$self._getTokenRef$1(t3._as(t1.$index(request, 4)));
              if (token._hasRef) {
                ++token._refCount;
                if (t3._as(t1.$index(request, 4)) == null || t3._as(t1.$index(request, 4)).get$id() !== token.id)
                  A.throwExpression(A.SquadronError$_("Cancelation token mismatch", null, null));
                t1.$indexSet(request, 4, token);
              } else if (t3._as(t1.$index(request, 4)) != null)
                A.throwExpression(A.SquadronError$_("Token reference mismatch", null, null));
              tokenRef = token;
              $async$handler = 10;
              cmd = A._asInt(t1.$index(request, 2));
              op = $async$self._operations.$index(0, cmd);
              if (op == null) {
                t1 = A.SquadronError$_("Unknown command: " + A.S(cmd), null, null);
                throw A.wrapException(t1);
              }
              result = op.call$1(request);
              $async$goto = result instanceof A._Future ? 13 : 14;
              break;
            case 13:
              // then
              $async$goto = 15;
              return A._asyncAwait(result, $async$processRequest$1);
            case 15:
              // returning from await.
              result = $async$result;
            case 14:
              // join
              if (A._asBool(t1.$index(request, 6))) {
                t1 = t2._as(t1.$index(request, 1));
                t1 = t1 == null ? null : t1.get$inspectAndReply();
              } else {
                t1 = t2._as(t1.$index(request, 1));
                t1 = t1 == null ? null : t1.get$reply();
              }
              t1.toString;
              reply = t1;
              t1 = result;
              $async$goto = t1 instanceof A.Stream ? 16 : 18;
              break;
            case 16:
              // then
              replyWithError = channel.get$error();
              $$postError = new A.WorkerRunner_processRequest_$postError(replyWithError, cmd);
              post = new A.WorkerRunner_processRequest_post(reply, $$postError);
              $async$goto = 19;
              return A._asyncAwait($async$self._pipe$5(result, channel, post, $$postError, token0), $async$processRequest$1);
            case 19:
              // returning from await.
              // goto join
              $async$goto = 17;
              break;
            case 18:
              // else
              reply.call$1(result);
            case 17:
              // join
              $async$next.push(12);
              // goto finally
              $async$goto = 11;
              break;
            case 10:
              // uncaught
              $async$next = [4];
            case 11:
              // finally
              $async$handler = 4;
              t1 = type$.CancelationTokenReference._as(tokenRef);
              if (t1._hasRef)
                --t1._refCount;
              if (t1._refCount === 0)
                $async$self._cancelTokens.remove$1(0, t1.id);
              t1 = --$async$self._executing;
              if ($async$self._terminationRequested && t1 === 0)
                $async$self._unmount$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 12:
              // after finally
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              ex = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              if (channel != null) {
                t1 = channel;
                t2 = A._asInt(J.$index$asx(request, 2));
                ex = A.SquadronException_from(A._asObject(ex), type$.nullable_StackTrace._as(st), t2);
                t1._postResponse$1([A.microsecTimeStamp(), null, ex, null, null]);
              } else
                $async$self.internalLogger.e$1("Unhandled error: " + A.S(ex));
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$processRequest$1, $async$completer);
    },
    _getTokenRef$1(token) {
      return token == null ? $.$get$CancelationTokenReference_noToken() : this._cancelTokens.putIfAbsent$2(token.get$id(), new A.WorkerRunner__getTokenRef_closure(token));
    },
    _pipe$5(stream, channel, post, postError, token) {
      var subscription, t2, streamId, t3, t4, t5, t1 = {};
      type$.void_Function_dynamic._as(post);
      type$.void_Function_Object_$opt_nullable_StackTrace._as(postError);
      subscription = A._Cell$named("subscription");
      t2 = new A._Future($.Zone__current, type$._Future_dynamic);
      streamId = A._Cell$named("streamId");
      t3 = new A.WorkerRunner__pipe_onDone(this, streamId, channel, subscription, new A._AsyncCompleter(t2, type$._AsyncCompleter_dynamic));
      t1.checkToken = null;
      t4 = token == null ? t1.checkToken = new A.WorkerRunner__pipe_closure() : t1.checkToken = new A.WorkerRunner__pipe_closure0(token, postError, t3);
      type$.void_Function._as(t3);
      t5 = ++this._streamId;
      this._streamCancelers.$indexSet(0, t5, t3);
      streamId.set$finalLocalValue(t5);
      post.call$1(streamId._readLocal$0());
      if (t4.call$0())
        subscription.set$finalLocalValue(stream.listen$4$cancelOnError$onDone$onError(new A.WorkerRunner__pipe_closure1(t1, post), false, t3, new A.WorkerRunner__pipe_closure2(t1, postError)));
      return t2;
    },
    _unmount$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$next = [], $async$self = this, ex, exception;
      var $async$_unmount$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              try {
              } catch (exception) {
                ex = A.unwrapException(exception);
                $async$self.internalLogger.e$1("Service uninstallation failed with error: " + A.S(ex));
              } finally {
                $async$self._exit$0();
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_unmount$0, $async$completer);
    },
    _exit$0() {
      var ex, exception;
      try {
        this._terminate.call$1(this);
      } catch (exception) {
        ex = A.unwrapException(exception);
        this.internalLogger.e$1("Worker termination failed with error: " + A.S(ex));
      }
    },
    set$_operations(_operations) {
      this._operations = type$.nullable_Map_of_int_and_dynamic_Function_List_dynamic._as(_operations);
    }
  };
  A.WorkerRunner_WorkerRunner$use_closure.prototype = {
    call$1(r) {
      r.internalLogger.t$1("Terminating local Worker");
      r._service = null;
      r.set$_operations(null);
    },
    $signature: 233
  };
  A.WorkerRunner__checkOperations_closure.prototype = {
    call$1(k) {
      return A._asInt(k) <= 0;
    },
    $signature: 149
  };
  A.WorkerRunner_processRequest_$postError.prototype = {
    call$2(exception, stackTrace) {
      this.replyWithError.call$3(exception, type$.nullable_StackTrace._as(stackTrace), this.cmd);
    },
    call$1(exception) {
      return this.call$2(exception, null);
    },
    $signature: 58
  };
  A.WorkerRunner_processRequest_post.prototype = {
    call$1(data) {
      var ex, st, exception;
      try {
        this.reply.call$1(data);
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        this.$$postError.call$2(ex, st);
      }
    },
    $signature: 16
  };
  A.WorkerRunner__getTokenRef_closure.prototype = {
    call$0() {
      return new A.CancelationTokenReference(this.token.get$id(), new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_SquadronCanceledException), type$._AsyncCompleter_SquadronCanceledException), true);
    },
    $signature: 232
  };
  A.WorkerRunner__pipe_onDone.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.$this._streamCancelers.remove$1(0, A._asInt($async$self.streamId._readLocal$0()));
              $async$self.channel._postResponse$1([A.microsecTimeStamp(), null, null, true, null]);
              $async$goto = 2;
              return A._asyncAwait($async$self.subscription._readLocal$0().cancel$0(), $async$call$0);
            case 2:
              // returning from await.
              $async$self.done.complete$0();
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 14
  };
  A.WorkerRunner__pipe_closure.prototype = {
    call$0() {
      return true;
    },
    $signature: 133
  };
  A.WorkerRunner__pipe_closure0.prototype = {
    call$0() {
      var ex = this.token.get$exception(),
        t1 = ex == null;
      if (!t1) {
        this.postError.call$1(ex);
        this.onDone.call$0();
      }
      return t1;
    },
    $signature: 133
  };
  A.WorkerRunner__pipe_closure1.prototype = {
    call$1(data) {
      if (this._box_0.checkToken.call$0())
        this.post.call$1(data);
    },
    $signature: 16
  };
  A.WorkerRunner__pipe_closure2.prototype = {
    call$2(ex, st) {
      var t1;
      if (this._box_0.checkToken.call$0()) {
        t1 = ex == null ? A._asObject(ex) : ex;
        this.postError.call$2(t1, type$.nullable_StackTrace._as(st));
      }
    },
    $signature: 97
  };
  A.SquadronService.prototype = {};
  A.ConcurrencySettings.prototype = {};
  A.CastConverter.prototype = {
    value$1$0($T) {
      A.checkTypeBound($T, type$.Object, "T", "value");
      return A.instantiate1(A.converter_Converter_identity$closure(), $T);
    }
  };
  A.ContextAwareConverter.prototype = {
    value$1$0($T) {
      var op;
      A.checkTypeBound($T, type$.Object, "T", "value");
      op = this._converter.value$1$0($T);
      if (A.createRuntimeType($T) === B.Type_int_T7V || A.createRuntimeType($T) === B.Type_double_JIQ || J.$eq$(op, A.instantiate1(A.converter_Converter_identity$closure(), $T)))
        return op;
      return new A.ContextAwareConverter_value_closure(this, op, $T);
    },
    list$1$1(cast, $T) {
      var op, _this = this;
      A.checkTypeBound($T, type$.Object, "T", "list");
      $T._eval$1("0(@)?")._as(cast);
      op = cast == null ? _this.value$1$0($T) : cast;
      if (J.$eq$(op, A.instantiate1(A.converter_Converter_identity$closure(), $T)))
        return new A.ContextAwareConverter_list_closure(_this, _this._converter.list$1$0($T), $T);
      else
        return new A.ContextAwareConverter_list_closure0(_this, op, $T);
    },
    list$1$0($T) {
      return this.list$1$1(null, $T);
    },
    nlist$1$1(cast, $T) {
      A.checkTypeBound($T, type$.Object, "T", "nlist");
      $T._eval$1("0(@)?")._as(cast);
      if (J.$eq$(cast, A.instantiate1(A.converter_Converter_identity$closure(), $T)))
        return new A.ContextAwareConverter_nlist_closure(this, this._converter.nlist$1$0($T), $T);
      else
        return new A.ContextAwareConverter_nlist_closure0(this, A.Converter_allowNull(cast, $T), $T);
    },
    $set$1$1(cast, $T) {
      var op, _this = this;
      A.checkTypeBound($T, type$.Object, "T", "set");
      $T._eval$1("0(@)?")._as(cast);
      op = cast == null ? _this.value$1$0($T) : cast;
      if (J.$eq$(op, A.instantiate1(A.converter_Converter_identity$closure(), $T)))
        return new A.ContextAwareConverter_set_closure(_this, _this._converter.$set$1$0($T), $T);
      else
        return new A.ContextAwareConverter_set_closure0(_this, op, $T);
    },
    $set$1$0($T) {
      return this.$set$1$1(null, $T);
    },
    nset$1$1(cast, $T) {
      var op, _this = this;
      A.checkTypeBound($T, type$.Object, "T", "nset");
      $T._eval$1("0(@)?")._as(cast);
      op = cast == null ? _this.value$1$0($T) : cast;
      if (J.$eq$(op, A.instantiate1(A.converter_Converter_identity$closure(), $T)))
        return new A.ContextAwareConverter_nset_closure(_this, _this._converter.nset$1$0($T), $T);
      else
        return new A.ContextAwareConverter_nset_closure0(_this, A.Converter_allowNull(op, $T), $T);
    },
    nset$1$0($T) {
      return this.nset$1$1(null, $T);
    },
    map$2$1$vcast(_, vcast, $K, $V) {
      var kop, vop, _this = this,
        t1 = type$.Object;
      A.checkTypeBound($K, t1, "K", "map");
      A.checkTypeBound($V, t1, "V", "map");
      $V._eval$1("0(@)?")._as(vcast);
      kop = _this.value$1$0($K);
      vop = vcast == null ? _this.value$1$0($V) : vcast;
      t1 = J.getInterceptor$(kop);
      if (t1.$eq(kop, A.instantiate1(A.converter_Converter_identity$closure(), $K)) && J.$eq$(vop, A.instantiate1(A.converter_Converter_identity$closure(), $V)))
        return new A.ContextAwareConverter_map_closure(_this, _this._converter.map$2$0(0, $K, $V), $K, $V);
      else if (t1.$eq(kop, A.instantiate1(A.converter_Converter_identity$closure(), $K)))
        return new A.ContextAwareConverter_map_closure0(_this, vop, $K, $V);
      else
        return new A.ContextAwareConverter_map_closure1(_this, kop, vop, $K, $V);
    },
    map$2$0(_, $K, $V) {
      return this.map$2$1$vcast(0, null, $K, $V);
    },
    nmap$2$0($K, $V) {
      var kop, vop, _this = this,
        t1 = type$.Object;
      A.checkTypeBound($K, t1, "K", "nmap");
      A.checkTypeBound($V, t1, "V", "nmap");
      kop = _this.value$1$0($K);
      vop = _this.value$1$0($V);
      t1 = J.getInterceptor$(kop);
      if (t1.$eq(kop, A.instantiate1(A.converter_Converter_identity$closure(), $K)) && J.$eq$(vop, A.instantiate1(A.converter_Converter_identity$closure(), $V)))
        return new A.ContextAwareConverter_nmap_closure(_this, _this._converter.nmap$2$0($K, $V), $K, $V);
      else if (t1.$eq(kop, A.instantiate1(A.converter_Converter_identity$closure(), $K)))
        return new A.ContextAwareConverter_nmap_closure0(_this, A.Converter_allowNull(vop, $V), $K, $V);
      else
        return new A.ContextAwareConverter_nmap_closure1(_this, kop, A.Converter_allowNull(vop, $V), $K, $V);
    }
  };
  A.ContextAwareConverter_value_closure.prototype = {
    call$1(x) {
      var t1, t2, ref;
      if (x == null)
        A._asObject(x);
      t1 = this.$this._context_aware_converter$_arguments;
      t2 = this.T;
      ref = t1.getReference$1$1(x, t2);
      if (ref != null)
        return ref;
      ref = this.op.call$1(x);
      A.checkTypeBound(t2, type$.Object, "T", "setReference");
      t2._as(ref);
      t1._cache.$indexSet(0, x, ref);
      return ref;
    },
    $signature() {
      return this.T._eval$1("0(@)");
    }
  };
  A.ContextAwareConverter_list_closure.prototype = {
    call$1(x) {
      var t1 = this.$this._context_aware_converter$_arguments,
        t2 = x == null,
        t3 = t2 ? A._asObject(x) : x,
        t4 = this.T._eval$1("List<0>"),
        ref = t1.getReference$1$1(t3, t4);
      if (ref != null)
        return ref;
      ref = this.toList.call$1(x);
      t2 = t2 ? A._asObject(x) : x;
      A.checkTypeBound(t4, type$.Object, "T", "setReference");
      t1._cache.$indexSet(0, t2, t4._as(ref));
      return ref;
    },
    $signature() {
      return this.T._eval$1("List<0>(@)");
    }
  };
  A.ContextAwareConverter_list_closure0.prototype = {
    call$1(x) {
      var t1 = this.$this._context_aware_converter$_arguments,
        t2 = x == null ? A._asObject(x) : x,
        t3 = this.T,
        t4 = t3._eval$1("List<0>"),
        ref = t1.getReference$1$1(t2, t4);
      if (ref != null)
        return ref;
      type$.List_dynamic._as(x);
      ref = new A.LazyInPlaceList(x, this.op, t3._eval$1("LazyInPlaceList<0>"));
      A.checkTypeBound(t4, type$.Object, "T", "setReference");
      t1._cache.$indexSet(0, x, t4._as(ref));
      return ref;
    },
    $signature() {
      return this.T._eval$1("List<0>(@)");
    }
  };
  A.ContextAwareConverter_nlist_closure.prototype = {
    call$1(x) {
      var t1 = this.$this._context_aware_converter$_arguments,
        t2 = this.T._eval$1("List<0?>"),
        ref = t1.getReference$1$1(x, t2);
      if (ref != null)
        return ref;
      ref = this.toList.call$1(x);
      A.checkTypeBound(t2, type$.Object, "T", "setReference");
      t1._cache.$indexSet(0, x, t2._as(ref));
      return ref;
    },
    $signature() {
      return this.T._eval$1("List<0?>(@)");
    }
  };
  A.ContextAwareConverter_nlist_closure0.prototype = {
    call$1(x) {
      var t1 = this.$this._context_aware_converter$_arguments,
        t2 = this.T,
        t3 = t2._eval$1("List<0?>"),
        ref = t1.getReference$1$1(x, t3);
      if (ref != null)
        return ref;
      ref = new A.LazyInPlaceList(x, this.nop, t2._eval$1("LazyInPlaceList<0?>"));
      A.checkTypeBound(t3, type$.Object, "T", "setReference");
      t1._cache.$indexSet(0, x, t3._as(ref));
      return ref;
    },
    $signature() {
      return this.T._eval$1("List<0?>(@)");
    }
  };
  A.ContextAwareConverter_set_closure.prototype = {
    call$1(x) {
      var t1 = this.$this._context_aware_converter$_arguments,
        t2 = this.T._eval$1("Set<0>"),
        ref = t1.getReference$1$1(x, t2);
      if (ref != null)
        return ref;
      ref = this.toSet.call$1(x);
      A.checkTypeBound(t2, type$.Object, "T", "setReference");
      t1._cache.$indexSet(0, x, t2._as(ref));
      return ref;
    },
    $signature() {
      return this.T._eval$1("Set<0>(@)");
    }
  };
  A.ContextAwareConverter_set_closure0.prototype = {
    call$1(x) {
      var t1 = this.$this._context_aware_converter$_arguments,
        t2 = this.T,
        t3 = t2._eval$1("Set<0>"),
        ref = t1.getReference$1$1(x, t3);
      if (ref != null)
        return ref;
      ref = A.LinkedHashSet_LinkedHashSet$_empty(t2);
      A.checkTypeBound(t3, type$.Object, "T", "setReference");
      t1._cache.$indexSet(0, x, t3._as(ref));
      t1 = A._instanceType(x);
      ref.addAll$1(0, new A.EfficientLengthMappedIterable(x, t1._bind$1(t2)._eval$1("1(2)")._as(this.op), t1._eval$1("@<1>")._bind$1(t2)._eval$1("EfficientLengthMappedIterable<1,2>")));
      return ref;
    },
    $signature() {
      return this.T._eval$1("Set<0>(@)");
    }
  };
  A.ContextAwareConverter_nset_closure.prototype = {
    call$1(x) {
      var t1 = this.$this._context_aware_converter$_arguments,
        t2 = this.T._eval$1("Set<0?>"),
        ref = t1.getReference$1$1(x, t2);
      if (ref != null)
        return ref;
      ref = this.toSet.call$1(x);
      A.checkTypeBound(t2, type$.Object, "T", "setReference");
      t1._cache.$indexSet(0, x, t2._as(ref));
      return ref;
    },
    $signature() {
      return this.T._eval$1("Set<0?>(@)");
    }
  };
  A.ContextAwareConverter_nset_closure0.prototype = {
    call$1(x) {
      var t1 = this.$this._context_aware_converter$_arguments,
        t2 = this.T,
        t3 = t2._eval$1("Set<0?>"),
        ref = t1.getReference$1$1(x, t3);
      if (ref != null)
        return ref;
      t2 = t2._eval$1("0?");
      ref = A.LinkedHashSet_LinkedHashSet$_empty(t2);
      A.checkTypeBound(t3, type$.Object, "T", "setReference");
      t1._cache.$indexSet(0, x, t3._as(ref));
      t1 = A._instanceType(x);
      ref.addAll$1(0, new A.EfficientLengthMappedIterable(x, t1._bind$1(t2)._eval$1("1(2)")._as(this.nop), t1._eval$1("@<1>")._bind$1(t2)._eval$1("EfficientLengthMappedIterable<1,2>")));
      return ref;
    },
    $signature() {
      return this.T._eval$1("Set<0?>(@)");
    }
  };
  A.ContextAwareConverter_map_closure.prototype = {
    call$1(x) {
      var _this = this,
        t1 = _this.$this._context_aware_converter$_arguments,
        t2 = _this.K._eval$1("@<0>")._bind$1(_this.V)._eval$1("Map<1,2>"),
        ref = t1.getReference$1$1(x, t2);
      if (ref != null)
        return ref;
      ref = _this.toMap.call$1(x);
      A.checkTypeBound(t2, type$.Object, "T", "setReference");
      t1._cache.$indexSet(0, x, t2._as(ref));
      return ref;
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("Map<1,2>(@)");
    }
  };
  A.ContextAwareConverter_map_closure0.prototype = {
    call$1(x) {
      var _this = this,
        t1 = _this.$this._context_aware_converter$_arguments,
        t2 = _this.K,
        t3 = _this.V,
        t4 = t2._eval$1("@<0>")._bind$1(t3)._eval$1("Map<1,2>"),
        ref = t1.getReference$1$1(x, t4);
      if (ref != null)
        return ref;
      ref = new A.LazyInPlaceMap(x, _this.vop, t2._eval$1("@<0>")._bind$1(t3)._eval$1("LazyInPlaceMap<1,2>"));
      A.checkTypeBound(t4, type$.Object, "T", "setReference");
      t1._cache.$indexSet(0, x, t4._as(ref));
      return ref;
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("Map<1,2>(@)");
    }
  };
  A.ContextAwareConverter_map_closure1.prototype = {
    call$1(x) {
      var _this = this,
        t1 = _this.$this._context_aware_converter$_arguments,
        t2 = _this.K,
        t3 = _this.V,
        t4 = t2._eval$1("@<0>")._bind$1(t3),
        t5 = t4._eval$1("Map<1,2>"),
        ref = t1.getReference$1$1(x, t5);
      if (ref != null)
        return ref;
      ref = A.LinkedHashMap_LinkedHashMap$_empty(t2, t3);
      A.checkTypeBound(t5, type$.Object, "T", "setReference");
      t1._cache.$indexSet(0, x, t5._as(ref));
      t1 = A._instanceType(x)._eval$1("LinkedHashMapEntriesIterable<1,2>");
      t4 = t4._eval$1("MapEntry<1,2>");
      ref.addEntries$1(A.MappedIterable_MappedIterable(new A.LinkedHashMapEntriesIterable(x, t1), t1._bind$1(t4)._eval$1("1(Iterable.E)")._as(new A.ContextAwareConverter_map__closure(_this.kop, _this.vop, t2, t3)), t1._eval$1("Iterable.E"), t4));
      return ref;
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("Map<1,2>(@)");
    }
  };
  A.ContextAwareConverter_map__closure.prototype = {
    call$1(e) {
      var _this = this;
      type$.MapEntry_dynamic_dynamic._as(e);
      return new A.MapEntry(_this.kop.call$1(e.key), _this.vop.call$1(e.value), _this.K._eval$1("@<0>")._bind$1(_this.V)._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("MapEntry<1,2>(MapEntry<@,@>)");
    }
  };
  A.ContextAwareConverter_nmap_closure.prototype = {
    call$1(x) {
      var _this = this,
        t1 = _this.$this._context_aware_converter$_arguments,
        t2 = _this.K._eval$1("@<0>")._bind$1(_this.V)._eval$1("Map<1,2?>"),
        ref = t1.getReference$1$1(x, t2);
      if (ref != null)
        return ref;
      ref = _this.toMap.call$1(x);
      A.checkTypeBound(t2, type$.Object, "T", "setReference");
      t1._cache.$indexSet(0, x, t2._as(ref));
      return ref;
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("Map<1,2?>(@)");
    }
  };
  A.ContextAwareConverter_nmap_closure0.prototype = {
    call$1(x) {
      var _this = this,
        t1 = _this.$this._context_aware_converter$_arguments,
        t2 = _this.K,
        t3 = _this.V,
        t4 = t2._eval$1("@<0>")._bind$1(t3)._eval$1("Map<1,2?>"),
        ref = t1.getReference$1$1(x, t4);
      if (ref != null)
        return ref;
      ref = new A.LazyInPlaceMap(x, _this.nvop, t2._eval$1("@<0>")._bind$1(t3._eval$1("0?"))._eval$1("LazyInPlaceMap<1,2>"));
      A.checkTypeBound(t4, type$.Object, "T", "setReference");
      t1._cache.$indexSet(0, x, t4._as(ref));
      return ref;
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("Map<1,2?>(@)");
    }
  };
  A.ContextAwareConverter_nmap_closure1.prototype = {
    call$1(x) {
      var _this = this,
        t1 = _this.$this._context_aware_converter$_arguments,
        t2 = _this.K,
        t3 = _this.V,
        t4 = t2._eval$1("@<0>")._bind$1(t3),
        t5 = t4._eval$1("Map<1,2?>"),
        ref = t1.getReference$1$1(x, t5);
      if (ref != null)
        return ref;
      ref = A.LinkedHashMap_LinkedHashMap$_empty(t2, t3._eval$1("0?"));
      A.checkTypeBound(t5, type$.Object, "T", "setReference");
      t1._cache.$indexSet(0, x, t5._as(ref));
      t1 = A._instanceType(x)._eval$1("LinkedHashMapEntriesIterable<1,2>");
      t4 = t4._eval$1("MapEntry<1,2?>");
      ref.addEntries$1(A.MappedIterable_MappedIterable(new A.LinkedHashMapEntriesIterable(x, t1), t1._bind$1(t4)._eval$1("1(Iterable.E)")._as(new A.ContextAwareConverter_nmap__closure(_this.kop, _this.nvop, t2, t3)), t1._eval$1("Iterable.E"), t4));
      return ref;
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("Map<1,2?>(@)");
    }
  };
  A.ContextAwareConverter_nmap__closure.prototype = {
    call$1(e) {
      var _this = this;
      type$.MapEntry_dynamic_dynamic._as(e);
      return new A.MapEntry(_this.kop.call$1(e.key), _this.nvop.call$1(e.value), _this.K._eval$1("@<0>")._bind$1(_this.V._eval$1("0?"))._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("MapEntry<1,2?>(MapEntry<@,@>)");
    }
  };
  A.Converter0.prototype = {
    list$1$1(cast, $T) {
      var op;
      A.checkTypeBound($T, type$.Object, "T", "list");
      $T._eval$1("0(@)?")._as(cast);
      op = cast == null ? this.value$1$0($T) : cast;
      return J.$eq$(op, A.instantiate1(A.converter_Converter_identity$closure(), $T)) ? A.instantiate1(A.converter_Converter__castList$closure(), $T) : A.Converter__mapList(op, $T);
    },
    list$1$0($T) {
      return this.list$1$1(null, $T);
    },
    nlist$1$1(cast, $T) {
      var op, t1;
      A.checkTypeBound($T, type$.Object, "T", "nlist");
      $T._eval$1("0(@)?")._as(cast);
      op = A.Converter_allowNull(cast == null ? this.value$1$0($T) : cast, $T);
      t1 = $T._eval$1("0?");
      return J.$eq$(op, A.instantiate1(A.converter_Converter_identity$closure(), t1)) ? A.instantiate1(A.converter_Converter__castList$closure(), t1) : A.Converter__mapList(op, t1);
    },
    nlist$1$0($T) {
      return this.nlist$1$1(null, $T);
    },
    $set$1$1(cast, $T) {
      var op;
      A.checkTypeBound($T, type$.Object, "T", "set");
      $T._eval$1("0(@)?")._as(cast);
      op = cast == null ? this.value$1$0($T) : cast;
      return J.$eq$(op, A.instantiate1(A.converter_Converter_identity$closure(), $T)) ? A.instantiate1(A.converter_Converter__castSet$closure(), $T) : A.Converter__mapSet(op, $T);
    },
    $set$1$0($T) {
      return this.$set$1$1(null, $T);
    },
    nset$1$1(cast, $T) {
      var op, t1;
      A.checkTypeBound($T, type$.Object, "T", "nset");
      $T._eval$1("0(@)?")._as(cast);
      op = A.Converter_allowNull(cast == null ? this.value$1$0($T) : cast, $T);
      t1 = $T._eval$1("0?");
      return J.$eq$(op, A.instantiate1(A.converter_Converter_identity$closure(), t1)) ? A.instantiate1(A.converter_Converter__castSet$closure(), t1) : A.Converter__mapSet(op, t1);
    },
    nset$1$0($T) {
      return this.nset$1$1(null, $T);
    },
    map$2$1$vcast(_, vcast, $K, $V) {
      var kop, vop,
        t1 = type$.Object;
      A.checkTypeBound($K, t1, "K", "map");
      A.checkTypeBound($V, t1, "V", "map");
      $V._eval$1("0(@)?")._as(vcast);
      kop = this.value$1$0($K);
      vop = vcast == null ? this.value$1$0($V) : vcast;
      return J.$eq$(kop, A.instantiate1(A.converter_Converter_identity$closure(), $K)) && J.$eq$(vop, A.instantiate1(A.converter_Converter_identity$closure(), $V)) ? A.instantiate2(A.converter_Converter__castMap$closure(), $K, $V) : A.Converter__mapMap(kop, vop, $K, $V);
    },
    map$2$0(_, $K, $V) {
      return this.map$2$1$vcast(0, null, $K, $V);
    },
    nmap$2$1$vcast(vcast, $K, $V) {
      var kop, vop, t2,
        t1 = type$.Object;
      A.checkTypeBound($K, t1, "K", "nmap");
      A.checkTypeBound($V, t1, "V", "nmap");
      $V._eval$1("0(@)?")._as(vcast);
      kop = this.value$1$0($K);
      vop = A.Converter_allowNull(vcast == null ? this.value$1$0($V) : vcast, $V);
      t1 = J.$eq$(kop, A.instantiate1(A.converter_Converter_identity$closure(), $K)) && J.$eq$(vop, A.instantiate1(A.converter_Converter_identity$closure(), $V._eval$1("0?")));
      t2 = $V._eval$1("0?");
      return t1 ? A.instantiate2(A.converter_Converter__castMap$closure(), $K, t2) : A.Converter__mapMap(kop, vop, $K, t2);
    },
    nmap$2$0($K, $V) {
      return this.nmap$2$1$vcast(null, $K, $V);
    }
  };
  A.Converter__mapList_closure.prototype = {
    call$1(x) {
      return J.map$1$1$ax(type$.Iterable_dynamic._as(x), this.op, this.T).toList$0(0);
    },
    $signature() {
      return this.T._eval$1("List<0>(@)");
    }
  };
  A.Converter__mapSet_closure.prototype = {
    call$1(x) {
      return J.map$1$1$ax(type$.Iterable_dynamic._as(x), this.op, this.T).toSet$0(0);
    },
    $signature() {
      return this.T._eval$1("Set<0>(@)");
    }
  };
  A.Converter__mapMap_closure.prototype = {
    call$1(x) {
      var _this = this,
        t1 = _this.K,
        t2 = _this.V;
      return type$.Map_dynamic_dynamic._as(x).map$2$1(0, new A.Converter__mapMap__closure(_this.kop, _this.vop, t1, t2), t1, t2);
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("Map<1,2>(@)");
    }
  };
  A.Converter__mapMap__closure.prototype = {
    call$2(k, v) {
      var _this = this;
      return new A.MapEntry(_this.kop.call$1(k), _this.vop.call$1(v), _this.K._eval$1("@<0>")._bind$1(_this.V)._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("MapEntry<1,2>(@,@)");
    }
  };
  A.Converter_allowNull_closure.prototype = {
    call$1(x) {
      return x == null ? null : this.op.call$1(x);
    },
    $signature() {
      return this.T._eval$1("0?(@)");
    }
  };
  A.LazyInPlaceList.prototype = {
    get$first(_) {
      return this._lazy_in_place_list$_get$1(0);
    },
    set$first(_, value) {
      J.$indexSet$ax(this._lazy_in_place_list$_data, 0, this.$ti._precomputed1._as(value));
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this._lazy_in_place_list$_data);
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this._lazy_in_place_list$_data);
    },
    get$iterator(_) {
      var t1 = this._iterate$0();
      return new A._SyncStarIterator(t1._outerHelper(), t1.$ti._eval$1("_SyncStarIterator<1>"));
    },
    get$last(_) {
      return this._lazy_in_place_list$_get$1(J.get$length$asx(this._lazy_in_place_list$_data) - 1);
    },
    set$last(_, value) {
      var t1, t2;
      this.$ti._precomputed1._as(value);
      t1 = this._lazy_in_place_list$_data;
      t2 = J.getInterceptor$asx(t1);
      t2.$indexSet(t1, t2.get$length(t1) - 1, value);
    },
    get$length(_) {
      return J.get$length$asx(this._lazy_in_place_list$_data);
    },
    set$length(_, value) {
      var t1 = this._lazy_in_place_list$_data,
        t2 = J.getInterceptor$asx(t1);
      if (value > t2.get$length(t1))
        this.$ti._precomputed1._as(null);
      t2.set$length(t1, value);
    },
    get$reversed(_) {
      return new A._SyncStarIterable(this.reversed$body$LazyInPlaceList(0), this.$ti._eval$1("_SyncStarIterable<1>"));
    },
    reversed$body$LazyInPlaceList($async$_) {
      var $async$self = this;
      return function() {
        var _ = $async$_;
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], i;
        return function $async$get$reversed($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                i = J.get$length$asx($async$self._lazy_in_place_list$_data) - 1;
              case 2:
                // for condition
                if (!(i >= 0)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$goto = 5;
                return $async$iterator._async$_current = $async$self._lazy_in_place_list$_get$1(i), 1;
              case 5:
                // after yield
              case 3:
                // for update
                --i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    },
    get$single(_) {
      var t1 = this._lazy_in_place_list$_data,
        t2 = J.getInterceptor$asx(t1);
      if (t2.get$isEmpty(t1))
        throw A.wrapException(A._ListError_noElement());
      if (t2.get$length(t1) > 1)
        throw A.wrapException(A._ListError_tooMany());
      return this._lazy_in_place_list$_get$1(0);
    },
    $add(_, other) {
      var l, t2, tl, r, i, _this = this,
        t1 = _this.$ti;
      t1._eval$1("List<1>")._as(other);
      l = J.get$length$asx(_this._lazy_in_place_list$_data);
      t2 = other.length;
      tl = l + t2;
      if (tl === l)
        return _this.toList$0(0);
      if (0 >= t2)
        return A.ioore(other, 0);
      r = A.List_List$filled(tl, other[0], false, t1._precomputed1);
      for (i = 0; i < l; ++i)
        B.JSArray_methods.$indexSet(r, i, _this._lazy_in_place_list$_get$1(i));
      B.JSArray_methods.setRange$3(r, l, tl, other);
      return r;
    },
    $index(_, index) {
      return this._lazy_in_place_list$_get$1(A._asInt(index));
    },
    $indexSet(_, index, value) {
      this.$ti._precomputed1._as(value);
      J.$indexSet$ax(this._lazy_in_place_list$_data, index, value);
      return value;
    },
    add$1(_, value) {
      return J.add$1$ax(this._lazy_in_place_list$_data, this.$ti._precomputed1._as(value));
    },
    addAll$1(_, iterable) {
      return J.addAll$1$ax(this._lazy_in_place_list$_data, this.$ti._eval$1("Iterable<1>")._as(iterable));
    },
    any$1(_, test) {
      var l, i;
      this.$ti._eval$1("bool(1)")._as(test);
      l = J.get$length$asx(this._lazy_in_place_list$_data);
      for (i = 0; i < l; ++i)
        if (test.call$1(this._lazy_in_place_list$_get$1(i)))
          return true;
      return false;
    },
    asMap$0(_) {
      var i,
        r = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, this.$ti._precomputed1),
        l = J.get$length$asx(this._lazy_in_place_list$_data);
      for (i = 0; i < l; ++i)
        r.$indexSet(0, i, this._lazy_in_place_list$_get$1(i));
      return r;
    },
    cast$1$0(_, $R) {
      return J.cast$1$0$ax(this._forceCast$0(), $R);
    },
    clear$0(_) {
      return J.clear$0$ax(this._lazy_in_place_list$_data);
    },
    contains$1(_, element) {
      var t1, i,
        l = J.get$length$asx(this._lazy_in_place_list$_data);
      for (t1 = J.getInterceptor$(element), i = 0; i < l; ++i)
        if (t1.$eq(element, this._lazy_in_place_list$_get$1(i)))
          return true;
      return false;
    },
    elementAt$1(_, index) {
      return this._lazy_in_place_list$_get$1(index);
    },
    every$1(_, test) {
      var l, i;
      this.$ti._eval$1("bool(1)")._as(test);
      l = J.get$length$asx(this._lazy_in_place_list$_data);
      for (i = 0; i < l; ++i)
        if (!test.call$1(this._lazy_in_place_list$_get$1(i)))
          return false;
      return true;
    },
    expand$1$1(_, toElements, $U) {
      return new A._SyncStarIterable(this.expand$body$LazyInPlaceList(0, this.$ti._bind$1($U)._eval$1("Iterable<1>(2)")._as(toElements), $U), $U._eval$1("_SyncStarIterable<0>"));
    },
    expand$body$LazyInPlaceList($async$_, $async$toElements, $async$$U) {
      var $async$self = this;
      return function() {
        var _ = $async$_,
          toElements = $async$toElements,
          $U = $async$$U;
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], i, l;
        return function $async$expand$1$1($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                l = J.get$length$asx($async$self._lazy_in_place_list$_data);
                i = 0;
              case 2:
                // for condition
                if (!(i < l)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$goto = 5;
                return $async$iterator._yieldStar$1(toElements.call$1($async$self._lazy_in_place_list$_get$1(i)));
              case 5:
                // after yield
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    },
    fillRange$3(_, start, end, fillValue) {
      return J.fillRange$3$ax(this._lazy_in_place_list$_data, start, end, this.$ti._eval$1("1?")._as(fillValue));
    },
    firstWhere$2$orElse(_, test, orElse) {
      var l, i, v,
        t1 = this.$ti;
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()?")._as(orElse);
      l = J.get$length$asx(this._lazy_in_place_list$_data);
      for (i = 0; i < l; ++i) {
        v = this._lazy_in_place_list$_get$1(i);
        if (test.call$1(v))
          return v;
      }
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A._ListError_noElement());
    },
    fold$1$2(_, initialValue, combine, $U) {
      var l, res, i;
      $U._as(initialValue);
      this.$ti._bind$1($U)._eval$1("1(1,2)")._as(combine);
      l = J.get$length$asx(this._lazy_in_place_list$_data);
      for (res = initialValue, i = 0; i < l; ++i)
        res = combine.call$2(res, this._lazy_in_place_list$_get$1(i));
      return res;
    },
    followedBy$1(_, other) {
      var t1 = this.$ti;
      return new A._SyncStarIterable(this.followedBy$body$LazyInPlaceList(0, t1._eval$1("Iterable<1>")._as(other)), t1._eval$1("_SyncStarIterable<1>"));
    },
    followedBy$body$LazyInPlaceList($async$_, $async$other) {
      var $async$self = this;
      return function() {
        var _ = $async$_,
          other = $async$other;
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], i, l;
        return function $async$followedBy$1($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                l = J.get$length$asx($async$self._lazy_in_place_list$_data);
                i = 0;
              case 2:
                // for condition
                if (!(i < l)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$goto = 5;
                return $async$iterator._async$_current = $async$self._lazy_in_place_list$_get$1(i), 1;
              case 5:
                // after yield
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                $async$goto = 6;
                return $async$iterator._yieldStar$1(other);
              case 6:
                // after yield
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    },
    forEach$1(_, action) {
      var l, i;
      this.$ti._eval$1("~(1)")._as(action);
      l = J.get$length$asx(this._lazy_in_place_list$_data);
      for (i = 0; i < l; ++i)
        action.call$1(this._lazy_in_place_list$_get$1(i));
    },
    getRange$2(_, start, end) {
      return new A._SyncStarIterable(this.getRange$body$LazyInPlaceList(0, start, end), this.$ti._eval$1("_SyncStarIterable<1>"));
    },
    getRange$body$LazyInPlaceList($async$_, $async$start, $async$end) {
      var $async$self = this;
      return function() {
        var _ = $async$_,
          start = $async$start,
          end = $async$end;
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], i;
        return function $async$getRange$2($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                A.RangeError_checkValidRange(start, end, J.get$length$asx($async$self._lazy_in_place_list$_data));
                i = start;
              case 2:
                // for condition
                if (!(i < end)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$goto = 5;
                return $async$iterator._async$_current = $async$self._lazy_in_place_list$_get$1(i), 1;
              case 5:
                // after yield
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    },
    indexOf$2(_, element, start) {
      var l, i;
      this.$ti._precomputed1._as(element);
      l = J.get$length$asx(this._lazy_in_place_list$_data);
      for (i = start; i < l; ++i)
        if (J.$eq$(this._lazy_in_place_list$_get$1(i), element))
          return i;
      return -1;
    },
    indexWhere$2(_, test, start) {
      var l, i;
      this.$ti._eval$1("bool(1)")._as(test);
      l = J.get$length$asx(this._lazy_in_place_list$_data);
      for (i = start; i < l; ++i)
        if (test.call$1(this._lazy_in_place_list$_get$1(i)))
          return i;
      return -1;
    },
    insert$2(_, index, element) {
      return J.insert$2$ax(this._lazy_in_place_list$_data, index, this.$ti._precomputed1._as(element));
    },
    insertAll$2(_, index, iterable) {
      return J.insertAll$2$ax(this._lazy_in_place_list$_data, index, this.$ti._eval$1("Iterable<1>")._as(iterable));
    },
    join$1(_, separator) {
      var t1, i,
        l = J.get$length$asx(this._lazy_in_place_list$_data);
      if (l > 0) {
        t1 = J.toString$0$(this._lazy_in_place_list$_get$1(0));
        for (i = 1; i < l; ++i)
          t1 = t1 + separator + J.toString$0$(this._lazy_in_place_list$_get$1(i));
      } else
        t1 = "";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    lastIndexOf$2(_, element, start) {
      var i;
      this.$ti._precomputed1._as(element);
      i = start == null ? J.get$length$asx(this._lazy_in_place_list$_data) - 1 : start;
      for (; i >= 0; --i)
        if (element === this._lazy_in_place_list$_get$1(i))
          return i;
      return -1;
    },
    lastIndexWhere$2(_, test, start) {
      var i;
      this.$ti._eval$1("bool(1)")._as(test);
      i = start == null ? J.get$length$asx(this._lazy_in_place_list$_data) - 1 : start;
      for (; i >= 0; --i)
        if (test.call$1(this._lazy_in_place_list$_get$1(i)))
          return i;
      return -1;
    },
    lastWhere$2$orElse(_, test, orElse) {
      var i, v,
        t1 = this.$ti;
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()?")._as(orElse);
      for (i = J.get$length$asx(this._lazy_in_place_list$_data) - 1; i >= 0; --i) {
        v = this._lazy_in_place_list$_get$1(i);
        if (test.call$1(v))
          return v;
      }
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A._ListError_noElement());
    },
    map$1$1(_, toElement, $U) {
      return new A._SyncStarIterable(this.map$body$LazyInPlaceList(0, this.$ti._bind$1($U)._eval$1("1(2)")._as(toElement), $U), $U._eval$1("_SyncStarIterable<0>"));
    },
    map$1(_, toElement) {
      return this.map$1$1(0, toElement, type$.dynamic);
    },
    map$body$LazyInPlaceList($async$_, $async$toElement, $async$$U) {
      var $async$self = this;
      return function() {
        var _ = $async$_,
          toElement = $async$toElement,
          $U = $async$$U;
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], i, l;
        return function $async$map$1$1($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                l = J.get$length$asx($async$self._lazy_in_place_list$_data);
                i = 0;
              case 2:
                // for condition
                if (!(i < l)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$goto = 5;
                return $async$iterator._async$_current = toElement.call$1($async$self._lazy_in_place_list$_get$1(i)), 1;
              case 5:
                // after yield
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    },
    reduce$1(_, combine) {
      var l, res, i, _this = this;
      _this.$ti._eval$1("1(1,1)")._as(combine);
      l = J.get$length$asx(_this._lazy_in_place_list$_data);
      if (l === 0)
        throw A.wrapException(A._ListError_noElement());
      res = _this._lazy_in_place_list$_get$1(0);
      for (i = 1; i < l; ++i)
        res = combine.call$2(res, _this._lazy_in_place_list$_get$1(i));
      return res;
    },
    remove$1(_, value) {
      return J.remove$1$ax(this._lazy_in_place_list$_data, value);
    },
    removeAt$1(_, index) {
      var v = this._lazy_in_place_list$_get$1(index);
      J.removeAt$1$ax(this._lazy_in_place_list$_data, index);
      return v;
    },
    removeLast$0(_) {
      var t1 = this._lazy_in_place_list$_data,
        t2 = J.getInterceptor$asx(t1),
        v = this._lazy_in_place_list$_get$1(t2.get$length(t1) - 1);
      t2.removeLast$0(t1);
      return v;
    },
    removeRange$2(_, start, end) {
      return J.removeRange$2$ax(this._lazy_in_place_list$_data, start, end);
    },
    removeWhere$1(_, test) {
      var t1, t2, i, i0, _this = this;
      _this.$ti._eval$1("bool(1)")._as(test);
      t1 = _this._lazy_in_place_list$_data;
      t2 = J.getInterceptor$asx(t1);
      i = t2.get$length(t1) - 1;
      for (; i >= 0;) {
        i0 = i - 1;
        if (test.call$1(_this._lazy_in_place_list$_get$1(i))) {
          while (true) {
            if (!(i0 >= 0 && test.call$1(_this._lazy_in_place_list$_get$1(i0))))
              break;
            --i0;
          }
          t2.removeRange$2(t1, i0 + 1, i + 1);
          i = i0;
        } else
          i = i0;
      }
    },
    replaceRange$3(_, start, end, replacements) {
      return J.replaceRange$3$asx(this._lazy_in_place_list$_data, start, end, this.$ti._eval$1("Iterable<1>")._as(replacements));
    },
    retainWhere$1(_, test) {
      return this.removeWhere$1(0, new A.LazyInPlaceList_retainWhere_closure(this, this.$ti._eval$1("bool(1)")._as(test)));
    },
    setAll$2(_, index, iterable) {
      return J.setAll$2$ax(this._lazy_in_place_list$_data, index, this.$ti._eval$1("Iterable<1>")._as(iterable));
    },
    setRange$4(_, start, end, iterable, skipCount) {
      return J.setRange$4$ax(this._lazy_in_place_list$_data, start, end, this.$ti._eval$1("Iterable<1>")._as(iterable), skipCount);
    },
    shuffle$1(_, random) {
      return J.shuffle$1$ax(this._lazy_in_place_list$_data, random);
    },
    singleWhere$2$orElse(_, test, orElse) {
      var res, l, found, i, v,
        t1 = this.$ti;
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()?")._as(orElse);
      res = A._Cell$named("res");
      l = J.get$length$asx(this._lazy_in_place_list$_data);
      for (found = false, i = 0; i < l; ++i) {
        v = this._lazy_in_place_list$_get$1(i);
        if (test.call$1(v)) {
          if (found)
            throw A.wrapException(A._ListError_tooMany());
          res._value = v;
          found = true;
        }
      }
      if (found)
        return res._readLocal$0();
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A._ListError_noElement());
    },
    skip$1(_, count) {
      return new A._SyncStarIterable(this.skip$body$LazyInPlaceList(0, count), this.$ti._eval$1("_SyncStarIterable<1>"));
    },
    skip$body$LazyInPlaceList($async$_, $async$count) {
      var $async$self = this;
      return function() {
        var _ = $async$_,
          count = $async$count;
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], i, l;
        return function $async$skip$1($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                l = J.get$length$asx($async$self._lazy_in_place_list$_data);
                i = count;
              case 2:
                // for condition
                if (!(i < l)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$goto = 5;
                return $async$iterator._async$_current = $async$self._lazy_in_place_list$_get$1(i), 1;
              case 5:
                // after yield
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    },
    skipWhile$1(_, test) {
      var t1 = this.$ti;
      return new A._SyncStarIterable(this.skipWhile$body$LazyInPlaceList(0, t1._eval$1("bool(1)")._as(test)), t1._eval$1("_SyncStarIterable<1>"));
    },
    skipWhile$body$LazyInPlaceList($async$_, $async$test) {
      var $async$self = this;
      return function() {
        var _ = $async$_,
          test = $async$test;
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], l, i;
        return function $async$skipWhile$1($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                l = J.get$length$asx($async$self._lazy_in_place_list$_data);
                i = 0;
                while (true) {
                  if (!(i < l && test.call$1($async$self._lazy_in_place_list$_get$1(i))))
                    break;
                  ++i;
                }
              case 2:
                // for condition
                if (!(i < l)) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                $async$goto = 4;
                return $async$iterator._async$_current = $async$self._lazy_in_place_list$_get$1(i), 1;
              case 4:
                // after yield
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    },
    sort$1(_, compare) {
      var t2, t3, d, _this = this,
        t1 = _this.$ti;
      t1._eval$1("int(1,1)?")._as(compare);
      _this._forceCast$0();
      t2 = _this._lazy_in_place_list$_data;
      t3 = J.getInterceptor$ax(t2);
      if (compare == null) {
        d = t3.cast$1$0(t2, t1._precomputed1);
        d.sort$0(d);
      } else
        t3.sort$1(t2, new A.LazyInPlaceList_sort_closure(_this, compare));
    },
    sublist$2(_, start, end) {
      var t1 = this.getRange$2(0, start, end == null ? J.get$length$asx(this._lazy_in_place_list$_data) : end);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("Iterable.E"));
      return t1;
    },
    take$1(_, count) {
      return new A._SyncStarIterable(this.take$body$LazyInPlaceList(0, count), this.$ti._eval$1("_SyncStarIterable<1>"));
    },
    take$body$LazyInPlaceList($async$_, $async$count) {
      var $async$self = this;
      return function() {
        var _ = $async$_,
          count = $async$count;
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], i, c;
        return function $async$take$1($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                c = Math.min(count, J.get$length$asx($async$self._lazy_in_place_list$_data));
                i = 0;
              case 2:
                // for condition
                if (!(i < c)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$goto = 5;
                return $async$iterator._async$_current = $async$self._lazy_in_place_list$_get$1(i), 1;
              case 5:
                // after yield
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    },
    takeWhile$1(_, test) {
      var t1 = this.$ti;
      return new A._SyncStarIterable(this.takeWhile$body$LazyInPlaceList(0, t1._eval$1("bool(1)")._as(test)), t1._eval$1("_SyncStarIterable<1>"));
    },
    takeWhile$body$LazyInPlaceList($async$_, $async$test) {
      var $async$self = this;
      return function() {
        var _ = $async$_,
          test = $async$test;
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], i, v, l;
        return function $async$takeWhile$1($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                l = J.get$length$asx($async$self._lazy_in_place_list$_data);
                i = 0;
              case 2:
                // for condition
                if (!(i < l)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                v = $async$self._lazy_in_place_list$_get$1(i);
                if (!test.call$1(v)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$goto = 5;
                return $async$iterator._async$_current = v, 1;
              case 5:
                // after yield
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    },
    toList$1$growable(_, growable) {
      var t1, res, i, _this = this,
        l = J.get$length$asx(_this._lazy_in_place_list$_data);
      if (l === 0) {
        t1 = A._setArrayType([], _this.$ti._eval$1("JSArray<1>"));
        return t1;
      }
      res = A.List_List$filled(l, _this._lazy_in_place_list$_get$1(0), true, _this.$ti._precomputed1);
      for (i = 1; i < l; ++i)
        B.JSArray_methods.$indexSet(res, i, _this._lazy_in_place_list$_get$1(i));
      return res;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    toSet$0(_) {
      var i,
        s = A.LinkedHashSet_LinkedHashSet$_empty(this.$ti._precomputed1),
        l = J.get$length$asx(this._lazy_in_place_list$_data);
      for (i = 0; i < l; ++i)
        s.add$1(0, this._lazy_in_place_list$_get$1(i));
      return s;
    },
    toString$0(_) {
      this._forceCast$0();
      return J.toString$0$(this._lazy_in_place_list$_data);
    },
    where$1(_, test) {
      var t1 = this.$ti;
      return new A._SyncStarIterable(this.where$body$LazyInPlaceList(0, t1._eval$1("bool(1)")._as(test)), t1._eval$1("_SyncStarIterable<1>"));
    },
    where$body$LazyInPlaceList($async$_, $async$test) {
      var $async$self = this;
      return function() {
        var _ = $async$_,
          test = $async$test;
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], i, v, l;
        return function $async$where$1($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                l = J.get$length$asx($async$self._lazy_in_place_list$_data);
                i = 0;
              case 2:
                // for condition
                if (!(i < l)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                v = $async$self._lazy_in_place_list$_get$1(i);
                $async$goto = test.call$1(v) ? 5 : 6;
                break;
              case 5:
                // then
                $async$goto = 7;
                return $async$iterator._async$_current = v, 1;
              case 7:
                // after yield
              case 6:
                // join
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    },
    whereType$1$0(_, $U) {
      return new A._SyncStarIterable(this.whereType$body$LazyInPlaceList(0, $U), $U._eval$1("_SyncStarIterable<0>"));
    },
    whereType$body$LazyInPlaceList($async$_, $async$$U) {
      var $async$self = this;
      return function() {
        var _ = $async$_,
          $U = $async$$U;
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], i, v, l;
        return function $async$whereType$1$0($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                l = J.get$length$asx($async$self._lazy_in_place_list$_data);
                i = 0;
              case 2:
                // for condition
                if (!(i < l)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                v = $async$self._lazy_in_place_list$_get$1(i);
                $async$goto = $U._is(v) ? 5 : 6;
                break;
              case 5:
                // then
                $async$goto = 7;
                return $async$iterator._async$_current = v, 1;
              case 7:
                // after yield
              case 6:
                // join
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    },
    _forceCast$0() {
      var i,
        t1 = this._lazy_in_place_list$_data,
        l = J.get$length$asx(t1);
      for (i = 0; i < l; ++i)
        this._lazy_in_place_list$_get$1(i);
      return t1;
    },
    _lazy_in_place_list$_get$1(idx) {
      var _this = this,
        t1 = _this._lazy_in_place_list$_data,
        t2 = J.getInterceptor$asx(t1),
        v = t2.$index(t1, idx);
      if (v != null && !_this.$ti._precomputed1._is(v)) {
        v = _this._cast.call$1(v);
        t2.$indexSet(t1, idx, v);
      }
      return _this.$ti._precomputed1._as(v);
    },
    _iterate$0() {
      return new A._SyncStarIterable(this._iterate$body$LazyInPlaceList(), this.$ti._eval$1("_SyncStarIterable<1>"));
    },
    _iterate$body$LazyInPlaceList() {
      var $async$self = this;
      return function() {
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], i, l;
        return function $async$_iterate$0($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                l = J.get$length$asx($async$self._lazy_in_place_list$_data);
                i = 0;
              case 2:
                // for condition
                if (!(i < l)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$goto = 5;
                return $async$iterator._async$_current = $async$self._lazy_in_place_list$_get$1(i), 1;
              case 5:
                // after yield
              case 3:
                // for update
                ++i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.LazyInPlaceList_retainWhere_closure.prototype = {
    call$1(e) {
      return !this.test.call$1(this.$this.$ti._precomputed1._as(e));
    },
    $signature() {
      return this.$this.$ti._eval$1("bool(1)");
    }
  };
  A.LazyInPlaceList_sort_closure.prototype = {
    call$2(a, b) {
      var t1 = this.$this.$ti._precomputed1;
      return this.compare.call$2(t1._as(a), t1._as(b));
    },
    $signature: 92
  };
  A.LazyInPlaceMap.prototype = {
    get$entries() {
      var t1 = this._lazy_in_place_map$_data,
        t2 = A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>"),
        t3 = this.$ti;
      t2 = A.CastIterable_CastIterable(new A.LinkedHashMapKeysIterable(t1, t2), t2._eval$1("Iterable.E"), t3._precomputed1);
      t3 = t3._eval$1("MapEntry<1,2>");
      t1 = A._instanceType(t2);
      return A.MappedIterable_MappedIterable(t2, t1._bind$1(t3)._eval$1("1(Iterable.E)")._as(new A.LazyInPlaceMap_entries_closure(this)), t1._eval$1("Iterable.E"), t3);
    },
    get$isEmpty(_) {
      return this._lazy_in_place_map$_data.__js_helper$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._lazy_in_place_map$_data.__js_helper$_length !== 0;
    },
    get$keys() {
      var t1 = this._lazy_in_place_map$_data,
        t2 = A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>");
      return A.CastIterable_CastIterable(new A.LinkedHashMapKeysIterable(t1, t2), t2._eval$1("Iterable.E"), this.$ti._precomputed1);
    },
    get$length(_) {
      return this._lazy_in_place_map$_data.__js_helper$_length;
    },
    get$values() {
      var t1 = this._lazy_in_place_map$_data,
        t2 = A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>"),
        t3 = this.$ti._rest[1];
      return A.MappedIterable_MappedIterable(new A.LinkedHashMapKeysIterable(t1, t2), t2._bind$1(t3)._eval$1("1(Iterable.E)")._as(new A.LazyInPlaceMap_values_closure(this)), t2._eval$1("Iterable.E"), t3);
    },
    $index(_, key) {
      return this._lazy_in_place_map$_get$1(key);
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      this._lazy_in_place_map$_data.$indexSet(0, key, value);
      return value;
    },
    addAll$1(_, other) {
      return this._lazy_in_place_map$_data.addAll$1(0, this.$ti._eval$1("Map<1,2>")._as(other));
    },
    addEntries$1(newEntries) {
      return this._lazy_in_place_map$_data.addEntries$1(this.$ti._eval$1("Iterable<MapEntry<1,2>>")._as(newEntries));
    },
    cast$2$0(_, $RK, $RV) {
      return this._lazy_in_place_map$_forceCast$0().cast$2$0(0, $RK, $RV);
    },
    clear$0(_) {
      return this._lazy_in_place_map$_data.clear$0(0);
    },
    containsKey$1(key) {
      return this._lazy_in_place_map$_data.containsKey$1(key);
    },
    containsValue$1(value) {
      var t1 = this._lazy_in_place_map$_data;
      return new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>")).any$1(0, new A.LazyInPlaceMap_containsValue_closure(this, value));
    },
    forEach$1(_, action) {
      var t2, t3, k, t4,
        t1 = this.$ti;
      t1._eval$1("~(1,2)")._as(action);
      for (t2 = this._lazy_in_place_map$_data, t2 = new A.LinkedHashMapKeyIterator(t2, t2.__js_helper$_modifications, t2.__js_helper$_first, A._instanceType(t2)._eval$1("LinkedHashMapKeyIterator<1>")), t3 = t1._precomputed1, t1 = t1._rest[1]; t2.moveNext$0();) {
        k = t2.__js_helper$_current;
        t3._as(k);
        t4 = this._lazy_in_place_map$_get$1(k);
        action.call$2(k, t4 == null ? t1._as(t4) : t4);
      }
    },
    map$2$1(_, convert, $K2, $V2) {
      var r, t2, t3, keys, i, k, e,
        t1 = this.$ti;
      t1._bind$1($K2)._bind$1($V2)._eval$1("MapEntry<1,2>(3,4)")._as(convert);
      r = A.LinkedHashMap_LinkedHashMap$_empty($K2, $V2);
      t2 = this._lazy_in_place_map$_data;
      t3 = A._instanceType(t2)._eval$1("LinkedHashMapKeysIterable<1>");
      keys = A.List_List$_of(new A.LinkedHashMapKeysIterable(t2, t3), t3._eval$1("Iterable.E"));
      for (i = keys.length - 1, t2 = t1._precomputed1, t1 = t1._rest[1]; i >= 0; --i) {
        if (!(i < keys.length))
          return A.ioore(keys, i);
        k = keys[i];
        t2._as(k);
        t3 = this._lazy_in_place_map$_get$1(k);
        e = convert.call$2(k, t3 == null ? t1._as(t3) : t3);
        r.$indexSet(0, e.key, e.value);
      }
      return r;
    },
    map$1(_, convert) {
      var t1 = type$.dynamic;
      return this.map$2$1(0, convert, t1, t1);
    },
    putIfAbsent$2(key, ifAbsent) {
      var t1 = this.$ti;
      return t1._rest[1]._as(this._lazy_in_place_map$_data.putIfAbsent$2(t1._precomputed1._as(key), t1._eval$1("2()")._as(ifAbsent)));
    },
    remove$1(_, key) {
      return this.$ti._eval$1("2?")._as(this._lazy_in_place_map$_data.remove$1(0, key));
    },
    removeWhere$1(_, test) {
      var t2, t3, keys, i, k, v,
        t1 = this.$ti;
      t1._eval$1("bool(1,2)")._as(test);
      t2 = this._lazy_in_place_map$_data;
      t3 = A._instanceType(t2)._eval$1("LinkedHashMapKeysIterable<1>");
      keys = A.List_List$_of(new A.LinkedHashMapKeysIterable(t2, t3), t3._eval$1("Iterable.E"));
      for (i = keys.length - 1, t3 = t1._precomputed1, t1 = t1._rest[1]; i >= 0; --i) {
        if (!(i < keys.length))
          return A.ioore(keys, i);
        k = keys[i];
        v = this._lazy_in_place_map$_get$1(k);
        t3._as(k);
        if (test.call$2(k, v == null ? t1._as(v) : v))
          t2.remove$1(0, k);
      }
    },
    toString$0(_) {
      this._lazy_in_place_map$_forceCast$0();
      return A.MapBase_mapToString(this._lazy_in_place_map$_data);
    },
    update$3$ifAbsent(key, update, ifAbsent) {
      var t1 = this.$ti;
      t1._precomputed1._as(key);
      t1._eval$1("2(2)")._as(update);
      return t1._rest[1]._as(this._lazy_in_place_map$_data.update$3$ifAbsent(key, new A.LazyInPlaceMap_update_closure(this), t1._eval$1("2()?")._as(ifAbsent)));
    },
    updateAll$1(update) {
      var t2, t3, keys, i, k, v,
        t1 = this.$ti;
      t1._eval$1("2(1,2)")._as(update);
      t2 = this._lazy_in_place_map$_data;
      t3 = A._instanceType(t2)._eval$1("LinkedHashMapKeysIterable<1>");
      keys = A.List_List$_of(new A.LinkedHashMapKeysIterable(t2, t3), t3._eval$1("Iterable.E"));
      for (i = keys.length - 1, t3 = t1._precomputed1, t1 = t1._rest[1]; i >= 0; --i) {
        if (!(i < keys.length))
          return A.ioore(keys, i);
        k = keys[i];
        v = this._lazy_in_place_map$_get$1(k);
        t3._as(k);
        t2.$indexSet(0, k, update.call$2(k, v == null ? t1._as(v) : v));
      }
    },
    _lazy_in_place_map$_forceCast$0() {
      var i,
        t1 = this._lazy_in_place_map$_data,
        t2 = A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>"),
        keys = A.List_List$_of(new A.LinkedHashMapKeysIterable(t1, t2), t2._eval$1("Iterable.E"));
      for (i = keys.length - 1; i >= 0; --i) {
        if (!(i < keys.length))
          return A.ioore(keys, i);
        this._lazy_in_place_map$_get$1(keys[i]);
      }
      return t1;
    },
    _lazy_in_place_map$_get$1(key) {
      var _this = this,
        t1 = _this._lazy_in_place_map$_data,
        v = t1.$index(0, key);
      if (v != null && !_this.$ti._rest[1]._is(v)) {
        v = _this._vcast.call$1(v);
        t1.$indexSet(0, key, v);
      }
      return _this.$ti._eval$1("2?")._as(v);
    },
    $isMap: 1
  };
  A.LazyInPlaceMap_entries_closure.prototype = {
    call$1(k) {
      var t1 = this.$this,
        t2 = t1.$ti;
      t2._precomputed1._as(k);
      t1 = t1._lazy_in_place_map$_get$1(k);
      if (t1 == null)
        t1 = t2._rest[1]._as(t1);
      return new A.MapEntry(k, t1, t2._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return this.$this.$ti._eval$1("MapEntry<1,2>(1)");
    }
  };
  A.LazyInPlaceMap_values_closure.prototype = {
    call$1(k) {
      var t1 = this.$this,
        t2 = t1._lazy_in_place_map$_get$1(k);
      return t2 == null ? t1.$ti._rest[1]._as(t2) : t2;
    },
    $signature() {
      return this.$this.$ti._eval$1("2(@)");
    }
  };
  A.LazyInPlaceMap_containsValue_closure.prototype = {
    call$1(k) {
      var t1 = this.value,
        t2 = this.$this._lazy_in_place_map$_get$1(k);
      return t1 == null ? t2 == null : t1 === t2;
    },
    $signature: 17
  };
  A.LazyInPlaceMap_update_closure.prototype = {
    call$1(v) {
      return v != null && !this.$this.$ti._rest[1]._is(v) ? this.$this._vcast.call$1(v) : v;
    },
    $signature: 83
  };
  A.NumConverter.prototype = {
    value$1$0($T) {
      A.checkTypeBound($T, type$.Object, "T", "value");
      if (A.createRuntimeType($T) === B.Type_int_T7V)
        return $T._eval$1("0(@)")._as(A.num_converter_NumConverter__toInt$closure());
      if (A.createRuntimeType($T) === B.Type_double_JIQ)
        return $T._eval$1("0(@)")._as(A.num_converter_NumConverter__toDbl$closure());
      return A.instantiate1(A.converter_Converter_identity$closure(), $T);
    }
  };
  A.SerializationContext.prototype = {
    getReference$1$1(data, $T) {
      var ref;
      A.checkTypeBound($T, type$.Object, "T", "getReference");
      ref = this._cache.$index(0, A._asObject(data));
      return $T._is(ref) ? ref : null;
    }
  };
  A.ExceptionManager.prototype = {
    register$2(exceptionTypeId, deserializer) {
      type$.nullable_WorkerException_Function_List_dynamic._as(deserializer);
      if ($.builtinExceptions.containsKey$1(exceptionTypeId))
        throw A.wrapException(A.SquadronError$_("Invalid exception type ID: " + exceptionTypeId + " is reserved.", null, null));
      this._deserializers.$indexSet(0, exceptionTypeId, deserializer);
    },
    unregister$1(exceptionTypeId) {
      if ($.builtinExceptions.containsKey$1(exceptionTypeId))
        throw A.wrapException(A.SquadronError$_("Invalid exception type ID: " + exceptionTypeId + " is reserved.", null, null));
      this._deserializers.remove$1(0, exceptionTypeId);
    },
    deserialize$1(data) {
      var exceptionType, deserializer, ex, st, t1, exception, _null = null;
      if (data == null || J.get$isEmpty$asx(data))
        return _null;
      try {
        exceptionType = J.$index$asx(data, 0);
        deserializer = this._deserializers.$index(0, exceptionType);
        t1 = deserializer;
        t1 = t1 == null ? _null : t1.call$1(data);
        if (t1 == null)
          t1 = A.WorkerException$("Failed to deserialize exception information for " + A.S(exceptionType), _null, _null);
        type$.nullable_SquadronException._as(t1);
        return t1;
      } catch (exception) {
        ex = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        t1 = A.SquadronException_from(ex, st, _null);
        return t1;
      }
    }
  };
  A.SquadronCanceledException.prototype = {
    serialize$0() {
      var t1 = this.get$message(),
        t2 = this.get$stackTrace();
      t2 = t2 == null ? null : t2.toString$0(0);
      return A.List_List$unmodifiable(["$C", this.tokenId, t1, t2], type$.dynamic);
    },
    $isCanceledException: 1
  };
  A.SquadronCanceledException_SquadronCanceledException$from_closure.prototype = {
    call$1(e) {
      type$.CanceledException._as(e);
      return A.SquadronCanceledException_SquadronCanceledException$from(this.tokenId, e, e.get$stackTrace());
    },
    $signature: 231
  };
  A.SquadronCanceledExceptions.prototype = {
    get$innerExceptions() {
      return this._exceptions;
    },
    get$message() {
      var t1 = this._exceptions,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.SquadronCanceledExceptions_message_closure()), t2._eval$1("MappedListIterable<1,String>")).join$1(0, "\n");
    },
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      return B.C_JsonCodec.encode$2$toEncodable(this.serialize$0(), null);
    },
    serialize$0() {
      var t1 = this._exceptions,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,List<@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("List<@>(1)")._as(new A.SquadronCanceledExceptions_serialize_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.List_List$unmodifiable(["$C*", this.tokenId, t1], type$.dynamic);
    },
    $isCanceledExceptions: 1
  };
  A.SquadronCanceledExceptions_message_closure.prototype = {
    call$1(e) {
      return type$.SquadronCanceledException._as(e).get$message();
    },
    $signature: 230
  };
  A.SquadronCanceledExceptions_serialize_closure.prototype = {
    call$1(e) {
      return type$.SquadronCanceledException._as(e).serialize$0();
    },
    $signature: 229
  };
  A.SquadronError.prototype = {
    serialize$0() {
      var t1 = this._squadron_exception$_stackTrace;
      t1 = t1 == null ? null : t1.toString$0(0);
      return A.List_List$unmodifiable(["$!", this.message, t1, this._command], type$.dynamic);
    }
  };
  A.SquadronException.prototype = {
    SquadronException$init$2(message, _stackTrace) {
      var st, exception;
      if (this._squadron_exception$_stackTrace == null)
        try {
          this._squadron_exception$_stackTrace = A.StackTrace_current();
        } catch (exception) {
          st = A.getTraceFromException(exception);
          this._squadron_exception$_stackTrace = st;
        }
    },
    get$stackTrace() {
      return this._squadron_exception$_stackTrace;
    },
    toString$0(_) {
      return B.C_JsonCodec.encode$2$toEncodable(this.serialize$0(), null);
    },
    $isException: 1,
    get$message() {
      return this.message;
    }
  };
  A.SquadronTimeoutException.prototype = {
    serialize$0() {
      var t2, _this = this,
        t1 = _this._squadron_exception$_stackTrace;
      t1 = t1 == null ? null : t1.toString$0(0);
      t2 = _this.duration;
      t2 = t2 == null ? null : t2._duration;
      return A.List_List$unmodifiable(["$T", _this.tokenId, _this.message, t1, t2], type$.dynamic);
    },
    $isTimeoutException: 1,
    $isTimeoutCanceledException: 1,
    get$duration() {
      return this.duration;
    }
  };
  A.TaskCanceledException.prototype = {
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      return B.C_JsonCodec.encode$2$toEncodable(A.List_List$unmodifiable(["$C1", this.message], type$.dynamic), null);
    },
    serialize$0() {
      return A.List_List$unmodifiable(["$C1", this.message], type$.dynamic);
    },
    $isException: 1,
    $isCanceledException: 1,
    $isSquadronError: 1,
    $isSquadronException: 1,
    get$message() {
      return this.message;
    }
  };
  A.TaskTerminatedException.prototype = {
    toString$0(_) {
      return B.C_JsonCodec.encode$2$toEncodable(this.serialize$0(), null);
    },
    serialize$0() {
      var t1 = this.stackTrace;
      t1 = t1 == null ? null : t1._stackTrace;
      return A.List_List$unmodifiable(["$K", this.message, t1], type$.dynamic);
    },
    $isException: 1,
    $isCanceledException: 1,
    $isSquadronError: 1,
    $isSquadronException: 1,
    get$message() {
      return this.message;
    },
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A.WorkerException.prototype = {
    serialize$0() {
      var t1 = this._squadron_exception$_stackTrace;
      t1 = t1 == null ? null : t1.toString$0(0);
      return A.List_List$unmodifiable(["$#", this.message, t1, this._worker_exception$_command], type$.dynamic);
    }
  };
  A.GenericMarshaler.prototype = {};
  A.MarshalingContext.prototype = {
    getReference$1$1(data, $T) {
      var t1;
      A.checkTypeBound($T, type$.Object, "T", "getReference");
      t1 = this._objects;
      if (t1 == null)
        t1 = null;
      else
        t1 = t1.getReference$1$1(data == null ? A._asObject(data) : data, $T);
      return t1;
    },
    setReference$1$2(data, instance, $T) {
      var t2,
        _s12_ = "setReference",
        t1 = type$.Object;
      A.checkTypeBound($T, t1, "T", _s12_);
      $T._as(instance);
      t2 = this._objects;
      if (t2 != null) {
        A.checkTypeBound($T, t1, "T", _s12_);
        t2._cache.$indexSet(0, data, instance);
      }
      return null;
    }
  };
  A.SquadronMarshaler.prototype = {};
  A.PoolWorker.prototype = {
    run$1(task) {
      var t1, _this = this;
      type$.WorkerTask_dynamic_Worker._as(task);
      _this._lastStart = Date.now();
      --_this._capacity;
      t1 = A._instanceType(task)._rest[1]._as(_this.worker);
      if (task._scheduled == null)
        task._scheduled = A.microsecTimeStamp();
      return task.execute$1(t1).then$1$2$onError(task.get$_success(), task.get$_fail(), type$.void).whenComplete$1(new A.PoolWorker_run_closure(_this));
    }
  };
  A.PoolWorker_run_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (++t1._capacity === t1.__pool_worker$_maxWorkload)
        t1._lastStart = null;
    },
    $signature: 1
  };
  A.WorkerStreamTask.prototype = {
    WorkerStreamTask$2(_producer, counter, $T, $W) {
      var _this = this,
        t1 = _this.$ti._eval$1("ForwardStreamController<1>")._as(A.ForwardStreamController$(null, new A.WorkerStreamTask_closure(_this), $T));
      _this.__WorkerStreamTask__controller_F !== $ && A.throwLateFieldAI("_controller");
      _this.__WorkerStreamTask__controller_F = t1;
    },
    __worker_stream_task$_onData$1(data) {
      var t1, t2,
        _s11_ = "_controller";
      this.$ti._precomputed1._as(data);
      t1 = this.__WorkerStreamTask__controller_F;
      t1 === $ && A.throwLateFieldNI(_s11_);
      t1.$ti._precomputed1._as(data);
      if (!t1.__forward_stream_controller$_closed) {
        t2 = t1.__ForwardStreamController__controller_F;
        t2 === $ && A.throwLateFieldNI(_s11_);
        t2 = (t2._state & 4) !== 0;
      } else
        t2 = true;
      if (!t2) {
        t1 = t1.__ForwardStreamController__controller_F;
        t1 === $ && A.throwLateFieldNI(_s11_);
        t1.add$1(0, data);
      }
      return null;
    },
    __worker_stream_task$_onError$2(ex, st) {
      var t1, t2, t3,
        _s11_ = "_controller";
      A._asObject(ex);
      type$.nullable_StackTrace._as(st);
      t1 = this.__WorkerStreamTask__controller_F;
      t1 === $ && A.throwLateFieldNI(_s11_);
      t2 = A.SquadronException_from(ex, st, null);
      if (!t1.__forward_stream_controller$_closed) {
        t3 = t1.__ForwardStreamController__controller_F;
        t3 === $ && A.throwLateFieldNI(_s11_);
        t3 = (t3._state & 4) !== 0;
      } else
        t3 = true;
      if (!t3) {
        t1 = t1.__ForwardStreamController__controller_F;
        t1 === $ && A.throwLateFieldNI(_s11_);
        t1.addError$1(t2);
      }
      return null;
    },
    __worker_stream_task$_onError$1(ex) {
      return this.__worker_stream_task$_onError$2(ex, null);
    },
    cancel$1(message) {
      var t1, t2, t3, _this = this,
        _s11_ = "_controller";
      _this.super$WorkerTask$cancel(message);
      t1 = _this.__worker_stream_task$_worker;
      if ((t1.future._state & 30) === 0)
        t1.complete$1(null);
      t1 = _this.__WorkerStreamTask__controller_F;
      t1 === $ && A.throwLateFieldNI(_s11_);
      if (t1._sub != null) {
        t2 = _this._canceledException;
        t2.toString;
        if (!t1.__forward_stream_controller$_closed) {
          t3 = t1.__ForwardStreamController__controller_F;
          t3 === $ && A.throwLateFieldNI(_s11_);
          t3 = (t3._state & 4) !== 0;
        } else
          t3 = true;
        if (!t3) {
          t3 = t1.__ForwardStreamController__controller_F;
          t3 === $ && A.throwLateFieldNI(_s11_);
          t3.addError$1(t2);
        }
        t1.close$0();
      }
    },
    cancel$0() {
      return this.cancel$1(null);
    },
    execute$1(worker) {
      var t1, _this = this,
        _s11_ = "_controller";
      _this.$ti._rest[1]._as(worker);
      if (_this._canceledException == null)
        _this.__worker_stream_task$_worker.complete$1(worker);
      t1 = _this.__WorkerStreamTask__controller_F;
      t1 === $ && A.throwLateFieldNI(_s11_);
      t1 = t1.__ForwardStreamController__controller_F;
      t1 === $ && A.throwLateFieldNI(_s11_);
      return t1._ensureDoneFuture$0().then$1$1(new A.WorkerStreamTask_execute_closure(_this), type$.bool).catchError$1(new A.WorkerStreamTask_execute_closure0());
    },
    $isStreamTask: 1
  };
  A.WorkerStreamTask_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$errorStack = [], $async$self = this, worker, ex, st, t1, t2, exception, t3, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              t1 = $async$self.$this;
              $async$goto = 6;
              return A._asyncAwait(t1.__worker_stream_task$_worker.future, $async$call$0);
            case 6:
              // returning from await.
              worker = $async$result;
              t2 = t1._canceledException;
              if (t2 != null || worker == null) {
                t2.toString;
                throw A.wrapException(t2);
              } else {
                t2 = t1.__WorkerStreamTask__controller_F;
                t2 === $ && A.throwLateFieldNI("_controller");
                t2.attachSubscription$1(t1._producer.call$1(worker).listen$4$cancelOnError$onDone$onError(t1.get$__worker_stream_task$_onData(), false, t2.get$close(), t1.get$__worker_stream_task$_onError()));
              }
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              ex = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              t1 = A.SquadronException_from(ex, st, null);
              t2 = $async$self.$this.__WorkerStreamTask__controller_F;
              t2 === $ && A.throwLateFieldNI("_controller");
              if (!t2.__forward_stream_controller$_closed) {
                t3 = t2.__ForwardStreamController__controller_F;
                t3 === $ && A.throwLateFieldNI("_controller");
                t3 = (t3._state & 4) !== 0;
              } else
                t3 = true;
              if (!t3) {
                t3 = t2.__ForwardStreamController__controller_F;
                t3 === $ && A.throwLateFieldNI("_controller");
                t3.addError$1(t1);
              }
              t2.close$0();
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 14
  };
  A.WorkerStreamTask_execute_closure.prototype = {
    call$1(_) {
      return this.$this._canceledException == null;
    },
    $signature: 228
  };
  A.WorkerStreamTask_execute_closure0.prototype = {
    call$1(_) {
      return false;
    },
    $signature: 17
  };
  A.WorkerTask.prototype = {
    get$isFinished() {
      return this._scheduled != null && this._finished != null && this._canceled == null;
    },
    get$isRunning() {
      return this._scheduled != null && this._finished == null && this._canceled == null;
    },
    get$runningTime() {
      var t1, t2, _this = this;
      if (_this._scheduled == null)
        t1 = B.Duration_0;
      else {
        t1 = _this._canceled;
        if (t1 == null)
          t1 = _this._finished;
        if (t1 == null)
          t1 = A.microsecTimeStamp();
        t2 = _this._scheduled;
        t2.toString;
        t2 = A.Duration$(0, 0, t1 - t2, 0, 0);
        t1 = t2;
      }
      return t1;
    },
    cancel$1(message) {
      var _this = this;
      if (_this._canceled == null)
        _this._canceled = A.microsecTimeStamp();
      if (_this._canceledException == null)
        _this._canceledException = new A.TaskCanceledException(message == null ? "Task canceled" : message);
      if (_this._scheduled == null)
        _this._fail$0();
    },
    _success$1(res) {
      var t1, t2, t3, _this = this;
      A._asBool(res);
      t1 = _this._finished;
      if (t1 == null)
        t1 = _this._finished = A.microsecTimeStamp();
      t2 = _this._counter;
      if (t2 != null) {
        t3 = _this._scheduled;
        t3.toString;
        A.PerfCounterImpl_update(t2, t1 - t3, res);
      }
      t1 = _this._done;
      if ((t1.future._state & 30) === 0)
        t1.complete$0();
    },
    _fail$1(_) {
      var t2, t3, _this = this,
        t1 = _this._finished;
      if (t1 == null)
        t1 = _this._finished = A.microsecTimeStamp();
      t2 = _this._counter;
      if (t2 != null) {
        t3 = _this._scheduled;
        t3.toString;
        A.PerfCounterImpl_update(t2, t1 - t3, false);
      }
      t1 = _this._done;
      if ((t1.future._state & 30) === 0)
        t1.complete$0();
    },
    _fail$0() {
      return this._fail$1(null);
    },
    $isTask: 1
  };
  A.WorkerValueTask.prototype = {
    _failure$1(exception) {
      var t1 = this._result;
      if ((t1.future._state & 30) === 0)
        t1.completeError$1(exception);
    },
    cancel$1(message) {
      var t1;
      this.super$WorkerTask$cancel(message);
      t1 = this._canceledException;
      t1.toString;
      this._failure$1(t1);
    },
    execute$1(worker) {
      return this.execute$body$WorkerValueTask(this.$ti._rest[1]._as(worker));
    },
    execute$body$WorkerValueTask(worker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$self = this, res, ex, st, t1, exception, $async$exception;
      var $async$execute$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              t1 = $async$self._canceledException;
              if (t1 != null)
                A.throwExpression(t1);
              $async$goto = 7;
              return A._asyncAwait($async$self._computer.call$1(worker), $async$execute$1);
            case 7:
              // returning from await.
              res = $async$result;
              t1 = $async$self._result;
              if ((t1.future._state & 30) === 0)
                t1.complete$1($async$self.$ti._eval$1("1/?")._as(res));
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              ex = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              $async$self._failure$1(A.SquadronException_from(ex, st, null));
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$execute$1, $async$completer);
    },
    $isValueTask: 1
  };
  A.WorkerPool.prototype = {
    release$0() {
      this.stop$0();
      this.super$Releasable$release();
    },
    get$exceptionManager() {
      var t1 = this._worker_pool$_exceptionManager;
      return t1;
    },
    _getProvisionNeeds$1(workload) {
      var maxWorkers,
        t1 = this.concurrencySettings,
        minWorkers = t1.minWorkers;
      if (workload < minWorkers)
        workload = minWorkers;
      maxWorkers = t1.maxWorkers;
      if (maxWorkers > 0 && workload > maxWorkers)
        workload = maxWorkers;
      return workload - this._workers.length - this._startingWorkers;
    },
    _provisionWorkers$1(workload) {
      var worker, poolWorker, ex, st, t1, t2, t3, i, t4, exception, _this = this,
        tasks = A._setArrayType([], type$.JSArray_Future_dynamic),
        errors = [],
        maxParallel = _this.concurrencySettings.maxParallel;
      for (t1 = _this._workerFactory, t2 = A._instanceType(_this)._eval$1("PoolWorker<WorkerPool.W>"), t3 = type$.Null, i = 0; i < workload; ++i)
        try {
          t4 = _this._worker_pool$_exceptionManager;
          worker = t1.call$1(t4);
          worker.channelLogger = _this.channelLogger;
          t4 = maxParallel;
          poolWorker = new A.PoolWorker(worker, t4, t4, t2);
          ++_this._startingWorkers;
          J.add$1$ax(tasks, poolWorker.worker.start$0().whenComplete$1(new A.WorkerPool__provisionWorkers_closure(_this)).then$1$1(new A.WorkerPool__provisionWorkers_closure0(_this, poolWorker), t3).catchError$1(new A.WorkerPool__provisionWorkers_closure1(poolWorker, errors)));
        } catch (exception) {
          ex = A.unwrapException(exception);
          st = A.getTraceFromException(exception);
          J.add$1$ax(errors, A.SquadronException_from(ex, st, null));
        }
      return A.Future_wait(tasks, false, type$.dynamic).whenComplete$1(new A.WorkerPool__provisionWorkers_closure2(_this, errors, tasks));
    },
    start$0() {
      var t1, needs, _this = this;
      _this._worker_pool$_stopped = false;
      t1 = _this._worker_pool$_queue;
      needs = _this._getProvisionNeeds$1(t1._collection$_head === t1._collection$_tail ? 1 : t1.get$length(0));
      if (needs > 0)
        return _this._provisionWorkers$1(needs);
    },
    _notify$2$removed(stats, removed) {
      var listener, exception,
        t1 = this._workerPoolListeners;
      if (t1.__js_helper$_length !== 0)
        for (t1 = new A.LinkedHashMapValueIterator(t1, t1.__js_helper$_modifications, t1.__js_helper$_first, A._instanceType(t1)._eval$1("LinkedHashMapValueIterator<2>")); t1.moveNext$0();) {
          listener = t1.__js_helper$_current;
          try {
            listener.call$2(stats, removed);
          } catch (exception) {
          }
        }
    },
    _removeWorkerAndNotify$2(poolWorker, force) {
      var worker, stats, _this = this;
      A._instanceType(_this)._eval$1("PoolWorker<WorkerPool.W>")._as(poolWorker);
      if (force || _this._workers.length > _this.concurrencySettings.minWorkers) {
        worker = poolWorker.worker;
        worker.stop$0();
        if (B.JSArray_methods.remove$1(_this._workers, poolWorker)) {
          stats = worker.get$_stats().get$snapshot();
          B.JSArray_methods.add$1(_this._deadWorkerStats, stats);
          _this._notify$2$removed(stats, true);
          return 1;
        }
      }
      return 0;
    },
    stop$1(predicate) {
      var force, t1, t2, targets, t3, stopped, _i, _this = this;
      A._instanceType(_this)._eval$1("bool(WorkerPool.W)?")._as(predicate);
      force = predicate == null;
      t1 = _this._workers;
      B.JSArray_methods.sort$1(t1, A._pool_worker_PoolWorker_compareCapacity$closure());
      t2 = A._arrayInstanceType(t1);
      if (force) {
        t2 = t2._eval$1("ReversedListIterable<1>");
        targets = A.SubListIterable$(new A.ReversedListIterable(t1, t2), _this._worker_pool$_queue.get$length(0), null, t2._eval$1("ListIterable.E")).toList$0(0);
        _this._worker_pool$_stopped = true;
      } else {
        t3 = t2._eval$1("WhereIterable<1>");
        targets = A.List_List$_of(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.WorkerPool_stop_closure(_this, predicate)), t3), t3._eval$1("Iterable.E"));
      }
      for (t1 = targets.length, stopped = 0, _i = 0; _i < targets.length; targets.length === t1 || (0, A.throwConcurrentModificationError)(targets), ++_i)
        stopped += _this._removeWorkerAndNotify$2(targets[_i], force);
      return stopped;
    },
    stop$0() {
      return this.stop$1(null);
    },
    terminate$1(ex) {
      var t1, i, w, t2, t3;
      this._worker_pool$_stopped = true;
      for (t1 = this._workers, i = t1.length - 1; i >= 0; --i) {
        if (!(i < t1.length))
          return A.ioore(t1, i);
        w = t1[i];
        t2 = w.worker;
        t3 = t2._channel;
        if (t3 != null)
          A.terminateChannel(t3, new A.TaskTerminatedException("Worker has been terminated", null));
        t2.stop$0();
        this._removeWorkerAndNotify$2(w, true);
      }
    },
    terminate$0() {
      return this.terminate$1(null);
    },
    _enqueue$1$1(task, $T) {
      var t1, _this = this;
      A._instanceType(_this)._bind$1($T)._eval$1("WorkerTask<1,WorkerPool.W>")._as(task);
      if (_this._worker_pool$_stopped)
        throw A.wrapException(A.SquadronError$_("The pool cannot accept new requests because it is stopped", null, null));
      t1 = _this._worker_pool$_queue;
      t1._collection$_add$1(t1.$ti._precomputed1._as(task));
      _this._schedule$0();
      return task;
    },
    execute$1$2$counter(task, counter, $T) {
      return this.scheduleValueTask$1$2$counter(A._instanceType(this)._bind$1($T)._eval$1("Future<1>(WorkerPool.W)")._as(task), counter, $T)._result.future;
    },
    execute$1$1(task, $T) {
      return this.execute$1$2$counter(task, null, $T);
    },
    stream$1$2$counter(task, counter, $T) {
      var _s11_ = "_controller",
        t1 = this.scheduleStreamTask$1$2$counter(A._instanceType(this)._bind$1($T)._eval$1("Stream<1>(WorkerPool.W)")._as(task), counter, $T).__WorkerStreamTask__controller_F;
      t1 === $ && A.throwLateFieldNI(_s11_);
      t1 = t1.__ForwardStreamController__controller_F;
      t1 === $ && A.throwLateFieldNI(_s11_);
      return new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>"));
    },
    stream$1$1(task, $T) {
      return this.stream$1$2$counter(task, null, $T);
    },
    scheduleValueTask$1$2$counter(task, counter, $T) {
      var t2, t3, t4,
        t1 = A._instanceType(this);
      t1._bind$1($T)._eval$1("Future<1>(WorkerPool.W)")._as(task);
      t2 = $.Zone__current;
      t3 = type$._Future_void;
      t4 = type$._AsyncCompleter_void;
      A.microsecTimeStamp();
      return $T._eval$1("ValueTask<0>")._as(this._enqueue$1$1(new A.WorkerValueTask(task, new A._AsyncCompleter(new A._Future(t2, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncCompleter<0>")), new A._AsyncCompleter(new A._Future(t2, t3), t4), counter, new A._AsyncCompleter(new A._Future(t2, t3), t4), $T._eval$1("@<0>")._bind$1(t1._eval$1("WorkerPool.W"))._eval$1("WorkerValueTask<1,2>")), $T));
    },
    scheduleValueTask$1$1(task, $T) {
      return this.scheduleValueTask$1$2$counter(task, null, $T);
    },
    scheduleStreamTask$1$2$counter(task, counter, $T) {
      var t1 = A._instanceType(this);
      return $T._eval$1("StreamTask<0>")._as(this._enqueue$1$1(A.WorkerStreamTask$(t1._bind$1($T)._eval$1("Stream<1>(WorkerPool.W)")._as(task), counter, $T, t1._eval$1("WorkerPool.W")), $T));
    },
    scheduleStreamTask$1$1(task, $T) {
      return this.scheduleStreamTask$1$2$counter(task, null, $T);
    },
    _schedule$0() {
      var t1 = this._worker_pool$_timer;
      if ((t1 == null ? null : t1.get$isActive()) !== true)
        this._worker_pool$_timer = A.Timer_Timer(B.Duration_0, this.get$__schedule());
    },
    __schedule$0() {
      var t1, needs, _this = this;
      if (_this._workers.length === 0 && _this._startingWorkers > 0) {
        _this._schedule$0();
        return;
      }
      t1 = _this._worker_pool$_queue;
      if (t1._collection$_head === t1._collection$_tail) {
        if (_this._worker_pool$_stopped && _this._worker_pool$_executing._collection$_length === 0)
          _this.stop$0();
        return;
      }
      _this._dispatchTasks$0();
      needs = _this._getProvisionNeeds$1(t1.get$length(0));
      if (needs > 0)
        _this._provisionWorkers$1(needs).then$1$2$onError(new A.WorkerPool___schedule_closure(_this), new A.WorkerPool___schedule_closure0(_this), type$.void);
    },
    _dispatchTasks$0() {
      var idx, t2, t3, w, task, _this = this,
        t1 = _this._workers;
      B.JSArray_methods.sort$1(t1, A._pool_worker_PoolWorker_compareCapacity$closure());
      for (idx = t1.length - 1, t2 = _this._worker_pool$_queue, t3 = _this._worker_pool$_executing; idx >= 0; --idx) {
        if (!(idx < t1.length))
          return A.ioore(t1, idx);
        w = t1[idx];
        if (w.worker.get$_stats()._stopped != null) {
          _this._removeWorkerAndNotify$2(w, false);
          continue;
        }
        while (true) {
          if (!(!t2.get$isEmpty(0) && w._capacity > 0))
            break;
          task = t2.removeFirst$0();
          if (task._canceled == null) {
            t3.add$1(0, task);
            w.run$1(task).whenComplete$1(new A.WorkerPool__dispatchTasks_closure(_this, task));
          }
        }
      }
    },
    cancel$2(task, message) {
      var t1;
      this._worker_pool$_executing.remove$1(0, task);
      t1 = this._worker_pool$_queue;
      t1._filterWhere$2(t1.$ti._eval$1("bool(1)")._as(new A.WorkerPool_cancel_closure(task)), true);
      task.cancel$1(message);
    },
    cancel$1(task) {
      return this.cancel$2(task, null);
    },
    cancelAll$1(message) {
      var toBeCanceled, _i,
        t1 = this._worker_pool$_executing,
        t2 = A._instanceType(t1),
        t3 = t2._eval$1("Iterable<1>")._as(this._worker_pool$_queue);
      t2 = A.FollowedByIterable_FollowedByIterable$firstEfficient(t1, t3, t2._precomputed1);
      toBeCanceled = A.List_List$_of(t2, A._instanceType(t2)._eval$1("Iterable.E"));
      t1.clear$0(0);
      t3.clear$0(0);
      for (t1 = toBeCanceled.length, _i = 0; _i < toBeCanceled.length; toBeCanceled.length === t1 || (0, A.throwConcurrentModificationError)(toBeCanceled), ++_i)
        toBeCanceled[_i].cancel$1(message);
    },
    cancelAll$0() {
      return this.cancelAll$1(null);
    },
    $isWorkerService: 1
  };
  A.WorkerPool__provisionWorkers_closure.prototype = {
    call$0() {
      --this.$this._startingWorkers;
    },
    $signature: 1
  };
  A.WorkerPool__provisionWorkers_closure0.prototype = {
    call$1(_) {
      var t1, t2;
      type$.Channel._as(_);
      t1 = this.$this;
      t2 = A._instanceType(t1)._eval$1("PoolWorker<WorkerPool.W>")._as(this.poolWorker);
      B.JSArray_methods.add$1(t1._workers, t2);
      t1._notify$2$removed(t2.worker.get$_stats().get$snapshot(), false);
    },
    $signature: 225
  };
  A.WorkerPool__provisionWorkers_closure1.prototype = {
    call$2(ex, st) {
      var t1;
      this.poolWorker.worker.terminate$0();
      t1 = ex == null ? A._asObject(ex) : ex;
      B.JSArray_methods.add$1(this.errors, A.SquadronException_from(t1, type$.nullable_StackTrace._as(st), null));
    },
    $signature: 97
  };
  A.WorkerPool__provisionWorkers_closure2.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._workers.length;
      if (t2 > t1._maxSize)
        t1._maxSize = t2;
      t1 = this.errors;
      t2 = t1.length;
      if (t2 !== 0)
        if (!(t2 < this.tasks.length)) {
          t2 = B.JSArray_methods.firstWhere$2$orElse(t1, new A.WorkerPool__provisionWorkers__closure(), new A.WorkerPool__provisionWorkers__closure0());
          if (t2 == null)
            t2 = B.JSArray_methods.firstWhere$2$orElse(t1, new A.WorkerPool__provisionWorkers__closure1(), new A.WorkerPool__provisionWorkers__closure2());
          t1 = t2 == null ? B.JSArray_methods.get$first(t1) : t2;
          throw A.wrapException(t1);
        }
    },
    $signature: 1
  };
  A.WorkerPool__provisionWorkers__closure.prototype = {
    call$1(e) {
      return type$.SquadronError._is(e);
    },
    $signature: 17
  };
  A.WorkerPool__provisionWorkers__closure0.prototype = {
    call$0() {
      return null;
    },
    $signature: 1
  };
  A.WorkerPool__provisionWorkers__closure1.prototype = {
    call$1(e) {
      return e instanceof A.WorkerException;
    },
    $signature: 17
  };
  A.WorkerPool__provisionWorkers__closure2.prototype = {
    call$0() {
      return null;
    },
    $signature: 1
  };
  A.WorkerPool_stop_closure.prototype = {
    call$1(w) {
      var t1;
      A._instanceType(this.$this)._eval$1("PoolWorker<WorkerPool.W>")._as(w);
      t1 = w.worker;
      return (t1.get$_stats()._stopped != null || w._capacity === w.__pool_worker$_maxWorkload) && this.predicate.call$1(t1);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(PoolWorker<WorkerPool.W>)");
    }
  };
  A.WorkerPool___schedule_closure.prototype = {
    call$1(_) {
      return this.$this._dispatchTasks$0();
    },
    $signature: 116
  };
  A.WorkerPool___schedule_closure0.prototype = {
    call$1(ex) {
      var t1 = this.$this;
      if (t1._workers.length === 0)
        for (t1 = t1._worker_pool$_queue; !t1.get$isEmpty(0);)
          t1.removeFirst$0().cancel$1("Provisionning workers failed");
      else
        t1._schedule$0();
    },
    $signature: 33
  };
  A.WorkerPool__dispatchTasks_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._worker_pool$_executing.remove$1(0, this.task);
      t1._schedule$0();
    },
    $signature: 1
  };
  A.WorkerPool_cancel_closure.prototype = {
    call$1(t) {
      return type$.WorkerTask_dynamic_Worker._as(t) === this.task;
    },
    $signature: 224
  };
  A._WorkerPool_Object_Releasable.prototype = {};
  A.SquadronPlatformType.prototype = {
    _enumToString$0() {
      return "SquadronPlatformType." + this._name;
    },
    get$isJs() {
      return this === B.SquadronPlatformType_JavaScript_js;
    },
    toString$0(_) {
      return this.label;
    }
  };
  A.PerfCounter.prototype = {};
  A.PerfCounterSnapshot.prototype = {};
  A.WorkerStat.prototype = {};
  A.CancelationTokenReference.prototype = {
    get$exception() {
      return this.__cancelation_token_ref$_exception;
    },
    get$onCanceled() {
      return this._completer.future;
    },
    ensureStarted$0() {
    },
    throwIfCanceled$0() {
      var t1 = this.__cancelation_token_ref$_exception;
      if (t1 != null)
        throw A.wrapException(t1);
    },
    serialize$0() {
      return A.throwExpression(A.UnimplementedError$(null));
    },
    $isCancelationToken: 1,
    $isSquadronCancelationToken: 1,
    get$id() {
      return this.id;
    }
  };
  A.SquadronCancelationToken.prototype = {
    serialize$0() {
      this._checkToken$0();
      var t1 = this.__squadron_cancelation_token$_exception;
      t1 = t1 == null ? null : t1.serialize$0();
      return A.List_List$unmodifiable([this.id, t1], type$.dynamic);
    },
    get$exception() {
      return this.__squadron_cancelation_token$_exception;
    },
    ensureStarted$0() {
      var t1 = this.token;
      if (t1 != null)
        t1.ensureStarted$0();
    },
    get$onCanceled() {
      return this.__squadron_cancelation_token$_completer.future;
    },
    _checkToken$1(_) {
      var t2, _this = this,
        t1 = _this.token,
        ex = t1 == null ? null : t1.get$exception();
      if (ex != null) {
        t1 = _this.__squadron_cancelation_token$_exception;
        if (t1 == null)
          t1 = _this.__squadron_cancelation_token$_exception = A.SquadronCanceledException_SquadronCanceledException$from(_this.id, ex, null);
        t2 = _this.__squadron_cancelation_token$_completer;
        if ((t2.future._state & 30) === 0)
          t2.complete$1(t1);
      }
    },
    _checkToken$0() {
      return this._checkToken$1(null);
    },
    get$id() {
      return this.id;
    }
  };
  A.Worker.prototype = {
    release$0() {
      this.stop$0();
      this.super$Releasable$release();
    },
    get$exceptionManager() {
      var t1 = this._exceptionManager;
      if (t1 == null) {
        t1 = type$.dynamic;
        t1 = this._exceptionManager = new A.ExceptionManager(A.LinkedHashMap_LinkedHashMap$from($.builtinExceptions, t1, t1));
      }
      return t1;
    },
    get$_stats() {
      var t1, _this = this,
        value = _this.__Worker__stats_FI;
      if (value === $) {
        t1 = A.microsecTimeStamp();
        _this.__Worker__stats_FI !== $ && A.throwLateFieldADI("_stats");
        value = _this.__Worker__stats_FI = new A._Stats(_this, t1);
      }
      return value;
    },
    send$4$args$inspectRequest$inspectResponse(command, args, inspectRequest, inspectResponse) {
      return this.send$body$Worker(command, args, inspectRequest, inspectResponse);
    },
    send$2$args(command, args) {
      return this.send$4$args$inspectRequest$inspectResponse(command, args, false, false);
    },
    send$1(command) {
      return this.send$4$args$inspectRequest$inspectResponse(command, B.List_empty, false, false);
    },
    send$body$Worker(command, args, inspectRequest, inspectResponse) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$self = this, res, ex, st, t2, t3, exception, channel0, channel, completer, squadronToken, t1, $async$exception;
      var $async$send$4$args$inspectRequest$inspectResponse = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              channel0 = $async$self._channel;
              $async$goto = channel0 == null ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = 6;
              return A._asyncAwait($async$self.start$0(), $async$send$4$args$inspectRequest$inspectResponse);
            case 6:
              // returning from await.
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$result = channel0;
            case 4:
              // join
              channel = $async$result;
              completer = new A.ForwardCompleter(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic), type$.ForwardCompleter_dynamic);
              squadronToken = null;
              t1 = squadronToken;
              if (t1 != null)
                t1.__squadron_cancelation_token$_completer.future.then$1$1(new A.Worker_send_closure($async$self, squadronToken, completer, command), type$.Null);
              t1 = $async$self.get$_stats();
              t1.beginWork$0();
              A.FutureExtensions_ignore(completer._res.future.whenComplete$1(t1.get$endWork()), type$.dynamic);
              $async$handler = 8;
              $async$goto = 11;
              return A._asyncAwait(channel.sendRequest$5$inspectRequest$inspectResponse$token(command, args, inspectRequest, inspectResponse, squadronToken), $async$send$4$args$inspectRequest$inspectResponse);
            case 11:
              // returning from await.
              res = $async$result;
              t2 = completer;
              t3 = t2.$ti._precomputed1._as(res);
              t2 = t2._res;
              if ((t2.future._state & 30) === 0)
                t2.complete$1(t3);
              $async$handler = 2;
              // goto after finally
              $async$goto = 10;
              break;
            case 8:
              // catch
              $async$handler = 7;
              $async$exception = $async$errorStack.pop();
              ex = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              ++t1._totalErrors;
              t1 = A.SquadronException_from(ex, st, command);
              t2 = completer._res;
              if ((t2.future._state & 30) === 0)
                t2.completeError$1(t1);
              // goto after finally
              $async$goto = 10;
              break;
            case 7:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 10:
              // after finally
              $async$returnValue = completer._res.future;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$send$4$args$inspectRequest$inspectResponse, $async$completer);
    },
    stream$3$args$token(command, args, token) {
      var t1,
        squadronToken = token == null ? null : A.SquadronCancelationTokenExt_wrap(token),
        controller = A._Cell$named("controller");
      if (squadronToken != null)
        squadronToken.__squadron_cancelation_token$_completer.future.then$1$1(new A.Worker_stream_closure(this, controller, command, squadronToken), type$.Null);
      controller.set$finalLocalValue(A.ForwardStreamController$(null, new A.Worker_stream_closure0(this, controller, squadronToken, command, args, false, false), type$.dynamic));
      t1 = controller._readLocal$0().__ForwardStreamController__controller_F;
      t1 === $ && A.throwLateFieldNI("_controller");
      return new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>"));
    },
    stream$2$args(command, args) {
      return this.stream$3$args$token(command, args, null);
    },
    stream$2$token(command, token) {
      return this.stream$3$args$token(command, B.List_empty, token);
    },
    stream$1(command) {
      return this.stream$3$args$token(command, B.List_empty, null);
    },
    start$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Channel),
        $async$returnValue, $async$self = this, args, t2, channel, t3, t1;
      var $async$start$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.get$_stats();
              if (t1._stopped != null)
                throw A.wrapException(A.WorkerException$("Invalid state: worker is stopped", null, null));
              args = $async$self.getStartArgs$0();
              if (args == null)
                args = B.List_empty;
              t2 = $async$self._openChannel;
              if (t2 == null) {
                t2 = A.openChannel($async$self._entryPoint, $async$self.get$exceptionManager(), $async$self.channelLogger, args, $async$self._threadHook);
                $async$self._openChannel = t2;
              }
              channel = $async$self._channel;
              $async$goto = channel == null ? 3 : 4;
              break;
            case 3:
              // then
              t3 = type$.nullable_Channel;
              $async$goto = 5;
              return A._asyncAwait(type$.Future_nullable_Channel._is(t2) ? t2 : A._Future$value(t3._as(t2), t3), $async$start$0);
            case 5:
              // returning from await.
              channel = $async$result;
            case 4:
              // join
              if ($async$self._channel == null) {
                $async$self._channel = channel;
                t1._idle = t1._started = A.microsecTimeStamp();
              }
              t1 = $async$self._channel;
              t1.toString;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$start$0, $async$completer);
    },
    stop$0() {
      var t2, _this = this,
        t1 = _this.get$_stats();
      if (t1._stopped == null) {
        t2 = _this.channelLogger;
        if (t2 != null)
          t2.d$1("Stop worker");
        t1._stopped = A.microsecTimeStamp();
        _this._openChannel = null;
        t1 = _this._channel;
        if (t1 != null)
          t1.close$0();
        _this._channel = null;
      }
    },
    terminate$1(ex) {
      var t1 = this._channel;
      if (t1 != null)
        A.terminateChannel(t1, new A.TaskTerminatedException("Worker has been terminated", null));
      this.stop$0();
    },
    terminate$0() {
      return this.terminate$1(null);
    },
    set$channelLogger(channelLogger) {
      this.channelLogger = type$.nullable_Logger._as(channelLogger);
    },
    $isWorkerService: 1
  };
  A.Worker_send_closure.prototype = {
    call$1(ex) {
      var t1, t2, _this = this;
      type$.CanceledException._as(ex);
      t1 = _this.$this._channel;
      if (t1 != null)
        t1.cancelToken$1(_this.squadronToken);
      t1 = A.SquadronException_from(ex, null, _this.command);
      t2 = _this.completer._res;
      if ((t2.future._state & 30) === 0)
        t2.completeError$1(t1);
    },
    $signature: 143
  };
  A.Worker_stream_closure.prototype = {
    call$1(ex) {
      var t1, t2, t3, t4, _this = this,
        _s11_ = "_controller";
      type$.CanceledException._as(ex);
      t1 = _this.controller;
      t2 = t1._readLocal$0();
      if (!t2.__forward_stream_controller$_closed) {
        t2 = t2.__ForwardStreamController__controller_F;
        t2 === $ && A.throwLateFieldNI(_s11_);
        t2 = (t2._state & 4) !== 0;
      } else
        t2 = true;
      if (!t2) {
        t2 = t1._readLocal$0()._sub;
        if (t2 != null)
          t2.cancel$0();
        t2 = t1._readLocal$0();
        t3 = A.SquadronException_from(ex, null, _this.command);
        if (!t2.__forward_stream_controller$_closed) {
          t4 = t2.__ForwardStreamController__controller_F;
          t4 === $ && A.throwLateFieldNI(_s11_);
          t4 = (t4._state & 4) !== 0;
        } else
          t4 = true;
        if (!t4) {
          t2 = t2.__ForwardStreamController__controller_F;
          t2 === $ && A.throwLateFieldNI(_s11_);
          t2.addError$1(t3);
        }
        t1._readLocal$0().close$0();
      }
      t1 = _this.$this._channel;
      if (t1 != null)
        t1.cancelToken$1(_this.squadronToken);
    },
    $signature: 143
  };
  A.Worker_stream_closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$self = this, channel, ex, st, t1, t2, t3, channel0, t4, exception, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              t1 = $async$self.controller;
              t2 = t1._readLocal$0();
              if (!t2.__forward_stream_controller$_closed) {
                t2 = t2.__ForwardStreamController__controller_F;
                t2 === $ && A.throwLateFieldNI("_controller");
                t2 = (t2._state & 4) !== 0;
              } else
                t2 = true;
              if (t2) {
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = $async$self.squadronToken;
              if (t2 != null)
                if (t2.get$exception() != null) {
                  t3 = t2.get$exception();
                  t3.toString;
                  A.throwExpression(t3);
                }
              t3 = $async$self.$this;
              channel0 = t3._channel;
              $async$goto = channel0 == null ? 7 : 9;
              break;
            case 7:
              // then
              $async$goto = 10;
              return A._asyncAwait(t3.start$0(), $async$call$0);
            case 10:
              // returning from await.
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              $async$result = channel0;
            case 8:
              // join
              channel = $async$result;
              t4 = t1._readLocal$0();
              if (!t4.__forward_stream_controller$_closed) {
                t4 = t4.__ForwardStreamController__controller_F;
                t4 === $ && A.throwLateFieldNI("_controller");
                t4 = (t4._state & 4) !== 0;
              } else
                t4 = true;
              if (t4) {
                // goto return
                $async$goto = 1;
                break;
              }
              t3 = t3.get$_stats();
              t3.beginWork$0();
              t4 = t1._readLocal$0().__ForwardStreamController__controller_F;
              t4 === $ && A.throwLateFieldNI("_controller");
              A.FutureExtensions_ignore(t4._ensureDoneFuture$0().whenComplete$1(t3.get$endWork()), type$.void);
              t3 = $async$self.command;
              t1._readLocal$0().attachSubscription$1(channel.sendStreamingRequest$5$inspectRequest$inspectResponse$token(t3, $async$self.args, $async$self.inspectRequest, $async$self.inspectResponse, t2).listen$4$cancelOnError$onDone$onError(type$.void_Function_dynamic._as(J.get$add$ax(t1._readLocal$0())), false, t1._readLocal$0().get$close(), new A.Worker_stream__closure(t1, t3)));
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              ex = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              ++$async$self.$this.get$_stats()._totalErrors;
              t1 = $async$self.controller;
              t2 = t1._readLocal$0()._sub;
              if (t2 != null)
                t2.cancel$0();
              t2 = t1._readLocal$0();
              t3 = A.SquadronException_from(ex, st, $async$self.command);
              if (!t2.__forward_stream_controller$_closed) {
                t4 = t2.__ForwardStreamController__controller_F;
                t4 === $ && A.throwLateFieldNI("_controller");
                t4 = (t4._state & 4) !== 0;
              } else
                t4 = true;
              if (!t4) {
                t2 = t2.__ForwardStreamController__controller_F;
                t2 === $ && A.throwLateFieldNI("_controller");
                t2.addError$1(t3);
              }
              t1._readLocal$0().close$0();
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 14
  };
  A.Worker_stream__closure.prototype = {
    call$2(ex, st) {
      var t3,
        _s11_ = "_controller",
        t1 = this.controller._readLocal$0(),
        t2 = ex == null ? A._asObject(ex) : ex;
      t2 = A.SquadronException_from(t2, type$.nullable_StackTrace._as(st), this.command);
      if (!t1.__forward_stream_controller$_closed) {
        t3 = t1.__ForwardStreamController__controller_F;
        t3 === $ && A.throwLateFieldNI(_s11_);
        t3 = (t3._state & 4) !== 0;
      } else
        t3 = true;
      if (!t3) {
        t1 = t1.__ForwardStreamController__controller_F;
        t1 === $ && A.throwLateFieldNI(_s11_);
        t1.addError$1(t2);
      }
      return null;
    },
    $signature: 94
  };
  A._Stats.prototype = {
    beginWork$0() {
      var t1 = ++this._workload;
      if (t1 > this._maxWorkload)
        this._maxWorkload = t1;
    },
    endWork$1(_) {
      --this._workload;
      this._idle = A.microsecTimeStamp();
      ++this._totalWorkload;
    },
    endWork$0() {
      return this.endWork$1(null);
    },
    get$snapshot() {
      var t2, t3, t4, t5, t6, t7, t8, _this = this,
        ts = A.microsecTimeStamp(),
        t1 = _this._worker;
      A.getRuntimeTypeOfDartObject(t1);
      A.Primitives_objectHashCode(t1);
      t2 = _this._stopped;
      t3 = t2 == null;
      t4 = _this._workload;
      t5 = _this._maxWorkload;
      t6 = _this._totalWorkload;
      t7 = _this._totalErrors;
      if (t3)
        t2 = ts;
      t8 = _this._started;
      t2 = t8 == null ? B.Duration_0 : A.Duration$(0, 0, t2 - t8, 0, 0);
      t8 = t4 > 0 ? B.Duration_0 : A.Duration$(0, 0, ts - _this._idle, 0, 0);
      t1 = t1._channel;
      if (t1 == null)
        t1 = null;
      else
        t1 = t1 instanceof A._WebChannel ? t1._activeConnections.length : 0;
      if (t1 == null)
        t1 = 0;
      return new A.WorkerStat(new A.DateTime(Date.now(), 0, false).toUtc$0(), !t3, t4, t5, t6, t7, t2, t8, t1);
    }
  };
  A._Worker_Object_Releasable.prototype = {};
  A._LogEventSerializationExt__getLevel_closure.prototype = {
    call$1(l) {
      return type$.Level._as(l).value === this.value;
    },
    $signature: 223
  };
  A.Chain.prototype = {
    foldFrames$2$terse(predicate, terse) {
      var t1 = this.traces,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Trace>"),
        foldedTraces = new A.MappedListIterable(t1, t2._eval$1("Trace(1)")._as(new A.Chain_foldFrames_closure(type$.bool_Function_Frame._as(predicate), true)), t3),
        nonEmptyTraces = foldedTraces.super$Iterable$where(0, t3._eval$1("bool(ListIterable.E)")._as(new A.Chain_foldFrames_closure0(true)));
      if (!nonEmptyTraces.get$iterator(0).moveNext$0() && !foldedTraces.get$isEmpty(0))
        return new A.Chain(A.List_List$unmodifiable(A._setArrayType([foldedTraces.get$last(0)], type$.JSArray_Trace), type$.Trace));
      return new A.Chain(A.List_List$unmodifiable(nonEmptyTraces, type$.Trace));
    },
    toTrace$0() {
      var t1 = this.traces,
        t2 = A._arrayInstanceType(t1);
      return A.Trace$(new A.ExpandIterable(t1, t2._eval$1("Iterable<Frame>(1)")._as(new A.Chain_toTrace_closure()), t2._eval$1("ExpandIterable<1,Frame>")), null);
    },
    toString$0(_) {
      var t1 = this.traces,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Chain_toString_closure(new A.MappedListIterable(t1, t2._eval$1("int(1)")._as(new A.Chain_toString_closure0()), t2._eval$1("MappedListIterable<1,int>")).fold$1$2(0, 0, B.CONSTANT, type$.int))), t2._eval$1("MappedListIterable<1,String>")).join$1(0, string$.x3d_____);
    },
    $isStackTrace: 1,
    get$traces() {
      return this.traces;
    }
  };
  A.Chain_Chain$current_closure.prototype = {
    call$0() {
      var t1 = this.chain,
        t2 = B.JSArray_methods.get$first(t1.get$traces()).get$frames();
      t2 = A._setArrayType([A.Trace$(A.SubListIterable$(t2, this.level + 2, null, A._arrayInstanceType(t2)._precomputed1), B.JSArray_methods.get$first(t1.get$traces()).get$original()._stackTrace)], type$.JSArray_Trace);
      t1 = t1.get$traces();
      B.JSArray_methods.addAll$1(t2, A.SubListIterable$(t1, 1, null, A._arrayInstanceType(t1)._precomputed1));
      return new A.Chain(A.List_List$unmodifiable(t2, type$.Trace));
    },
    $signature: 70
  };
  A.Chain_Chain$forTrace_closure.prototype = {
    call$0() {
      return A.Chain_Chain$parse(this.trace.toString$0(0));
    },
    $signature: 70
  };
  A.Chain_Chain$parse_closure.prototype = {
    call$1(line) {
      return A._asString(line).length !== 0;
    },
    $signature: 8
  };
  A.Chain_foldFrames_closure.prototype = {
    call$1(trace) {
      return type$.Trace._as(trace).foldFrames$2$terse(this.predicate, this.terse);
    },
    $signature: 222
  };
  A.Chain_foldFrames_closure0.prototype = {
    call$1(trace) {
      type$.Trace._as(trace);
      if (trace.get$frames().length > 1)
        return true;
      if (trace.get$frames().length === 0)
        return false;
      if (!this.terse)
        return false;
      return B.JSArray_methods.get$single(trace.get$frames()).get$line() != null;
    },
    $signature: 221
  };
  A.Chain_toTrace_closure.prototype = {
    call$1(trace) {
      return type$.Trace._as(trace).get$frames();
    },
    $signature: 220
  };
  A.Chain_toString_closure0.prototype = {
    call$1(trace) {
      var t1 = type$.Trace._as(trace).get$frames(),
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("int(1)")._as(new A.Chain_toString__closure0()), t2._eval$1("MappedListIterable<1,int>")).fold$1$2(0, 0, B.CONSTANT, type$.int);
    },
    $signature: 216
  };
  A.Chain_toString__closure0.prototype = {
    call$1(frame) {
      return type$.Frame._as(frame).get$location().length;
    },
    $signature: 113
  };
  A.Chain_toString_closure.prototype = {
    call$1(trace) {
      var t1 = type$.Trace._as(trace).get$frames(),
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Chain_toString__closure(this.longest)), t2._eval$1("MappedListIterable<1,String>")).join$0(0);
    },
    $signature: 215
  };
  A.Chain_toString__closure.prototype = {
    call$1(frame) {
      type$.Frame._as(frame);
      return B.JSString_methods.padRight$1(frame.get$location(), this.longest) + "  " + A.S(frame.get$member()) + "\n";
    },
    $signature: 136
  };
  A.Frame.prototype = {
    get$isCore() {
      return this.uri.get$scheme() === "dart";
    },
    get$library() {
      var t1 = this.uri;
      if (t1.get$scheme() === "data")
        return "data:...";
      return $.$get$context().prettyUri$1(t1);
    },
    get$$package() {
      var t1 = this.uri;
      if (t1.get$scheme() !== "package")
        return null;
      return B.JSArray_methods.get$first(t1.get$path().split("/"));
    },
    get$location() {
      var t2, _this = this,
        t1 = _this.line;
      if (t1 == null)
        return _this.get$library();
      t2 = _this.column;
      if (t2 == null)
        return _this.get$library() + " " + A.S(t1);
      return _this.get$library() + " " + A.S(t1) + ":" + A.S(t2);
    },
    toString$0(_) {
      return this.get$location() + " in " + A.S(this.member);
    },
    get$uri() {
      return this.uri;
    },
    get$line() {
      return this.line;
    },
    get$column() {
      return this.column;
    },
    get$member() {
      return this.member;
    }
  };
  A.Frame_Frame$parseVM_closure.prototype = {
    call$0() {
      var match, t2, t3, member, uri, lineAndColumn, line, _null = null,
        t1 = this.frame;
      if (t1 === "...")
        return new A.Frame(A._Uri__Uri(_null, _null, _null, _null), _null, _null, "...");
      match = $.$get$_vmFrame().firstMatch$1(t1);
      if (match == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null), t1);
      t1 = match._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      t2.toString;
      t3 = $.$get$_asyncBody();
      t2 = A.stringReplaceAllUnchecked(t2, t3, "<async>");
      member = A.stringReplaceAllUnchecked(t2, "<anonymous closure>", "<fn>");
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      t3 = t2;
      t3.toString;
      if (B.JSString_methods.startsWith$1(t3, "<data:"))
        uri = A.Uri_Uri$dataFromString("");
      else {
        t2 = t2;
        t2.toString;
        uri = A.Uri_parse(t2);
      }
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      lineAndColumn = t1[3].split(":");
      t1 = lineAndColumn.length;
      line = t1 > 1 ? A.int_parse(lineAndColumn[1], _null) : _null;
      return new A.Frame(uri, line, t1 > 2 ? A.int_parse(lineAndColumn[2], _null) : _null, member);
    },
    $signature: 60
  };
  A.Frame_Frame$parseV8_closure.prototype = {
    call$0() {
      var member, uri, t2, functionOffset, t3, t4, _s4_ = "<fn>",
        t1 = this.frame,
        match = $.$get$_v8WasmFrame().firstMatch$1(t1);
      if (match != null) {
        member = match.namedGroup$1("member");
        t1 = match.namedGroup$1("uri");
        t1.toString;
        uri = A.Frame__uriOrPathToUri(t1);
        t1 = match.namedGroup$1("index");
        t1.toString;
        t2 = match.namedGroup$1("offset");
        t2.toString;
        functionOffset = A.int_parse(t2, 16);
        if (!(member == null))
          t1 = member;
        return new A.Frame(uri, 1, functionOffset + 1, t1);
      }
      match = $.$get$_v8JsFrame().firstMatch$1(t1);
      if (match != null) {
        t1 = new A.Frame_Frame$parseV8_closure_parseJsLocation(t1);
        t2 = match._match;
        t3 = t2.length;
        if (2 >= t3)
          return A.ioore(t2, 2);
        t4 = t2[2];
        if (t4 != null) {
          t3 = t4;
          t3.toString;
          t2 = t2[1];
          t2.toString;
          t2 = A.stringReplaceAllUnchecked(t2, "<anonymous>", _s4_);
          t2 = A.stringReplaceAllUnchecked(t2, "Anonymous function", _s4_);
          return t1.call$2(t3, A.stringReplaceAllUnchecked(t2, "(anonymous function)", _s4_));
        } else {
          if (3 >= t3)
            return A.ioore(t2, 3);
          t2 = t2[3];
          t2.toString;
          return t1.call$2(t2, _s4_);
        }
      }
      return new A.UnparsedFrame(A._Uri__Uri(null, "unparsed", null, null), t1);
    },
    $signature: 60
  };
  A.Frame_Frame$parseV8_closure_parseJsLocation.prototype = {
    call$2($location, member) {
      var t2, urlMatch, uri, line, columnMatch, _null = null,
        t1 = $.$get$_v8EvalLocation(),
        evalMatch = t1.firstMatch$1($location);
      for (; evalMatch != null; $location = t2) {
        t2 = evalMatch._match;
        if (1 >= t2.length)
          return A.ioore(t2, 1);
        t2 = t2[1];
        t2.toString;
        evalMatch = t1.firstMatch$1(t2);
      }
      if ($location === "native")
        return new A.Frame(A.Uri_parse("native"), _null, _null, member);
      urlMatch = $.$get$_v8JsUrlLocation().firstMatch$1($location);
      if (urlMatch == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null), this.frame);
      t1 = urlMatch._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      t2.toString;
      uri = A.Frame__uriOrPathToUri(t2);
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      t2.toString;
      line = A.int_parse(t2, _null);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      columnMatch = t1[3];
      return new A.Frame(uri, line, columnMatch != null ? A.int_parse(columnMatch, _null) : _null, member);
    },
    $signature: 211
  };
  A.Frame_Frame$_parseFirefoxEval_closure.prototype = {
    call$0() {
      var t2, member, uri, line, _null = null,
        t1 = this.frame,
        match = $.$get$_firefoxEvalLocation().firstMatch$1(t1);
      if (match == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null), t1);
      t1 = match._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      t2.toString;
      member = A.stringReplaceAllUnchecked(t2, "/<", "");
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      t2.toString;
      uri = A.Frame__uriOrPathToUri(t2);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      t1 = t1[3];
      t1.toString;
      line = A.int_parse(t1, _null);
      return new A.Frame(uri, line, _null, member.length === 0 || member === "anonymous" ? "<fn>" : member);
    },
    $signature: 60
  };
  A.Frame_Frame$parseFirefox_closure.prototype = {
    call$0() {
      var t2, t3, t4, uri, member, line, column, functionOffset, _null = null,
        t1 = this.frame,
        match = $.$get$_firefoxSafariJSFrame().firstMatch$1(t1);
      if (match != null) {
        t2 = match._match;
        if (3 >= t2.length)
          return A.ioore(t2, 3);
        t3 = t2[3];
        t4 = t3;
        t4.toString;
        if (B.JSString_methods.contains$1(t4, " line "))
          return A.Frame_Frame$_parseFirefoxEval(t1);
        t1 = t3;
        t1.toString;
        uri = A.Frame__uriOrPathToUri(t1);
        t1 = t2.length;
        if (1 >= t1)
          return A.ioore(t2, 1);
        member = t2[1];
        if (member != null) {
          if (2 >= t1)
            return A.ioore(t2, 2);
          t1 = t2[2];
          t1.toString;
          member += B.JSArray_methods.join$0(A.List_List$filled(B.JSString_methods.allMatches$1("/", t1).get$length(0), ".<fn>", false, type$.String));
          if (member === "")
            member = "<fn>";
          member = B.JSString_methods.replaceFirst$2(member, $.$get$_initialDot(), "");
        } else
          member = "<fn>";
        if (4 >= t2.length)
          return A.ioore(t2, 4);
        t1 = t2[4];
        if (t1 === "")
          line = _null;
        else {
          t1 = t1;
          t1.toString;
          line = A.int_parse(t1, _null);
        }
        if (5 >= t2.length)
          return A.ioore(t2, 5);
        t1 = t2[5];
        if (t1 == null || t1 === "")
          column = _null;
        else {
          t1 = t1;
          t1.toString;
          column = A.int_parse(t1, _null);
        }
        return new A.Frame(uri, line, column, member);
      }
      match = $.$get$_firefoxWasmFrame().firstMatch$1(t1);
      if (match != null) {
        t1 = match.namedGroup$1("member");
        t1.toString;
        t2 = match.namedGroup$1("uri");
        t2.toString;
        uri = A.Frame__uriOrPathToUri(t2);
        t2 = match.namedGroup$1("index");
        t2.toString;
        t3 = match.namedGroup$1("offset");
        t3.toString;
        functionOffset = A.int_parse(t3, 16);
        if (!(t1.length !== 0))
          t1 = t2;
        return new A.Frame(uri, 1, functionOffset + 1, t1);
      }
      match = $.$get$_safariWasmFrame().firstMatch$1(t1);
      if (match != null) {
        t1 = match.namedGroup$1("member");
        t1.toString;
        return new A.Frame(A._Uri__Uri(_null, "wasm code", _null, _null), _null, _null, t1);
      }
      return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null), t1);
    },
    $signature: 60
  };
  A.Frame_Frame$parseFriendly_closure.prototype = {
    call$0() {
      var t2, uri, line, column, _null = null,
        t1 = this.frame,
        match = $.$get$_friendlyFrame().firstMatch$1(t1);
      if (match == null)
        throw A.wrapException(A.FormatException$("Couldn't parse package:stack_trace stack trace line '" + t1 + "'.", _null, _null));
      t1 = match._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      if (t2 === "data:...")
        uri = A.Uri_Uri$dataFromString("");
      else {
        t2 = t2;
        t2.toString;
        uri = A.Uri_parse(t2);
      }
      if (uri.get$scheme() === "") {
        t2 = $.$get$context();
        uri = t2.toUri$1(t2.absolute$15(t2.style.pathFromUri$1(A._parseUri(uri)), _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null));
      }
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      if (t2 == null)
        line = _null;
      else {
        t2 = t2;
        t2.toString;
        line = A.int_parse(t2, _null);
      }
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      t2 = t1[3];
      if (t2 == null)
        column = _null;
      else {
        t2 = t2;
        t2.toString;
        column = A.int_parse(t2, _null);
      }
      if (4 >= t1.length)
        return A.ioore(t1, 4);
      return new A.Frame(uri, line, column, t1[4]);
    },
    $signature: 60
  };
  A.LazyChain.prototype = {
    get$_chain() {
      var result, _this = this,
        value = _this.__LazyChain__chain_FI;
      if (value === $) {
        result = _this._thunk.call$0();
        _this.__LazyChain__chain_FI !== $ && A.throwLateFieldADI("_chain");
        _this.__LazyChain__chain_FI = result;
        value = result;
      }
      return value;
    },
    get$traces() {
      return this.get$_chain().get$traces();
    },
    foldFrames$2$terse(predicate, terse) {
      return new A.LazyChain(new A.LazyChain_foldFrames_closure(this, type$.bool_Function_Frame._as(predicate), true));
    },
    toTrace$0() {
      return new A.LazyTrace(this.get$_chain().get$toTrace());
    },
    toString$0(_) {
      return this.get$_chain().toString$0(0);
    },
    $isStackTrace: 1,
    $isChain: 1
  };
  A.LazyChain_foldFrames_closure.prototype = {
    call$0() {
      return this.$this.get$_chain().foldFrames$2$terse(this.predicate, this.terse);
    },
    $signature: 70
  };
  A.LazyTrace.prototype = {
    get$_lazy_trace$_trace() {
      var result, _this = this,
        value = _this.__LazyTrace__trace_FI;
      if (value === $) {
        result = _this._lazy_trace$_thunk.call$0();
        _this.__LazyTrace__trace_FI !== $ && A.throwLateFieldADI("_trace");
        _this.__LazyTrace__trace_FI = result;
        value = result;
      }
      return value;
    },
    get$frames() {
      return this.get$_lazy_trace$_trace().get$frames();
    },
    get$original() {
      return this.get$_lazy_trace$_trace().get$original();
    },
    foldFrames$2$terse(predicate, terse) {
      return new A.LazyTrace(new A.LazyTrace_foldFrames_closure(this, type$.bool_Function_Frame._as(predicate), true));
    },
    toString$0(_) {
      return this.get$_lazy_trace$_trace().toString$0(0);
    },
    $isStackTrace: 1,
    $isTrace: 1
  };
  A.LazyTrace_foldFrames_closure.prototype = {
    call$0() {
      return this.$this.get$_lazy_trace$_trace().foldFrames$2$terse(this.predicate, this.terse);
    },
    $signature: 52
  };
  A.StackZoneSpecification_chainFor_closure.prototype = {
    call$0() {
      return A.Chain_Chain$parse(this._box_0.trace.toString$0(0));
    },
    $signature: 70
  };
  A.StackZoneSpecification_chainFor_closure0.prototype = {
    call$0() {
      return A.Trace_Trace$parse(this.$this._trimVMChain$1(this.original));
    },
    $signature: 52
  };
  A.StackZoneSpecification__currentTrace_closure.prototype = {
    call$0() {
      var text = this.$this._trimVMChain$1(this.stackTrace),
        t1 = A.Trace_Trace$parse(text).frames;
      return A.Trace$(A.SubListIterable$(t1, this.level + 2, null, A._arrayInstanceType(t1)._precomputed1), text);
    },
    $signature: 52
  };
  A._Node.prototype = {
    toChain$0() {
      var node,
        nodes = A._setArrayType([], type$.JSArray_Trace);
      for (node = this; node != null;) {
        B.JSArray_methods.add$1(nodes, node.trace);
        node = node.previous;
      }
      return new A.Chain(A.List_List$unmodifiable(nodes, type$.Trace));
    }
  };
  A.Trace.prototype = {
    foldFrames$2$terse(predicate, terse) {
      var newFrames, t1, t2, t3, _box_0 = {};
      _box_0.predicate = predicate;
      type$.bool_Function_Frame._as(predicate);
      _box_0.predicate = predicate;
      _box_0.predicate = new A.Trace_foldFrames_closure(predicate);
      newFrames = A._setArrayType([], type$.JSArray_Frame);
      for (t1 = this.frames, t2 = A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>"), t1 = new A.ReversedListIterable(t1, t2), t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"); t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (t3 instanceof A.UnparsedFrame || !_box_0.predicate.call$1(t3))
          B.JSArray_methods.add$1(newFrames, t3);
        else if (newFrames.length === 0 || !_box_0.predicate.call$1(B.JSArray_methods.get$last(newFrames)))
          B.JSArray_methods.add$1(newFrames, new A.Frame(t3.get$uri(), t3.get$line(), t3.get$column(), t3.get$member()));
      }
      t1 = type$.Frame_Function_Frame._as(new A.Trace_foldFrames_closure0(_box_0));
      t2 = type$.MappedListIterable_Frame_Frame;
      newFrames = A.List_List$_of(new A.MappedListIterable(newFrames, t1, t2), t2._eval$1("ListIterable.E"));
      if (newFrames.length > 1 && _box_0.predicate.call$1(B.JSArray_methods.get$first(newFrames)))
        B.JSArray_methods.removeAt$1(newFrames, 0);
      return A.Trace$(new A.ReversedListIterable(newFrames, A._arrayInstanceType(newFrames)._eval$1("ReversedListIterable<1>")), this.original._stackTrace);
    },
    toString$0(_) {
      var t1 = this.frames,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Trace_toString_closure(new A.MappedListIterable(t1, t2._eval$1("int(1)")._as(new A.Trace_toString_closure0()), t2._eval$1("MappedListIterable<1,int>")).fold$1$2(0, 0, B.CONSTANT, type$.int))), t2._eval$1("MappedListIterable<1,String>")).join$0(0);
    },
    $isStackTrace: 1,
    get$frames() {
      return this.frames;
    },
    get$original() {
      return this.original;
    }
  };
  A.Trace_Trace$from_closure.prototype = {
    call$0() {
      return A.Trace_Trace$parse(this.trace.toString$0(0));
    },
    $signature: 52
  };
  A.Trace__parseVM_closure.prototype = {
    call$1(line) {
      return A._asString(line).length !== 0;
    },
    $signature: 8
  };
  A.Trace$parseV8_closure.prototype = {
    call$1(line) {
      return !B.JSString_methods.startsWith$1(A._asString(line), $.$get$_v8TraceLine());
    },
    $signature: 8
  };
  A.Trace$parseJSCore_closure.prototype = {
    call$1(line) {
      return A._asString(line) !== "\tat ";
    },
    $signature: 8
  };
  A.Trace$parseFirefox_closure.prototype = {
    call$1(line) {
      A._asString(line);
      return line.length !== 0 && line !== "[native code]";
    },
    $signature: 8
  };
  A.Trace$parseFriendly_closure.prototype = {
    call$1(line) {
      return !B.JSString_methods.startsWith$1(A._asString(line), "=====");
    },
    $signature: 8
  };
  A.Trace_foldFrames_closure.prototype = {
    call$1(frame) {
      var t1;
      if (this.oldPredicate.call$1(frame))
        return true;
      if (frame.get$isCore())
        return true;
      if (frame.get$$package() === "stack_trace")
        return true;
      t1 = frame.get$member();
      t1.toString;
      if (!B.JSString_methods.contains$1(t1, "<async>"))
        return false;
      return frame.get$line() == null;
    },
    $signature: 102
  };
  A.Trace_foldFrames_closure0.prototype = {
    call$1(frame) {
      var t1, t2;
      type$.Frame._as(frame);
      if (frame instanceof A.UnparsedFrame || !this._box_0.predicate.call$1(frame))
        return frame;
      t1 = frame.get$library();
      t2 = $.$get$_terseRegExp();
      return new A.Frame(A.Uri_parse(A.stringReplaceAllUnchecked(t1, t2, "")), null, null, frame.get$member());
    },
    $signature: 206
  };
  A.Trace_toString_closure0.prototype = {
    call$1(frame) {
      return type$.Frame._as(frame).get$location().length;
    },
    $signature: 113
  };
  A.Trace_toString_closure.prototype = {
    call$1(frame) {
      type$.Frame._as(frame);
      if (frame instanceof A.UnparsedFrame)
        return frame.toString$0(0) + "\n";
      return B.JSString_methods.padRight$1(frame.get$location(), this.longest) + "  " + A.S(frame.get$member()) + "\n";
    },
    $signature: 136
  };
  A.UnparsedFrame.prototype = {
    toString$0(_) {
      return this.member;
    },
    $isFrame: 1,
    get$uri() {
      return this.uri;
    },
    get$line() {
      return null;
    },
    get$column() {
      return null;
    },
    get$isCore() {
      return false;
    },
    get$library() {
      return "unparsed";
    },
    get$$package() {
      return null;
    },
    get$location() {
      return "unparsed";
    },
    get$member() {
      return this.member;
    }
  };
  A.TestHandle.prototype = {
    markPending$0() {
      var t2,
        t1 = this._invoker;
      if (!A._asBool($.Zone__current.$index(0, t1._forceOpenForTearDownKey)) && (t1._onCloseCompleter.future._state & 30) !== 0)
        throw A.wrapException(new A.ClosedException());
      t2 = $.Zone__current;
      t1.addOutstandingCallback$0();
      return new A.OutstandingWork(t1, t2);
    }
  };
  A.OutstandingWork.prototype = {
    complete$0() {
      var _this = this;
      if (_this._isComplete)
        return;
      _this._isComplete = true;
      _this._hooks$_zone.run$1$1(_this._invoker.get$removeOutstandingCallback(), type$.void);
    }
  };
  A.OutsideTestException.prototype = {$isException: 1};
  A.ClosedException.prototype = {
    toString$0(_) {
      return "This test has been closed.";
    },
    $isException: 1
  };
  A.Compiler.prototype = {
    _enumToString$0() {
      return "Compiler." + this._name;
    },
    toString$0(_) {
      return this.name;
    }
  };
  A.Timeout.prototype = {
    merge$1(other) {
      var t1, t2;
      if (this.$eq(0, B.Timeout_null_null) || other.$eq(0, B.Timeout_null_null))
        return B.Timeout_null_null;
      t1 = other.duration;
      if (t1 != null)
        return new A.Timeout(t1, null);
      t1 = this.duration;
      if (t1 != null) {
        t2 = other.scaleFactor;
        t2.toString;
        return new A.Timeout(new A.Duration(B.JSInt_methods.round$0(t1._duration * t2)), null);
      }
      t1 = this.scaleFactor;
      t1.toString;
      t2 = other.scaleFactor;
      t2.toString;
      return new A.Timeout(null, t1 * t2);
    },
    apply$1(base) {
      var t1;
      if (this.$eq(0, B.Timeout_null_null))
        return null;
      t1 = this.duration;
      if (t1 == null) {
        t1 = this.scaleFactor;
        t1.toString;
        t1 = new A.Duration(B.JSInt_methods.round$0(base._duration * t1));
      }
      return t1;
    },
    get$hashCode(_) {
      return (J.get$hashCode$(this.duration) ^ 5 * J.get$hashCode$(this.scaleFactor)) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Timeout && J.$eq$(other.duration, this.duration) && other.scaleFactor == this.scaleFactor;
    },
    toString$0(_) {
      var t1 = this.duration;
      if (t1 != null)
        return t1.toString$0(0);
      t1 = this.scaleFactor;
      if (t1 != null)
        return A.S(t1) + "x";
      return "none";
    }
  };
  A.Declarer.prototype = {
    test$10$location$onPlatform$retry$skip$solo$tags$testOn$timeout($name, body, $location, onPlatform, retry, skip, solo, tags, testOn, timeout) {
      var t1, fullName, newMetadata, metadata, _this = this;
      type$.dynamic_Function._as(body);
      _this._checkNotBuilt$1("test");
      t1 = _this._declarer$_name;
      if (t1 == null)
        fullName = $name;
      else
        fullName = t1 + " " + $name;
      newMetadata = A.Metadata$parse(onPlatform, retry, skip, tags, testOn, timeout);
      newMetadata.validatePlatformSelectors$1(_this._platformVariables);
      metadata = _this._metadata.merge$1(newMetadata);
      _this._addEntry$1(new A.LocalTest(fullName, metadata, null, $location, false, new A.Declarer_test_closure(_this, body), false));
    },
    group$10$location$onPlatform$retry$skip$solo$tags$testOn$timeout($name, body, $location, onPlatform, retry, skip, solo, tags, testOn, timeout) {
      var t1, fullTestPrefix, newMetadata, metadata, declarer, _this = this;
      type$.void_Function._as(body);
      _this._checkNotBuilt$1("group");
      t1 = _this._declarer$_name;
      if (t1 == null)
        fullTestPrefix = $name;
      else
        fullTestPrefix = t1 + " " + $name;
      newMetadata = A.Metadata$parse(onPlatform, retry, skip, tags, testOn, timeout);
      t1 = _this._platformVariables;
      newMetadata.validatePlatformSelectors$1(t1);
      metadata = _this._metadata.merge$1(newMetadata);
      declarer = A.Declarer$_(_this, fullTestPrefix, metadata, t1, false, null, $location, false, _this._fullTestName, _this._seenNames, true);
      t1 = type$.nullable_Object;
      A.runZoned(type$.Null_Function._as(new A.Declarer_group_closure(body)), null, A.LinkedHashMap_LinkedHashMap$_literal([B.Symbol_KFY, declarer], t1, t1), type$.Null);
      _this._addEntry$1(declarer.build$0());
      t1 = declarer._soloEntries.length;
      if (t1 !== 0)
        B.JSArray_methods.add$1(_this._soloEntries, B.JSArray_methods.get$last(_this._entries));
    },
    build$0() {
      var t1, t2, t3, entries, _this = this;
      _this._checkNotBuilt$1("build");
      _this._built = true;
      t1 = _this._entries;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,GroupEntry>");
      entries = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("GroupEntry(1)")._as(new A.Declarer_build_closure(_this)), t3), t3._eval$1("ListIterable.E"));
      t1 = _this._declarer$_name;
      if (t1 == null)
        t1 = "";
      return A.Group$(t1, entries, _this._location, _this._metadata, _this.get$_setUpAll(), _this.get$_tearDownAll(), _this._declarer$_trace);
    },
    _checkNotBuilt$1($name) {
      if (!this._built)
        return;
      throw A.wrapException(A.StateError$("Can't call " + $name + "() once tests have begun running.\nWhen running a test as an executable directly (not as a suite by the test runner), tests must be declared in a synchronous block.\nIf async work is required before any tests are run use a `setUpAll` callback.\nIf async work cannot be avoided before declaring tests, all async events must be complete before declaring the first test."));
    },
    _runSetUps$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$self = this, t1;
      var $async$_runSetUps$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._parent;
              $async$goto = t1 != null ? 2 : 3;
              break;
            case 2:
              // then
              $async$goto = 4;
              return A._asyncAwait(t1._runSetUps$0(), $async$_runSetUps$0);
            case 4:
              // returning from await.
            case 3:
              // join
              $async$goto = 5;
              return A._asyncAwait(A.Future_forEach($async$self._setUps, new A.Declarer__runSetUps_closure(), type$.Function), $async$_runSetUps$0);
            case 5:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_runSetUps$0, $async$completer);
    },
    get$_setUpAll() {
      return null;
    },
    get$_tearDownAll() {
      var _this = this,
        t1 = _this._tearDownAlls.length;
      if (t1 === 0)
        return null;
      t1 = _this._declarer$_name;
      if (t1 == null)
        t1 = "(tearDownAll)";
      else
        t1 += " (tearDownAll)";
      return new A.LocalTest(t1, _this._metadata.change$1$timeout(B.Timeout_Duration_720000000_null), null, null, true, new A.Declarer__tearDownAll_closure(_this), false);
    },
    _addEntry$1(entry) {
      var t1 = this._seenNames;
      if ((t1 == null ? null : t1.add$1(0, entry.get$name())) === false)
        throw A.wrapException(new A.DuplicateTestNameException(entry.get$name()));
      B.JSArray_methods.add$1(this._entries, entry);
    }
  };
  A.Declarer_test_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, declarer, declarer0, t1, t2, t3, t4, t5, t6, t7, _i, tearDown, t8, t9, parents;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              parents = A._setArrayType([], type$.JSArray_Declarer);
              for (declarer = $async$self.$this, declarer0 = declarer; declarer0 != null; declarer0 = declarer0._parent)
                B.JSArray_methods.add$1(parents, declarer0);
              for (t1 = type$.ReversedListIterable_Declarer, t2 = new A.ReversedListIterable(parents, t1), t2 = new A.ListIterator(t2, t2.get$length(0), t1._eval$1("ListIterator<ListIterable.E>")), t3 = type$.nullable_Invoker, t4 = type$.dynamic_Function, t5 = type$.nullable_Declarer, t1 = t1._eval$1("ListIterable.E"); t2.moveNext$0();) {
                t6 = t2.__internal$_current;
                for (t6 = (t6 == null ? t1._as(t6) : t6)._tearDowns, t7 = t6.length, _i = 0; _i < t6.length; t6.length === t7 || (0, A.throwConcurrentModificationError)(t6), ++_i) {
                  tearDown = t6[_i];
                  t8 = t3._as($.Zone__current.$index(0, B.Symbol_gK7));
                  t8.toString;
                  t4._as(tearDown);
                  if (!A._asBool($.Zone__current.$index(0, t8._forceOpenForTearDownKey)) && (t8._onCloseCompleter.future._state & 30) !== 0)
                    A.throwExpression(new A.ClosedException());
                  t9 = t8.__Invoker__controller_F;
                  t9 === $ && A.throwLateFieldNI("_controller");
                  if (t9.test.isScaffoldAll)
                    B.JSArray_methods.add$1(t5._as($.Zone__current.$index(0, B.Symbol_KFY))._tearDownAlls, tearDown);
                  else
                    B.JSArray_methods.add$1(t8._invoker$_tearDowns, tearDown);
                }
              }
              t1 = type$.nullable_Object;
              $async$goto = 2;
              return A._asyncAwait(A.runZoned(new A.Declarer_test__closure(declarer, $async$self.body), null, A.LinkedHashMap_LinkedHashMap$_literal([B.Symbol_KFY, declarer], t1, t1), type$.Future_Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 14
  };
  A.Declarer_test__closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self.$this._runSetUps$0(), $async$call$0);
            case 2:
              // returning from await.
              t1 = $async$self.body.call$0();
              $async$goto = 3;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.dynamic), $async$call$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.Declarer_group_closure.prototype = {
    call$0() {
      if (!(this.body.call$0() instanceof A._Future))
        return;
      throw A.wrapException(A.ArgumentError$("Groups may not be async.", null));
    },
    $signature: 1
  };
  A.Declarer_build_closure.prototype = {
    call$1(entry) {
      var t1;
      type$.GroupEntry._as(entry);
      t1 = this.$this._soloEntries;
      return t1.length !== 0 && !B.JSArray_methods.contains$1(t1, entry) ? new A.LocalTest(entry.get$name(), entry.get$metadata().change$2$skip$skipReason(true, 'does not have "solo"'), null, null, false, new A.Declarer_build__closure(), true) : entry;
    },
    $signature: 204
  };
  A.Declarer_build__closure.prototype = {
    call$0() {
    },
    $signature: 2
  };
  A.Declarer__runSetUps_closure.prototype = {
    call$1(setUp) {
      return type$.Function._as(setUp).call$0();
    },
    $signature: 201
  };
  A.Declarer__tearDownAll_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = type$.nullable_Object;
      return A.runZoned(new A.Declarer__tearDownAll__closure(t1), null, A.LinkedHashMap_LinkedHashMap$_literal([B.Symbol_KFY, t1], t2, t2), type$.void);
    },
    $signature: 2
  };
  A.Declarer__tearDownAll__closure.prototype = {
    call$0() {
      return type$.nullable_Invoker._as($.Zone__current.$index(0, B.Symbol_gK7)).runTearDowns$1(this.$this._tearDownAlls);
    },
    $signature: 2
  };
  A.DuplicateTestNameException.prototype = {
    toString$0(_) {
      return 'A test with the name "' + this.name + '" was already declared. Test cases must have unique names.\n\nSee https://github.com/dart-lang/test/blob/master/pkgs/test/doc/configuration.md#allow_test_randomization for info on enabling this.';
    },
    $isException: 1
  };
  A.Group.prototype = {
    Group$7$location$metadata$setUpAll$tearDownAll$trace($name, entries, $location, metadata, setUpAll, tearDownAll, trace) {
      var t1, _i;
      for (t1 = entries.length, _i = 0; _i < entries.length; entries.length === t1 || (0, A.throwConcurrentModificationError)(entries), ++_i)
        entries[_i].set$parent(this);
    },
    forPlatform$1(platform) {
      var newMetadata, filtered, t2, _this = this, _null = null,
        t1 = _this.metadata;
      if (!t1.testOn.evaluate$1(platform))
        return _null;
      newMetadata = t1.forPlatform$1(platform);
      filtered = _this._group$_map$1(new A.Group_forPlatform_closure(platform));
      if (filtered.length === 0 && _this.entries.length !== 0)
        return _null;
      t1 = _this.setUpAll;
      t1 = t1 == null ? _null : t1.forPlatform$1(platform);
      t2 = _this.tearDownAll;
      t2 = t2 == null ? _null : t2.forPlatform$1(platform);
      return A.Group$(_this.name, filtered, _this.location, newMetadata, t1, t2, _this.trace);
    },
    _group$_map$1(callback) {
      var t1 = this.entries,
        t2 = A._arrayInstanceType(t1),
        t3 = type$.WhereTypeIterable_GroupEntry;
      t1 = A.List_List$_of(new A.WhereTypeIterable(new A.MappedListIterable(t1, t2._eval$1("GroupEntry?(1)")._as(new A.Group__map_closure(type$.nullable_GroupEntry_Function_GroupEntry._as(callback))), t2._eval$1("MappedListIterable<1,GroupEntry?>")), t3), t3._eval$1("Iterable.E"));
      return t1;
    },
    set$parent($parent) {
      type$.nullable_Group._as($parent);
    },
    $isGroupEntry: 1,
    get$name() {
      return this.name;
    },
    get$metadata() {
      return this.metadata;
    }
  };
  A.Group_forPlatform_closure.prototype = {
    call$1(entry) {
      return entry.forPlatform$1(this.platform);
    },
    $signature: 125
  };
  A.Group__map_closure.prototype = {
    call$1(entry) {
      return this.callback.call$1(type$.GroupEntry._as(entry));
    },
    $signature: 125
  };
  A.LocalTest.prototype = {
    load$2$groups(suite, groups) {
      var t1, invoker;
      type$.nullable_Iterable_Group._as(groups);
      t1 = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void);
      invoker = new A.Invoker(this._guarded, new A.Object(), t1, A._setArrayType([], type$.JSArray_Zone), new A.Object(), A._setArrayType([], type$.JSArray_of_void_Function), A._setArrayType([], type$.JSArray_String));
      t1 = A.LiveTestController$(suite, this, invoker.get$_onRun(), type$.void_Function_$opt_void._as(t1.get$complete()), groups);
      invoker.__Invoker__controller_F !== $ && A.throwLateFieldAI("_controller");
      return invoker.__Invoker__controller_F = t1;
    },
    forPlatform$1(platform) {
      var _this = this,
        t1 = _this.metadata;
      if (!t1.testOn.evaluate$1(platform))
        return null;
      return new A.LocalTest(_this.name, t1.forPlatform$1(platform), _this.trace, _this.location, _this.isScaffoldAll, _this._body, _this._guarded);
    },
    get$name() {
      return this.name;
    },
    get$metadata() {
      return this.metadata;
    }
  };
  A.Invoker.prototype = {
    get$_outstandingCallbacks() {
      var counter = type$.nullable__AsyncCounter._as($.Zone__current.$index(0, this._counterKey));
      if (counter != null)
        return counter;
      throw A.wrapException(A.StateError$("Can't add or remove outstanding callbacks outside of a test body."));
    },
    addOutstandingCallback$0() {
      if (!A._asBool($.Zone__current.$index(0, this._forceOpenForTearDownKey)) && (this._onCloseCompleter.future._state & 30) !== 0)
        throw A.wrapException(new A.ClosedException());
      ++this.get$_outstandingCallbacks()._count;
    },
    removeOutstandingCallback$0() {
      this.heartbeat$0();
      this.get$_outstandingCallbacks().decrement$0();
    },
    runTearDowns$1(tearDowns) {
      var t1;
      type$.List_of_void_Function._as(tearDowns);
      this.heartbeat$0();
      t1 = type$.nullable_Object;
      return A.runZoned(new A.Invoker_runTearDowns_closure(this, tearDowns), null, A.LinkedHashMap_LinkedHashMap$_literal([this._forceOpenForTearDownKey, true], t1, t1), type$.Future_void);
    },
    _waitForOutstandingCallbacks$1(fn) {
      var t2, counter, t3, _this = this, t1 = {};
      type$.void_Function._as(fn);
      _this.heartbeat$0();
      t1.zone = null;
      t2 = new A._Future($.Zone__current, type$._Future_void);
      counter = new A._AsyncCounter(new A._AsyncCompleter(t2, type$._AsyncCompleter_void));
      t3 = type$.nullable_Object;
      A.runZoned(new A.Invoker__waitForOutstandingCallbacks_closure(t1, _this, fn, counter), null, A.LinkedHashMap_LinkedHashMap$_literal([_this._counterKey, counter], t3, t3), type$.Future_Null);
      return t2.whenComplete$1(new A.Invoker__waitForOutstandingCallbacks_closure0(t1, _this));
    },
    heartbeat$0() {
      var t2, timeout, _this = this,
        t1 = _this.__Invoker__controller_F;
      t1 === $ && A.throwLateFieldNI("_controller");
      if (t1.state.status === B.Status_2)
        return;
      t2 = _this._timeoutTimer;
      if (t2 != null)
        t2.cancel$0();
      timeout = t1.test.metadata.timeout.apply$1(B.Duration_30000000);
      if (timeout == null)
        return;
      _this._timeoutTimer = A.Timer__createTimer(timeout, type$.void_Function._as(new A.Invoker_heartbeat_closure(_this, new A.Invoker_heartbeat_message(timeout), timeout)));
    },
    _invoker$_handleError$3(zone, error, stackTrace) {
      var t2, t3, t4, shouldBeDone, _this = this, t1 = {};
      t1.stackTrace = stackTrace;
      if (_this._runCount !== zone.$index(0, B.Symbol_runCount))
        return;
      zone.run$1$1(new A.Invoker__handleError_closure(t1), type$.Null);
      t2 = _this.__Invoker__controller_F;
      t2 === $ && A.throwLateFieldNI("_controller");
      t3 = t2.state;
      if (t3.status === B.Status_2) {
        t4 = t3.result;
        shouldBeDone = t4 === B.Result_0 || t4 === B.Result_1;
      } else
        shouldBeDone = false;
      if (!(error instanceof A.TestFailure))
        t2.setState$1(B.State_Status_2_Result_3);
      else if (t3.result !== B.Result_3)
        t2.setState$1(B.State_Status_2_Result_2);
      t3 = t1.stackTrace;
      t3.toString;
      t2.addError$2(error, t3);
      t3 = _this._printsOnFailure;
      if (t3.length !== 0) {
        t2.message$1(new A.Message(B.MessageType_print, B.JSArray_methods.join$1(t3, "\n\n")));
        B.JSArray_methods.clear$0(t3);
      }
      if (!shouldBeDone)
        return;
      _this._invoker$_handleError$3(zone, "This test failed after it had already completed.\nMake sure to use a matching library which informs the test runner\nof pending async work.", t1.stackTrace);
    },
    _invoker$_handleError$2(zone, error) {
      return this._invoker$_handleError$3(zone, error, null);
    },
    _onRun$0() {
      var t1 = this.__Invoker__controller_F;
      t1 === $ && A.throwLateFieldNI("_controller");
      t1.setState$1(B.State_Status_1_Result_0);
      ++this._runCount;
      t1.test.metadata.get$chainStackTraces();
      A.Chain_capture(new A.Invoker__onRun_closure(this), false, false, type$.Null);
    }
  };
  A.Invoker_guard_closure.prototype = {
    call$5($self, _, zone, error, stackTrace) {
      var invoker;
      A._asObject(error);
      type$.StackTrace._as(stackTrace);
      invoker = type$.nullable_Invoker._as(zone.$index(0, B.Symbol_gK7));
      if (invoker != null)
        $self.get$parent().run$1$1(new A.Invoker_guard__closure(invoker, zone, error, stackTrace), type$.void);
      else
        $self.get$parent().handleUncaughtError$2(error, stackTrace);
    },
    $signature: 195
  };
  A.Invoker_guard__closure.prototype = {
    call$0() {
      var _this = this;
      return _this.invoker._invoker$_handleError$3(_this.zone, _this.error, _this.stackTrace);
    },
    $signature: 2
  };
  A.Invoker_runTearDowns_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3, t4, t5, t6, t7, t8;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tearDowns, t2 = $async$self.$this, t3 = type$.void, t4 = type$._Future_void, t5 = type$._AsyncCompleter_void, t6 = t2._onCloseCompleter.future;
            case 2:
              // for condition
              if (!(t1.length !== 0)) {
                // goto after for
                $async$goto = 3;
                break;
              }
              t7 = $.Zone__current;
              t8 = new A._Future(t7, t4);
              if (!A._asBool(t7.$index(0, t2._forceOpenForTearDownKey)) && (t6._state & 30) !== 0)
                A.throwExpression(new A.ClosedException());
              ++t2.get$_outstandingCallbacks()._count;
              t2._waitForOutstandingCallbacks$1(new A.Invoker_runTearDowns__closure(t1, new A._AsyncCompleter(t8, t5))).then$1$1(new A.Invoker_runTearDowns__closure0(t2), t3);
              $async$goto = 4;
              return A._asyncAwait(t8, $async$call$0);
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 14
  };
  A.Invoker_runTearDowns__closure.prototype = {
    call$0() {
      var t1 = this.tearDowns;
      if (0 >= t1.length)
        return A.ioore(t1, -1);
      A.Future_Future$sync(t1.pop(), type$.void).whenComplete$1(type$.void_Function_$opt_void._as(this.completer.get$complete()));
    },
    $signature: 1
  };
  A.Invoker_runTearDowns__closure0.prototype = {
    call$1(_) {
      var t1 = this.$this;
      t1.heartbeat$0();
      t1.get$_outstandingCallbacks().decrement$0();
      return null;
    },
    $signature: 116
  };
  A.Invoker__waitForOutstandingCallbacks_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$next = [], $async$self = this, t1, zone;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              zone = $.Zone__current;
              $async$self._box_0.zone = zone;
              B.JSArray_methods.add$1($async$self.$this._outstandingCallbackZones, zone);
              $async$handler = 2;
              t1 = $async$self.fn.call$0();
              $async$goto = 5;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$0);
            case 5:
              // returning from await.
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              $async$self.counter.decrement$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.Invoker__waitForOutstandingCallbacks_closure0.prototype = {
    call$0() {
      var t1 = this._box_0.zone;
      t1.toString;
      B.JSArray_methods.remove$1(this.$this._outstandingCallbackZones, t1);
    },
    $signature: 1
  };
  A.Invoker_heartbeat_message.prototype = {
    call$0() {
      var message,
        t1 = this.timeout._duration,
        minutes = B.JSInt_methods._tdivFast$1(t1, 60000000),
        seconds = B.JSInt_methods.$mod(B.JSInt_methods._tdivFast$1(t1, 1000000), 60),
        decaseconds = B.JSInt_methods._tdivFast$1(B.JSInt_methods.$mod(B.JSInt_methods._tdivFast$1(t1, 1000), 1000), 100),
        t2 = minutes !== 0,
        t3 = t2 ? "" + minutes + " minutes" : "";
      if (!t2 || seconds !== 0) {
        t2 = t2 ? t3 + ", " : t3;
        t2 += seconds;
        t2 = (decaseconds !== 0 ? t2 + ("." + decaseconds) : t2) + " seconds";
      } else
        t2 = t3;
      message = "Test timed out after " + (t2.charCodeAt(0) == 0 ? t2 : t2) + ".";
      return t1 === 30000000 ? message + " See https://pub.dev/packages/test#timeouts" : message;
    },
    $signature: 18
  };
  A.Invoker_heartbeat_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      B.JSArray_methods.get$last(t1._outstandingCallbackZones).run$1$1(new A.Invoker_heartbeat__closure(t1, this.message, this.timeout), type$.Null);
    },
    $signature: 2
  };
  A.Invoker_heartbeat__closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._invoker$_handleError$2($.Zone__current, new A.TimeoutException(this.message.call$0(), this.timeout));
      t1 = t1.get$_outstandingCallbacks()._invoker$_completer;
      if ((t1.future._state & 30) === 0)
        t1.complete$0();
    },
    $signature: 1
  };
  A.Invoker__handleError_closure.prototype = {
    call$0() {
      var t1 = this._box_0,
        t2 = t1.stackTrace;
      if (t2 == null)
        t1.stackTrace = A.Chain_Chain$current();
      else
        t1.stackTrace = A.Chain_Chain$forTrace(t2);
    },
    $signature: 1
  };
  A.Invoker__onRun_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = type$.void_Function._as(new A.Invoker__onRun__closure(t1));
      if (t1._guarded)
        A.Invoker_guard(t2, type$.void);
      else
        t2.call$0();
    },
    $signature: 1
  };
  A.Invoker__onRun__closure.prototype = {
    call$0() {
      var _null = null,
        t1 = this.$this,
        t2 = type$.nullable_Object;
      A.runZoned(new A.Invoker__onRun___closure(t1), new A._ZoneSpecification(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, new A.Invoker__onRun___closure0(t1), _null), A.LinkedHashMap_LinkedHashMap$_literal([B.Symbol_gK7, t1, t1._forceOpenForTearDownKey, false, B.Symbol_runCount, t1._runCount], t2, t2), type$.Future_Null);
    },
    $signature: 2
  };
  A.Invoker__onRun___closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, t1, t2, t3, t4, t5;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future(new A.Invoker__onRun____closure(), type$.Null), $async$call$0);
            case 3:
              // returning from await.
              t1 = $async$self.$this;
              t2 = t1.__Invoker__controller_F;
              t2 === $ && A.throwLateFieldNI("_controller");
              $async$goto = 4;
              return A._asyncAwait(t1._waitForOutstandingCallbacks$1(t2.test._body), $async$call$0);
            case 4:
              // returning from await.
              $async$goto = 5;
              return A._asyncAwait(t1._waitForOutstandingCallbacks$1(new A.Invoker__onRun____closure0(t1)), $async$call$0);
            case 5:
              // returning from await.
              t3 = t1._timeoutTimer;
              if (t3 != null)
                t3.cancel$0();
              t3 = t2.state.result;
              if (t3 !== B.Result_0) {
                t4 = t1._runCount;
                t5 = t2.test.metadata._retry;
                t4 = t4 < (t5 == null ? 0 : t5) + 1;
              } else
                t4 = false;
              if (t4) {
                t2.message$1(new A.Message(B.MessageType_print, "Retry: " + t2.test.name));
                t1._onRun$0();
                // goto return
                $async$goto = 1;
                break;
              }
              t2.setState$1(new A.State(B.Status_2, t3));
              t2.completer.complete$0();
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.Invoker__onRun____closure.prototype = {
    call$0() {
    },
    $signature: 1
  };
  A.Invoker__onRun____closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      return t1.runTearDowns$1(t1._invoker$_tearDowns);
    },
    $signature: 14
  };
  A.Invoker__onRun___closure0.prototype = {
    call$4(_, __, ___, line) {
      var t1;
      A._asString(line);
      t1 = this.$this.__Invoker__controller_F;
      t1 === $ && A.throwLateFieldNI("_controller");
      return t1.message$1(new A.Message(B.MessageType_print, line));
    },
    $signature: 122
  };
  A._AsyncCounter.prototype = {
    decrement$0() {
      if (--this._count !== 0)
        return;
      var t1 = this._invoker$_completer;
      if ((t1.future._state & 30) !== 0)
        return;
      t1.complete$0();
    }
  };
  A.LiveTest.prototype = {};
  A.LiveTestController.prototype = {
    addError$2(error, stackTrace) {
      var t2, asyncError,
        t1 = this._live_test_controller$_onError;
      if ((t1._state & 4) !== 0)
        return;
      t2 = A.Chain_Chain$forTrace(stackTrace);
      asyncError = new A.AsyncError(error, t2);
      B.JSArray_methods.add$1(this._errors, asyncError);
      t1.add$1(0, asyncError);
    },
    setState$1(newState) {
      var _this = this;
      if ((_this._live_test_controller$_onError._state & 4) !== 0)
        return;
      if (_this.state.$eq(0, newState))
        return;
      _this.state = newState;
      _this._onStateChange.add$1(0, newState);
    },
    message$1(message) {
      var t1 = this._onMessage;
      if (t1._firstSubscription != null)
        t1.add$1(0, message);
      else
        A.printString(message.text);
    },
    run$0() {
      var _this = this;
      if (_this._live_test_controller$_runCalled)
        throw A.wrapException(A.StateError$("LiveTest.run() may not be called more than once."));
      else if ((_this._live_test_controller$_onError._state & 4) !== 0)
        throw A.wrapException(A.StateError$("LiveTest.run() may not be called for a closed test."));
      _this._live_test_controller$_runCalled = true;
      _this._live_test_controller$_onRun.call$0();
      return _this.completer.future;
    },
    close$0() {
      var _this = this,
        t1 = _this._live_test_controller$_onError;
      if ((t1._state & 4) !== 0)
        return _this.completer.future;
      _this._onStateChange.close$0();
      t1.close$0();
      if (_this._live_test_controller$_runCalled)
        _this._live_test_controller$_onClose.call$0();
      else
        _this.completer.complete$0();
      return _this.completer.future;
    }
  };
  A.Message.prototype = {};
  A.MessageType.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.Metadata.prototype = {
    get$chainStackTraces() {
      return false;
    },
    _validateTags$0() {
      var t1 = this.tags.where$1(0, new A.Metadata__validateTags_closure()),
        t2 = t1.$ti,
        t3 = t2._eval$1("MappedIterable<1,String>"),
        invalidTags = A.List_List$_of(new A.MappedIterable(t1, t2._eval$1("String(1)")._as(new A.Metadata__validateTags_closure0()), t3), t3._eval$1("Iterable.E"));
      t1 = invalidTags.length;
      if (t1 === 0)
        return;
      throw A.wrapException(A.ArgumentError$("Invalid " + A.pluralize("tag", t1) + " " + A.toSentence(invalidTags) + ". Tags must be (optionally hyphenated) Dart identifiers.", null));
    },
    validatePlatformSelectors$1(validVariables) {
      type$.Set_String._as(validVariables);
      this.testOn.validate$1(validVariables);
      this.onPlatform.forEach$1(0, new A.Metadata_validatePlatformSelectors_closure(validVariables));
    },
    merge$1(other) {
      var t4, t5, t6, t7, t8, _this = this,
        t1 = _this.testOn.intersection$1(other.testOn),
        t2 = _this.timeout.merge$1(other.timeout),
        t3 = other._skip;
      if (t3 == null)
        t3 = _this._skip;
      t4 = other.skipReason;
      if (t4 == null)
        t4 = _this.skipReason;
      t5 = other._retry;
      if (t5 == null)
        t5 = _this._retry;
      t6 = _this.tags.union$1(other.tags);
      t7 = type$.Metadata;
      t8 = A.mergeMaps(_this.onPlatform, other.onPlatform, new A.Metadata_merge_closure(), type$.PlatformSelector, t7);
      t7 = A.mergeMaps(_this.forTag, other.forTag, new A.Metadata_merge_closure0(), type$.BooleanSelector, t7);
      return A.Metadata_Metadata(_this._chainStackTraces, t7, _this.languageVersionComment, t8, t5, t3, t4, t6, t1, t2, _this._verboseTrace);
    },
    change$4$onPlatform$skip$skipReason$timeout(onPlatform, skip, skipReason, timeout) {
      var _this = this;
      type$.nullable_Map_PlatformSelector_Metadata._as(onPlatform);
      if (timeout == null)
        timeout = _this.timeout;
      if (skip == null)
        skip = _this._skip;
      if (skipReason == null)
        skipReason = _this.skipReason;
      if (onPlatform == null)
        onPlatform = _this.onPlatform;
      return A.Metadata_Metadata(_this._chainStackTraces, _this.forTag, _this.languageVersionComment, onPlatform, _this._retry, skip, skipReason, _this.tags, _this.testOn, timeout, _this._verboseTrace);
    },
    change$1$timeout(timeout) {
      return this.change$4$onPlatform$skip$skipReason$timeout(null, null, null, timeout);
    },
    change$2$skip$skipReason(skip, skipReason) {
      return this.change$4$onPlatform$skip$skipReason$timeout(null, skip, skipReason, null);
    },
    change$1$onPlatform(onPlatform) {
      return this.change$4$onPlatform$skip$skipReason$timeout(onPlatform, null, null, null);
    },
    forPlatform$1(platform) {
      var t1 = {},
        t2 = this.onPlatform;
      if (t2.get$isEmpty(t2))
        return this;
      t1.metadata = this;
      t2.forEach$1(0, new A.Metadata_forPlatform_closure(t1, platform));
      return t1.metadata.change$1$onPlatform(A.LinkedHashMap_LinkedHashMap$_empty(type$.PlatformSelector, type$.Metadata));
    }
  };
  A.Metadata_Metadata_unresolved.prototype = {
    call$0() {
      var _this = this,
        t1 = _this._box_0,
        t2 = t1.tags;
      return A.Metadata$_(_this.chainStackTraces, t1.forTag, _this.languageVersionComment, _this.onPlatform, _this.retry, _this.skip, _this.skipReason, t2, _this.testOn, _this.timeout, _this.verboseTrace);
    },
    $signature: 194
  };
  A.Metadata_Metadata_closure.prototype = {
    call$2(merged, selector) {
      var t1, t2;
      type$.Metadata._as(merged);
      type$.BooleanSelector._as(selector);
      t1 = this._box_0;
      t2 = t1.tags;
      if (!selector.evaluate$1(t2.get$contains(t2)))
        return merged;
      t1 = t1.forTag.remove$1(0, selector);
      t1.toString;
      return merged.merge$1(t1);
    },
    $signature: 193
  };
  A.Metadata__validateTags_closure.prototype = {
    call$1(tag) {
      return !B.JSString_methods.contains$1(A._asString(tag), $.$get$anchoredHyphenatedIdentifier());
    },
    $signature: 8
  };
  A.Metadata__validateTags_closure0.prototype = {
    call$1(tag) {
      return '"' + A._asString(tag) + '"';
    },
    $signature: 31
  };
  A.Metadata_validatePlatformSelectors_closure.prototype = {
    call$2(selector, metadata) {
      var t1;
      type$.PlatformSelector._as(selector);
      type$.Metadata._as(metadata);
      t1 = this.validVariables;
      selector.validate$1(t1);
      metadata.validatePlatformSelectors$1(t1);
    },
    $signature: 115
  };
  A.Metadata_merge_closure.prototype = {
    call$2(metadata1, metadata2) {
      var t1 = type$.Metadata;
      return t1._as(metadata1).merge$1(t1._as(metadata2));
    },
    $signature: 114
  };
  A.Metadata_merge_closure0.prototype = {
    call$2(metadata1, metadata2) {
      var t1 = type$.Metadata;
      return t1._as(metadata1).merge$1(t1._as(metadata2));
    },
    $signature: 114
  };
  A.Metadata_forPlatform_closure.prototype = {
    call$2(platformSelector, platformMetadata) {
      var t1;
      type$.PlatformSelector._as(platformSelector);
      type$.Metadata._as(platformMetadata);
      if (!platformSelector.evaluate$1(this.platform))
        return;
      t1 = this._box_0;
      t1.metadata = t1.metadata.merge$1(platformMetadata);
    },
    $signature: 115
  };
  A.OperatingSystem.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.PlatformSelector.prototype = {
    validate$1(validVariables) {
      type$.Set_String._as(validVariables);
      if (this === B.PlatformSelector_All)
        return;
      A.PlatformSelector__wrapFormatException(new A.PlatformSelector_validate_closure(this, validVariables), null, type$.void);
    },
    evaluate$1(platform) {
      return this._inner.evaluate$1(new A.PlatformSelector_evaluate_closure(platform));
    },
    intersection$1(other) {
      var t1 = other._inner,
        t2 = t1.$eq(0, B.C_All);
      if (t2)
        return this;
      return new A.PlatformSelector(this._inner.intersection$1(t1));
    },
    toString$0(_) {
      return this._inner.toString$0(0);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.PlatformSelector && this._inner.$eq(0, other._inner);
    },
    get$hashCode(_) {
      var t1 = this._inner;
      return t1.get$hashCode(t1);
    }
  };
  A.PlatformSelector_validate_closure.prototype = {
    call$0() {
      return this.$this._inner.validate$1(new A.PlatformSelector_validate__closure(this.validVariables));
    },
    $signature: 2
  };
  A.PlatformSelector_validate__closure.prototype = {
    call$1($name) {
      var t1 = $.$get$_universalValidVariables().contains$1(0, $name);
      return t1;
    },
    $signature: 8
  };
  A.PlatformSelector_evaluate_closure.prototype = {
    call$1(variable) {
      var t1, t2, _this = this;
      A._asString(variable);
      $label0$0: {
        t1 = _this.platform;
        if (variable !== t1.runtime.identifier)
          t1 = variable === t1.os.identifier || variable === t1.compiler.identifier;
        else
          t1 = true;
        t2 = false;
        if (t1) {
          t1 = true;
          break $label0$0;
        }
        if ("dart-vm" === variable) {
          t1 = _this.platform.runtime.isDartVM;
          break $label0$0;
        }
        if ("browser" === variable) {
          t1 = _this.platform.runtime.isBrowser;
          break $label0$0;
        }
        if ("js" === variable) {
          t1 = _this.platform.compiler === B.Compiler_Dart2Js_dart2js_dart2js;
          break $label0$0;
        }
        if ("blink" === variable) {
          t1 = _this.platform.runtime.isBlink;
          break $label0$0;
        }
        if ("posix" === variable) {
          t1 = _this.platform.os;
          t1 = t1 !== B.OperatingSystem_Windows_windows && t1 !== B.OperatingSystem_none_none;
          break $label0$0;
        }
        if ("google" === variable) {
          t1 = t2;
          break $label0$0;
        }
        if ("wasm" === variable) {
          t1 = _this.platform.compiler === B.Compiler_Dart2Wasm_dart2wasm_dart2wasm;
          break $label0$0;
        }
        t1 = t2;
        break $label0$0;
      }
      return t1;
    },
    $signature: 8
  };
  A.Runtime.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.StackTraceFormatter.prototype = {
    formatStackTrace$1(stackTrace) {
      var verbose, chain,
        t1 = type$.nullable_Invoker._as($.Zone__current.$index(0, B.Symbol_gK7));
      if (t1 == null)
        t1 = null;
      else {
        t1.__Invoker__controller_F === $ && A.throwLateFieldNI("_controller");
        t1 = false;
      }
      verbose = t1 === true;
      chain = A.Chain_Chain$forTrace(stackTrace);
      if (verbose)
        return chain;
      return chain.foldFrames$2$terse(new A.StackTraceFormatter_formatStackTrace_closure(this), true);
    }
  };
  A.StackTraceFormatter_formatStackTrace_closure.prototype = {
    call$1(frame) {
      var t1 = this.$this,
        t2 = t1._only;
      if (t2._collection$_length !== 0)
        return !t2.contains$1(0, frame.get$$package());
      return t1._except.contains$1(0, frame.get$$package());
    },
    $signature: 102
  };
  A.State.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.State && this.status === other.status && this.result === other.result;
    },
    get$hashCode(_) {
      return (A.Primitives_objectHashCode(this.status) ^ 7 * A.Primitives_objectHashCode(this.result)) >>> 0;
    },
    toString$0(_) {
      var t1 = this.status;
      if (t1 === B.Status_0)
        return "pending";
      if (t1 === B.Status_2)
        return this.result._name;
      t1 = this.result;
      if (t1 === B.Result_0)
        return "running";
      return "running with " + t1.toString$0(0);
    }
  };
  A.Status.prototype = {
    _enumToString$0() {
      return "Status." + this._name;
    },
    toString$0(_) {
      return this._name;
    }
  };
  A.Result.prototype = {
    _enumToString$0() {
      return "Result." + this._name;
    },
    toString$0(_) {
      return this._name;
    }
  };
  A.Suite.prototype = {};
  A.SuitePlatform.prototype = {};
  A.Test.prototype = {
    set$parent($parent) {
      type$.nullable_Group._as($parent);
    },
    $isGroupEntry: 1
  };
  A.TestFailure.prototype = {
    toString$0(_) {
      return this.message;
    },
    $isException: 1
  };
  A.pumpEventQueue_closure.prototype = {
    call$0() {
      return A.pumpEventQueue(this.times - 1);
    },
    $signature: 103
  };
  A.Engine.prototype = {
    get$_onUnpaused() {
      var t1 = A.Future_Future$value(null, type$.dynamic);
      return t1;
    },
    get$success() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_bool),
        $async$returnValue, $async$self = this, t1;
      var $async$get$success = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(A._setArrayType([$async$self._group._future_group$_completer.future, $async$self._runPool._pool$_closeMemo._async_memoizer$_completer.future], type$.JSArray_Future_dynamic), true, type$.dynamic), $async$get$success);
            case 3:
              // returning from await.
              t1 = $async$self._closedBeforeDone;
              t1.toString;
              if (t1) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = $async$self.get$liveTests().every$1(0, new A.Engine_success_closure());
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$get$success, $async$completer);
    },
    get$liveTests() {
      var _this = this;
      return new A.UnionSet(A.LinkedHashSet_LinkedHashSet$from(A._setArrayType([_this._passedGroup.set, _this._skippedGroup.set, _this._failedGroup.set, new A.IterableSet(new A.UnmodifiableListView(_this._active, type$.UnmodifiableListView_LiveTest), type$.IterableSet_LiveTest)], type$.JSArray_Set_LiveTest), type$.Set_LiveTest), true, type$.UnionSet_LiveTest);
    },
    Engine$4$concurrency$coverage$stopOnFirstFailure$testRandomizeOrderingSeed(concurrency, coverage, stopOnFirstFailure, testRandomizeOrderingSeed) {
      var t1 = type$.Null;
      A.FutureExtensions_onError(this._group._future_group$_completer.future.then$1$1(new A.Engine_closure(this), t1), new A.Engine_closure0(), t1, type$.Object);
    },
    run$0() {
      var t1, subscription, _this = this;
      if (_this._runCalled)
        throw A.wrapException(A.StateError$("Engine.run() may not be called more than once."));
      _this._runCalled = true;
      t1 = _this._suiteController;
      subscription = new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>")).listen$1(null);
      subscription.onData$1(new A.Engine_run_closure(_this));
      subscription.onDone$1(new A.Engine_run_closure0(_this, subscription));
      _this._engine$_subscriptions.add$1(0, subscription);
      return _this.get$success();
    },
    _runGroup$3(suiteController, group, parents) {
      return this._runGroup$body$Engine(type$.LiveSuiteController._as(suiteController), group, type$.List_Group._as(parents));
    },
    _runGroup$body$Engine(suiteController, group, parents) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], $async$self = this, suiteConfig, skipGroup, setUpAllSucceeded, liveTest, entries, entry, test, liveTest0, t1, skipGroup0, t2, t3, t4, t5, _i, t6;
      var $async$_runGroup$3 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              B.JSArray_methods.add$1(parents, group);
              $async$handler = 3;
              t1 = suiteController.get$liveSuite()._live_suite_controller$_controller._suite;
              suiteConfig = t1._runner_suite$_controller._config;
              suiteConfig.toString;
              skipGroup0 = group.metadata._skip === true;
              skipGroup = skipGroup0;
              setUpAllSucceeded = true;
              $async$goto = !skipGroup && group.setUpAll != null ? 6 : 7;
              break;
            case 6:
              // then
              liveTest = group.setUpAll.load$2$groups(t1, parents);
              $async$goto = 8;
              return A._asyncAwait($async$self._runLiveTest$3$countSuccess(suiteController, liveTest, false), $async$_runGroup$3);
            case 8:
              // returning from await.
              t2 = liveTest.state.result;
              setUpAllSucceeded = t2 === B.Result_0 || t2 === B.Result_1;
            case 7:
              // join
              $async$goto = !$async$self._engine$_closed && setUpAllSucceeded ? 9 : 10;
              break;
            case 9:
              // then
              t2 = group.entries;
              t2 = A._setArrayType(t2.slice(0), A._arrayInstanceType(t2));
              entries = t2;
              suiteConfig.toString;
              t2 = entries, t3 = t2.length, t4 = type$.Test, t5 = type$.nullable_Iterable_Group, _i = 0;
            case 11:
              // for condition
              if (!(_i < t2.length)) {
                // goto after for
                $async$goto = 13;
                break;
              }
              entry = t2[_i];
              if ($async$self._engine$_closed) {
                $async$next = [1];
                // goto finally
                $async$goto = 4;
                break;
              }
              $async$goto = entry instanceof A.Group ? 14 : 16;
              break;
            case 14:
              // then
              $async$goto = 17;
              return A._asyncAwait($async$self._runGroup$3(suiteController, entry, parents), $async$_runGroup$3);
            case 17:
              // returning from await.
              // goto join
              $async$goto = 15;
              break;
            case 16:
              // else
              suiteConfig.toString;
              t6 = entry.get$metadata();
              t6 = t6._skip === true;
              $async$goto = t6 ? 18 : 20;
              break;
            case 18:
              // then
              $async$goto = 21;
              return A._asyncAwait($async$self._runSkippedTest$3(suiteController, t4._as(entry), parents), $async$_runGroup$3);
            case 21:
              // returning from await.
              // goto join
              $async$goto = 19;
              break;
            case 20:
              // else
              test = t4._as(entry);
              t6 = test;
              t6 = A.Invoker$_(t1, t6, t5._as(parents), t6._guarded).__Invoker__controller_F;
              t6 === $ && A.throwLateFieldNI("_controller");
              $async$goto = 22;
              return A._asyncAwait($async$self._runLiveTest$2(suiteController, t6), $async$_runGroup$3);
            case 22:
              // returning from await.
            case 19:
              // join
            case 15:
              // join
            case 12:
              // for update
              t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i;
              // goto for condition
              $async$goto = 11;
              break;
            case 13:
              // after for
            case 10:
              // join
              $async$goto = !skipGroup && group.tearDownAll != null ? 23 : 24;
              break;
            case 23:
              // then
              liveTest0 = group.tearDownAll.load$2$groups(t1, parents);
              $async$goto = 25;
              return A._asyncAwait($async$self._runLiveTest$3$countSuccess(suiteController, liveTest0, false), $async$_runGroup$3);
            case 25:
              // returning from await.
              $async$goto = $async$self._engine$_closed ? 26 : 27;
              break;
            case 26:
              // then
              $async$goto = 28;
              return A._asyncAwait(liveTest0.close$0(), $async$_runGroup$3);
            case 28:
              // returning from await.
            case 27:
              // join
            case 24:
              // join
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              B.JSArray_methods.remove$1(parents, group);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$_runGroup$3, $async$completer);
    },
    _runLiveTest$3$countSuccess(suiteController, liveTest, countSuccess) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, t1, subscription;
      var $async$_runLiveTest$3$countSuccess = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.get$_onUnpaused(), $async$_runLiveTest$3$countSuccess);
            case 3:
              // returning from await.
              t1 = $async$self._active;
              t1._queue_list$_add$1(t1.$ti._eval$1("QueueList.E")._as(liveTest));
              t1 = liveTest._onStateChange;
              subscription = new A._BroadcastStream(t1, A._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(null);
              subscription.onData$1(new A.Engine__runLiveTest_closure($async$self, liveTest));
              subscription.onDone$1(new A.Engine__runLiveTest_closure0($async$self, subscription));
              $async$self._engine$_subscriptions.add$1(0, subscription);
              suiteController.reportLiveTest$2$countSuccess(liveTest, countSuccess);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$microtask(liveTest.get$run(), type$.dynamic), $async$_runLiveTest$3$countSuccess);
            case 4:
              // returning from await.
              $async$goto = 5;
              return A._asyncAwait(A.Future_Future(new A.Engine__runLiveTest_closure1(), type$.Null), $async$_runLiveTest$3$countSuccess);
            case 5:
              // returning from await.
              t1 = $async$self._restarted;
              if (!t1.contains$1(0, liveTest)) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 6;
              return A._asyncAwait($async$self._runLiveTest$3$countSuccess(suiteController, liveTest.test.load$2$groups(liveTest.suite, liveTest.groups), countSuccess), $async$_runLiveTest$3$countSuccess);
            case 6:
              // returning from await.
              t1.remove$1(0, liveTest);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_runLiveTest$3$countSuccess, $async$completer);
    },
    _runLiveTest$2(suiteController, liveTest) {
      return this._runLiveTest$3$countSuccess(suiteController, liveTest, true);
    },
    _runSkippedTest$3(suiteController, test, parents) {
      return this._runSkippedTest$body$Engine(suiteController, test, type$.List_Group._as(parents));
    },
    _runSkippedTest$body$Engine(suiteController, test, parents) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, skipped, controller;
      var $async$_runSkippedTest$3 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.get$_onUnpaused(), $async$_runSkippedTest$3);
            case 3:
              // returning from await.
              skipped = new A.LocalTest(test.name, test.metadata, test.trace, test.location, false, new A.Engine__runSkippedTest_closure(), true);
              controller = A._Cell$named("controller");
              controller._value = A.LiveTestController$(suiteController.get$liveSuite()._live_suite_controller$_controller._suite, skipped, new A.Engine__runSkippedTest_closure0(controller, skipped), new A.Engine__runSkippedTest_closure1(), parents);
              $async$goto = 4;
              return A._asyncAwait($async$self._runLiveTest$2(suiteController, controller._readLocal$0()), $async$_runSkippedTest$3);
            case 4:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_runSkippedTest$3, $async$completer);
    },
    _addLiveSuite$1(liveSuite) {
      var t1, t2, t3, _this = this;
      _this._onSuiteStartedController.add$1(0, liveSuite);
      t1 = liveSuite._live_suite_controller$_controller;
      t2 = t1._onTestStartedController;
      _this._onTestStartedGroup.add$1(0, new A._BroadcastStream(t2, A._instanceType(t2)._eval$1("_BroadcastStream<1>")));
      t2 = _this._passedGroup;
      t3 = type$.UnmodifiableSetView_LiveTest;
      t2._union_set_controller$_sets.add$1(0, t2.$ti._eval$1("Set<1>")._as(new A.UnmodifiableSetView(t1._passed, t3)));
      t2 = _this._skippedGroup;
      t2._union_set_controller$_sets.add$1(0, t2.$ti._eval$1("Set<1>")._as(new A.UnmodifiableSetView(t1._skipped, t3)));
      t2 = _this._failedGroup;
      t2._union_set_controller$_sets.add$1(0, t2.$ti._eval$1("Set<1>")._as(new A.UnmodifiableSetView(t1._failed, t3)));
    }
  };
  A.Engine_success_closure.prototype = {
    call$1(liveTest) {
      var t1 = type$.LiveTest._as(liveTest).state,
        t2 = t1.result;
      return (t2 === B.Result_0 || t2 === B.Result_1) && t1.status === B.Status_2;
    },
    $signature: 188
  };
  A.Engine_closure.prototype = {
    call$1(_) {
      var t1;
      type$.List_void._as(_);
      t1 = this.$this;
      t1._onTestStartedGroup.close$0();
      t1._onSuiteStartedController.close$0();
      if (t1._closedBeforeDone == null)
        t1._closedBeforeDone = false;
    },
    $signature: 183
  };
  A.Engine_closure0.prototype = {
    call$2(_, __) {
    },
    $signature: 182
  };
  A.Engine_run_closure.prototype = {
    call$1(suite) {
      var t1;
      type$.RunnerSuite._as(suite);
      t1 = this.$this;
      t1._addedSuites.add$1(0, suite);
      t1._onSuiteAddedController.add$1(0, suite);
      t1._group.add$1(0, new A.Engine_run__closure(t1, suite).call$0());
    },
    $signature: 181
  };
  A.Engine_run__closure.prototype = {
    call$0() {
      return this.$call$body$Engine_run__closure();
    },
    $call$body$Engine_run__closure() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], $async$self = this, controller, t1, t2, resource;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t2 = $async$self.$this;
              $async$goto = 3;
              return A._asyncAwait(t2._runPool.request$0(), $async$call$0);
            case 3:
              // returning from await.
              resource = $async$result;
              t1.controller = null;
              $async$handler = 4;
              controller = t1.controller = A.LiveSuiteController$($async$self.suite);
              t2._addLiveSuite$1(controller.get$liveSuite());
              if (t2._engine$_closed) {
                $async$next = [1];
                // goto finally
                $async$goto = 5;
                break;
              }
              $async$goto = 7;
              return A._asyncAwait(t2._runGroup$3(controller, controller.get$liveSuite()._live_suite_controller$_controller._suite.group, A._setArrayType([], type$.JSArray_Group)), $async$call$0);
            case 7:
              // returning from await.
              controller._onTestStartedController.close$0();
              controller._onCompleteGroup.close$0();
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              t2 = resource;
              t1 = type$.void_Function._as(new A.Engine_run___closure(t1));
              if (t2._released)
                A.throwExpression(A.StateError$("A PoolResource may only be released once."));
              t2._released = true;
              t2._pool._onResourceReleaseAllowed$1(t1);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.Engine_run___closure.prototype = {
    call$0() {
      var t1 = this._box_0.controller;
      return t1 == null ? null : t1.close$0();
    },
    $signature: 328
  };
  A.Engine_run_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._engine$_subscriptions.remove$1(0, this.subscription);
      t1._onSuiteAddedController.close$0();
      t1._group.close$0();
      t1 = t1._runPool;
      t1._pool$_closeMemo.runOnce$1(t1.get$_pool$_close());
    },
    $signature: 2
  };
  A.Engine__runLiveTest_closure.prototype = {
    call$1(state) {
      var t1;
      if (type$.State._as(state).status !== B.Status_2)
        return;
      t1 = this.$this._active;
      t1.remove$1(t1, this.liveTest);
    },
    $signature: 107
  };
  A.Engine__runLiveTest_closure0.prototype = {
    call$0() {
      this.$this._engine$_subscriptions.remove$1(0, this.subscription);
    },
    $signature: 2
  };
  A.Engine__runLiveTest_closure1.prototype = {
    call$0() {
    },
    $signature: 1
  };
  A.Engine__runSkippedTest_closure.prototype = {
    call$0() {
    },
    $signature: 2
  };
  A.Engine__runSkippedTest_closure0.prototype = {
    call$0() {
      var t2,
        t1 = this.controller;
      t1._readLocal$0().setState$1(B.State_Status_1_Result_0);
      t1._readLocal$0().setState$1(B.State_Status_1_Result_1);
      t2 = this.skipped.metadata.skipReason;
      if (t2 != null)
        t1._readLocal$0().message$1(new A.Message(B.MessageType_skip, "Skip: " + t2));
      t1._readLocal$0().setState$1(B.State_Status_2_Result_1);
      t1._readLocal$0().completer.complete$0();
    },
    $signature: 2
  };
  A.Engine__runSkippedTest_closure1.prototype = {
    call$0() {
    },
    $signature: 2
  };
  A.LiveSuite.prototype = {};
  A._LiveSuite.prototype = {};
  A.LiveSuiteController.prototype = {
    get$liveSuite() {
      var value = this.__LiveSuiteController_liveSuite_FI;
      return value === $ ? this.__LiveSuiteController_liveSuite_FI = new A._LiveSuite(this) : value;
    },
    reportLiveTest$2$countSuccess(liveTest, countSuccess) {
      var t2,
        t1 = this._onTestStartedController;
      if ((t1._state & 4) !== 0)
        throw A.wrapException(A.StateError$("Can't call reportLiveTest() after noMoreTests()."));
      t2 = liveTest._onStateChange;
      new A._BroadcastStream(t2, A._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new A.LiveSuiteController_reportLiveTest_closure(this, liveTest, countSuccess));
      t1.add$1(0, liveTest);
      this._onCompleteGroup.add$1(0, liveTest.completer.future);
    },
    close$0() {
      return this._live_suite_controller$_closeMemo.runOnce$1(new A.LiveSuiteController_close_closure(this));
    }
  };
  A.LiveSuiteController_reportLiveTest_closure.prototype = {
    call$1(state) {
      var t1, t2, _this = this;
      type$.State._as(state);
      if (state.status !== B.Status_2)
        return;
      t1 = state.result;
      if (t1 === B.Result_1)
        _this.$this._skipped.add$1(0, _this.liveTest);
      else if (t1 !== B.Result_0) {
        t1 = _this.$this;
        t2 = _this.liveTest;
        t1._passed.remove$1(0, t2);
        t1._failed.add$1(0, t2);
      } else if (_this.countSuccess) {
        t1 = _this.$this;
        t2 = _this.liveTest;
        t1._passed.add$1(0, t2);
        t1._failed.remove$1(0, t2);
      }
    },
    $signature: 107
  };
  A.LiveSuiteController_close_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$errorStack = [], $async$next = [], $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 2;
              $async$goto = 5;
              return A._asyncAwait($async$self.$this._suite._runner_suite$_controller._runner_suite$_close$0(), $async$call$0);
            case 5:
              // returning from await.
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              $async$self.$this._live_suite_controller$_onCloseCompleter.complete$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 14
  };
  A.ExpandedReporter.prototype = {
    _expanded$_cancel$0() {
      var t1, t2, t3, t4;
      for (t1 = this._subscriptions, t2 = A._LinkedHashSetIterator$(t1, t1._modifications, A._instanceType(t1)._precomputed1), t3 = t2.$ti._precomputed1; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        (t4 == null ? t3._as(t4) : t4).cancel$0();
      }
      t1.clear$0(0);
    },
    _onTestStarted$1(liveTest) {
      var t1, t2, _this = this;
      type$.LiveTest._as(liveTest);
      t1 = _this._stopwatch;
      if (t1._stop != null)
        t1.start$0();
      if (_this._engine._active.get$length(0) === 1)
        _this._progressLine$1(_this._description$1(liveTest));
      t1 = liveTest._onStateChange;
      _this._subscriptions.add$1(0, new A._BroadcastStream(t1, A._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new A.ExpandedReporter__onTestStarted_closure(_this, liveTest)));
      t1 = _this._subscriptions;
      t2 = liveTest._live_test_controller$_onError;
      t1.add$1(0, new A._BroadcastStream(t2, A._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new A.ExpandedReporter__onTestStarted_closure0(_this, liveTest)));
      t2 = liveTest._onMessage;
      t1.add$1(0, new A._BroadcastStream(t2, A._instanceType(t2)._eval$1("_BroadcastStream<1>")).listen$1(new A.ExpandedReporter__onTestStarted_closure1(_this, liveTest)));
    },
    _expanded$_onStateChange$2(liveTest, state) {
      var t1, t2, t3;
      if (state.status !== B.Status_2)
        return;
      t1 = this._engine._active;
      t2 = type$.UnmodifiableListView_LiveTest;
      t3 = new A.UnmodifiableListView(t1, t2);
      if (!t3.get$isEmpty(t3)) {
        t1 = new A.UnmodifiableListView(t1, t2);
        this._progressLine$1(this._description$1(t1.get$first(t1)));
      }
    },
    _expanded$_onError$3(liveTest, error, stackTrace) {
      var t1, _this = this;
      liveTest.test.metadata.get$chainStackTraces();
      _this._shouldPrintStackTraceChainingNotice = true;
      if (liveTest.state.status !== B.Status_2)
        return;
      _this._progressLine$2$suffix(_this._description$1(liveTest), " " + _this._bold + _this._red + "[E]" + _this._noColor);
      t1 = _this._expanded$_sink;
      t1.writeln$1(A.indent(A.S(error)));
      t1.writeln$1(A.indent(stackTrace.toString$0(0)));
      return;
    },
    _expanded$_onDone$1(success) {
      var t1, t2, t3, t4, t5, _this = this;
      A._asBoolQ(success);
      _this._expanded$_cancel$0();
      if (success == null)
        return;
      t1 = _this._engine;
      if (t1.get$liveTests().get$length(0) === 0)
        _this._expanded$_sink.writeln$1("No tests ran.");
      else if (!success) {
        for (t2 = type$.UnmodifiableListView_LiveTest, t1 = new A.UnmodifiableListView(t1._active, t2), t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListBase.E>")), t3 = _this._red, t4 = " - did not complete " + _this._bold + t3 + "[E]" + _this._noColor, t2 = t2._eval$1("ListBase.E"); t1.moveNext$0();) {
          t5 = t1.__internal$_current;
          _this._progressLine$2$suffix(_this._description$1(t5 == null ? t2._as(t5) : t5), t4);
        }
        _this._progressLine$2$color("Some tests failed.", t3);
      } else if (t1._passedGroup.set.get$length(0) === 0)
        _this._progressLine$1("All tests skipped.");
      else
        _this._progressLine$1("All tests passed!");
      if (_this._shouldPrintStackTraceChainingNotice) {
        t1 = _this._expanded$_sink;
        t1.writeln$1("");
        t1.writeln$1("Consider enabling the flag chain-stack-traces to receive more detailed exceptions.\nFor example, 'dart test --chain-stack-traces'.");
      }
    },
    _progressLine$3$color$suffix(message, color, suffix) {
      var t4, t5, _this = this,
        t1 = _this._engine,
        t2 = t1._passedGroup.set,
        t3 = false;
      if (t2.get$length(0) === _this._lastProgressPassed)
        if (t1._skippedGroup.set.get$length(0) === _this._lastProgressSkipped)
          if (t1._failedGroup.set.get$length(0) === _this._lastProgressFailed)
            if (message === _this._lastProgressMessage)
              t3 = suffix == null || suffix === _this._lastProgressSuffix;
      if (t3)
        return;
      _this._lastProgressPassed = t2.get$length(0);
      t3 = t1._skippedGroup.set;
      _this._lastProgressSkipped = t3.get$length(0);
      t1 = t1._failedGroup.set;
      _this._lastProgressFailed = t1.get$length(0);
      _this._lastProgressMessage = message;
      _this._lastProgressSuffix = suffix;
      if (suffix != null)
        message += suffix;
      if (color == null)
        color = "";
      t4 = A.Duration$(0, 0, _this._stopwatch.get$elapsedMicroseconds(), 0, 0)._duration;
      t5 = _this._noColor;
      t2 = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(B.JSInt_methods._tdivFast$1(t4, 60000000)), 2, "0") + ":" + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(B.JSInt_methods.$mod(B.JSInt_methods._tdivFast$1(t4, 1000000), 60)), 2, "0") + " " + _this._green + "+" + t2.get$length(0) + t5;
      if (t3.get$length(0) !== 0)
        t2 = t2 + _this._yellow + " ~" + t3.get$length(0) + t5;
      t1 = (t1.get$length(0) !== 0 ? t2 + _this._red + " -" + t1.get$length(0) + t5 : t2) + ": " + color + message + t5;
      _this._expanded$_sink.writeln$1(t1.charCodeAt(0) == 0 ? t1 : t1);
    },
    _progressLine$2$suffix(message, suffix) {
      return this._progressLine$3$color$suffix(message, null, suffix);
    },
    _progressLine$2$color(message, color) {
      return this._progressLine$3$color$suffix(message, color, null);
    },
    _progressLine$1(message) {
      return this._progressLine$3$color$suffix(message, null, null);
    },
    _description$1(liveTest) {
      return liveTest.test.name;
    }
  };
  A.ExpandedReporter__onTestStarted_closure.prototype = {
    call$1(state) {
      return this.$this._expanded$_onStateChange$2(this.liveTest, type$.State._as(state));
    },
    $signature: 107
  };
  A.ExpandedReporter__onTestStarted_closure0.prototype = {
    call$1(error) {
      type$.AsyncError._as(error);
      return this.$this._expanded$_onError$3(this.liveTest, error.error, error.stackTrace);
    },
    $signature: 173
  };
  A.ExpandedReporter__onTestStarted_closure1.prototype = {
    call$1(message) {
      var t1, text;
      type$.Message._as(message);
      t1 = this.$this;
      t1._progressLine$1(t1._description$1(this.liveTest));
      text = message.text;
      if (message.type === B.MessageType_skip)
        text = "  " + t1._yellow + text + t1._noColor;
      t1._expanded$_sink.writeln$1(text);
    },
    $signature: 167
  };
  A.RunnerSuite.prototype = {};
  A.RunnerSuiteController.prototype = {
    _runner_suite$_close$0() {
      return this._closeMemo.runOnce$1(new A.RunnerSuiteController__close_closure(this));
    }
  };
  A.RunnerSuiteController__close_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self.$this._onDebuggingController.close$0(), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 14
  };
  A.SuiteConfiguration.prototype = {};
  A.IterableSet.prototype = {
    get$length(_) {
      var t1 = this._iterable_set$_base._collection$_source;
      return t1.get$length(t1);
    },
    get$iterator(_) {
      var t1 = this._iterable_set$_base;
      return new A.ListIterator(t1, t1.get$length(0), t1.$ti._eval$1("ListIterator<ListBase.E>"));
    },
    contains$1(_, element) {
      var t1 = this._iterable_set$_base;
      return t1.contains$1(t1, element);
    },
    toSet$0(_) {
      var t1 = this._iterable_set$_base;
      return t1.toSet$0(t1);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  A._IterableSet_Object_SetMixin.prototype = {};
  A._IterableSet_Object_SetMixin_UnmodifiableSetMixin.prototype = {};
  A._declarer_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, t1, t2, t3, t4, t5, controller, suite, engine;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.pumpEventQueue(20), $async$call$0);
            case 3:
              // returning from await.
              t1 = $.$get$SuiteConfiguration_empty();
              t2 = $._globalDeclarer.build$0();
              t3 = $.$get$currentOSGuess();
              t3 = new A.SuitePlatform(B.Runtime_KAb, t3, B.Compiler_Kernel_kernel_kernel);
              if (!B.JSArray_methods.contains$1(B.List_uk6, B.Compiler_Kernel_kernel_kernel))
                A.throwExpression(A.ArgumentError$("The platform " + B.Runtime_KAb.toString$0(0) + " does not support the compiler " + B.Compiler_Kernel_kernel_kernel.toString$0(0), null));
              t4 = A.Uri_base();
              t4 = $.$get$context().prettyUri$1(t4);
              t5 = type$._Future_void;
              controller = new A.RunnerSuiteController(t1, null, new A._AsyncBroadcastStreamController(null, null, type$._AsyncBroadcastStreamController_bool), A.LinkedHashSet_LinkedHashSet$_empty(type$.String), new A.AsyncMemoizer(new A._AsyncCompleter(new A._Future($.Zone__current, t5), type$._AsyncCompleter_void), type$.AsyncMemoizer_void));
              suite = new A.RunnerSuite(controller, t3, t4, A.Suite__filterGroup(t2, t3), false);
              t1 = type$.Future_RunnerSuite._as(A.Future_Future$value(suite, type$.RunnerSuite));
              controller.__RunnerSuiteController__suite_F !== $ && A.throwLateFieldAI("_suite");
              controller.__RunnerSuiteController__suite_F = t1;
              engine = A.Engine$();
              t1 = engine._suiteController;
              t1.add$1(0, A._instanceType(t1)._precomputed1._as(suite));
              t1.close$0();
              $.$get$Stopwatch__frequency();
              t1 = A.LinkedHashSet_LinkedHashSet$_empty(type$.StreamSubscription_dynamic);
              t2 = new A.ExpandedReporter(true, "\x1b[32m", "\x1b[31m", "\x1b[33m", "\x1b[90m", "\x1b[1m", "\x1b[0m", engine, false, false, new A.Stopwatch(), t1, new A.PrintSink(new A.StringBuffer("")));
              t3 = engine._onTestStartedGroup.__StreamGroup__controller_A;
              t3 === $ && A.throwLateFieldNI("_controller");
              t1.add$1(0, new A._BroadcastStream(t3, A._instanceType(t3)._eval$1("_BroadcastStream<1>")).listen$1(t2.get$_onTestStarted()));
              t3 = engine.get$success();
              t1.add$1(0, A.Stream_Stream$fromFuture(t3, t3.$ti._precomputed1).listen$1(t2.get$_expanded$_onDone()));
              t2 = type$.nullable_Object;
              t2 = A.runZoned(new A._declarer__closure(engine), null, A.LinkedHashMap_LinkedHashMap$_literal([B.Symbol_KFY, $._globalDeclarer], t2, t2), type$.nullable_Future_nullable_bool);
              $async$goto = 4;
              return A._asyncAwait(type$.Future_nullable_bool._is(t2) ? t2 : A._Future$value(A._asBoolQ(t2), type$.nullable_bool), $async$call$0);
            case 4:
              // returning from await.
              if ($async$result === true) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              A.print("");
              t1 = A._interceptUserError("Dummy exception to set exit code.", null);
              new A._Future($.Zone__current, t5)._asyncCompleteErrorObject$1(t1);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A._declarer__closure.prototype = {
    call$0() {
      return A.Invoker_guard(this.engine.get$run(), type$.Future_nullable_bool);
    },
    $signature: 166
  };
  A.currentOSGuess_closure.prototype = {
    call$0() {
      var t1 = $.$get$context().style;
      if (t1 === $.$get$Style_url())
        return B.OperatingSystem_none_none;
      if (t1 === $.$get$Style_windows())
        return B.OperatingSystem_Windows_windows;
      if ($._macOSDirectories.any$1(0, B.JSString_methods.get$startsWith(A.current())))
        return B.OperatingSystem_piG;
      return B.OperatingSystem_Linux_linux;
    },
    $signature: 165
  };
  A.PrintSink.prototype = {
    writeln$1(obj) {
      this._print_sink$_buffer._contents += obj + "\n";
      this._flush$0();
    },
    _flush$0() {
      var t1 = this._print_sink$_buffer;
      if (B.JSString_methods.endsWith$1(t1.toString$0(0), "\n")) {
        A.print(t1);
        t1._contents = "";
      }
    },
    $isStringSink: 1
  };
  A.ReleasedException.prototype = {
    toString$0(_) {
      return A.getRuntimeTypeOfDartObject(this).toString$0(0) + ": Instance has been released.";
    },
    $isException: 1
  };
  A.Releasable.prototype = {
    release$0() {
      this.Releasable__released = true;
      this.Releasable__token = new A.Object();
      $.ReleasableTracker__releasables.remove$1(0, this);
    }
  };
  A.Using_useAsync_closure.prototype = {
    call$0() {
      return this.$call$body$Using_useAsync_closure(this.R);
    },
    $call$body$Using_useAsync_closure($async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], $async$self = this, t2, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._this;
              if (t1.Releasable__released)
                throw A.wrapException(new A.ReleasedException());
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait($async$self.asyncProcess.call$1(t1), $async$call$0);
            case 6:
              // returning from await.
              t2 = $async$result;
              $async$returnValue = t2;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              t1.release$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature() {
      return this.R._eval$1("Future<0>()");
    }
  };
  A.EventStreamProvider.prototype = {};
  A._EventStream.prototype = {
    get$isBroadcast() {
      return true;
    },
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = A._instanceType(this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      return A._EventStreamSubscription$(this._target, this._eventType, onData, false, t1._precomputed1);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }
  };
  A._ElementEventStreamImpl.prototype = {};
  A._EventStreamSubscription.prototype = {
    cancel$0() {
      var _this = this,
        emptyFuture = A.Future_Future$value(null, type$.void);
      if (_this._target == null)
        return emptyFuture;
      _this._unlisten$0();
      _this._onData = _this._target = null;
      return emptyFuture;
    },
    onData$1(handleData) {
      var t1, _this = this;
      _this.$ti._eval$1("~(1)?")._as(handleData);
      if (_this._target == null)
        throw A.wrapException(A.StateError$("Subscription has been canceled."));
      _this._unlisten$0();
      t1 = A._wrapZone(new A._EventStreamSubscription_onData_closure(handleData), type$.JSObject);
      t1 = t1 == null ? null : A._functionToJS1(t1);
      _this._onData = t1;
      _this._tryResume$0();
    },
    pause$1(resumeSignal) {
      if (this._target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    pause$0() {
      return this.pause$1(null);
    },
    get$isPaused() {
      return this._pauseCount > 0;
    },
    resume$0() {
      var _this = this;
      if (_this._target == null || _this._pauseCount <= 0)
        return;
      --_this._pauseCount;
      _this._tryResume$0();
    },
    _tryResume$0() {
      var _this = this,
        t1 = _this._onData;
      if (t1 != null && _this._pauseCount <= 0)
        _this._target.addEventListener(_this._eventType, t1, false);
    },
    _unlisten$0() {
      var t1 = this._onData;
      if (t1 != null)
        this._target.removeEventListener(this._eventType, t1, false);
    },
    $isStreamSubscription: 1
  };
  A._EventStreamSubscription_closure.prototype = {
    call$1(e) {
      return this.onData.call$1(A._asJSObject(e));
    },
    $signature: 27
  };
  A._EventStreamSubscription_onData_closure.prototype = {
    call$1(e) {
      return this.handleData.call$1(A._asJSObject(e));
    },
    $signature: 27
  };
  A.execute_closure11.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- PATCH", new A.execute__closure16(t1));
    },
    $signature: 2
  };
  A.execute__closure16.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- JS TYPES", new A.execute___closure106(t1));
      t1.group$2("- JSIFY", new A.execute___closure107(t1));
      t1.group$2("- DARTIFY", new A.execute___closure108(t1));
      t1.group$2("- TRANSFERIFY", new A.execute___closure109(t1));
    },
    $signature: 1
  };
  A.execute___closure106.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("Date", new A.execute____closure170());
      t1.test$2("BigInt", new A.execute____closure171());
    },
    $signature: 1
  };
  A.execute____closure170.prototype = {
    call$0() {
      var t1,
        d = A.JSFunctionUnsafeUtilExtension_callAsConstructor($.$get$_$JSDateFunction(), 42, type$.JSObject);
      A.expect(d, new A.TypeMatcher(type$.TypeMatcher_JSObject), null);
      t1 = A.JSAnyUtilityExtension_instanceOfString(d, "Date");
      A.expect(t1, B.C__IsTrue, null);
      t1 = A._asInt(d.getTime());
      A.expect(t1, new A._DeepMatcher(42, 100), null);
    },
    $signature: 1
  };
  A.execute____closure171.prototype = {
    call$0() {
      var bigintFromStr, t3, bigintFromInt, _null = null,
        t1 = init.G,
        t2 = "" + 9007199254740991,
        _this = t2 + t2;
      t2 = type$.JavaScriptBigInt;
      bigintFromStr = t2._as(t1.BigInt(_this));
      t3 = type$.TypeMatcher_JavaScriptBigInt;
      A.expect(bigintFromStr, new A.TypeMatcher(t3), _null);
      A.expect(typeof bigintFromStr === "bigint", B.C__IsTrue, _null);
      A.expect(String(bigintFromStr), _this, _null);
      bigintFromInt = t2._as(t1.BigInt(9007199254740991));
      A.expect(bigintFromInt, new A.TypeMatcher(t3), _null);
      A.expect(typeof bigintFromInt === "bigint", B.C__IsTrue, _null);
      A.expect(String(bigintFromInt), B.JSInt_methods.toString$0(9007199254740991), _null);
    },
    $signature: 1
  };
  A.execute___closure107.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- int", new A.execute____closure156());
      t1.test$2("- double", new A.execute____closure157());
      t1.test$2("- String", new A.execute____closure158());
      t1.test$2("- BigInt", new A.execute____closure159());
      t1.test$2("- DateTime", new A.execute____closure160());
      t1.test$2("- List", new A.execute____closure161());
      t1.test$2("- Set", new A.execute____closure162());
      t1.test$2("- Map", new A.execute____closure163());
      t1.test$2("- Uint16List", new A.execute____closure164());
      t1.test$2("- Port", new A.execute____closure165());
      t1.test$2("- Mixed list", new A.execute____closure166());
      t1.test$2("- Acyclic reference", new A.execute____closure167());
      t1.test$2("- Cyclic reference", new A.execute____closure168());
      t1.group$2("- PERFS", new A.execute____closure169(t1));
    },
    $signature: 1
  };
  A.execute____closure156.prototype = {
    call$0() {
      var t = [],
        x = A.$jsify(1, t);
      A.expect(x != null && typeof x === "number", B.C__IsTrue, null);
      A.expect(A._asInt(t.length), 0, null);
    },
    $signature: 1
  };
  A.execute____closure157.prototype = {
    call$0() {
      var t = [],
        x = A.$jsify(1.1, t);
      A.expect(x != null && typeof x === "number", B.C__IsTrue, null);
      A.expect(A._asInt(t.length), 0, null);
    },
    $signature: 1
  };
  A.execute____closure158.prototype = {
    call$0() {
      var t = [],
        x = A.$jsify("test", t);
      A.expect(x != null && typeof x === "string", B.C__IsTrue, null);
      A.expect(A._asInt(t.length), 0, null);
    },
    $signature: 1
  };
  A.execute____closure159.prototype = {
    call$0() {
      var t = [],
        x = A.$jsify($.$get$_BigIntImpl_two(), t);
      A.expect(x != null && typeof x === "bigint", B.C__IsTrue, null);
      A.expect(String(type$.JavaScriptBigInt._as(x)), "2", null);
      A.expect(A._asInt(t.length), 0, null);
    },
    $signature: 1
  };
  A.execute____closure160.prototype = {
    call$0() {
      var t = [],
        x = A.$jsify(new A.DateTime(A.DateTime__validate(42, 0, false), 0, false), t);
      A.expect(x != null && A.JSAnyUtilityExtension_instanceOfString(x, "Date"), B.C__IsTrue, null);
      A.expect(A._asInt(A._asJSObject(x).getTime()), 42, null);
      A.expect(A._asInt(t.length), 0, null);
    },
    $signature: 1
  };
  A.execute____closure161.prototype = {
    call$0() {
      var t = [],
        x = A.$jsify(A._setArrayType([1, 2, 3], type$.JSArray_int), t);
      A.expect(x != null && A.JSAnyUtilityExtension_instanceOfString(x, "Array"), B.C__IsTrue, null);
      A.expect(A._asInt(t.length), 0, null);
    },
    $signature: 1
  };
  A.execute____closure162.prototype = {
    call$0() {
      var t = [],
        x = A.$jsify(A.LinkedHashSet_LinkedHashSet$_literal([1, 2, 3], type$.int), t);
      A.expect(x != null && A.JSAnyUtilityExtension_instanceOfString(x, "Set"), B.C__IsTrue, null);
      A.expect(A._asInt(t.length), 0, null);
    },
    $signature: 1
  };
  A.execute____closure163.prototype = {
    call$0() {
      var t = [],
        x = A.$jsify(A.LinkedHashMap_LinkedHashMap$_literal(["one", 1, "two", 2, "three", 3], type$.String, type$.int), t);
      A.expect(x != null && A.JSAnyUtilityExtension_instanceOfString(x, "Map"), B.C__IsTrue, null);
      A.expect(A._asInt(t.length), 0, null);
    },
    $signature: 1
  };
  A.execute____closure164.prototype = {
    call$0() {
      var t1, _null = null, t = [],
        data = new Uint16Array(A._ensureNativeList(A._setArrayType([1, 2, 3], type$.JSArray_int)));
      A.expect(A.$jsify(data, t), B.C__IsNotNull, _null);
      A.expect(A._asInt(t.length), 1, _null);
      t1 = t.at(0);
      A.expect(t1 != null && A.JSAnyUtilityExtension_instanceOfString(t1, "ArrayBuffer"), B.C__IsTrue, _null);
      A.expect(A._asInt(type$.NativeArrayBuffer._as(t.at(0)).byteLength), data.length * 16 / 8, _null);
    },
    $signature: 1
  };
  A.execute____closure165.prototype = {
    call$0() {
      var t1,
        _s11_ = "MessagePort",
        t = [],
        x = A.$jsify(A._asJSObject(A._asJSObject(new init.G.MessageChannel()).port1), t);
      A.expect(x != null && A.JSAnyUtilityExtension_instanceOfString(x, _s11_), B.C__IsTrue, null);
      A.expect(A._asInt(t.length), 1, null);
      t1 = t.at(0);
      A.expect(t1 != null && A.JSAnyUtilityExtension_instanceOfString(t1, _s11_), B.C__IsTrue, null);
    },
    $signature: 1
  };
  A.execute____closure166.prototype = {
    call$0() {
      var _null = null,
        _s11_ = "MessagePort",
        t = [],
        channel = A._asJSObject(new init.G.MessageChannel()),
        t1 = type$.JSArray_int,
        data = new Uint16Array(A._ensureNativeList(A._setArrayType([1, 2, 3], t1))),
        x = A.$jsify(A._setArrayType([data, A._setArrayType([1, 2, 3], t1), A._asJSObject(channel.port1)], type$.JSArray_Object), t);
      A.expect(x != null && A.JSAnyUtilityExtension_instanceOfString(x, "Array"), B.C__IsTrue, _null);
      type$.JSArray_nullable_Object._as(x);
      A.expect(A._asInt(x.length), 3, _null);
      A.expect(x.at(0), B.C__IsNotNull, _null);
      t1 = x.at(1);
      A.expect(t1 != null && A.JSAnyUtilityExtension_instanceOfString(t1, "Array"), B.C__IsTrue, _null);
      t1 = x.at(2);
      A.expect(t1 != null && A.JSAnyUtilityExtension_instanceOfString(t1, _s11_), B.C__IsTrue, _null);
      A.expect(A._asInt(t.length), 2, _null);
      t1 = t.at(0);
      A.expect(t1 != null && A.JSAnyUtilityExtension_instanceOfString(t1, "ArrayBuffer"), B.C__IsTrue, _null);
      A.expect(A._asInt(type$.NativeArrayBuffer._as(t.at(0)).byteLength), data.length * 16 / 8, _null);
      t1 = t.at(1);
      A.expect(t1 != null && A.JSAnyUtilityExtension_instanceOfString(t1, _s11_), B.C__IsTrue, _null);
    },
    $signature: 1
  };
  A.execute____closure167.prototype = {
    call$0() {
      var t2, _null = null,
        _s11_ = "MessagePort",
        t = [],
        t1 = init.G,
        channel = A._asJSObject(new t1.MessageChannel()),
        data = new Uint16Array(A._ensureNativeList(A._setArrayType([0, 1, 2, 3], type$.JSArray_int))),
        x = A.$jsify(A._setArrayType([data, A._asJSObject(channel.port1), data, A._asJSObject(channel.port1)], type$.JSArray_Object), t);
      A.expect(x != null && A.JSAnyUtilityExtension_instanceOfString(x, "Array"), B.C__IsTrue, _null);
      type$.JSArray_nullable_Object._as(x);
      A.expect(A._asInt(x.length), 4, _null);
      A.expect(x.at(0), B.C__IsNotNull, _null);
      t2 = x.at(1);
      A.expect(t2 != null && A.JSAnyUtilityExtension_instanceOfString(t2, _s11_), B.C__IsTrue, _null);
      A.expect(x.at(2), B.C__IsNotNull, _null);
      t2 = x.at(3);
      A.expect(t2 != null && A.JSAnyUtilityExtension_instanceOfString(t2, _s11_), B.C__IsTrue, _null);
      A.expect(A._asBool(t1.Object.is(x.at(2), x.at(0))), B.C__IsTrue, _null);
      A.expect(A._asBool(t1.Object.is(x.at(3), x.at(1))), B.C__IsTrue, _null);
      A.expect(A._asInt(t.length), 2, _null);
      t1 = t.at(0);
      A.expect(t1 != null && A.JSAnyUtilityExtension_instanceOfString(t1, "ArrayBuffer"), B.C__IsTrue, _null);
      A.expect(A._asInt(type$.NativeArrayBuffer._as(t.at(0)).byteLength), data.length * 16 / 8, _null);
      t1 = t.at(1);
      A.expect(t1 != null && A.JSAnyUtilityExtension_instanceOfString(t1, _s11_), B.C__IsTrue, _null);
    },
    $signature: 1
  };
  A.execute____closure168.prototype = {
    call$0() {
      var x, t2, _null = null,
        _s11_ = "MessagePort",
        t = [],
        t1 = init.G,
        channel = A._asJSObject(new t1.MessageChannel()),
        data = new Uint16Array(A._ensureNativeList(A._setArrayType([1, 2, 3], type$.JSArray_int))),
        message = A._setArrayType([data, A._asJSObject(channel.port1), data, A._asJSObject(channel.port1)], type$.JSArray_Object);
      B.JSArray_methods.add$1(message, message);
      x = A.$jsify(message, t);
      A.expect(x != null && A.JSAnyUtilityExtension_instanceOfString(x, "Array"), B.C__IsTrue, _null);
      type$.JSArray_nullable_Object._as(x);
      A.expect(A._asInt(x.length), 5, _null);
      A.expect(x.at(0), B.C__IsNotNull, _null);
      t2 = x.at(1);
      A.expect(t2 != null && A.JSAnyUtilityExtension_instanceOfString(t2, _s11_), B.C__IsTrue, _null);
      A.expect(x.at(2), B.C__IsNotNull, _null);
      t2 = x.at(3);
      A.expect(t2 != null && A.JSAnyUtilityExtension_instanceOfString(t2, _s11_), B.C__IsTrue, _null);
      t2 = x.at(4);
      A.expect(t2 != null && A.JSAnyUtilityExtension_instanceOfString(t2, "Array"), B.C__IsTrue, _null);
      A.expect(A._asBool(t1.Object.is(x.at(2), x.at(0))), B.C__IsTrue, _null);
      A.expect(A._asBool(t1.Object.is(x.at(3), x.at(1))), B.C__IsTrue, _null);
      A.expect(A._asBool(t1.Object.is(x.at(4), x)), B.C__IsTrue, _null);
      A.expect(A._asInt(t.length), 2, _null);
      t1 = t.at(0);
      A.expect(t1 != null && A.JSAnyUtilityExtension_instanceOfString(t1, "ArrayBuffer"), B.C__IsTrue, _null);
      A.expect(A._asInt(type$.NativeArrayBuffer._as(t.at(0)).byteLength), data.length * 16 / 8, _null);
      t1 = t.at(1);
      A.expect(t1 != null && A.JSAnyUtilityExtension_instanceOfString(t1, _s11_), B.C__IsTrue, _null);
    },
    $signature: 1
  };
  A.execute____closure169.prototype = {
    call$0() {
      var t1 = new A.execute____closure_unused(),
        t2 = this.tc;
      t2.test$2("List<String>", new A.execute_____closure71(t1));
      t2.test$2("Map<String, DateTime?>", new A.execute_____closure72(t1));
    },
    $signature: 1
  };
  A.execute____closure_unused.prototype = {
    call$1(_) {
    },
    $signature: 37
  };
  A.execute_____closure71.prototype = {
    call$0() {
      var n, sw, i,
        data = J.JSArray_JSArray$allocateGrowable(1000, type$.String);
      for (n = 0; n < 1000; ++n)
        data[n] = "String " + n + " " + B.JSString_methods.$mul("*", n);
      sw = new A.Stopwatch();
      $.$get$Stopwatch__frequency();
      sw.start$0();
      this.unused.call$1(null);
      for (i = 0; i < 10; ++i)
        A.$jsify(data, null);
      A.print("$jsify --> " + sw.get$elapsedMilliseconds() + " ms");
      if (sw._stop == null)
        sw._stop = $.Primitives_timerTicks.call$0();
      sw.reset$0();
      sw.start$0();
      for (i = 0; i < 10; ++i)
        A.$jsify2(data, null);
      A.print("$jsify2 --> " + sw.get$elapsedMilliseconds() + " ms");
    },
    $signature: 1
  };
  A.execute_____closure72.prototype = {
    call$0() {
      var n, t2, t3, data, sw, i, _null = null,
        t1 = type$.MapEntry_of_String_and_nullable_DateTime,
        _list = J.JSArray_JSArray$allocateGrowable(1000, t1);
      for (n = 0; n < 1000; ++n) {
        t2 = B.JSString_methods.$mul("*", n);
        t3 = B.JSInt_methods.$mod(n, 7) === 0 ? _null : new A.DateTime(Date.now(), 0, false)._addMicroseconds$1(3600000000 * n);
        _list[n] = new A.MapEntry("String " + n + " " + t2, t3, t1);
      }
      data = A.Map_Map$fromEntries(_list, type$.String, type$.nullable_DateTime);
      sw = new A.Stopwatch();
      $.$get$Stopwatch__frequency();
      sw.start$0();
      this.unused.call$1(_null);
      for (i = 0; i < 10; ++i)
        A.$jsify(data, _null);
      A.print("$jsify --> " + sw.get$elapsedMilliseconds() + " ms");
      if (sw._stop == null)
        sw._stop = $.Primitives_timerTicks.call$0();
      sw.reset$0();
      sw.start$0();
      for (i = 0; i < 10; ++i)
        A.$jsify2(data, _null);
      A.print("$jsify2 --> " + sw.get$elapsedMilliseconds() + " ms");
    },
    $signature: 1
  };
  A.execute___closure108.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- int", new A.execute____closure143());
      t1.test$2("- double", new A.execute____closure144());
      t1.test$2("- String", new A.execute____closure145());
      t1.test$2("- BigInt", new A.execute____closure146());
      t1.test$2("- DateTime", new A.execute____closure147());
      t1.test$2("- List", new A.execute____closure148());
      t1.test$2("- Set", new A.execute____closure149());
      t1.test$2("- Map", new A.execute____closure150());
      t1.test$2("- Uint16List", new A.execute____closure151());
      t1.test$2("- Port", new A.execute____closure152());
      t1.test$2("- Mixed list", new A.execute____closure153());
      t1.test$2("- Acyclic reference", new A.execute____closure154());
      t1.test$2("- Cyclic reference", new A.execute____closure155());
    },
    $signature: 1
  };
  A.execute____closure143.prototype = {
    call$0() {
      var x = A.$dartify(1);
      A.expect(x, $.$get$Squadron_platformType() === B.SquadronPlatformType_Dqj ? new A.TypeMatcher(type$.TypeMatcher_double) : new A.TypeMatcher(type$.TypeMatcher_int), null);
      A.expect(x, 1, null);
    },
    $signature: 1
  };
  A.execute____closure144.prototype = {
    call$0() {
      var y, _null = null,
        x = A.$dartify(1.1),
        t1 = type$.TypeMatcher_double;
      A.expect(x, new A.TypeMatcher(t1), _null);
      A.expect(x, 1.1, _null);
      y = A.$dartify(1);
      A.expect(y, new A.TypeMatcher(t1), _null);
      A.expect(y, 1, _null);
    },
    $signature: 1
  };
  A.execute____closure145.prototype = {
    call$0() {
      var x = A.$dartify("Test");
      A.expect(x, new A.TypeMatcher(type$.TypeMatcher_String), null);
      A.expect(x, "Test", null);
    },
    $signature: 1
  };
  A.execute____closure146.prototype = {
    call$0() {
      var i, x,
        val = A._BigIntImpl_parse("123456789", null);
      for (i = 1; i < 8; ++i)
        val = val.$mul(0, val);
      A.print(val);
      x = A.$dartify(type$.JavaScriptBigInt._as(init.G.BigInt(val.toString$0(0))));
      A.expect(x, new A.TypeMatcher(type$.TypeMatcher_BigInt), null);
      A.expect(x, val, null);
    },
    $signature: 1
  };
  A.execute____closure147.prototype = {
    call$0() {
      var x = A.$dartify(A.JSFunctionUnsafeUtilExtension_callAsConstructor($.$get$_$JSDateFunction(), 42, type$.JSObject));
      A.expect(x, new A.TypeMatcher(type$.TypeMatcher_DateTime), null);
      A.expect(x, new A.DateTime(A.DateTime__validate(42, 0, false), 0, false), null);
    },
    $signature: 1
  };
  A.execute____closure148.prototype = {
    call$0() {
      var t1, _null = null,
        x = A.$dartify(A._setArrayType([1, "Test"], type$.JSArray_Object));
      A.expect(x, new A.TypeMatcher(type$.TypeMatcher_List_dynamic), _null);
      type$.List_dynamic._as(x);
      A.expect(x, new A._HasLength(A.wrapMatcher(2)), _null);
      t1 = J.getInterceptor$asx(x);
      A.expect(t1.$index(x, 0), 1, _null);
      A.expect(t1.$index(x, 1), "Test", _null);
    },
    $signature: 1
  };
  A.execute____closure149.prototype = {
    call$0() {
      var x, _null = null,
        s = A._asJSObject(new init.G.Set());
      A._asJSObject(s.add(1));
      A._asJSObject(s.add(1));
      A._asJSObject(s.add("Test"));
      A._asJSObject(s.add("Test"));
      x = A.$dartify(s);
      A.expect(x, new A.TypeMatcher(type$.TypeMatcher_Set_dynamic), _null);
      A.expect(x, new A._HasLength(A.wrapMatcher(2)), _null);
      A.expect(x, new A._Contains(1), _null);
      A.expect(x, new A._Contains("Test"), _null);
    },
    $signature: 1
  };
  A.execute____closure150.prototype = {
    call$0() {
      var x, _null = null,
        m = A._asJSObject(new init.G.Map());
      A._asJSObject(m.set(1, 2));
      A._asJSObject(m.set("Test", 4));
      x = A.$dartify(m);
      A.expect(x, new A.TypeMatcher(type$.TypeMatcher_Map_dynamic_dynamic), _null);
      type$.Map_dynamic_dynamic._as(x);
      A.expect(x, new A._HasLength(A.wrapMatcher(2)), _null);
      A.expect(x.$index(0, 1), 2, _null);
      A.expect(x.$index(0, "Test"), 4, _null);
    },
    $signature: 1
  };
  A.execute____closure151.prototype = {
    call$0() {
      var x = A.$dartify(new Uint16Array(A._ensureNativeList(A._setArrayType([1, 2, 3], type$.JSArray_int))));
      A.expect(x, new A.TypeMatcher(type$.TypeMatcher_Uint16List), null);
      A.expect(type$.Uint16List._as(x).length, 3, null);
    },
    $signature: 1
  };
  A.execute____closure152.prototype = {
    call$0() {
      A.expect(A.$dartify(A._asJSObject(A._asJSObject(new init.G.MessageChannel()).port1)), new A.TypeMatcher(type$.TypeMatcher_JSObject), null);
    },
    $signature: 1
  };
  A.execute____closure153.prototype = {
    call$0() {
      var t2, _null = null,
        channel = A._asJSObject(new init.G.MessageChannel()),
        x = A.$dartify(A._setArrayType([new Uint16Array(A._ensureNativeList(A._setArrayType([1, 2, 3], type$.JSArray_int))), A._setArrayType([1, 2, 3], type$.JSArray_double), A._asJSObject(channel.port1)], type$.JSArray_JSObject)),
        t1 = type$.TypeMatcher_List_dynamic;
      A.expect(x, new A.TypeMatcher(t1), _null);
      type$.List_dynamic._as(x);
      t2 = J.getInterceptor$asx(x);
      A.expect(t2.$index(x, 0), new A.TypeMatcher(type$.TypeMatcher_Uint16List), _null);
      A.expect(t2.$index(x, 1), new A.TypeMatcher(t1), _null);
      A.expect(t2.$index(x, 2), new A.TypeMatcher(type$.TypeMatcher_JSObject), _null);
    },
    $signature: 1
  };
  A.execute____closure154.prototype = {
    call$0() {
      var t1, t2, t3, _null = null,
        channel = A._asJSObject(new init.G.MessageChannel()),
        data = new Uint16Array(A._ensureNativeList(A._setArrayType([1, 2, 3], type$.JSArray_int))),
        x = A.$dartify(A._setArrayType([data, A._asJSObject(channel.port1), data, A._asJSObject(channel.port1)], type$.JSArray_JSObject));
      A.expect(x, new A.TypeMatcher(type$.TypeMatcher_List_dynamic), _null);
      type$.List_dynamic._as(x);
      t1 = J.getInterceptor$asx(x);
      t2 = type$.TypeMatcher_Uint16List;
      A.expect(t1.$index(x, 0), new A.TypeMatcher(t2), _null);
      t3 = type$.TypeMatcher_JSObject;
      A.expect(t1.$index(x, 1), new A.TypeMatcher(t3), _null);
      A.expect(t1.$index(x, 2), new A.TypeMatcher(t2), _null);
      A.expect(t1.$index(x, 3), new A.TypeMatcher(t3), _null);
      t3 = t1.$index(x, 0);
      t2 = t1.$index(x, 2);
      A.expect(t3 == null ? t2 == null : t3 === t2, B.C__IsTrue, _null);
      t2 = t1.$index(x, 1);
      t1 = t1.$index(x, 3);
      A.expect(t2 == null ? t1 == null : t2 === t1, B.C__IsTrue, _null);
    },
    $signature: 1
  };
  A.execute____closure155.prototype = {
    call$0() {
      var x, t1, t2, t3, t4, _null = null,
        channel = A._asJSObject(new init.G.MessageChannel()),
        data = new Uint16Array(A._ensureNativeList(A._setArrayType([1, 2, 3], type$.JSArray_int))),
        l = A._setArrayType([data, A._asJSObject(channel.port1), data, A._asJSObject(channel.port1)], type$.JSArray_JSObject);
      A._asInt(l.push(l));
      x = A.$dartify(l);
      t1 = type$.TypeMatcher_List_dynamic;
      A.expect(x, new A.TypeMatcher(t1), _null);
      type$.List_dynamic._as(x);
      t2 = J.getInterceptor$asx(x);
      t3 = type$.TypeMatcher_Uint16List;
      A.expect(t2.$index(x, 0), new A.TypeMatcher(t3), _null);
      t4 = type$.TypeMatcher_JSObject;
      A.expect(t2.$index(x, 1), new A.TypeMatcher(t4), _null);
      A.expect(t2.$index(x, 2), new A.TypeMatcher(t3), _null);
      A.expect(t2.$index(x, 3), new A.TypeMatcher(t4), _null);
      A.expect(t2.$index(x, 4), new A.TypeMatcher(t1), _null);
      t1 = t2.$index(x, 0);
      t4 = t2.$index(x, 2);
      A.expect(t1 == null ? t4 == null : t1 === t4, B.C__IsTrue, _null);
      t4 = t2.$index(x, 1);
      t1 = t2.$index(x, 3);
      A.expect(t4 == null ? t1 == null : t4 === t1, B.C__IsTrue, _null);
      A.expect(t2.$index(x, 4) === x, B.C__IsTrue, _null);
    },
    $signature: 1
  };
  A.execute___closure109.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Base types don't need transfer", new A.execute____closure137());
      t1.test$2("- JSArrayBuffer - same instance", new A.execute____closure138());
      t1.test$2("- JSArrayBuffer - different instances", new A.execute____closure139());
      t1.test$2("- JSArrayBuffer - same buffer", new A.execute____closure140());
      t1.test$2("- MessagePort - same instance", new A.execute____closure141());
      t1.test$2("- MessagePort - different instances", new A.execute____closure142());
    },
    $signature: 1
  };
  A.execute____closure137.prototype = {
    call$0() {
      var array, map,
        t1 = init.G,
        t2 = type$.JSArray_nullable_Object,
        t = t2._as(new t1.Array());
      A.$transferify(1, t);
      A.$transferify(1.2, t);
      A.$transferify("Test", t);
      A.$transferify(true, t);
      A.$transferify(type$.JavaScriptBigInt._as(t1.BigInt("2")), t);
      A.$transferify(A.JSFunctionUnsafeUtilExtension_callAsConstructor($.$get$_$JSDateFunction(), 100, type$.JSObject), t);
      array = t2._as(new t1.Array());
      A._asInt(array.push(0));
      A._asInt(array.push(1));
      A.$transferify(array, t);
      map = A._asJSObject(new t1.Map());
      A._asJSObject(map.set("zero", 0));
      A._asJSObject(map.set("one", 1));
      A.$transferify(map, t);
      A.expect(A._asInt(t.length), B._OrderingMatcher_HCW, null);
    },
    $signature: 1
  };
  A.execute____closure138.prototype = {
    call$0() {
      var t1,
        t = type$.JSArray_nullable_Object._as(new init.G.Array()),
        u32 = new Uint32Array(4);
      A.$transferify(A._setArrayType([u32, u32], type$.JSArray_NativeUint32List), t);
      A.expect(A._asInt(t.length), 1, null);
      t1 = t.at(0);
      A.expect(t1 != null && A.JSAnyUtilityExtension_instanceOfString(t1, "ArrayBuffer"), B.C__IsTrue, null);
      A.expect(A._asInt(type$.NativeArrayBuffer._as(t.at(0)).byteLength), 16, null);
    },
    $signature: 1
  };
  A.execute____closure139.prototype = {
    call$0() {
      var t1, t2, _null = null,
        _s11_ = "ArrayBuffer",
        t = type$.JSArray_nullable_Object._as(new init.G.Array()),
        u8 = new Uint8Array(4);
      A.$transferify(A._setArrayType([u8, new Uint32Array(4)], type$.JSArray_NativeTypedData), t);
      A.expect(A._asInt(t.length), 2, _null);
      t1 = t.at(0);
      A.expect(t1 != null && A.JSAnyUtilityExtension_instanceOfString(t1, _s11_), B.C__IsTrue, _null);
      t1 = type$.NativeArrayBuffer;
      A.expect(A._asInt(t1._as(t.at(0)).byteLength), 4, _null);
      t2 = t.at(1);
      A.expect(t2 != null && A.JSAnyUtilityExtension_instanceOfString(t2, _s11_), B.C__IsTrue, _null);
      A.expect(A._asInt(t1._as(t.at(1)).byteLength), 16, _null);
    },
    $signature: 1
  };
  A.execute____closure140.prototype = {
    call$0() {
      var t3, t4, _null = null,
        _s11_ = "ArrayBuffer",
        t1 = init.G,
        t = type$.JSArray_nullable_Object._as(new t1.Array()),
        buffer = B.NativeByteData_methods.get$buffer(new DataView(new ArrayBuffer(16))),
        t2 = J.getInterceptor$x(buffer);
      A.$transferify(A._setArrayType([t2.asUint8List$0(buffer), t2.asUint32List$0(buffer)], type$.JSArray_NativeTypedData), t);
      if ($.$get$Squadron_platformType() === B.SquadronPlatformType_Dqj) {
        A.expect(A._asInt(t.length), 2, _null);
        t3 = t.at(0);
        A.expect(t3 != null && A.JSAnyUtilityExtension_instanceOfString(t3, _s11_), B.C__IsTrue, _null);
        t3 = type$.NativeArrayBuffer;
        A.expect(A._asInt(t3._as(t.at(0)).byteLength), t2.get$lengthInBytes(buffer), _null);
        t4 = t.at(1);
        A.expect(t4 != null && A.JSAnyUtilityExtension_instanceOfString(t4, _s11_), B.C__IsTrue, _null);
        A.expect(A._asInt(t3._as(t.at(1)).byteLength), t2.get$lengthInBytes(buffer), _null);
        A.expect(A._asBool(t1.Object.is(t.at(0), t.at(1))), B.C__IsFalse, _null);
      } else {
        A.expect(A._asInt(t.length), 1, _null);
        t3 = t.at(0);
        A.expect(t3 != null && A.JSAnyUtilityExtension_instanceOfString(t3, _s11_), B.C__IsTrue, _null);
        t3 = type$.NativeArrayBuffer;
        A.expect(A._asInt(t3._as(t.at(0)).byteLength), t2.get$lengthInBytes(buffer), _null);
        A.expect(A._asBool(t1.Object.is(t.at(0), t3._as(buffer))), B.C__IsTrue, _null);
      }
    },
    $signature: 1
  };
  A.execute____closure141.prototype = {
    call$0() {
      var t1 = init.G,
        t = type$.JSArray_nullable_Object._as(new t1.Array()),
        channel1 = A._asJSObject(new t1.MessageChannel());
      A.$transferify(A._setArrayType([A._asJSObject(channel1.port1), A._asJSObject(channel1.port1)], type$.JSArray_JSObject), t);
      A.expect(A._asInt(t.length), 1, null);
      t1 = t.at(0);
      A.expect(t1 != null && A.JSAnyUtilityExtension_instanceOfString(t1, "MessagePort"), B.C__IsTrue, null);
    },
    $signature: 1
  };
  A.execute____closure142.prototype = {
    call$0() {
      var t2, _null = null,
        _s11_ = "MessagePort",
        t1 = init.G,
        t = type$.JSArray_nullable_Object._as(new t1.Array()),
        channel1 = A._asJSObject(new t1.MessageChannel()),
        channel2 = A._asJSObject(new t1.MessageChannel());
      A.$transferify(A._setArrayType([A._asJSObject(channel1.port1), A._asJSObject(channel2.port1)], type$.JSArray_JSObject), t);
      A.expect(A._asInt(t.length), 2, _null);
      t2 = t.at(0);
      A.expect(t2 != null && A.JSAnyUtilityExtension_instanceOfString(t2, _s11_), B.C__IsTrue, _null);
      t2 = t.at(1);
      A.expect(t2 != null && A.JSAnyUtilityExtension_instanceOfString(t2, _s11_), B.C__IsTrue, _null);
      A.expect(A._asBool(t1.Object.is(t.at(0), t.at(1))), B.C__IsFalse, _null);
    },
    $signature: 1
  };
  A.execute_closure12.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- NOT A WORKER", new A.execute__closure17(t1));
    },
    $signature: 2
  };
  A.execute__closure17.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = t1.workerPlatform;
      t1.test$3$skip("- Dart program (VM)", new A.execute___closure110(t1), t2 !== B.SquadronPlatformType_Rhi);
      t2 = t2 === B.SquadronPlatformType_JavaScript_js || t2 === B.SquadronPlatformType_Dqj;
      t1.test$3$skip("- Dart program (Web)", new A.execute___closure111(t1), !t2);
    },
    $signature: 1
  };
  A.execute___closure110.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.NotAWorker$($async$self.tc), new A.execute____closure173(), type$.NotAWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure173.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure66(type$.NotAWorker._as(w));
    },
    $call$body$execute____closure66(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t1.expired = t1.started = false;
              t1.error = null;
              t2 = type$.bool;
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(A._setArrayType([w.start$0().then$1$2$onError(new A.execute_____closure76(t1), new A.execute_____closure77(t1), t2), A.Future_Future$delayed(A.Duration$(0, 0, 0, 0, 1), null, type$.dynamic).then$1$1(new A.execute_____closure78(t1), t2)], type$.JSArray_Future_bool), false, t2), $async$call$1);
            case 2:
              // returning from await.
              A.expect(t1.expired, B.C__IsTrue, null);
              A.expect(t1.started, B.C__IsFalse, null);
              A.expect(t1.error, new A.TypeMatcher(type$.TypeMatcher_SquadronError), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 119
  };
  A.execute_____closure76.prototype = {
    call$1(_) {
      type$.Channel._as(_);
      return this._box_0.started = true;
    },
    $signature: 120
  };
  A.execute_____closure77.prototype = {
    call$1(ex) {
      this._box_0.error = ex;
      return ex == null;
    },
    $signature: 17
  };
  A.execute_____closure78.prototype = {
    call$1(_) {
      return this._box_0.expired = true;
    },
    $signature: 17
  };
  A.execute___closure111.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.NotAWorker$($async$self.tc), new A.execute____closure172(), type$.NotAWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure172.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure65(type$.NotAWorker._as(w));
    },
    $call$body$execute____closure65(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t1.expired = t1.started = false;
              t1.error = null;
              t2 = type$.bool;
              $async$goto = 2;
              return A._asyncAwait(A.Future_any(A._setArrayType([w.start$0().then$1$2$onError(new A.execute_____closure73(t1), new A.execute_____closure74(t1), t2), A.Future_Future$delayed(A.Duration$(0, 0, 0, 0, 1), null, type$.dynamic).then$1$1(new A.execute_____closure75(t1), t2)], type$.JSArray_Future_bool), t2), $async$call$1);
            case 2:
              // returning from await.
              A.expect(t1.expired || type$.SquadronError._is(t1.error), B.C__IsTrue, null);
              A.expect(t1.started, B.C__IsFalse, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 119
  };
  A.execute_____closure73.prototype = {
    call$1(_) {
      type$.Channel._as(_);
      return this._box_1.started = true;
    },
    $signature: 120
  };
  A.execute_____closure74.prototype = {
    call$1(ex) {
      this._box_1.error = ex;
      return ex == null;
    },
    $signature: 17
  };
  A.execute_____closure75.prototype = {
    call$1(_) {
      return this._box_1.expired = true;
    },
    $signature: 17
  };
  A.execute_closure10.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- WEB WORKER", new A.execute__closure15(t1));
    },
    $signature: 2
  };
  A.execute__closure15.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- JavaScript Web Worker", new A.execute___closure101(t1));
      t1.test$2("- JavaScript Web Worker (in-memory)", new A.execute___closure102(t1));
      t1.test$2("- Dart Web Worker", new A.execute___closure103(t1));
      t1.test$2("- Missing Web Worker (JavaScript)", new A.execute___closure104());
      t1.test$2("- Missing Web Worker (WebAssembly)", new A.execute___closure105());
    },
    $signature: 1
  };
  A.execute___closure101.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$next = [], $async$self = this, ep, w, res, t1, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc.entryPoints.native;
              t1.toString;
              ep = A.EntryPointUri_EntryPointUri$from(t1);
              w = A._asJSObject(new init.G.Worker(ep.uri));
              $async$handler = 2;
              res = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_String), type$._AsyncCompleter_String);
              t1 = A._functionToJS1(new A.execute____closure135(res));
              w.onmessageerror = t1;
              w.onerror = t1;
              w.onmessage = A._functionToJS1(new A.execute____closure136(res));
              w.postMessage("Hello");
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(res.future, $async$call$0);
            case 5:
              // returning from await.
              $async$temp1.expect($async$result, 'ECHO "Hello"', null);
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              ep.release$0();
              w.terminate();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure135.prototype = {
    call$1(e) {
      this.res.completeError$1(A._errorFromEvent(A._asJSObject(e)));
    },
    $signature: 24
  };
  A.execute____closure136.prototype = {
    call$1(e) {
      var ex, t1, exception;
      A._asJSObject(e);
      try {
        t1 = e.data;
        t1 = t1 == null ? null : J.toString$0$(A.dartify(t1));
        this.res.complete$1(t1);
      } catch (exception) {
        ex = A.unwrapException(exception);
        this.res.completeError$1(ex);
      }
    },
    $signature: 24
  };
  A.execute___closure102.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$next = [], $async$self = this, ep, w, res, t1, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc.entryPoints.inMemory;
              t1.toString;
              ep = A.EntryPointUri_EntryPointUri$from(t1);
              w = A._asJSObject(new init.G.Worker(ep.uri));
              $async$handler = 2;
              res = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_String), type$._AsyncCompleter_String);
              t1 = A._functionToJS1(new A.execute____closure133(res));
              w.onmessageerror = t1;
              w.onerror = t1;
              w.onmessage = A._functionToJS1(new A.execute____closure134(res));
              w.postMessage("Hello");
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(res.future, $async$call$0);
            case 5:
              // returning from await.
              $async$temp1.expect($async$result, 'ECHO "Hello"', null);
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              ep.release$0();
              w.terminate();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure133.prototype = {
    call$1(e) {
      this.res.completeError$1(A._errorFromEvent(A._asJSObject(e)));
    },
    $signature: 24
  };
  A.execute____closure134.prototype = {
    call$1(e) {
      var ex, t1, exception;
      A._asJSObject(e);
      try {
        t1 = e.data;
        t1 = t1 == null ? null : J.toString$0$(A.dartify(t1));
        this.res.complete$1(t1);
      } catch (exception) {
        ex = A.unwrapException(exception);
        this.res.completeError$1(ex);
      }
    },
    $signature: 24
  };
  A.execute___closure103.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$next = [], $async$self = this, ep, w, ready, res, t1, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc.entryPoints.echo;
              t1.toString;
              ep = A.EntryPointUri_EntryPointUri$from(t1);
              w = A._asJSObject(new init.G.Worker(ep.uri));
              $async$handler = 2;
              t1 = $.Zone__current;
              ready = new A._AsyncCompleter(new A._Future(t1, type$._Future_bool), type$._AsyncCompleter_bool);
              res = new A._AsyncCompleter(new A._Future(t1, type$._Future_String), type$._AsyncCompleter_String);
              t1 = A._functionToJS1(new A.execute____closure131(ready, res));
              w.onmessageerror = t1;
              w.onerror = t1;
              w.onmessage = A._functionToJS1(new A.execute____closure132(ready, res));
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(ready.future, $async$call$0);
            case 5:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              w.postMessage("Hello");
              $async$temp1 = A;
              $async$goto = 6;
              return A._asyncAwait(res.future, $async$call$0);
            case 6:
              // returning from await.
              $async$temp1.expect($async$result, 'ECHO "Hello"', null);
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              ep.release$0();
              w.terminate();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure131.prototype = {
    call$1(e) {
      var err = A._errorFromEvent(A._asJSObject(e));
      this.ready.completeError$1(err);
      this.res.completeError$1(err);
    },
    $signature: 24
  };
  A.execute____closure132.prototype = {
    call$1(e) {
      var $status, t1;
      A._asJSObject(e);
      t1 = this.ready;
      if ((t1.future._state & 30) === 0) {
        $status = A.WorkerResponseImpl_from(type$.List_dynamic._as(A.dartify(e.data)));
        t1.complete$1(type$.nullable_FutureOr_bool._as(A.WorkerResponse_get_result($status)));
      } else {
        t1 = A.dartify(e.data);
        t1 = t1 == null ? null : J.toString$0$(t1);
        if (t1 == null)
          t1 = "";
        this.res.complete$1(t1);
      }
    },
    $signature: 24
  };
  A.execute___closure104.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$next = [], res, t1, ep, w;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              ep = A.EntryPointUri_EntryPointUri$from(A.Uri_parse("not_found.js"));
              w = A._asJSObject(new init.G.Worker(ep.uri));
              $async$handler = 2;
              res = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_String), type$._AsyncCompleter_String);
              t1 = A._functionToJS1(new A.execute____closure129(res));
              w.onmessageerror = t1;
              w.onerror = t1;
              w.onmessage = A._functionToJS1(new A.execute____closure130(res));
              w.postMessage("Hello");
              $async$goto = 5;
              return A._asyncAwait(A._expect(res.future, new A.Throws(A.wrapMatcher(new A.TypeMatcher(type$.TypeMatcher_SquadronError))), null, null, null, false), $async$call$0);
            case 5:
              // returning from await.
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              ep.release$0();
              w.terminate();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure129.prototype = {
    call$1(e) {
      this.res.completeError$1(A._errorFromEvent(A._asJSObject(e)));
    },
    $signature: 24
  };
  A.execute____closure130.prototype = {
    call$1(e) {
      this.res.complete$1("handled " + A.S(A._asJSObject(e)));
    },
    $signature: 24
  };
  A.execute___closure105.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$next = [], completer, res, ex, t1, exception, ep, w, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              ep = A.EntryPointUri_EntryPointUri$from(A.Uri_parse("not_found.wasm"));
              w = A._asJSObject(new init.G.Worker(ep.uri));
              $async$handler = 2;
              completer = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_String), type$._AsyncCompleter_String);
              t1 = A._functionToJS1(new A.execute____closure127(completer));
              w.onmessageerror = t1;
              w.onerror = t1;
              w.onmessage = A._functionToJS1(new A.execute____closure128(completer));
              w.postMessage("Hello");
              $async$handler = 6;
              $async$goto = 9;
              return A._asyncAwait(completer.future, $async$call$0);
            case 9:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("postMessage", res);
              throw A.wrapException(t1);
              $async$handler = 2;
              // goto after finally
              $async$goto = 8;
              break;
            case 6:
              // catch
              $async$handler = 5;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronError._is(t1)) {
                ex = t1;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Failed to load Web Worker"))), null);
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("not_found.wasm"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 8;
              break;
            case 5:
              // uncaught
              // goto uncaught
              $async$goto = 2;
              break;
            case 8:
              // after finally
              $async$next.push(4);
              // goto finally
              $async$goto = 3;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 3:
              // finally
              $async$handler = 1;
              ep.release$0();
              w.terminate();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 4:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure127.prototype = {
    call$1(e) {
      this.completer.completeError$1(A._errorFromEvent(A._asJSObject(e)));
    },
    $signature: 24
  };
  A.execute____closure128.prototype = {
    call$1(e) {
      var res, error, ex, t1, exception;
      A._asJSObject(e);
      try {
        res = A.WorkerResponseImpl_from(type$.List_dynamic._as(A.dartify(e.data)));
        t1 = type$.dynamic;
        t1 = A.LinkedHashMap_LinkedHashMap$from($.builtinExceptions, t1, t1);
        if (A.WorkerResponseImpl_unwrapInPlace(res, new A.DisconnectedChannel(new A.ExceptionManager(t1), null))) {
          error = type$.nullable_SquadronException._as(J.$index$asx(res, 2));
          t1 = this.completer;
          if (error != null)
            t1.completeError$1(error);
          else
            t1.complete$1(J.toString$0$(A.WorkerResponse_get_result(res)));
        }
      } catch (exception) {
        ex = A.unwrapException(exception);
        this.completer.completeError$1(new A._Exception("Unexpected: " + A.S(ex)));
      }
    },
    $signature: 24
  };
  A.execute_closure3.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- LOGGING", new A.execute__closure4(t1));
    },
    $signature: 2
  };
  A.execute__closure4.prototype = {
    call$0() {
      var logger = A.MemoryLogger$(),
        t1 = A._declarer(),
        t2 = type$.dynamic_Function,
        t3 = t2._as(new A.execute___closure25(logger));
      t1._checkNotBuilt$1("setUp");
      B.JSArray_methods.add$1(t1._setUps, t3);
      t3 = A._declarer();
      t2 = t2._as(new A.execute___closure26(logger));
      t3._checkNotBuilt$1("tearDown");
      B.JSArray_methods.add$1(t3._tearDowns, t2);
      t2 = this.tc;
      t2.test$2("Level.off", new A.execute___closure27(t2, logger));
      t2.test$2("Level.fatal", new A.execute___closure28(t2, logger));
      t2.test$2("Level.error", new A.execute___closure29(t2, logger));
      t2.test$2("Level.warning", new A.execute___closure30(t2, logger));
      t2.test$2("Level.info", new A.execute___closure31(t2, logger));
      t2.test$2("Level.debug", new A.execute___closure32(t2, logger));
      t2.test$2("Level.trace", new A.execute___closure33(t2, logger));
      t2.test$2("Level.all", new A.execute___closure34(t2, logger));
    },
    $signature: 1
  };
  A.execute___closure25.prototype = {
    call$0() {
      var t1 = this.logger;
      B.JSArray_methods.clear$0(t1._logs);
      t1._memory_logger$_filter._level = B.Level_0_all;
    },
    $signature: 1
  };
  A.execute___closure26.prototype = {
    call$0() {
      B.JSArray_methods.clear$0(this.logger._logs);
    },
    $signature: 1
  };
  A.execute___closure27.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LogWorker$($async$self.tc), new A.execute____closure51($async$self.logger), type$.LogWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure51.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure17(type$.LogWorker._as(w));
    },
    $call$body$execute____closure17(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = w.channelLogger = $async$self.logger;
              $async$goto = 2;
              return A._asyncAwait(w.send$2$args(1, [10000]), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(w.send$1(2), $async$call$1);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, type$.dynamic), $async$call$1);
            case 4:
              // returning from await.
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("trace")))), null);
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("debug")))), null);
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("info")))), null);
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("warning")))), null);
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("error")))), null);
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("fatal")))), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 44
  };
  A.execute___closure28.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LogWorker$($async$self.tc), new A.execute____closure50($async$self.logger), type$.LogWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure50.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure16(type$.LogWorker._as(w));
    },
    $call$body$execute____closure16(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = w.channelLogger = $async$self.logger;
              $async$goto = 2;
              return A._asyncAwait(w.send$2$args(1, [6000]), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(w.send$1(2), $async$call$1);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, type$.dynamic), $async$call$1);
            case 4:
              // returning from await.
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("trace")))), null);
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("debug")))), null);
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("info")))), null);
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("warning")))), null);
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("error")))), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("fatal")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 44
  };
  A.execute___closure29.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LogWorker$($async$self.tc), new A.execute____closure49($async$self.logger), type$.LogWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure49.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure15(type$.LogWorker._as(w));
    },
    $call$body$execute____closure15(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = w.channelLogger = $async$self.logger;
              $async$goto = 2;
              return A._asyncAwait(w.send$2$args(1, [5000]), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(w.send$1(2), $async$call$1);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, type$.dynamic), $async$call$1);
            case 4:
              // returning from await.
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("trace")))), null);
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("debug")))), null);
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("info")))), null);
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("warning")))), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("error")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("fatal")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 44
  };
  A.execute___closure30.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LogWorker$($async$self.tc), new A.execute____closure48($async$self.logger), type$.LogWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure48.prototype = {
    call$1(worker) {
      return this.$call$body$execute____closure14(type$.LogWorker._as(worker));
    },
    $call$body$execute____closure14(worker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = worker.channelLogger = $async$self.logger;
              $async$goto = 2;
              return A._asyncAwait(worker.send$2$args(1, [4000]), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(worker.send$1(2), $async$call$1);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, type$.dynamic), $async$call$1);
            case 4:
              // returning from await.
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("trace")))), null);
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("debug")))), null);
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("info")))), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("warning")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("error")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("fatal")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 44
  };
  A.execute___closure31.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LogWorker$($async$self.tc), new A.execute____closure47($async$self.logger), type$.LogWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure47.prototype = {
    call$1(worker) {
      return this.$call$body$execute____closure13(type$.LogWorker._as(worker));
    },
    $call$body$execute____closure13(worker) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = worker.channelLogger = $async$self.logger;
              $async$goto = 2;
              return A._asyncAwait(worker.send$2$args(1, [3000]), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(worker.send$1(2), $async$call$1);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, type$.dynamic), $async$call$1);
            case 4:
              // returning from await.
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("trace")))), null);
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("debug")))), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("info")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("warning")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("error")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("fatal")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 44
  };
  A.execute___closure32.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LogWorker$($async$self.tc), new A.execute____closure46($async$self.logger), type$.LogWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure46.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure12(type$.LogWorker._as(w));
    },
    $call$body$execute____closure12(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = w.channelLogger = $async$self.logger;
              $async$goto = 2;
              return A._asyncAwait(w.send$2$args(1, [2000]), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(w.send$1(2), $async$call$1);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, type$.dynamic), $async$call$1);
            case 4:
              // returning from await.
              A.expect(t1.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("trace")))), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("debug")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("info")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("warning")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("error")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("fatal")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 44
  };
  A.execute___closure33.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LogWorker$($async$self.tc), new A.execute____closure45($async$self.logger), type$.LogWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure45.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure11(type$.LogWorker._as(w));
    },
    $call$body$execute____closure11(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = w.channelLogger = $async$self.logger;
              $async$goto = 2;
              return A._asyncAwait(w.send$2$args(1, [1000]), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(w.send$1(2), $async$call$1);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, type$.dynamic), $async$call$1);
            case 4:
              // returning from await.
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("trace")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("debug")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("info")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("warning")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("error")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("fatal")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 44
  };
  A.execute___closure34.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LogWorker$($async$self.tc), new A.execute____closure44($async$self.logger), type$.LogWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure44.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure10(type$.LogWorker._as(w));
    },
    $call$body$execute____closure10(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = w.channelLogger = $async$self.logger;
              $async$goto = 2;
              return A._asyncAwait(w.send$2$args(1, [0]), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(w.send$1(2), $async$call$1);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, type$.dynamic), $async$call$1);
            case 4:
              // returning from await.
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("trace")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("debug")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("info")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("warning")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("error")), null);
              A.expect(t1.get$logs(), new A._Contains(A._MatchesRegExp$("fatal")), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 44
  };
  A.execute_closure2.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- LAZY COLLECTIONS", new A.execute__closure2(t1));
      t1.group$2("- CONVERTERS", new A.execute__closure3(t1));
    },
    $signature: 2
  };
  A.execute__closure2.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- Lazy list", new A.execute___closure23(t1));
      t1.group$2("- Lazy map", new A.execute___closure24(t1));
    },
    $signature: 1
  };
  A.execute___closure23.prototype = {
    call$0() {
      A.testLazyLists(this.tc);
    },
    $signature: 1
  };
  A.execute___closure24.prototype = {
    call$0() {
      A.testLazyMaps(this.tc);
    },
    $signature: 1
  };
  A.execute__closure3.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Type checks per platform", new A.execute___closure19());
      t1.test$2("- Custom identity is not considered an identity", new A.execute___closure20());
      A.testCastConverter(t1);
      A.testNumConverter(t1);
      A.testContextAwareConverter(t1);
      t1.test$2("- Change default converter", new A.execute___closure21());
      t1.test$2("- Converter listeners", new A.execute___closure22());
    },
    $signature: 1
  };
  A.execute___closure19.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.TypeMatcher_int;
              A.expect(1.1, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(t1))), null);
              t2 = type$.TypeMatcher_double;
              A.expect(1.1, new A.TypeMatcher(t2), null);
              A.expect(1, new A.TypeMatcher(t2), null);
              $async$goto = $.$get$Squadron_platformType() === B.SquadronPlatformType_JavaScript_js ? 2 : 4;
              break;
            case 2:
              // then
              A.expect(1, new A.TypeMatcher(t1), null);
              A.expect(1, 1, null);
              // goto join
              $async$goto = 3;
              break;
            case 4:
              // else
              A.expect(1, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(t1))), null);
              $async$goto = 5;
              return A._asyncAwait(A._expect(new A.execute____closure43(1), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 5:
              // returning from await.
            case 3:
              // join
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure43.prototype = {
    call$0() {
      return this.one;
    },
    $signature: 12
  };
  A.execute___closure20.prototype = {
    call$0() {
      A.expect(J.$eq$(A.lib_03_converter_test___asInt$closure(), A.instantiate1(A.converter_Converter_identity$closure(), type$.int)), B.C__IsFalse, null);
    },
    $signature: 1
  };
  A.execute___closure21.prototype = {
    call$0() {
      var key, key0, _null = null, t1 = {},
        defaultConverter = $.$get$Squadron__converter(),
        converter = new A.NumConverter();
      t1.success = false;
      t1.called = 0;
      key0 = new A.Object();
      $.Squadron__converterChangeHandlers.$indexSet(0, key0, new A.execute___closure_check(t1, converter));
      key = key0;
      try {
        A.expect(t1.success, B.C__IsFalse, _null);
        A.Squadron_converter(converter);
        A.expect(t1.success, B.C__IsTrue, _null);
        A.expect(t1.called, 1, _null);
        A.expect($.$get$Squadron__converter(), converter, _null);
        A.Squadron_converter(converter);
        A.expect(t1.success, B.C__IsTrue, _null);
        A.expect(t1.called, 1, _null);
        A.expect($.$get$Squadron__converter(), converter, _null);
        A.Squadron_converter(defaultConverter);
        A.expect(t1.success, B.C__IsFalse, _null);
        A.expect(t1.called, 2, _null);
        A.expect($.$get$Squadron__converter(), defaultConverter, _null);
        A.Squadron_converter(new A.CastConverter());
        A.expect(t1.success, B.C__IsFalse, _null);
        A.expect(t1.called, 3, _null);
        A.expect($.$get$Squadron__converter(), new A._IsNot(A.wrapMatcher(converter)), _null);
        A.expect($.$get$Squadron__converter(), new A._IsNot(A.wrapMatcher(defaultConverter)), _null);
        t1.success = true;
        $.Squadron__converterChangeHandlers.remove$1(0, key);
        A.Squadron_converter(_null);
        A.expect(t1.success, B.C__IsTrue, _null);
        A.expect(t1.called, 3, _null);
        A.expect($.$get$Squadron__converter(), defaultConverter, _null);
      } finally {
        $.Squadron__converterChangeHandlers.remove$1(0, key);
        A.Squadron_converter(defaultConverter);
      }
    },
    $signature: 1
  };
  A.execute___closure_check.prototype = {
    call$0() {
      var t1 = this._box_0;
      ++t1.called;
      t1.success = $.$get$Squadron__converter() === this.converter;
    },
    $signature: 2
  };
  A.execute___closure22.prototype = {
    call$0() {
      var key1, key2, key, _null = null, t1 = {},
        defaultConverter = $.$get$Squadron__converter(),
        converter = new A.NumConverter();
      t1.called2 = t1.called1 = 0;
      key = new A.Object();
      $.Squadron__converterChangeHandlers.$indexSet(0, key, new A.execute___closure_check1(t1));
      key1 = key;
      key = new A.Object();
      $.Squadron__converterChangeHandlers.$indexSet(0, key, new A.execute___closure_check2(t1));
      key2 = key;
      try {
        A.Squadron_converter(converter);
        A.expect(t1.called1, 1, _null);
        A.expect(t1.called2, 1, _null);
        A.Squadron_converter(converter);
        A.expect(t1.called1, 1, _null);
        A.expect(t1.called2, 1, _null);
        A.Squadron_converter(defaultConverter);
        A.expect(t1.called1, 2, _null);
        A.expect(t1.called2, 2, _null);
        $.Squadron__converterChangeHandlers.remove$1(0, key1);
        A.Squadron_converter(new A.CastConverter());
        A.expect(t1.called1, 2, _null);
        A.expect(t1.called2, 3, _null);
        $.Squadron__converterChangeHandlers.remove$1(0, key1);
        $.Squadron__converterChangeHandlers.remove$1(0, key2);
        A.Squadron_converter(_null);
        A.expect(t1.called1, 2, _null);
        A.expect(t1.called2, 3, _null);
      } finally {
        $.Squadron__converterChangeHandlers.remove$1(0, key1);
        $.Squadron__converterChangeHandlers.remove$1(0, key2);
        A.Squadron_converter(defaultConverter);
      }
    },
    $signature: 1
  };
  A.execute___closure_check1.prototype = {
    call$0() {
      return this._box_1.called1++;
    },
    $signature: 2
  };
  A.execute___closure_check2.prototype = {
    call$0() {
      return this._box_1.called2++;
    },
    $signature: 2
  };
  A.testCastConverter_closure.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- Integers", new A.testCastConverter__closure(B.C_CastConverter, t1));
      t1.group$2("- Doubles", new A.testCastConverter__closure0(B.C_CastConverter, t1));
      t1.group$2("- Lists", new A.testCastConverter__closure1(t1, B.C_CastConverter));
      t1.group$2("- Sets", new A.testCastConverter__closure2(t1, B.C_CastConverter));
      t1.group$2("- Maps", new A.testCastConverter__closure3(t1, B.C_CastConverter));
      t1.group$2("Instances", new A.testCastConverter__closure4(t1, B.C_CastConverter));
    },
    $signature: 1
  };
  A.testCastConverter__closure.prototype = {
    call$0() {
      var $$toInt, $$toNullableInt, t2,
        t1 = type$.int;
      A.checkTypeBound(t1, type$.Object, "T", "value");
      $$toInt = A.instantiate1(A.converter_Converter_identity$closure(), t1);
      $$toNullableInt = A.Converter_allowNull($$toInt, t1);
      t1 = new A.testCastConverter__closure_$fails0($$toInt, $$toNullableInt);
      t2 = this.tc;
      t2.test$2("- Converters are identities", new A.testCastConverter___closure29($$toInt, $$toNullableInt));
      t2.test$2("- int", new A.testCastConverter___closure30(new A.testCastConverter__closure_$succeeds0($$toInt, $$toNullableInt)));
      t2.test$2("- double", new A.testCastConverter___closure31(new A.testCastConverter__closure_$platformSensitive0($$toInt, $$toNullableInt), t1));
      t2.test$2("- null", new A.testCastConverter___closure32(t1));
      t2.test$2("- bool", new A.testCastConverter___closure33(t1));
      t2.test$2("- String", new A.testCastConverter___closure34(t1));
      t2.test$2("- Object", new A.testCastConverter___closure35(t1));
    },
    $signature: 1
  };
  A.testCastConverter__closure_$platformSensitive0.prototype = {
    call$1(value) {
      var res, ex, res0, ex0, exception,
        _s19_ = "Operation succeeded",
        _s16_ = "Operation failed";
      try {
        res = this.$$toInt.call$1(value);
        A.expect(res, value, null);
        A._unexpectedSuccessIfNonJs(_s19_, res);
      } catch (exception) {
        ex = A.unwrapException(exception);
        A._unexpectedFailureIfJs(_s16_, ex);
        if (!A._isTypeError(ex))
          throw exception;
      }
      try {
        res0 = this.$$toNullableInt.call$1(value);
        A.expect(res0, value, null);
        A._unexpectedSuccessIfNonJs(_s19_, res0);
      } catch (exception) {
        ex0 = A.unwrapException(exception);
        A._unexpectedFailureIfJs(_s16_, ex0);
        if (!A._isTypeError(ex0))
          throw exception;
      }
    },
    $signature: 16
  };
  A.testCastConverter__closure_$fails0.prototype = {
    call$1(value) {
      var res, ex, res0, ex0, t1, exception;
      try {
        res = this.$$toInt.call$1(value);
        t1 = res;
        if (t1 != null)
          A.S(t1);
      } catch (exception) {
        ex = A.unwrapException(exception);
        if (!A._isTypeError(ex))
          throw exception;
      }
      if (value == null)
        A.expect(this.$$toNullableInt.call$1(value), B.C__IsNull, null);
      else
        try {
          res0 = this.$$toNullableInt.call$1(value);
          t1 = res0;
          if (t1 != null)
            A.S(t1);
        } catch (exception) {
          ex0 = A.unwrapException(exception);
          if (!A._isTypeError(ex0))
            throw exception;
        }
    },
    $signature: 16
  };
  A.testCastConverter__closure_$succeeds0.prototype = {
    call$1(value) {
      A.expect(this.$$toInt.call$1(value), value, null);
      A.expect(this.$$toNullableInt.call$1(value), value, null);
    },
    $signature: 16
  };
  A.testCastConverter___closure29.prototype = {
    call$0() {
      A.expect(J.$eq$(this.$$toInt, A.instantiate1(A.converter_Converter_identity$closure(), type$.int)), B.C__IsTrue, null);
      A.expect(J.$eq$(this.$$toNullableInt, A.instantiate1(A.converter_Converter_identity$closure(), type$.nullable_int)), B.C__IsTrue, null);
    },
    $signature: 1
  };
  A.testCastConverter___closure30.prototype = {
    call$0() {
      this.$$succeeds.call$1(5);
    },
    $signature: 1
  };
  A.testCastConverter___closure31.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$$platformSensitive;
              t1.call$1(5);
              t1.call$1(-0.0);
              t1.call$1(1 / 0);
              t1.call$1(-1 / 0);
              t1 = $async$self.$$fails;
              t1.call$1(5.5);
              t1.call$1(0 / 0);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter___closure32.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.$$fails.call$1(null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter___closure33.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$$fails;
              t1.call$1(true);
              t1.call$1(false);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter___closure34.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$$fails;
              t1.call$1("1");
              t1.call$1("");
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter___closure35.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.$$fails.call$1(new A.Object());
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter__closure0.prototype = {
    call$0() {
      var $$toDbl, $$toNullableDbl, t2,
        t1 = type$.double;
      A.checkTypeBound(t1, type$.Object, "T", "value");
      $$toDbl = A.instantiate1(A.converter_Converter_identity$closure(), t1);
      $$toNullableDbl = A.Converter_allowNull($$toDbl, t1);
      t1 = new A.testCastConverter__closure_$fails($$toDbl, $$toNullableDbl);
      t2 = this.tc;
      t2.test$2("- Converters are identities", new A.testCastConverter___closure22($$toDbl, $$toNullableDbl));
      t2.test$2("- int", new A.testCastConverter___closure23(new A.testCastConverter__closure_$platformSensitive($$toDbl, $$toNullableDbl)));
      t2.test$2("- double", new A.testCastConverter___closure24(new A.testCastConverter__closure_$succeeds($$toDbl, $$toNullableDbl), $$toDbl, $$toNullableDbl));
      t2.test$2("- null", new A.testCastConverter___closure25(t1));
      t2.test$2("- bool", new A.testCastConverter___closure26(t1));
      t2.test$2("- String", new A.testCastConverter___closure27(t1));
      t2.test$2("- Object", new A.testCastConverter___closure28(t1));
    },
    $signature: 1
  };
  A.testCastConverter__closure_$platformSensitive.prototype = {
    call$1(value) {
      var res, ex, res0, ex0, exception,
        _s19_ = "Operation succeeded",
        _s16_ = "Operation failed";
      try {
        res = this.$$toDbl.call$1(value);
        A.expect(res, value, null);
        A._unexpectedSuccessIfNonJs(_s19_, res);
      } catch (exception) {
        ex = A.unwrapException(exception);
        A._unexpectedFailureIfJs(_s16_, ex);
        if (!A._isTypeError(ex))
          throw exception;
      }
      try {
        res0 = this.$$toNullableDbl.call$1(value);
        A.expect(res0, value, null);
        A._unexpectedSuccessIfNonJs(_s19_, res0);
      } catch (exception) {
        ex0 = A.unwrapException(exception);
        A._unexpectedFailureIfJs(_s16_, ex0);
        if (!A._isTypeError(ex0))
          throw exception;
      }
    },
    $signature: 16
  };
  A.testCastConverter__closure_$fails.prototype = {
    call$1(value) {
      var res, ex, res0, ex0, t1, exception;
      try {
        res = this.$$toDbl.call$1(value);
        t1 = res;
        if (t1 != null)
          A.S(t1);
      } catch (exception) {
        ex = A.unwrapException(exception);
        if (!A._isTypeError(ex))
          throw exception;
      }
      if (value == null)
        A.expect(this.$$toNullableDbl.call$1(value), B.C__IsNull, null);
      else
        try {
          res0 = this.$$toNullableDbl.call$1(value);
          t1 = res0;
          if (t1 != null)
            A.S(t1);
        } catch (exception) {
          ex0 = A.unwrapException(exception);
          if (!A._isTypeError(ex0))
            throw exception;
        }
    },
    $signature: 16
  };
  A.testCastConverter__closure_$succeeds.prototype = {
    call$1(value) {
      A.expect(this.$$toDbl.call$1(value), value, null);
      A.expect(this.$$toNullableDbl.call$1(value), value, null);
    },
    $signature: 16
  };
  A.testCastConverter___closure22.prototype = {
    call$0() {
      A.expect(J.$eq$(this.$$toDbl, A.instantiate1(A.converter_Converter_identity$closure(), type$.double)), B.C__IsTrue, null);
      A.expect(J.$eq$(this.$$toNullableDbl, A.instantiate1(A.converter_Converter_identity$closure(), type$.nullable_double)), B.C__IsTrue, null);
    },
    $signature: 1
  };
  A.testCastConverter___closure23.prototype = {
    call$0() {
      this.$$platformSensitive.call$1(5);
    },
    $signature: 1
  };
  A.testCastConverter___closure24.prototype = {
    call$0() {
      var t1 = this.$$succeeds;
      t1.call$1(5.5);
      t1.call$1(-0.0);
      t1.call$1(1 / 0);
      t1.call$1(-1 / 0);
      A.expect(this.$$toDbl.call$1(0 / 0), B.C__IsNaN, null);
      A.expect(this.$$toNullableDbl.call$1(0 / 0), B.C__IsNaN, null);
    },
    $signature: 1
  };
  A.testCastConverter___closure25.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.$$fails.call$1(null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter___closure26.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$$fails;
              t1.call$1(true);
              t1.call$1(false);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter___closure27.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$$fails;
              t1.call$1("1");
              t1.call$1("1.1");
              t1.call$1("");
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter___closure28.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.$$fails.call$1(new A.Object());
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter__closure1.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.converter;
      t1.test$2("- Integers (cast conversion)", new A.testCastConverter___closure14(t2));
      t1.test$2("- Integers (custom conversion)", new A.testCastConverter___closure15(t2));
      t1.test$2("- Nullable integers", new A.testCastConverter___closure16(t2));
      t1.test$2(string$.x2d_Intea, new A.testCastConverter___closure17(t2));
      t1.test$2(string$.x2d_Inteu, new A.testCastConverter___closure18(t2));
      t1.test$2("- Doubles", new A.testCastConverter___closure19(t2));
      t1.test$2("- Nullable doubles", new A.testCastConverter___closure20(t2));
      t1.test$2("- Doubles + integer", new A.testCastConverter___closure21(t2));
    },
    $signature: 1
  };
  A.testCastConverter___closure14.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              B.JSArray_methods.addAll$1(data, $._listOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure19(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.list$1$0(type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_int), null);
              A.expect(res, data, null);
              A.expect(res, $._listOfInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure19.prototype = {
    call$0() {
      return type$.List_int._as(this.data);
    },
    $signature: 36
  };
  A.testCastConverter___closure15.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              B.JSArray_methods.addAll$1(data, $._listOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure18(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.list$1$1(A.lib_03_converter_test___asInt$closure(), type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_int), null);
              A.expect(res, $._listOfInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure18.prototype = {
    call$0() {
      return type$.List_int._as(this.data);
    },
    $signature: 36
  };
  A.testCastConverter___closure16.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              B.JSArray_methods.addAll$1(data, $._listOfNullableInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure17(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              t1 = type$.int;
              A.checkTypeBound(t1, type$.Object, "T", "value");
              res = $async$self.converter.nlist$1$1(A.instantiate1(A.converter_Converter_identity$closure(), t1), t1).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_nullable_int), null);
              A.expect(res, $._listOfNullableInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure17.prototype = {
    call$0() {
      return type$.List_nullable_int._as(this.data);
    },
    $signature: 99
  };
  A.testCastConverter___closure17.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              t1 = $.$get$_listOfIntsWithIntegralDouble();
              B.JSArray_methods.addAll$1(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure16(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.list$1$0(type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_int), null);
              try {
                A.expect(res, t1, null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (type$.TypeError._is(t1)) {
                  ex = t1;
                  A._unexpectedFailureIfJs("integral double to int", ex);
                } else
                  throw exception;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure16.prototype = {
    call$0() {
      return type$.List_int._as(this.data);
    },
    $signature: 36
  };
  A.testCastConverter___closure18.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              t1 = $.$get$_listOfIntsWithIntegralDouble();
              J.addAll$1$ax(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure15(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              try {
                res = $async$self.converter.list$1$1(A.lib_03_converter_test___asInt$closure(), type$.int).call$1(data);
                A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_int), null);
                A.expect(res, t1, null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (type$.TypeError._is(t1)) {
                  ex = t1;
                  A._unexpectedFailureIfJs("integral double to int", ex);
                } else
                  throw exception;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure15.prototype = {
    call$0() {
      return type$.List_int._as(this.data);
    },
    $signature: 36
  };
  A.testCastConverter___closure19.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              B.JSArray_methods.addAll$1(data, $._listOfDoubles);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure14(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.list$1$0(type$.double).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_double), null);
              A.expect(res, $._listOfDoubles, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure14.prototype = {
    call$0() {
      return type$.List_double._as(this.data);
    },
    $signature: 55
  };
  A.testCastConverter___closure20.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              B.JSArray_methods.addAll$1(data, $._listOfNullableDoubles);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure13(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              t1 = type$.double;
              A.checkTypeBound(t1, type$.Object, "T", "value");
              res = $async$self.converter.nlist$1$1(A.instantiate1(A.converter_Converter_identity$closure(), t1), t1).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_nullable_double), null);
              A.expect(res, $._listOfNullableDoubles, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure13.prototype = {
    call$0() {
      return type$.List_nullable_double._as(this.data);
    },
    $signature: 98
  };
  A.testCastConverter___closure21.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              t1 = $.$get$_listOfDoublesWithInt();
              B.JSArray_methods.addAll$1(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure12(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.list$1$0(type$.double).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_double), null);
              try {
                A.expect(res, t1, null);
                A._unexpectedSuccessIfNonJs("int to double", res);
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (type$.TypeError._is(t1)) {
                  ex = t1;
                  A._unexpectedFailureIfJs("int to double", ex);
                } else
                  throw exception;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure12.prototype = {
    call$0() {
      return type$.List_double._as(this.data);
    },
    $signature: 55
  };
  A.testCastConverter__closure2.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.converter;
      t1.test$2("- Integers (cast conversion)", new A.testCastConverter___closure6(t2));
      t1.test$2("- Integers (custom conversion)", new A.testCastConverter___closure7(t2));
      t1.test$2("- Nullable integers", new A.testCastConverter___closure8(t2));
      t1.test$2(string$.x2d_Intea, new A.testCastConverter___closure9(t2));
      t1.test$2(string$.x2d_Inteu, new A.testCastConverter___closure10(t2));
      t1.test$2("- Doubles", new A.testCastConverter___closure11(t2));
      t1.test$2("- Nullable doubles", new A.testCastConverter___closure12(t2));
      t1.test$2("- Doubles + integer", new A.testCastConverter___closure13(t2));
    },
    $signature: 1
  };
  A.testCastConverter___closure6.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              data.addAll$1(0, $._listOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure11(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.$set$1$0(type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_int), null);
              A.expect(res, A.LinkedHashSet_LinkedHashSet$from($._listOfInts, A._arrayInstanceType($._listOfInts)._precomputed1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure11.prototype = {
    call$0() {
      return type$.Set_int._as(this.data);
    },
    $signature: 26
  };
  A.testCastConverter___closure7.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              data.addAll$1(0, $._listOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure10(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.$set$1$0(type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_int), null);
              A.expect(res, A.LinkedHashSet_LinkedHashSet$from($._listOfInts, A._arrayInstanceType($._listOfInts)._precomputed1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure10.prototype = {
    call$0() {
      return type$.Set_int._as(this.data);
    },
    $signature: 26
  };
  A.testCastConverter___closure8.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              data.addAll$1(0, $._listOfNullableInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure9(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              t1 = type$.int;
              A.checkTypeBound(t1, type$.Object, "T", "value");
              res = $async$self.converter.nset$1$1(A.instantiate1(A.converter_Converter_identity$closure(), t1), t1).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_nullable_int), null);
              A.expect(res, A.LinkedHashSet_LinkedHashSet$from($._listOfNullableInts, A._arrayInstanceType($._listOfNullableInts)._precomputed1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure9.prototype = {
    call$0() {
      return type$.Set_nullable_int._as(this.data);
    },
    $signature: 95
  };
  A.testCastConverter___closure9.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              t1 = $.$get$_listOfIntsWithIntegralDouble();
              J.addAll$1$ax(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure8(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              try {
                res = $async$self.converter.$set$1$0(type$.int).call$1(data);
                A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_int), null);
                A.expect(res, A.LinkedHashSet_LinkedHashSet$from(t1, A._arrayInstanceType(t1)._precomputed1), null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                ex = A.unwrapException(exception);
                A._unexpectedFailureIfJs("integral double to int", ex);
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure8.prototype = {
    call$0() {
      return type$.Set_int._as(this.data);
    },
    $signature: 26
  };
  A.testCastConverter___closure10.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              t1 = $.$get$_listOfIntsWithIntegralDouble();
              J.addAll$1$ax(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure7(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              try {
                res = $async$self.converter.$set$1$1(A.lib_03_converter_test___asInt$closure(), type$.int).call$1(data);
                A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_int), null);
                A.expect(res, A.LinkedHashSet_LinkedHashSet$from(t1, A._arrayInstanceType(t1)._precomputed1), null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (type$.TypeError._is(t1)) {
                  ex = t1;
                  A._unexpectedFailureIfJs("integral double to int", ex);
                } else
                  throw exception;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure7.prototype = {
    call$0() {
      return type$.Set_int._as(this.data);
    },
    $signature: 26
  };
  A.testCastConverter___closure11.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              data.addAll$1(0, $._listOfDoubles);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure6(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.$set$1$0(type$.double).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_double), null);
              A.expect(res, A.LinkedHashSet_LinkedHashSet$from($._listOfDoubles, A._arrayInstanceType($._listOfDoubles)._precomputed1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure6.prototype = {
    call$0() {
      return type$.Set_double._as(this.data);
    },
    $signature: 59
  };
  A.testCastConverter___closure12.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              data.addAll$1(0, $._listOfNullableDoubles);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure5(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              t1 = type$.double;
              A.checkTypeBound(t1, type$.Object, "T", "value");
              res = $async$self.converter.nset$1$1(A.instantiate1(A.converter_Converter_identity$closure(), t1), t1).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_nullable_double), null);
              A.expect(res, A.LinkedHashSet_LinkedHashSet$from($._listOfNullableDoubles, A._arrayInstanceType($._listOfNullableDoubles)._precomputed1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure5.prototype = {
    call$0() {
      return type$.Set_nullable_double._as(this.data);
    },
    $signature: 77
  };
  A.testCastConverter___closure13.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              t1 = $.$get$_listOfDoublesWithInt();
              J.addAll$1$ax(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure4(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              try {
                res = $async$self.converter.$set$1$0(type$.double).call$1(data);
                A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_double), null);
                A.expect(res, A.LinkedHashSet_LinkedHashSet$from(t1, A._arrayInstanceType(t1)._precomputed1), null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                ex = A.unwrapException(exception);
                A._unexpectedFailureIfJs("integral double to int", ex);
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure4.prototype = {
    call$0() {
      return type$.Set_double._as(this.data);
    },
    $signature: 59
  };
  A.testCastConverter__closure3.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.converter;
      t1.test$2("- String / integer (cast conversion)", new A.testCastConverter___closure1(t2));
      t1.test$2("- String / integer (custom conversion)", new A.testCastConverter___closure2(t2));
      t1.test$2("- String / nullable integer", new A.testCastConverter___closure3(t2));
      t1.test$2(string$.x2d_Stria, new A.testCastConverter___closure4(t2));
      t1.test$2(string$.x2d_Striu, new A.testCastConverter___closure5(t2));
    },
    $signature: 1
  };
  A.testCastConverter___closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              data = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              data.addAll$1(0, $._mapOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure3(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.map$2$0(0, type$.String, type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Map_String_int), null);
              A.expect(res, $._mapOfInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure3.prototype = {
    call$0() {
      return type$.Map_String_int._as(this.data);
    },
    $signature: 19
  };
  A.testCastConverter___closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              data = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              data.addAll$1(0, $._mapOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure2(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.map$2$1$vcast(0, A.lib_03_converter_test___asInt$closure(), type$.String, type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Map_String_int), null);
              A.expect(res, $._mapOfInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure2.prototype = {
    call$0() {
      return type$.Map_String_int._as(this.data);
    },
    $signature: 19
  };
  A.testCastConverter___closure3.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              data = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              data.addAll$1(0, $._mapOfNullableInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure1(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              t1 = type$.int;
              A.checkTypeBound(t1, type$.Object, "T", "value");
              res = $async$self.converter.nmap$2$1$vcast(A.instantiate1(A.converter_Converter_identity$closure(), t1), type$.String, t1).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Map_of_String_and_nullable_int), null);
              A.expect(res, $._mapOfNullableInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure1.prototype = {
    call$0() {
      return type$.Map_String_int._as(this.data);
    },
    $signature: 19
  };
  A.testCastConverter___closure4.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              data = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              t1 = $.$get$_mapOfIntsWithIntegralDouble();
              data.addAll$1(0, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure0(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.map$2$0(0, type$.String, type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Map_String_int), null);
              try {
                A.expect(res, t1, null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (type$.TypeError._is(t1)) {
                  ex = t1;
                  A._unexpectedFailureIfJs("integral double to int", ex);
                } else
                  throw exception;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure0.prototype = {
    call$0() {
      return type$.Map_String_int._as(this.data);
    },
    $signature: 19
  };
  A.testCastConverter___closure5.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              data = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              t1 = $.$get$_mapOfIntsWithIntegralDouble();
              J.addAll$1$ax(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testCastConverter____closure(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              try {
                res = $async$self.converter.map$2$1$vcast(0, A.lib_03_converter_test___asInt$closure(), type$.String, type$.int).call$1(data);
                A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Map_String_int), null);
                A.expect(res, t1, null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (type$.TypeError._is(t1)) {
                  ex = t1;
                  A._unexpectedFailureIfJs("integral double to int", ex);
                } else
                  throw exception;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testCastConverter____closure.prototype = {
    call$0() {
      return type$.Map_String_int._as(this.data);
    },
    $signature: 19
  };
  A.testCastConverter__closure4.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.converter;
      t1.test$2("Different instances", new A.testCastConverter___closure(t2));
      t1.test$2("Same instance", new A.testCastConverter___closure0(t2));
    },
    $signature: 1
  };
  A.testCastConverter___closure.prototype = {
    call$0() {
      var t2, t3, ca, cb, _null = null,
        t1 = type$.JSArray_num,
        a = A._setArrayType([1, 2, 3, 4, 5], t1),
        b = A._setArrayType([1, 2, 3, 4, 5], t1);
      t1 = type$.TypeMatcher_List_int;
      A.expect(a, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(t1))), _null);
      A.expect(b, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(t1))), _null);
      t2 = this.converter;
      t3 = type$.int;
      ca = t2.list$1$0(t3).call$1(a);
      cb = t2.list$1$0(t3).call$1(b);
      A.expect(ca, new A.TypeMatcher(t1), _null);
      A.expect(cb, new A.TypeMatcher(t1), _null);
      A.expect(ca, cb, _null);
      A.expect(ca === cb, B.C__IsFalse, _null);
    },
    $signature: 1
  };
  A.testCastConverter___closure0.prototype = {
    call$0() {
      var t2, t3, ca, cb, _null = null,
        a = A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_num),
        t1 = type$.TypeMatcher_List_int;
      A.expect(a, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(t1))), _null);
      A.expect(a, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(t1))), _null);
      t2 = this.converter;
      t3 = type$.int;
      ca = t2.list$1$0(t3).call$1(a);
      cb = t2.list$1$0(t3).call$1(a);
      A.expect(ca, new A.TypeMatcher(t1), _null);
      A.expect(cb, new A.TypeMatcher(t1), _null);
      A.expect(ca, cb, _null);
      A.expect(ca === cb, B.C__IsFalse, _null);
    },
    $signature: 1
  };
  A.testContextAwareConverter_closure.prototype = {
    call$0() {
      var converter = A.ContextAwareConverter$(B.C_NumConverter),
        t1 = A._declarer(),
        t2 = type$.dynamic_Function._as(new A.testContextAwareConverter__closure(converter));
      t1._checkNotBuilt$1("tearDown");
      B.JSArray_methods.add$1(t1._tearDowns, t2);
      t2 = this.tc;
      t2.group$2("- Integers", new A.testContextAwareConverter__closure0(converter, t2));
      t2.group$2("- Doubles", new A.testContextAwareConverter__closure1(converter, t2));
      t2.group$2("- Lists", new A.testContextAwareConverter__closure2(t2, converter));
      t2.group$2("- Sets", new A.testContextAwareConverter__closure3(t2, converter));
      t2.group$2("- Maps", new A.testContextAwareConverter__closure4(t2, converter));
      t2.group$2("Instances", new A.testContextAwareConverter__closure5(t2, converter));
    },
    $signature: 1
  };
  A.testContextAwareConverter__closure.prototype = {
    call$0() {
      this.converter._context_aware_converter$_arguments._cache.clear$0(0);
    },
    $signature: 1
  };
  A.testContextAwareConverter__closure0.prototype = {
    call$0() {
      var t1 = type$.int,
        $$toInt = this.converter.value$1$0(t1),
        $$toNullableInt = A.Converter_allowNull($$toInt, t1);
      t1 = this.tc;
      t1.test$2("- Converters are not identities", new A.testContextAwareConverter___closure29($$toInt, $$toNullableInt));
      t1.test$2("- int", new A.testContextAwareConverter___closure30($$toInt, $$toNullableInt));
      t1.test$2("- double", new A.testContextAwareConverter___closure31($$toInt, $$toNullableInt));
      t1.test$2("- null", new A.testContextAwareConverter___closure32($$toInt, $$toNullableInt));
      t1.test$2("- bool", new A.testContextAwareConverter___closure33($$toInt, $$toNullableInt));
      t1.test$2("- String", new A.testContextAwareConverter___closure34($$toInt, $$toNullableInt));
      t1.test$2("- Object", new A.testContextAwareConverter___closure35($$toInt, $$toNullableInt));
    },
    $signature: 1
  };
  A.testContextAwareConverter___closure29.prototype = {
    call$0() {
      A.expect(J.$eq$(this.$$toInt, A.instantiate1(A.converter_Converter_identity$closure(), type$.int)), B.C__IsFalse, null);
      A.expect(J.$eq$(this.$$toNullableInt, A.instantiate1(A.converter_Converter_identity$closure(), type$.nullable_int)), B.C__IsFalse, null);
    },
    $signature: 1
  };
  A.testContextAwareConverter___closure30.prototype = {
    call$0() {
      A.expect(this.$$toInt.call$1(5), 5, null);
      A.expect(this.$$toNullableInt.call$1(5), 5, null);
    },
    $signature: 1
  };
  A.testContextAwareConverter___closure31.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t2, t3, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$$toInt;
              A.expect(t1.call$1(5), 5, null);
              t2 = $async$self.$$toNullableInt;
              A.expect(t2.call$1(5), 5, null);
              t3 = $.$get$_throwsTypeError();
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure35(t1), t3, null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure36(t2), t3, null, null, null, false), $async$call$0);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure37(t1), t3, null, null, null, false), $async$call$0);
            case 4:
              // returning from await.
              $async$goto = 5;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure38(t2), t3, null, null, null, false), $async$call$0);
            case 5:
              // returning from await.
              $async$goto = 6;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure39(t1), t3, null, null, null, false), $async$call$0);
            case 6:
              // returning from await.
              $async$goto = 7;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure40(t2), t3, null, null, null, false), $async$call$0);
            case 7:
              // returning from await.
              $async$goto = 8;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure41(t1), t3, null, null, null, false), $async$call$0);
            case 8:
              // returning from await.
              $async$goto = 9;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure42(t2), t3, null, null, null, false), $async$call$0);
            case 9:
              // returning from await.
              A.expect(t1.call$1(-0.0), 0, null);
              A.expect(t2.call$1(-0.0), 0, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure35.prototype = {
    call$0() {
      return this.$$toInt.call$1(5.5);
    },
    $signature: 12
  };
  A.testContextAwareConverter____closure36.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1(5.5);
    },
    $signature: 13
  };
  A.testContextAwareConverter____closure37.prototype = {
    call$0() {
      return this.$$toInt.call$1(1 / 0);
    },
    $signature: 12
  };
  A.testContextAwareConverter____closure38.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1(1 / 0);
    },
    $signature: 13
  };
  A.testContextAwareConverter____closure39.prototype = {
    call$0() {
      return this.$$toInt.call$1(-1 / 0);
    },
    $signature: 12
  };
  A.testContextAwareConverter____closure40.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1(-1 / 0);
    },
    $signature: 13
  };
  A.testContextAwareConverter____closure41.prototype = {
    call$0() {
      return this.$$toInt.call$1(0 / 0);
    },
    $signature: 12
  };
  A.testContextAwareConverter____closure42.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1(0 / 0);
    },
    $signature: 13
  };
  A.testContextAwareConverter___closure32.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure34($async$self.$$toInt), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              A.expect($async$self.$$toNullableInt.call$1(null), B.C__IsNull, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure34.prototype = {
    call$0() {
      return this.$$toInt.call$1(null);
    },
    $signature: 12
  };
  A.testContextAwareConverter___closure33.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$_throwsTypeError();
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure32($async$self.$$toInt), t1, null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure33($async$self.$$toNullableInt), t1, null, null, null, false), $async$call$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure32.prototype = {
    call$0() {
      return this.$$toInt.call$1(true);
    },
    $signature: 12
  };
  A.testContextAwareConverter____closure33.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1(true);
    },
    $signature: 13
  };
  A.testContextAwareConverter___closure34.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t2, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$_throwsTypeError();
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure28($async$self.$$toInt), t1, null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              t2 = $async$self.$$toNullableInt;
              $async$goto = 3;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure29(t2), t1, null, null, null, false), $async$call$0);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure30(t2), t1, null, null, null, false), $async$call$0);
            case 4:
              // returning from await.
              $async$goto = 5;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure31(t2), t1, null, null, null, false), $async$call$0);
            case 5:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure28.prototype = {
    call$0() {
      return this.$$toInt.call$1("1");
    },
    $signature: 12
  };
  A.testContextAwareConverter____closure29.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1("1");
    },
    $signature: 13
  };
  A.testContextAwareConverter____closure30.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1("1.1");
    },
    $signature: 13
  };
  A.testContextAwareConverter____closure31.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1("garbage");
    },
    $signature: 13
  };
  A.testContextAwareConverter___closure35.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$_throwsTypeError();
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure26($async$self.$$toInt), t1, null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure27($async$self.$$toNullableInt), t1, null, null, null, false), $async$call$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure26.prototype = {
    call$0() {
      return this.$$toInt.call$1(new A.Object());
    },
    $signature: 12
  };
  A.testContextAwareConverter____closure27.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1(new A.Object());
    },
    $signature: 13
  };
  A.testContextAwareConverter__closure1.prototype = {
    call$0() {
      var t1 = type$.double,
        $$toDbl = this.converter.value$1$0(t1),
        $$toNullableDbl = A.Converter_allowNull($$toDbl, t1);
      t1 = this.tc;
      t1.test$2("- Converters are not identities", new A.testContextAwareConverter___closure22($$toDbl, $$toNullableDbl));
      t1.test$2("- int", new A.testContextAwareConverter___closure23($$toDbl, $$toNullableDbl));
      t1.test$2("- double", new A.testContextAwareConverter___closure24($$toDbl, $$toNullableDbl));
      t1.test$2("- null", new A.testContextAwareConverter___closure25($$toDbl, $$toNullableDbl));
      t1.test$2("- bool", new A.testContextAwareConverter___closure26($$toDbl, $$toNullableDbl));
      t1.test$2("- String", new A.testContextAwareConverter___closure27($$toDbl, $$toNullableDbl));
      t1.test$2("- Object", new A.testContextAwareConverter___closure28($$toDbl, $$toNullableDbl));
    },
    $signature: 1
  };
  A.testContextAwareConverter___closure22.prototype = {
    call$0() {
      A.expect(J.$eq$(this.$$toDbl, A.instantiate1(A.converter_Converter_identity$closure(), type$.double)), B.C__IsFalse, null);
      A.expect(J.$eq$(this.$$toNullableDbl, A.instantiate1(A.converter_Converter_identity$closure(), type$.nullable_double)), B.C__IsFalse, null);
    },
    $signature: 1
  };
  A.testContextAwareConverter___closure23.prototype = {
    call$0() {
      A.expect(this.$$toDbl.call$1(5), 5, null);
      A.expect(this.$$toNullableDbl.call$1(5), 5, null);
    },
    $signature: 1
  };
  A.testContextAwareConverter___closure24.prototype = {
    call$0() {
      var t2, t3, t4, _null = null,
        t1 = this.$$toDbl;
      A.expect(t1.call$1(5.5), 5.5, _null);
      t2 = this.$$toNullableDbl;
      A.expect(t2.call$1(5.5), 5.5, _null);
      A.expect(t1.call$1(-0.0), -0.0, _null);
      A.expect(t2.call$1(-0.0), -0.0, _null);
      t3 = t1.call$1(1 / 0);
      t4 = $.$get$_isInfinite();
      A.expect(t3, t4, _null);
      A.expect(t2.call$1(1 / 0), t4, _null);
      A.expect(t1.call$1(-1 / 0), t4, _null);
      A.expect(t2.call$1(-1 / 0), t4, _null);
      A.expect(t1.call$1(0 / 0), B.C__IsNaN, _null);
      A.expect(t2.call$1(0 / 0), B.C__IsNaN, _null);
    },
    $signature: 1
  };
  A.testContextAwareConverter___closure25.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure25($async$self.$$toDbl), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              A.expect($async$self.$$toNullableDbl.call$1(null), B.C__IsNull, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure25.prototype = {
    call$0() {
      return this.$$toDbl.call$1(null);
    },
    $signature: 42
  };
  A.testContextAwareConverter___closure26.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$_throwsTypeError();
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure23($async$self.$$toDbl), t1, null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure24($async$self.$$toNullableDbl), t1, null, null, null, false), $async$call$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure23.prototype = {
    call$0() {
      return this.$$toDbl.call$1(true);
    },
    $signature: 42
  };
  A.testContextAwareConverter____closure24.prototype = {
    call$0() {
      return this.$$toNullableDbl.call$1(true);
    },
    $signature: 56
  };
  A.testContextAwareConverter___closure27.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$_throwsTypeError();
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure21($async$self.$$toDbl), t1, null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure22($async$self.$$toNullableDbl), t1, null, null, null, false), $async$call$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure21.prototype = {
    call$0() {
      return this.$$toDbl.call$1("1");
    },
    $signature: 42
  };
  A.testContextAwareConverter____closure22.prototype = {
    call$0() {
      return this.$$toNullableDbl.call$1("1");
    },
    $signature: 56
  };
  A.testContextAwareConverter___closure28.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$_throwsTypeError();
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure19($async$self.$$toDbl), t1, null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure20($async$self.$$toNullableDbl), t1, null, null, null, false), $async$call$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure19.prototype = {
    call$0() {
      return this.$$toDbl.call$1(new A.Object());
    },
    $signature: 42
  };
  A.testContextAwareConverter____closure20.prototype = {
    call$0() {
      return this.$$toNullableDbl.call$1(new A.Object());
    },
    $signature: 56
  };
  A.testContextAwareConverter__closure2.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.converter;
      t1.test$2("- Integers (cast conversion)", new A.testContextAwareConverter___closure14(t2));
      t1.test$2("- Integers (custom conversion)", new A.testContextAwareConverter___closure15(t2));
      t1.test$2("- Nullable integers", new A.testContextAwareConverter___closure16(t2));
      t1.test$2(string$.x2d_Intea, new A.testContextAwareConverter___closure17(t2));
      t1.test$2(string$.x2d_Inteu, new A.testContextAwareConverter___closure18(t2));
      t1.test$2("- Doubles", new A.testContextAwareConverter___closure19(t2));
      t1.test$2("- Nullable doubles", new A.testContextAwareConverter___closure20(t2));
      t1.test$2("- Doubles + integer", new A.testContextAwareConverter___closure21(t2));
    },
    $signature: 1
  };
  A.testContextAwareConverter___closure14.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              B.JSArray_methods.addAll$1(data, $._listOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure18(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.list$1$0(type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_int), null);
              A.expect(res, $._listOfInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure18.prototype = {
    call$0() {
      return type$.List_int._as(this.data);
    },
    $signature: 36
  };
  A.testContextAwareConverter___closure15.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              B.JSArray_methods.addAll$1(data, $._listOfInts);
              res = $async$self.converter.list$1$1(A.lib_03_converter_test___asInt$closure(), type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_int), null);
              A.expect(res, $._listOfInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter___closure16.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              B.JSArray_methods.addAll$1(data, $._listOfNullableInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure17(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              t1 = $async$self.converter;
              t2 = type$.int;
              res = t1.nlist$1$1(t1.value$1$0(t2), t2).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_nullable_int), null);
              A.expect(res, $._listOfNullableInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure17.prototype = {
    call$0() {
      return type$.List_nullable_int._as(this.data);
    },
    $signature: 99
  };
  A.testContextAwareConverter___closure17.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              t1 = $.$get$_listOfIntsWithIntegralDouble();
              B.JSArray_methods.addAll$1(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure16(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.list$1$0(type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_int), null);
              A.expect(res, t1, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure16.prototype = {
    call$0() {
      return type$.List_int._as(this.data);
    },
    $signature: 36
  };
  A.testContextAwareConverter___closure18.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              t1 = $.$get$_listOfIntsWithIntegralDouble();
              J.addAll$1$ax(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure15(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              try {
                res = $async$self.converter.list$1$1(A.lib_03_converter_test___asInt$closure(), type$.int).call$1(data);
                A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_int), null);
                A.expect(res, t1, null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (type$.TypeError._is(t1)) {
                  ex = t1;
                  A._unexpectedFailureIfJs("integral double to int", ex);
                } else
                  throw exception;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure15.prototype = {
    call$0() {
      return type$.List_int._as(this.data);
    },
    $signature: 36
  };
  A.testContextAwareConverter___closure19.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              B.JSArray_methods.addAll$1(data, $._listOfDoubles);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure14(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.list$1$0(type$.double).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_double), null);
              A.expect(res, $._listOfDoubles, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure14.prototype = {
    call$0() {
      return type$.List_double._as(this.data);
    },
    $signature: 55
  };
  A.testContextAwareConverter___closure20.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              B.JSArray_methods.addAll$1(data, $._listOfNullableDoubles);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure13(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              t1 = $async$self.converter;
              t2 = type$.double;
              res = t1.nlist$1$1(t1.value$1$0(t2), t2).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_nullable_double), null);
              A.expect(res, $._listOfNullableDoubles, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure13.prototype = {
    call$0() {
      return type$.List_nullable_double._as(this.data);
    },
    $signature: 98
  };
  A.testContextAwareConverter___closure21.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              t1 = $.$get$_listOfDoublesWithInt();
              B.JSArray_methods.addAll$1(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure12(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.list$1$0(type$.double).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_double), null);
              A.expect(res, t1, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure12.prototype = {
    call$0() {
      return type$.List_double._as(this.data);
    },
    $signature: 55
  };
  A.testContextAwareConverter__closure3.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.converter;
      t1.test$2("- Integers (cast conversion)", new A.testContextAwareConverter___closure6(t2));
      t1.test$2("- Integers (custom conversion)", new A.testContextAwareConverter___closure7(t2));
      t1.test$2("- Nullable integers", new A.testContextAwareConverter___closure8(t2));
      t1.test$2(string$.x2d_Intea, new A.testContextAwareConverter___closure9(t2));
      t1.test$2(string$.x2d_Inteu, new A.testContextAwareConverter___closure10(t2));
      t1.test$2("- Doubles", new A.testContextAwareConverter___closure11(t2));
      t1.test$2("- Nullable doubles", new A.testContextAwareConverter___closure12(t2));
      t1.test$2("- Doubles + integer", new A.testContextAwareConverter___closure13(t2));
    },
    $signature: 1
  };
  A.testContextAwareConverter___closure6.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              data.addAll$1(0, $._listOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure11(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.$set$1$0(type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_int), null);
              A.expect(res, A.LinkedHashSet_LinkedHashSet$from($._listOfInts, A._arrayInstanceType($._listOfInts)._precomputed1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure11.prototype = {
    call$0() {
      return type$.Set_int._as(this.data);
    },
    $signature: 26
  };
  A.testContextAwareConverter___closure7.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              data.addAll$1(0, $._listOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure10(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.$set$1$0(type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_int), null);
              A.expect(res, A.LinkedHashSet_LinkedHashSet$from($._listOfInts, A._arrayInstanceType($._listOfInts)._precomputed1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure10.prototype = {
    call$0() {
      return type$.Set_int._as(this.data);
    },
    $signature: 26
  };
  A.testContextAwareConverter___closure8.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              data.addAll$1(0, $._listOfNullableInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure9(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              t1 = $async$self.converter;
              t2 = type$.int;
              res = t1.nset$1$1(t1.value$1$0(t2), t2).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_nullable_int), null);
              A.expect(res, A.LinkedHashSet_LinkedHashSet$from($._listOfNullableInts, A._arrayInstanceType($._listOfNullableInts)._precomputed1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure9.prototype = {
    call$0() {
      return type$.Set_nullable_int._as(this.data);
    },
    $signature: 95
  };
  A.testContextAwareConverter___closure9.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              t1 = $.$get$_listOfIntsWithIntegralDouble();
              J.addAll$1$ax(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure8(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              try {
                res = $async$self.converter.$set$1$0(type$.int).call$1(data);
                A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_int), null);
                A.expect(res, A.LinkedHashSet_LinkedHashSet$from(t1, A._arrayInstanceType(t1)._precomputed1), null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                ex = A.unwrapException(exception);
                A._unexpectedFailureIfJs("integral double to int", ex);
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure8.prototype = {
    call$0() {
      return type$.Set_int._as(this.data);
    },
    $signature: 26
  };
  A.testContextAwareConverter___closure10.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              t1 = $.$get$_listOfIntsWithIntegralDouble();
              J.addAll$1$ax(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure7(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              try {
                res = $async$self.converter.$set$1$1(A.lib_03_converter_test___asInt$closure(), type$.int).call$1(data);
                A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_int), null);
                A.expect(res, A.LinkedHashSet_LinkedHashSet$from(t1, A._arrayInstanceType(t1)._precomputed1), null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (type$.TypeError._is(t1)) {
                  ex = t1;
                  A._unexpectedFailureIfJs("integral double to int", ex);
                } else
                  throw exception;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure7.prototype = {
    call$0() {
      return type$.Set_int._as(this.data);
    },
    $signature: 26
  };
  A.testContextAwareConverter___closure11.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              data.addAll$1(0, $._listOfDoubles);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure6(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.$set$1$0(type$.double).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_double), null);
              A.expect(res, A.LinkedHashSet_LinkedHashSet$from($._listOfDoubles, A._arrayInstanceType($._listOfDoubles)._precomputed1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure6.prototype = {
    call$0() {
      return type$.Set_double._as(this.data);
    },
    $signature: 59
  };
  A.testContextAwareConverter___closure12.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              data.addAll$1(0, $._listOfNullableDoubles);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure5(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.nset$1$0(type$.double).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_nullable_double), null);
              A.expect(res, A.LinkedHashSet_LinkedHashSet$from($._listOfNullableDoubles, A._arrayInstanceType($._listOfNullableDoubles)._precomputed1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure5.prototype = {
    call$0() {
      return type$.Set_nullable_double._as(this.data);
    },
    $signature: 77
  };
  A.testContextAwareConverter___closure13.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              t1 = $.$get$_listOfDoublesWithInt();
              J.addAll$1$ax(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure4(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              try {
                res = $async$self.converter.$set$1$0(type$.double).call$1(data);
                A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_double), null);
                A.expect(res, A.LinkedHashSet_LinkedHashSet$from(t1, A._arrayInstanceType(t1)._precomputed1), null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                ex = A.unwrapException(exception);
                A._unexpectedFailureIfJs("integral double to int", ex);
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure4.prototype = {
    call$0() {
      return type$.Set_double._as(this.data);
    },
    $signature: 59
  };
  A.testContextAwareConverter__closure4.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.converter;
      t1.test$2("- String / integer (cast conversion)", new A.testContextAwareConverter___closure1(t2));
      t1.test$2("- String / integer (custom conversion)", new A.testContextAwareConverter___closure2(t2));
      t1.test$2("- String / nullable integer", new A.testContextAwareConverter___closure3(t2));
      t1.test$2(string$.x2d_Stria, new A.testContextAwareConverter___closure4(t2));
      t1.test$2(string$.x2d_Striu, new A.testContextAwareConverter___closure5(t2));
    },
    $signature: 1
  };
  A.testContextAwareConverter___closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              data = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              data.addAll$1(0, $._mapOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure3(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.map$2$0(0, type$.String, type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Map_String_int), null);
              A.expect(res, $._mapOfInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure3.prototype = {
    call$0() {
      return type$.Map_String_int._as(this.data);
    },
    $signature: 19
  };
  A.testContextAwareConverter___closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              data = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              data.addAll$1(0, $._mapOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure2(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.map$2$1$vcast(0, A.lib_03_converter_test___asInt$closure(), type$.String, type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Map_String_int), null);
              A.expect(res, $._mapOfInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure2.prototype = {
    call$0() {
      return type$.Map_String_int._as(this.data);
    },
    $signature: 19
  };
  A.testContextAwareConverter___closure3.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              data = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              data.addAll$1(0, $._mapOfNullableInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure1(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.nmap$2$0(type$.String, type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Map_of_String_and_nullable_int), null);
              A.expect(res, $._mapOfNullableInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure1.prototype = {
    call$0() {
      return type$.Map_String_int._as(this.data);
    },
    $signature: 19
  };
  A.testContextAwareConverter___closure4.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              data = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              t1 = $.$get$_mapOfIntsWithIntegralDouble();
              data.addAll$1(0, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure0(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.map$2$0(0, type$.String, type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Map_String_int), null);
              A.expect(res, t1, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure0.prototype = {
    call$0() {
      return type$.Map_String_int._as(this.data);
    },
    $signature: 19
  };
  A.testContextAwareConverter___closure5.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              data = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              t1 = $.$get$_mapOfIntsWithIntegralDouble();
              J.addAll$1$ax(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testContextAwareConverter____closure(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              try {
                res = $async$self.converter.map$2$1$vcast(0, A.lib_03_converter_test___asInt$closure(), type$.String, type$.int).call$1(data);
                A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Map_String_int), null);
                A.expect(res, t1, null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (type$.TypeError._is(t1)) {
                  ex = t1;
                  A._unexpectedFailureIfJs("integral double to int", ex);
                } else
                  throw exception;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testContextAwareConverter____closure.prototype = {
    call$0() {
      return type$.Map_String_int._as(this.data);
    },
    $signature: 19
  };
  A.testContextAwareConverter__closure5.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.converter;
      t1.test$2("Different instances", new A.testContextAwareConverter___closure(t2));
      t1.test$2("Same instance", new A.testContextAwareConverter___closure0(t2));
    },
    $signature: 1
  };
  A.testContextAwareConverter___closure.prototype = {
    call$0() {
      var t2, t3, ca, cb, _null = null,
        t1 = type$.JSArray_num,
        a = A._setArrayType([1, 2, 3, 4, 5], t1),
        b = A._setArrayType([1, 2, 3, 4, 5], t1);
      t1 = type$.TypeMatcher_List_int;
      A.expect(a, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(t1))), _null);
      A.expect(b, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(t1))), _null);
      t2 = this.converter;
      t3 = type$.int;
      ca = t2.list$1$0(t3).call$1(a);
      cb = t2.list$1$0(t3).call$1(b);
      A.expect(ca, new A.TypeMatcher(t1), _null);
      A.expect(cb, new A.TypeMatcher(t1), _null);
      A.expect(ca, cb, _null);
      A.expect(ca === cb, B.C__IsFalse, _null);
    },
    $signature: 1
  };
  A.testContextAwareConverter___closure0.prototype = {
    call$0() {
      var t2, t3, ca, cb, _null = null,
        a = A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_num),
        t1 = type$.TypeMatcher_List_int;
      A.expect(a, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(t1))), _null);
      A.expect(a, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(t1))), _null);
      t2 = this.converter;
      t3 = type$.int;
      ca = t2.list$1$0(t3).call$1(a);
      cb = t2.list$1$0(t3).call$1(a);
      A.expect(ca, new A.TypeMatcher(t1), _null);
      A.expect(cb, new A.TypeMatcher(t1), _null);
      A.expect(ca, cb, _null);
      A.expect(ca === cb, B.C__IsTrue, _null);
    },
    $signature: 1
  };
  A.testNumConverter_closure.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- Integers", new A.testNumConverter__closure(B.C_NumConverter, t1));
      t1.group$2("- Doubles", new A.testNumConverter__closure0(B.C_NumConverter, t1));
      t1.group$2("- Lists", new A.testNumConverter__closure1(t1, B.C_NumConverter));
      t1.group$2("- Sets", new A.testNumConverter__closure2(t1, B.C_NumConverter));
      t1.group$2("- Maps", new A.testNumConverter__closure3(t1, B.C_NumConverter));
      t1.group$2("Instances", new A.testNumConverter__closure4(t1, B.C_NumConverter));
    },
    $signature: 1
  };
  A.testNumConverter__closure.prototype = {
    call$0() {
      var t1 = type$.int,
        $$toInt = this.converter.value$1$0(t1),
        $$toNullableInt = A.Converter_allowNull($$toInt, t1);
      t1 = this.tc;
      t1.test$2("- Converters are not identities", new A.testNumConverter___closure29($$toInt, $$toNullableInt));
      t1.test$2("- int", new A.testNumConverter___closure30($$toInt, $$toNullableInt));
      t1.test$2("- double", new A.testNumConverter___closure31($$toInt, $$toNullableInt));
      t1.test$2("- null", new A.testNumConverter___closure32($$toInt, $$toNullableInt));
      t1.test$2("- bool", new A.testNumConverter___closure33($$toInt, $$toNullableInt));
      t1.test$2("- String", new A.testNumConverter___closure34($$toInt, $$toNullableInt));
      t1.test$2("- Object", new A.testNumConverter___closure35($$toInt, $$toNullableInt));
    },
    $signature: 1
  };
  A.testNumConverter___closure29.prototype = {
    call$0() {
      A.expect(J.$eq$(this.$$toInt, A.instantiate1(A.converter_Converter_identity$closure(), type$.int)), B.C__IsFalse, null);
      A.expect(J.$eq$(this.$$toNullableInt, A.instantiate1(A.converter_Converter_identity$closure(), type$.nullable_int)), B.C__IsFalse, null);
    },
    $signature: 1
  };
  A.testNumConverter___closure30.prototype = {
    call$0() {
      A.expect(this.$$toInt.call$1(5), 5, null);
      A.expect(this.$$toNullableInt.call$1(5), 5, null);
    },
    $signature: 1
  };
  A.testNumConverter___closure31.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t2, t3, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$$toInt;
              A.expect(t1.call$1(5), 5, null);
              t2 = $async$self.$$toNullableInt;
              A.expect(t2.call$1(5), 5, null);
              t3 = $.$get$_throwsTypeError();
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure35(t1), t3, null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure36(t2), t3, null, null, null, false), $async$call$0);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure37(t1), t3, null, null, null, false), $async$call$0);
            case 4:
              // returning from await.
              $async$goto = 5;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure38(t2), t3, null, null, null, false), $async$call$0);
            case 5:
              // returning from await.
              $async$goto = 6;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure39(t1), t3, null, null, null, false), $async$call$0);
            case 6:
              // returning from await.
              $async$goto = 7;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure40(t2), t3, null, null, null, false), $async$call$0);
            case 7:
              // returning from await.
              $async$goto = 8;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure41(t1), t3, null, null, null, false), $async$call$0);
            case 8:
              // returning from await.
              $async$goto = 9;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure42(t2), t3, null, null, null, false), $async$call$0);
            case 9:
              // returning from await.
              A.expect(t1.call$1(-0.0), 0, null);
              A.expect(t2.call$1(-0.0), 0, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure35.prototype = {
    call$0() {
      return this.$$toInt.call$1(5.5);
    },
    $signature: 12
  };
  A.testNumConverter____closure36.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1(5.5);
    },
    $signature: 13
  };
  A.testNumConverter____closure37.prototype = {
    call$0() {
      return this.$$toInt.call$1(1 / 0);
    },
    $signature: 12
  };
  A.testNumConverter____closure38.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1(1 / 0);
    },
    $signature: 13
  };
  A.testNumConverter____closure39.prototype = {
    call$0() {
      return this.$$toInt.call$1(-1 / 0);
    },
    $signature: 12
  };
  A.testNumConverter____closure40.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1(-1 / 0);
    },
    $signature: 13
  };
  A.testNumConverter____closure41.prototype = {
    call$0() {
      return this.$$toInt.call$1(0 / 0);
    },
    $signature: 12
  };
  A.testNumConverter____closure42.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1(0 / 0);
    },
    $signature: 13
  };
  A.testNumConverter___closure32.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure34($async$self.$$toInt), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              A.expect($async$self.$$toNullableInt.call$1(null), B.C__IsNull, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure34.prototype = {
    call$0() {
      return this.$$toInt.call$1(null);
    },
    $signature: 12
  };
  A.testNumConverter___closure33.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$_throwsTypeError();
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure32($async$self.$$toInt), t1, null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure33($async$self.$$toNullableInt), t1, null, null, null, false), $async$call$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure32.prototype = {
    call$0() {
      return this.$$toInt.call$1(true);
    },
    $signature: 12
  };
  A.testNumConverter____closure33.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1(true);
    },
    $signature: 13
  };
  A.testNumConverter___closure34.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t2, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$_throwsTypeError();
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure28($async$self.$$toInt), t1, null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              t2 = $async$self.$$toNullableInt;
              $async$goto = 3;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure29(t2), t1, null, null, null, false), $async$call$0);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure30(t2), t1, null, null, null, false), $async$call$0);
            case 4:
              // returning from await.
              $async$goto = 5;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure31(t2), t1, null, null, null, false), $async$call$0);
            case 5:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure28.prototype = {
    call$0() {
      return this.$$toInt.call$1("1");
    },
    $signature: 12
  };
  A.testNumConverter____closure29.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1("1");
    },
    $signature: 13
  };
  A.testNumConverter____closure30.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1("1.1");
    },
    $signature: 13
  };
  A.testNumConverter____closure31.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1("garbage");
    },
    $signature: 13
  };
  A.testNumConverter___closure35.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$_throwsTypeError();
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure26($async$self.$$toInt), t1, null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure27($async$self.$$toNullableInt), t1, null, null, null, false), $async$call$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure26.prototype = {
    call$0() {
      return this.$$toInt.call$1(new A.Object());
    },
    $signature: 12
  };
  A.testNumConverter____closure27.prototype = {
    call$0() {
      return this.$$toNullableInt.call$1(new A.Object());
    },
    $signature: 13
  };
  A.testNumConverter__closure0.prototype = {
    call$0() {
      var t1 = type$.double,
        $$toDbl = this.converter.value$1$0(t1),
        $$toNullableDbl = A.Converter_allowNull($$toDbl, t1);
      t1 = this.tc;
      t1.test$2("- Converters are not identities", new A.testNumConverter___closure22($$toDbl, $$toNullableDbl));
      t1.test$2("- int", new A.testNumConverter___closure23($$toDbl, $$toNullableDbl));
      t1.test$2("- double", new A.testNumConverter___closure24($$toDbl, $$toNullableDbl));
      t1.test$2("- null", new A.testNumConverter___closure25($$toDbl, $$toNullableDbl));
      t1.test$2("- bool", new A.testNumConverter___closure26($$toDbl, $$toNullableDbl));
      t1.test$2("- String", new A.testNumConverter___closure27($$toDbl, $$toNullableDbl));
      t1.test$2("- Object", new A.testNumConverter___closure28($$toDbl, $$toNullableDbl));
    },
    $signature: 1
  };
  A.testNumConverter___closure22.prototype = {
    call$0() {
      A.expect(J.$eq$(this.$$toDbl, A.instantiate1(A.converter_Converter_identity$closure(), type$.double)), B.C__IsFalse, null);
      A.expect(J.$eq$(this.$$toNullableDbl, A.instantiate1(A.converter_Converter_identity$closure(), type$.nullable_double)), B.C__IsFalse, null);
    },
    $signature: 1
  };
  A.testNumConverter___closure23.prototype = {
    call$0() {
      A.expect(this.$$toDbl.call$1(5), 5, null);
      A.expect(this.$$toNullableDbl.call$1(5), 5, null);
    },
    $signature: 1
  };
  A.testNumConverter___closure24.prototype = {
    call$0() {
      var t2, t3, t4, _null = null,
        t1 = this.$$toDbl;
      A.expect(t1.call$1(5.5), 5.5, _null);
      t2 = this.$$toNullableDbl;
      A.expect(t2.call$1(5.5), 5.5, _null);
      A.expect(t1.call$1(-0.0), -0.0, _null);
      A.expect(t2.call$1(-0.0), -0.0, _null);
      t3 = t1.call$1(1 / 0);
      t4 = $.$get$_isInfinite();
      A.expect(t3, t4, _null);
      A.expect(t2.call$1(1 / 0), t4, _null);
      A.expect(t1.call$1(-1 / 0), t4, _null);
      A.expect(t2.call$1(-1 / 0), t4, _null);
      A.expect(t1.call$1(0 / 0), B.C__IsNaN, _null);
      A.expect(t2.call$1(0 / 0), B.C__IsNaN, _null);
    },
    $signature: 1
  };
  A.testNumConverter___closure25.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure25($async$self.$$toDbl), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              A.expect($async$self.$$toNullableDbl.call$1(null), B.C__IsNull, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure25.prototype = {
    call$0() {
      return this.$$toDbl.call$1(null);
    },
    $signature: 42
  };
  A.testNumConverter___closure26.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$_throwsTypeError();
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure23($async$self.$$toDbl), t1, null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure24($async$self.$$toNullableDbl), t1, null, null, null, false), $async$call$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure23.prototype = {
    call$0() {
      return this.$$toDbl.call$1(true);
    },
    $signature: 42
  };
  A.testNumConverter____closure24.prototype = {
    call$0() {
      return this.$$toNullableDbl.call$1(true);
    },
    $signature: 56
  };
  A.testNumConverter___closure27.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$_throwsTypeError();
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure21($async$self.$$toDbl), t1, null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure22($async$self.$$toNullableDbl), t1, null, null, null, false), $async$call$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure21.prototype = {
    call$0() {
      return this.$$toDbl.call$1("1");
    },
    $signature: 42
  };
  A.testNumConverter____closure22.prototype = {
    call$0() {
      return this.$$toNullableDbl.call$1("1");
    },
    $signature: 56
  };
  A.testNumConverter___closure28.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$_throwsTypeError();
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure19($async$self.$$toDbl), t1, null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure20($async$self.$$toNullableDbl), t1, null, null, null, false), $async$call$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure19.prototype = {
    call$0() {
      return this.$$toDbl.call$1(new A.Object());
    },
    $signature: 42
  };
  A.testNumConverter____closure20.prototype = {
    call$0() {
      return this.$$toNullableDbl.call$1(new A.Object());
    },
    $signature: 56
  };
  A.testNumConverter__closure1.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.converter;
      t1.test$2("- Integers (cast conversion)", new A.testNumConverter___closure14(t2));
      t1.test$2("- Integers (custom conversion)", new A.testNumConverter___closure15(t2));
      t1.test$2("- Nullable integers", new A.testNumConverter___closure16(t2));
      t1.test$2(string$.x2d_Intea, new A.testNumConverter___closure17(t2));
      t1.test$2(string$.x2d_Inteu, new A.testNumConverter___closure18(t2));
      t1.test$2("- Doubles", new A.testNumConverter___closure19(t2));
      t1.test$2("- Nullable doubles", new A.testNumConverter___closure20(t2));
      t1.test$2("- Doubles + integer", new A.testNumConverter___closure21(t2));
    },
    $signature: 1
  };
  A.testNumConverter___closure14.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              B.JSArray_methods.addAll$1(data, $._listOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure18(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.list$1$0(type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_int), null);
              A.expect(res, $._listOfInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure18.prototype = {
    call$0() {
      return type$.List_int._as(this.data);
    },
    $signature: 36
  };
  A.testNumConverter___closure15.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              B.JSArray_methods.addAll$1(data, $._listOfInts);
              res = $async$self.converter.list$1$1(A.lib_03_converter_test___asInt$closure(), type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_int), null);
              A.expect(res, $._listOfInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter___closure16.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              B.JSArray_methods.addAll$1(data, $._listOfNullableInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure17(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              t1 = $async$self.converter;
              t2 = type$.int;
              res = t1.nlist$1$1(t1.value$1$0(t2), t2).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_nullable_int), null);
              A.expect(res, $._listOfNullableInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure17.prototype = {
    call$0() {
      return type$.List_nullable_int._as(this.data);
    },
    $signature: 99
  };
  A.testNumConverter___closure17.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              t1 = $.$get$_listOfIntsWithIntegralDouble();
              B.JSArray_methods.addAll$1(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure16(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.list$1$0(type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_int), null);
              A.expect(res, t1, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure16.prototype = {
    call$0() {
      return type$.List_int._as(this.data);
    },
    $signature: 36
  };
  A.testNumConverter___closure18.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              t1 = $.$get$_listOfIntsWithIntegralDouble();
              J.addAll$1$ax(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure15(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              try {
                res = $async$self.converter.list$1$1(A.lib_03_converter_test___asInt$closure(), type$.int).call$1(data);
                A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_int), null);
                A.expect(res, t1, null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (type$.TypeError._is(t1)) {
                  ex = t1;
                  A._unexpectedFailureIfJs("integral double to int", ex);
                } else
                  throw exception;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure15.prototype = {
    call$0() {
      return type$.List_int._as(this.data);
    },
    $signature: 36
  };
  A.testNumConverter___closure19.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              B.JSArray_methods.addAll$1(data, $._listOfDoubles);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure14(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.list$1$0(type$.double).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_double), null);
              A.expect(res, $._listOfDoubles, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure14.prototype = {
    call$0() {
      return type$.List_double._as(this.data);
    },
    $signature: 55
  };
  A.testNumConverter___closure20.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              B.JSArray_methods.addAll$1(data, $._listOfNullableDoubles);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure13(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              t1 = $async$self.converter;
              t2 = type$.double;
              res = t1.nlist$1$1(t1.value$1$0(t2), t2).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_nullable_double), null);
              A.expect(res, $._listOfNullableDoubles, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure13.prototype = {
    call$0() {
      return type$.List_nullable_double._as(this.data);
    },
    $signature: 98
  };
  A.testNumConverter___closure21.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = [];
              t1 = $.$get$_listOfDoublesWithInt();
              B.JSArray_methods.addAll$1(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure12(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.list$1$0(type$.double).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_List_double), null);
              A.expect(res, t1, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure12.prototype = {
    call$0() {
      return type$.List_double._as(this.data);
    },
    $signature: 55
  };
  A.testNumConverter__closure2.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.converter;
      t1.test$2("- Integers (cast conversion)", new A.testNumConverter___closure6(t2));
      t1.test$2("- Integers (custom conversion)", new A.testNumConverter___closure7(t2));
      t1.test$2("- Nullable integers", new A.testNumConverter___closure8(t2));
      t1.test$2(string$.x2d_Intea, new A.testNumConverter___closure9(t2));
      t1.test$2(string$.x2d_Inteu, new A.testNumConverter___closure10(t2));
      t1.test$2("- Doubles", new A.testNumConverter___closure11(t2));
      t1.test$2("- Nullable doubles", new A.testNumConverter___closure12(t2));
      t1.test$2("- Doubles + integer", new A.testNumConverter___closure13(t2));
    },
    $signature: 1
  };
  A.testNumConverter___closure6.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              data.addAll$1(0, $._listOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure11(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.$set$1$0(type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_int), null);
              A.expect(res, A.LinkedHashSet_LinkedHashSet$from($._listOfInts, A._arrayInstanceType($._listOfInts)._precomputed1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure11.prototype = {
    call$0() {
      return type$.Set_int._as(this.data);
    },
    $signature: 26
  };
  A.testNumConverter___closure7.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              data.addAll$1(0, $._listOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure10(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.$set$1$0(type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_int), null);
              A.expect(res, A.LinkedHashSet_LinkedHashSet$from($._listOfInts, A._arrayInstanceType($._listOfInts)._precomputed1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure10.prototype = {
    call$0() {
      return type$.Set_int._as(this.data);
    },
    $signature: 26
  };
  A.testNumConverter___closure8.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              data.addAll$1(0, $._listOfNullableInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure9(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              t1 = $async$self.converter;
              t2 = type$.int;
              res = t1.nset$1$1(t1.value$1$0(t2), t2).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_nullable_int), null);
              A.expect(res, A.LinkedHashSet_LinkedHashSet$from($._listOfNullableInts, A._arrayInstanceType($._listOfNullableInts)._precomputed1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure9.prototype = {
    call$0() {
      return type$.Set_nullable_int._as(this.data);
    },
    $signature: 95
  };
  A.testNumConverter___closure9.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              t1 = $.$get$_listOfIntsWithIntegralDouble();
              J.addAll$1$ax(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure8(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              try {
                res = $async$self.converter.$set$1$0(type$.int).call$1(data);
                A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_int), null);
                A.expect(res, A.LinkedHashSet_LinkedHashSet$from(t1, A._arrayInstanceType(t1)._precomputed1), null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                ex = A.unwrapException(exception);
                A._unexpectedFailureIfJs("integral double to int", ex);
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure8.prototype = {
    call$0() {
      return type$.Set_int._as(this.data);
    },
    $signature: 26
  };
  A.testNumConverter___closure10.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              t1 = $.$get$_listOfIntsWithIntegralDouble();
              J.addAll$1$ax(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure7(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              try {
                res = $async$self.converter.$set$1$1(A.lib_03_converter_test___asInt$closure(), type$.int).call$1(data);
                A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_int), null);
                A.expect(res, A.LinkedHashSet_LinkedHashSet$from(t1, A._arrayInstanceType(t1)._precomputed1), null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (type$.TypeError._is(t1)) {
                  ex = t1;
                  A._unexpectedFailureIfJs("integral double to int", ex);
                } else
                  throw exception;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure7.prototype = {
    call$0() {
      return type$.Set_int._as(this.data);
    },
    $signature: 26
  };
  A.testNumConverter___closure11.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              data.addAll$1(0, $._listOfDoubles);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure6(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.$set$1$0(type$.double).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_double), null);
              A.expect(res, A.LinkedHashSet_LinkedHashSet$from($._listOfDoubles, A._arrayInstanceType($._listOfDoubles)._precomputed1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure6.prototype = {
    call$0() {
      return type$.Set_double._as(this.data);
    },
    $signature: 59
  };
  A.testNumConverter___closure12.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              data.addAll$1(0, $._listOfNullableDoubles);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure5(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.nset$1$0(type$.double).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_nullable_double), null);
              A.expect(res, A.LinkedHashSet_LinkedHashSet$from($._listOfNullableDoubles, A._arrayInstanceType($._listOfNullableDoubles)._precomputed1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure5.prototype = {
    call$0() {
      return type$.Set_nullable_double._as(this.data);
    },
    $signature: 77
  };
  A.testNumConverter___closure13.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, data, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              data = A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic);
              t1 = $.$get$_listOfDoublesWithInt();
              J.addAll$1$ax(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure4(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              try {
                res = $async$self.converter.$set$1$0(type$.double).call$1(data);
                A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Set_double), null);
                A.expect(res, A.LinkedHashSet_LinkedHashSet$from(t1, A._arrayInstanceType(t1)._precomputed1), null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                ex = A.unwrapException(exception);
                A._unexpectedFailureIfJs("integral double to int", ex);
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure4.prototype = {
    call$0() {
      return type$.Set_double._as(this.data);
    },
    $signature: 59
  };
  A.testNumConverter__closure3.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.converter;
      t1.test$2("- String / integer (cast conversion)", new A.testNumConverter___closure1(t2));
      t1.test$2("- String / integer (custom conversion)", new A.testNumConverter___closure2(t2));
      t1.test$2("- String / nullable integer", new A.testNumConverter___closure3(t2));
      t1.test$2(string$.x2d_Stria, new A.testNumConverter___closure4(t2));
      t1.test$2(string$.x2d_Striu, new A.testNumConverter___closure5(t2));
    },
    $signature: 1
  };
  A.testNumConverter___closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              data = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              data.addAll$1(0, $._mapOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure3(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.map$2$0(0, type$.String, type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Map_String_int), null);
              A.expect(res, $._mapOfInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure3.prototype = {
    call$0() {
      return type$.Map_String_int._as(this.data);
    },
    $signature: 19
  };
  A.testNumConverter___closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              data = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              data.addAll$1(0, $._mapOfInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure2(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.map$2$1$vcast(0, A.lib_03_converter_test___asInt$closure(), type$.String, type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Map_String_int), null);
              A.expect(res, $._mapOfInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure2.prototype = {
    call$0() {
      return type$.Map_String_int._as(this.data);
    },
    $signature: 19
  };
  A.testNumConverter___closure3.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              data = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              data.addAll$1(0, $._mapOfNullableInts);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure1(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.nmap$2$0(type$.String, type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Map_of_String_and_nullable_int), null);
              A.expect(res, $._mapOfNullableInts, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure1.prototype = {
    call$0() {
      return type$.Map_String_int._as(this.data);
    },
    $signature: 19
  };
  A.testNumConverter___closure4.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              data = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              t1 = $.$get$_mapOfIntsWithIntegralDouble();
              data.addAll$1(0, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure0(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              res = $async$self.converter.map$2$0(0, type$.String, type$.int).call$1(data);
              A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Map_String_int), null);
              A.expect(res, t1, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure0.prototype = {
    call$0() {
      return type$.Map_String_int._as(this.data);
    },
    $signature: 19
  };
  A.testNumConverter___closure5.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception, t1, data;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic;
              data = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
              t1 = $.$get$_mapOfIntsWithIntegralDouble();
              J.addAll$1$ax(data, t1);
              $async$goto = 2;
              return A._asyncAwait(A._expect(new A.testNumConverter____closure(data), $.$get$_throwsTypeError(), null, null, null, false), $async$call$0);
            case 2:
              // returning from await.
              try {
                res = $async$self.converter.map$2$1$vcast(0, A.lib_03_converter_test___asInt$closure(), type$.String, type$.int).call$1(data);
                A.expect(res, new A.TypeMatcher(type$.TypeMatcher_Map_String_int), null);
                A.expect(res, t1, null);
                A._unexpectedSuccessIfNonJs("integral double to int", res);
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (type$.TypeError._is(t1)) {
                  ex = t1;
                  A._unexpectedFailureIfJs("integral double to int", ex);
                } else
                  throw exception;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.testNumConverter____closure.prototype = {
    call$0() {
      return type$.Map_String_int._as(this.data);
    },
    $signature: 19
  };
  A.testNumConverter__closure4.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.converter;
      t1.test$2("Different instances", new A.testNumConverter___closure(t2));
      t1.test$2("Same instance", new A.testNumConverter___closure0(t2));
    },
    $signature: 1
  };
  A.testNumConverter___closure.prototype = {
    call$0() {
      var t2, t3, ca, cb, _null = null,
        t1 = type$.JSArray_num,
        a = A._setArrayType([1, 2, 3, 4, 5], t1),
        b = A._setArrayType([1, 2, 3, 4, 5], t1);
      t1 = type$.TypeMatcher_List_int;
      A.expect(a, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(t1))), _null);
      A.expect(b, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(t1))), _null);
      t2 = this.converter;
      t3 = type$.int;
      ca = t2.list$1$0(t3).call$1(a);
      cb = t2.list$1$0(t3).call$1(b);
      A.expect(ca, new A.TypeMatcher(t1), _null);
      A.expect(cb, new A.TypeMatcher(t1), _null);
      A.expect(ca, cb, _null);
      A.expect(ca === cb, B.C__IsFalse, _null);
    },
    $signature: 1
  };
  A.testNumConverter___closure0.prototype = {
    call$0() {
      var t2, t3, ca, cb, _null = null,
        a = A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_num),
        t1 = type$.TypeMatcher_List_int;
      A.expect(a, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(t1))), _null);
      A.expect(a, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(t1))), _null);
      t2 = this.converter;
      t3 = type$.int;
      ca = t2.list$1$0(t3).call$1(a);
      cb = t2.list$1$0(t3).call$1(a);
      A.expect(ca, new A.TypeMatcher(t1), _null);
      A.expect(cb, new A.TypeMatcher(t1), _null);
      A.expect(ca, cb, _null);
      A.expect(ca === cb, B.C__IsFalse, _null);
    },
    $signature: 1
  };
  A.testLazyLists_$initDataContext.prototype = {
    call$1$2(data, cast, $T) {
      var t1, t2;
      $T._eval$1("0(@)")._as(cast);
      t1 = A.List_List$_of(data, type$.dynamic);
      t2 = A._arrayInstanceType(data);
      t2 = A.List_List$_of(new A.MappedListIterable(data, t2._bind$1($T)._eval$1("1(2)")._as(cast), t2._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>")), $T);
      return new A._Record_2_lazy_ref(new A.LazyInPlaceList(t1, cast, $T._eval$1("LazyInPlaceList<0>")), t2);
    },
    call$2(data, cast) {
      return this.call$1$2(data, cast, type$.dynamic);
    },
    $signature: 162
  };
  A.testLazyLists_closure.prototype = {
    call$0() {
      var t1, t2, t3, t4, t5,
        data = A.List_List$unmodifiable([1, 2, 3, 4, 1.1, 2.2, 3.3, 4.4, 1, 2, 3, 4, 3.3, 2], type$.dynamic);
      for (t1 = $.$get$_dblTests0(), t1 = new A.LinkedHashMapEntriesIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapEntriesIterable<1,2>")).get$iterator(0), t2 = this.$$initDataContext, t3 = type$.double, t4 = this.tc; t1.moveNext$0();) {
        t5 = t1.__js_helper$_current;
        t5.toString;
        A._FeatureTestExt_check(t5, t4, t2.call$1$2(data, $.$get$_dbl0(), t3), t3);
      }
    },
    $signature: 1
  };
  A.testLazyLists_closure0.prototype = {
    call$0() {
      var t1, t2, t3, t4, t5,
        data = A.List_List$unmodifiable([1, 2, null, 4, 1.1, null, 3.3, 4.4, 1, 2, 3, null, 3.3, 2], type$.dynamic);
      for (t1 = $.$get$_ndblTests0(), t1 = new A.LinkedHashMapEntriesIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapEntriesIterable<1,2>")).get$iterator(0), t2 = this.$$initDataContext, t3 = type$.nullable_double, t4 = this.tc; t1.moveNext$0();) {
        t5 = t1.__js_helper$_current;
        t5.toString;
        A._FeatureTestExt_check(t5, t4, t2.call$1$2(data, $.$get$_ndbl0(), t3), t3);
      }
    },
    $signature: 1
  };
  A.testLazyLists_closure1.prototype = {
    call$0() {
      var t1, t2, t3, t4, t5,
        data = A.List_List$unmodifiable([1, 2, null, 4, 3, null, 2, 4, 1, null, 3], type$.dynamic);
      for (t1 = $.$get$_nintTests0(), t1 = new A.LinkedHashMapEntriesIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapEntriesIterable<1,2>")).get$iterator(0), t2 = this.$$initDataContext, t3 = type$.nullable_int, t4 = this.tc; t1.moveNext$0();) {
        t5 = t1.__js_helper$_current;
        t5.toString;
        A._FeatureTestExt_check(t5, t4, t2.call$1$2(data, $.$get$_nint0(), t3), t3);
      }
    },
    $signature: 1
  };
  A._dblTests_closure26.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().decreaseLength$2(l, 2);
    },
    $signature: 20
  };
  A._dblTests_closure27.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().increaseLength$2(l, 2);
    },
    $signature: 20
  };
  A._dblTests_closure28.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.$index$asx($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), 2);
    },
    $signature: 9
  };
  A._dblTests_closure29.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.$index$asx($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), -1);
    },
    $signature: 9
  };
  A._dblTests_closure30.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t3 = J.getInterceptor$ax(l);
      t3.set$first(l, t1._precomputed1._as(t2));
      return t3.get$first(l);
    },
    $signature: 9
  };
  A._dblTests_closure31.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t3 = J.getInterceptor$ax(l);
      t3.set$last(l, t1._precomputed1._as(t2));
      return t3.get$last(l);
    },
    $signature: 9
  };
  A._dblTests_closure32.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t3 = J.getInterceptor$ax(l);
      t3.$indexSet(l, 2, t1._precomputed1._as(t2));
      return t3.$index(l, 2);
    },
    $signature: 9
  };
  A._dblTests_closure33.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t3 = J.getInterceptor$ax(l);
      t3.$indexSet(l, -1, t1._precomputed1._as(t2));
      return t3.$index(l, -1);
    },
    $signature: 9
  };
  A._dblTests_closure34.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.elementAt$1$ax($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), 2);
    },
    $signature: 9
  };
  A._dblTests_closure35.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.elementAt$1$ax($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), -1);
    },
    $signature: 9
  };
  A._dblTests_closure36.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.getRange$2$ax($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), 3, 6);
    },
    $signature: 34
  };
  A._dblTests_closure37.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.contains$1$asx($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), 2);
    },
    $signature: 48
  };
  A._dblTests_closure38.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.contains$1$asx($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), -1);
    },
    $signature: 48
  };
  A._dblTests_closure39.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      t1._eval$1("List<1>")._as(l);
      t1._precomputed1._as(2);
      return J.indexOf$2$asx(l, 2, 0);
    },
    $signature: 20
  };
  A._dblTests_closure40.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      t1._eval$1("List<1>")._as(l);
      t1._precomputed1._as(2);
      return J.indexOf$2$asx(l, 2, 3);
    },
    $signature: 20
  };
  A._dblTests_closure41.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      t1._eval$1("List<1>")._as(l);
      t1._precomputed1._as(-1);
      return J.indexOf$2$asx(l, -1, 0);
    },
    $signature: 20
  };
  A._dblTests_closure42.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.lastIndexOf$2$asx(t1._eval$1("List<1>")._as(l), t1._precomputed1._as(2), null);
    },
    $signature: 20
  };
  A._dblTests_closure43.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.lastIndexOf$2$asx(t1._eval$1("List<1>")._as(l), t1._precomputed1._as(2), 3);
    },
    $signature: 20
  };
  A._dblTests_closure44.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.lastIndexOf$2$asx(t1._eval$1("List<1>")._as(l), t1._precomputed1._as(-1), null);
    },
    $signature: 20
  };
  A._dblTests_closure45.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().indexWhere$3(0, l, A.lib_03_converter_test__list_features___isGt3$closure(), null);
    },
    $signature: 20
  };
  A._dblTests_closure46.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().indexWhere$3(0, l, A.lib_03_converter_test__list_features___isGt3$closure(), 4);
    },
    $signature: 20
  };
  A._dblTests_closure47.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().indexWhere$3(0, l, A.lib_03_converter_test__list_features___isNeg$closure(), null);
    },
    $signature: 20
  };
  A._dblTests_closure48.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.lastIndexWhere$2$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()), null);
    },
    $signature: 20
  };
  A._dblTests_closure49.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.lastIndexWhere$2$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()), 4);
    },
    $signature: 20
  };
  A._dblTests_closure50.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.lastIndexWhere$2$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()), null);
    },
    $signature: 20
  };
  A._dblTests_closure51.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.sublist$2$ax($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), 0, null);
    },
    $signature: 3
  };
  A._dblTests_closure52.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.sublist$2$ax($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), 3, null);
    },
    $signature: 3
  };
  A._dblTests_closure53.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      return t2.sublist$2(t1.$ti._eval$1("List<1>")._as(l), t3 - 1, null);
    },
    $signature: 3
  };
  A._dblTests_closure54.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.sublist$2$ax($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), 0, 6);
    },
    $signature: 3
  };
  A._dblTests_closure55.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.sublist$2$ax($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), 3, 6);
    },
    $signature: 3
  };
  A._dblTests_closure56.prototype = {
    call$1(l) {
      var t1, t2, t3, t4;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      t4 = t2.get$length(l);
      return t2.sublist$2(t1.$ti._eval$1("List<1>")._as(l), t3 - 1, t4);
    },
    $signature: 3
  };
  A._dblTests_closure57.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.sublist$2$ax($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), 4, 3);
    },
    $signature: 3
  };
  A._dblTests_closure58.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      return t2.sublist$2(t1.$ti._eval$1("List<1>")._as(l), t3, null);
    },
    $signature: 3
  };
  A._dblTests_closure59.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      return t2.sublist$2(t1.$ti._eval$1("List<1>")._as(l), 0, t3 + 1);
    },
    $signature: 3
  };
  A._dblTests_closure60.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.map$1$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()), type$.bool);
    },
    $signature: 159
  };
  A._dblTests_closure61.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.expand$1$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("Iterable<double>(1)")._as(new A._dblTests__closure12()), type$.double);
    },
    $signature: 34
  };
  A._dblTests__closure12.prototype = {
    call$1(n) {
      A._asDouble(n);
      return A._setArrayType([n, n * n], type$.JSArray_double);
    },
    $signature: 153
  };
  A._dblTests_closure62.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.fold$1$2$ax(t1._eval$1("List<1>")._as(l), 0, t1._eval$1("double(double,1)")._as(new A._dblTests__closure11()), type$.double);
    },
    $signature: 9
  };
  A._dblTests__closure11.prototype = {
    call$2(s, n) {
      return A._asDouble(s) + A._asDouble(n);
    },
    $signature: 142
  };
  A._dblTests_closure63.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.reduce$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("1(1,1)")._as(new A._dblTests__closure10()));
    },
    $signature: 9
  };
  A._dblTests__closure10.prototype = {
    call$2(s, n) {
      return A._asDouble(s) + A._asDouble(n);
    },
    $signature: 142
  };
  A._dblTests_closure64.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.any$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()));
    },
    $signature: 48
  };
  A._dblTests_closure65.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.any$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()));
    },
    $signature: 48
  };
  A._dblTests_closure66.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.every$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()));
    },
    $signature: 48
  };
  A._dblTests_closure67.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.every$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNum$closure()));
    },
    $signature: 48
  };
  A._dblTests_closure68.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.skip$1$ax($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), 3);
    },
    $signature: 34
  };
  A._dblTests_closure69.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.skipWhile$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isInt$closure()));
    },
    $signature: 34
  };
  A._dblTests_closure70.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.skipWhile$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()));
    },
    $signature: 34
  };
  A._dblTests_closure71.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.take$1$ax($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), 3);
    },
    $signature: 34
  };
  A._dblTests_closure72.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      t1 = J.takeWhile$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isInt$closure()));
      t2 = A._instanceType(t1);
      return A.MappedIterable_MappedIterable(t1, t2._eval$1("double?(Iterable.E)")._as($.$get$_ndbl0()), t2._eval$1("Iterable.E"), type$.nullable_double);
    },
    $signature: 152
  };
  A._dblTests_closure73.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.takeWhile$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()));
    },
    $signature: 34
  };
  A._dblTests_closure74.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.where$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt4$closure()));
    },
    $signature: 34
  };
  A._dblTests_closure75.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.where$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()));
    },
    $signature: 34
  };
  A._dblTests_closure76.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.singleWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(new A._dblTests__closure9()), null);
    },
    $signature: 9
  };
  A._dblTests__closure9.prototype = {
    call$1(n) {
      return A._asDouble(n) === 2.2;
    },
    $signature: 144
  };
  A._dblTests_closure77.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.singleWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(new A._dblTests__closure8()), t1._eval$1("1()?")._as(B.CONSTANT6));
    },
    $signature: 9
  };
  A._dblTests__closure8.prototype = {
    call$1(n) {
      return A._asDouble(n) === 2.2;
    },
    $signature: 144
  };
  A._dblTests_closure78.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.singleWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()), null);
    },
    $signature: 9
  };
  A._dblTests_closure79.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.singleWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()), t1._eval$1("1()?")._as(B.CONSTANT6));
    },
    $signature: 9
  };
  A._dblTests_closure80.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.firstWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt4$closure()), null);
    },
    $signature: 9
  };
  A._dblTests_closure81.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.firstWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt4$closure()), t1._eval$1("1()?")._as(B.CONSTANT6));
    },
    $signature: 9
  };
  A._dblTests_closure82.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.firstWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()), null);
    },
    $signature: 9
  };
  A._dblTests_closure83.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.firstWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()), t1._eval$1("1()?")._as(B.CONSTANT6));
    },
    $signature: 9
  };
  A._dblTests_closure84.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.lastWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt4$closure()), null);
    },
    $signature: 9
  };
  A._dblTests_closure85.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.lastWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt4$closure()), t1._eval$1("1()?")._as(B.CONSTANT6));
    },
    $signature: 9
  };
  A._dblTests_closure86.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.lastWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()), null);
    },
    $signature: 9
  };
  A._dblTests_closure87.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.lastWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()), t1._eval$1("1()?")._as(B.CONSTANT6));
    },
    $signature: 9
  };
  A._dblTests_closure88.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().forEach$2(0, l, new A._dblTests__closure7());
    },
    $signature: 20
  };
  A._dblTests__closure7.prototype = {
    call$1(n) {
      A._asDouble(n);
    },
    $signature: 151
  };
  A._dblTests_closure89.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti._eval$1("List<1>");
      return J.$add$ansx(t1._as(l), t1._as($._dx0));
    },
    $signature: 3
  };
  A._dblTests_closure90.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = A._setArrayType([], type$.JSArray_double);
      t1 = t1.$ti._eval$1("List<1>");
      return J.$add$ansx(t1._as(l), t1._as(t2));
    },
    $signature: 3
  };
  A._dblTests_closure91.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      J.add$1$ax(l, t1._precomputed1._as(t2));
      return l;
    },
    $signature: 3
  };
  A._dblTests_closure92.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().addAll$2(0, l, $._dx0);
    },
    $signature: 3
  };
  A._dblTests_closure93.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      return J.followedBy$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("Iterable<1>")._as($._dx0));
    },
    $signature: 34
  };
  A._dblTests_closure94.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      return J.fillRange$3$ax(t1._eval$1("List<1>")._as(l), 3, 5, t1._eval$1("1?")._as(t2));
    },
    $signature: 89
  };
  A._dblTests_closure95.prototype = {
    call$1(l) {
      var t1, t2, t3, t4;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      t4 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      return t2.fillRange$3(t1._eval$1("List<1>")._as(l), 0, t3, t1._eval$1("1?")._as(t4));
    },
    $signature: 89
  };
  A._dblTests_closure96.prototype = {
    call$1(l) {
      var t1, t2, t3, t4;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      t4 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      return t2.fillRange$3(t1._eval$1("List<1>")._as(l), -1, t3, t1._eval$1("1?")._as(t4));
    },
    $signature: 89
  };
  A._dblTests_closure97.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().setAll$3(0, l, 0, $._dx0);
    },
    $signature: 3
  };
  A._dblTests_closure98.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().setAll$3(0, l, 3, $._dx0);
    },
    $signature: 3
  };
  A._dblTests_closure99.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().setAll$3(0, l, J.get$length$asx(l) - 1, $._dx0);
    },
    $signature: 3
  };
  A._dblTests_closure100.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().setAll$3(0, l, J.get$length$asx(l), $._dx0);
    },
    $signature: 3
  };
  A._dblTests_closure101.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      t1._eval$1("List<1>")._as(l);
      J.insert$2$ax(l, 0, t1._precomputed1._as(1.2));
      return l;
    },
    $signature: 3
  };
  A._dblTests_closure102.prototype = {
    call$1(l) {
      var t1;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0().$ti;
      t1._eval$1("List<1>")._as(l);
      J.insert$2$ax(l, 3, t1._precomputed1._as(1.2));
      return l;
    },
    $signature: 3
  };
  A._dblTests_closure103.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t2.insert$2(l, t3 - 1, t1._precomputed1._as(1.2));
      return l;
    },
    $signature: 3
  };
  A._dblTests_closure104.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t2.insert$2(l, t3, t1._precomputed1._as(1.2));
      return l;
    },
    $signature: 3
  };
  A._dblTests_closure105.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().insertAll$3(0, l, 0, $._dx0);
    },
    $signature: 3
  };
  A._dblTests_closure106.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().insertAll$3(0, l, 3, $._dx0);
    },
    $signature: 3
  };
  A._dblTests_closure107.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().insertAll$3(0, l, J.get$length$asx(l) - 1, $._dx0);
    },
    $signature: 3
  };
  A._dblTests_closure108.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().insertAll$3(0, l, J.get$length$asx(l), $._dx0);
    },
    $signature: 3
  };
  A._dblTests_closure109.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.remove$1$ax($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), 1.1);
    },
    $signature: 48
  };
  A._dblTests_closure110.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return J.removeAt$1$ax($.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l), 2);
    },
    $signature: 9
  };
  A._dblTests_closure111.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      $.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l);
      J.removeRange$2$ax(l, 3, 6);
      return l;
    },
    $signature: 3
  };
  A._dblTests_closure112.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().removeWhere$2(0, l, A.lib_03_converter_test__list_features___isGt3$closure());
    },
    $signature: 3
  };
  A._dblTests_closure113.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().retainWhere$2(0, l, A.lib_03_converter_test__list_features___isGt3$closure());
    },
    $signature: 3
  };
  A._dblTests_closure114.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().setRange$5(0, l, 3, 6, $._dx0, null);
    },
    $signature: 3
  };
  A._dblTests_closure115.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().setRange$5(0, l, 3, 6, $._dx0, 1);
    },
    $signature: 3
  };
  A._dblTests_closure116.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().replaceRange$4(0, l, 3, 6, $._dx0);
    },
    $signature: 3
  };
  A._dblTests_closure117.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().sort$2(0, l, null);
    },
    $signature: 3
  };
  A._dblTests_closure118.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      return $.$get$_dblFeats0().sort$2(0, l, new A._dblTests__closure6());
    },
    $signature: 3
  };
  A._dblTests__closure6.prototype = {
    call$2(a, b) {
      A._asDouble(a);
      return B.JSNumber_methods.compareTo$1(A._asDouble(b), a);
    },
    $signature: 150
  };
  A._dblTests_closure119.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_double._as(l);
      t1 = $.$get$_dblFeats0();
      t2 = new A._Random();
      t2._Random$1($.$get$_seed());
      t1.$ti._eval$1("List<1>")._as(l);
      J.shuffle$1$ax(l, t2);
      return l;
    },
    $signature: 3
  };
  A._dblTests_closure120.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      $.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l);
      return J.join$1$ax(l, "");
    },
    $signature: 124
  };
  A._dblTests_closure121.prototype = {
    call$1(l) {
      type$.List_double._as(l);
      $.$get$_dblFeats0().$ti._eval$1("List<1>")._as(l);
      return J.join$1$ax(l, " $ ");
    },
    $signature: 124
  };
  A._ndblTests_closure26.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().decreaseLength$2(l, 2);
    },
    $signature: 21
  };
  A._ndblTests_closure27.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().increaseLength$2(l, 2);
    },
    $signature: 21
  };
  A._ndblTests_closure28.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.$index$asx($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), 2);
    },
    $signature: 11
  };
  A._ndblTests_closure29.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.$index$asx($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), -1);
    },
    $signature: 11
  };
  A._ndblTests_closure30.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t3 = J.getInterceptor$ax(l);
      t3.set$first(l, t1._precomputed1._as(t2));
      return t3.get$first(l);
    },
    $signature: 11
  };
  A._ndblTests_closure31.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t3 = J.getInterceptor$ax(l);
      t3.set$last(l, t1._precomputed1._as(t2));
      return t3.get$last(l);
    },
    $signature: 11
  };
  A._ndblTests_closure32.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t3 = J.getInterceptor$ax(l);
      t3.$indexSet(l, 2, t1._precomputed1._as(t2));
      return t3.$index(l, 2);
    },
    $signature: 11
  };
  A._ndblTests_closure33.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t3 = J.getInterceptor$ax(l);
      t3.$indexSet(l, -1, t1._precomputed1._as(t2));
      return t3.$index(l, -1);
    },
    $signature: 11
  };
  A._ndblTests_closure34.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.elementAt$1$ax($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), 2);
    },
    $signature: 11
  };
  A._ndblTests_closure35.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.elementAt$1$ax($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), -1);
    },
    $signature: 11
  };
  A._ndblTests_closure36.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.getRange$2$ax($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), 3, 6);
    },
    $signature: 29
  };
  A._ndblTests_closure37.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.contains$1$asx($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), 2);
    },
    $signature: 51
  };
  A._ndblTests_closure38.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.contains$1$asx($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), -1);
    },
    $signature: 51
  };
  A._ndblTests_closure39.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      t1._eval$1("List<1>")._as(l);
      t1._precomputed1._as(2);
      return J.indexOf$2$asx(l, 2, 0);
    },
    $signature: 21
  };
  A._ndblTests_closure40.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      t1._eval$1("List<1>")._as(l);
      t1._precomputed1._as(2);
      return J.indexOf$2$asx(l, 2, 3);
    },
    $signature: 21
  };
  A._ndblTests_closure41.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      t1._eval$1("List<1>")._as(l);
      t1._precomputed1._as(-1);
      return J.indexOf$2$asx(l, -1, 0);
    },
    $signature: 21
  };
  A._ndblTests_closure42.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.lastIndexOf$2$asx(t1._eval$1("List<1>")._as(l), t1._precomputed1._as(2), null);
    },
    $signature: 21
  };
  A._ndblTests_closure43.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.lastIndexOf$2$asx(t1._eval$1("List<1>")._as(l), t1._precomputed1._as(2), 3);
    },
    $signature: 21
  };
  A._ndblTests_closure44.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.lastIndexOf$2$asx(t1._eval$1("List<1>")._as(l), t1._precomputed1._as(-1), null);
    },
    $signature: 21
  };
  A._ndblTests_closure45.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().indexWhere$3(0, l, A.lib_03_converter_test__list_features___isGt3$closure(), null);
    },
    $signature: 21
  };
  A._ndblTests_closure46.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().indexWhere$3(0, l, A.lib_03_converter_test__list_features___isGt3$closure(), 4);
    },
    $signature: 21
  };
  A._ndblTests_closure47.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().indexWhere$3(0, l, A.lib_03_converter_test__list_features___isNeg$closure(), null);
    },
    $signature: 21
  };
  A._ndblTests_closure48.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.lastIndexWhere$2$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()), null);
    },
    $signature: 21
  };
  A._ndblTests_closure49.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.lastIndexWhere$2$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()), 4);
    },
    $signature: 21
  };
  A._ndblTests_closure50.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.lastIndexWhere$2$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()), null);
    },
    $signature: 21
  };
  A._ndblTests_closure51.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.sublist$2$ax($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), 0, null);
    },
    $signature: 5
  };
  A._ndblTests_closure52.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.sublist$2$ax($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), 3, null);
    },
    $signature: 5
  };
  A._ndblTests_closure53.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      return t2.sublist$2(t1.$ti._eval$1("List<1>")._as(l), t3 - 1, null);
    },
    $signature: 5
  };
  A._ndblTests_closure54.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.sublist$2$ax($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), 0, 6);
    },
    $signature: 5
  };
  A._ndblTests_closure55.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.sublist$2$ax($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), 3, 6);
    },
    $signature: 5
  };
  A._ndblTests_closure56.prototype = {
    call$1(l) {
      var t1, t2, t3, t4;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      t4 = t2.get$length(l);
      return t2.sublist$2(t1.$ti._eval$1("List<1>")._as(l), t3 - 1, t4);
    },
    $signature: 5
  };
  A._ndblTests_closure57.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.sublist$2$ax($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), 4, 3);
    },
    $signature: 5
  };
  A._ndblTests_closure58.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      return t2.sublist$2(t1.$ti._eval$1("List<1>")._as(l), t3, null);
    },
    $signature: 5
  };
  A._ndblTests_closure59.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      return t2.sublist$2(t1.$ti._eval$1("List<1>")._as(l), 0, t3 + 1);
    },
    $signature: 5
  };
  A._ndblTests_closure60.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.map$1$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()), type$.bool);
    },
    $signature: 154
  };
  A._ndblTests_closure61.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.expand$1$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("Iterable<double?>(1)")._as(new A._ndblTests__closure11()), type$.nullable_double);
    },
    $signature: 29
  };
  A._ndblTests__closure11.prototype = {
    call$1(n) {
      A._asDoubleQ(n);
      return A._setArrayType([n, n == null ? null : n * n], type$.JSArray_nullable_double);
    },
    $signature: 155
  };
  A._ndblTests_closure62.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.fold$1$2$ax(t1._eval$1("List<1>")._as(l), 0, t1._eval$1("double(double,1)")._as(new A._ndblTests__closure10()), type$.double);
    },
    $signature: 156
  };
  A._ndblTests__closure10.prototype = {
    call$2(s, n) {
      A._asDouble(s);
      A._asDoubleQ(n);
      return s + (n == null ? 0 : n);
    },
    $signature: 157
  };
  A._ndblTests_closure63.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.reduce$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("1(1,1)")._as(new A._ndblTests__closure9()));
    },
    $signature: 11
  };
  A._ndblTests__closure9.prototype = {
    call$2(s, n) {
      var t1;
      A._asDoubleQ(s);
      A._asDoubleQ(n);
      t1 = s == null ? 0 : s;
      return t1 + (n == null ? 0 : n);
    },
    $signature: 158
  };
  A._ndblTests_closure64.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.any$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()));
    },
    $signature: 51
  };
  A._ndblTests_closure65.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.any$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()));
    },
    $signature: 51
  };
  A._ndblTests_closure66.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.every$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()));
    },
    $signature: 51
  };
  A._ndblTests_closure67.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.every$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNum$closure()));
    },
    $signature: 51
  };
  A._ndblTests_closure68.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.skip$1$ax($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), 3);
    },
    $signature: 29
  };
  A._ndblTests_closure69.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.skipWhile$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isInt$closure()));
    },
    $signature: 29
  };
  A._ndblTests_closure70.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.skipWhile$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()));
    },
    $signature: 29
  };
  A._ndblTests_closure71.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.take$1$ax($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), 3);
    },
    $signature: 29
  };
  A._ndblTests_closure72.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.takeWhile$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isInt$closure()));
    },
    $signature: 29
  };
  A._ndblTests_closure73.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.takeWhile$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()));
    },
    $signature: 29
  };
  A._ndblTests_closure74.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.where$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt4$closure()));
    },
    $signature: 29
  };
  A._ndblTests_closure75.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.where$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()));
    },
    $signature: 29
  };
  A._ndblTests_closure76.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.singleWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(new A._ndblTests__closure8()), null);
    },
    $signature: 11
  };
  A._ndblTests__closure8.prototype = {
    call$1(n) {
      return A._asDoubleQ(n) === 2.2;
    },
    $signature: 140
  };
  A._ndblTests_closure77.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.singleWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(new A._ndblTests__closure7()), t1._eval$1("1()?")._as(B.CONSTANT5));
    },
    $signature: 11
  };
  A._ndblTests__closure7.prototype = {
    call$1(n) {
      return A._asDoubleQ(n) === 2.2;
    },
    $signature: 140
  };
  A._ndblTests_closure78.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.singleWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()), null);
    },
    $signature: 11
  };
  A._ndblTests_closure79.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.singleWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()), t1._eval$1("1()?")._as(B.CONSTANT5));
    },
    $signature: 11
  };
  A._ndblTests_closure80.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.firstWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt4$closure()), null);
    },
    $signature: 11
  };
  A._ndblTests_closure81.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.firstWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt4$closure()), t1._eval$1("1()?")._as(B.CONSTANT5));
    },
    $signature: 11
  };
  A._ndblTests_closure82.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.firstWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()), null);
    },
    $signature: 11
  };
  A._ndblTests_closure83.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.firstWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()), t1._eval$1("1()?")._as(B.CONSTANT5));
    },
    $signature: 11
  };
  A._ndblTests_closure84.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.lastWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt4$closure()), null);
    },
    $signature: 11
  };
  A._ndblTests_closure85.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.lastWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt4$closure()), t1._eval$1("1()?")._as(B.CONSTANT5));
    },
    $signature: 11
  };
  A._ndblTests_closure86.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.lastWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()), null);
    },
    $signature: 11
  };
  A._ndblTests_closure87.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.lastWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()), t1._eval$1("1()?")._as(B.CONSTANT5));
    },
    $signature: 11
  };
  A._ndblTests_closure88.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().forEach$2(0, l, new A._ndblTests__closure6());
    },
    $signature: 21
  };
  A._ndblTests__closure6.prototype = {
    call$1(n) {
      A._asDoubleQ(n);
    },
    $signature: 160
  };
  A._ndblTests_closure89.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti._eval$1("List<1>");
      return J.$add$ansx(t1._as(l), t1._as($._dx0));
    },
    $signature: 5
  };
  A._ndblTests_closure90.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = A._setArrayType([], type$.JSArray_nullable_double);
      t1 = t1.$ti._eval$1("List<1>");
      return J.$add$ansx(t1._as(l), t1._as(t2));
    },
    $signature: 5
  };
  A._ndblTests_closure91.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      J.add$1$ax(l, t1._precomputed1._as(t2));
      return l;
    },
    $signature: 5
  };
  A._ndblTests_closure92.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().addAll$2(0, l, $._dx0);
    },
    $signature: 5
  };
  A._ndblTests_closure93.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0().$ti;
      return J.followedBy$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("Iterable<1>")._as($._dx0));
    },
    $signature: 29
  };
  A._ndblTests_closure94.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      return J.fillRange$3$ax(t1._eval$1("List<1>")._as(l), 3, 5, t1._eval$1("1?")._as(t2));
    },
    $signature: 91
  };
  A._ndblTests_closure95.prototype = {
    call$1(l) {
      var t1, t2, t3, t4;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      t4 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      return t2.fillRange$3(t1._eval$1("List<1>")._as(l), 0, t3, t1._eval$1("1?")._as(t4));
    },
    $signature: 91
  };
  A._ndblTests_closure96.prototype = {
    call$1(l) {
      var t1, t2, t3, t4;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      t4 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      return t2.fillRange$3(t1._eval$1("List<1>")._as(l), -1, t3, t1._eval$1("1?")._as(t4));
    },
    $signature: 91
  };
  A._ndblTests_closure97.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().setAll$3(0, l, 0, $._dx0);
    },
    $signature: 5
  };
  A._ndblTests_closure98.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().setAll$3(0, l, 3, $._dx0);
    },
    $signature: 5
  };
  A._ndblTests_closure99.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().setAll$3(0, l, J.get$length$asx(l) - 1, $._dx0);
    },
    $signature: 5
  };
  A._ndblTests_closure100.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().setAll$3(0, l, J.get$length$asx(l), $._dx0);
    },
    $signature: 5
  };
  A._ndblTests_closure101.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      J.insert$2$ax(l, 0, t1._precomputed1._as(t2));
      return l;
    },
    $signature: 5
  };
  A._ndblTests_closure102.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      J.insert$2$ax(l, 3, t1._precomputed1._as(t2));
      return l;
    },
    $signature: 5
  };
  A._ndblTests_closure103.prototype = {
    call$1(l) {
      var t1, t2, t3, t4;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      t4 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t2.insert$2(l, t3 - 1, t1._precomputed1._as(t4));
      return l;
    },
    $signature: 5
  };
  A._ndblTests_closure104.prototype = {
    call$1(l) {
      var t1, t2, t3, t4;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      t4 = B.JSArray_methods.get$first($._dx0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t2.insert$2(l, t3, t1._precomputed1._as(t4));
      return l;
    },
    $signature: 5
  };
  A._ndblTests_closure105.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().insertAll$3(0, l, 0, $._dx0);
    },
    $signature: 5
  };
  A._ndblTests_closure106.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().insertAll$3(0, l, 3, $._dx0);
    },
    $signature: 5
  };
  A._ndblTests_closure107.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().insertAll$3(0, l, J.get$length$asx(l) - 1, $._dx0);
    },
    $signature: 5
  };
  A._ndblTests_closure108.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().insertAll$3(0, l, J.get$length$asx(l), $._dx0);
    },
    $signature: 5
  };
  A._ndblTests_closure109.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.remove$1$ax($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), 1.1);
    },
    $signature: 51
  };
  A._ndblTests_closure110.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return J.removeAt$1$ax($.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l), 2);
    },
    $signature: 11
  };
  A._ndblTests_closure111.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      $.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l);
      J.removeRange$2$ax(l, 3, 6);
      return l;
    },
    $signature: 5
  };
  A._ndblTests_closure112.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().removeWhere$2(0, l, A.lib_03_converter_test__list_features___isGt3$closure());
    },
    $signature: 5
  };
  A._ndblTests_closure113.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().retainWhere$2(0, l, A.lib_03_converter_test__list_features___isGt3$closure());
    },
    $signature: 5
  };
  A._ndblTests_closure114.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().setRange$5(0, l, 3, 6, $._dx0, null);
    },
    $signature: 5
  };
  A._ndblTests_closure115.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().setRange$5(0, l, 3, 6, $._dx0, 1);
    },
    $signature: 5
  };
  A._ndblTests_closure116.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      return $.$get$_ndblFeats0().replaceRange$4(0, l, 3, 6, $._dx0);
    },
    $signature: 5
  };
  A._ndblTests_closure117.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_nullable_double._as(l);
      t1 = $.$get$_ndblFeats0();
      t2 = new A._Random();
      t2._Random$1($.$get$_seed());
      t1.$ti._eval$1("List<1>")._as(l);
      J.shuffle$1$ax(l, t2);
      return l;
    },
    $signature: 5
  };
  A._ndblTests_closure118.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      $.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l);
      return J.join$1$ax(l, "");
    },
    $signature: 134
  };
  A._ndblTests_closure119.prototype = {
    call$1(l) {
      type$.List_nullable_double._as(l);
      $.$get$_ndblFeats0().$ti._eval$1("List<1>")._as(l);
      return J.join$1$ax(l, " $ ");
    },
    $signature: 134
  };
  A._nintTests_closure26.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().decreaseLength$2(l, 2);
    },
    $signature: 15
  };
  A._nintTests_closure27.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().increaseLength$2(l, 2);
    },
    $signature: 15
  };
  A._nintTests_closure28.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.$index$asx($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), 2);
    },
    $signature: 10
  };
  A._nintTests_closure29.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.$index$asx($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), -1);
    },
    $signature: 10
  };
  A._nintTests_closure30.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = B.JSArray_methods.get$first($._ix0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t3 = J.getInterceptor$ax(l);
      t3.set$first(l, t1._precomputed1._as(t2));
      return t3.get$first(l);
    },
    $signature: 10
  };
  A._nintTests_closure31.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = B.JSArray_methods.get$first($._ix0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t3 = J.getInterceptor$ax(l);
      t3.set$last(l, t1._precomputed1._as(t2));
      return t3.get$last(l);
    },
    $signature: 10
  };
  A._nintTests_closure32.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = B.JSArray_methods.get$first($._ix0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t3 = J.getInterceptor$ax(l);
      t3.$indexSet(l, 2, t1._precomputed1._as(t2));
      return t3.$index(l, 2);
    },
    $signature: 10
  };
  A._nintTests_closure33.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = B.JSArray_methods.get$first($._ix0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t3 = J.getInterceptor$ax(l);
      t3.$indexSet(l, -1, t1._precomputed1._as(t2));
      return t3.$index(l, -1);
    },
    $signature: 10
  };
  A._nintTests_closure34.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.elementAt$1$ax($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), 2);
    },
    $signature: 10
  };
  A._nintTests_closure35.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.elementAt$1$ax($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), -1);
    },
    $signature: 10
  };
  A._nintTests_closure36.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.getRange$2$ax($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), 3, 6);
    },
    $signature: 28
  };
  A._nintTests_closure37.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.contains$1$asx($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), 2);
    },
    $signature: 49
  };
  A._nintTests_closure38.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.contains$1$asx($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), -1);
    },
    $signature: 49
  };
  A._nintTests_closure39.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      t1._eval$1("List<1>")._as(l);
      t1._precomputed1._as(2);
      return J.indexOf$2$asx(l, 2, 0);
    },
    $signature: 15
  };
  A._nintTests_closure40.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      t1._eval$1("List<1>")._as(l);
      t1._precomputed1._as(2);
      return J.indexOf$2$asx(l, 2, 3);
    },
    $signature: 15
  };
  A._nintTests_closure41.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      t1._eval$1("List<1>")._as(l);
      t1._precomputed1._as(-1);
      return J.indexOf$2$asx(l, -1, 0);
    },
    $signature: 15
  };
  A._nintTests_closure42.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.lastIndexOf$2$asx(t1._eval$1("List<1>")._as(l), t1._precomputed1._as(2), null);
    },
    $signature: 15
  };
  A._nintTests_closure43.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.lastIndexOf$2$asx(t1._eval$1("List<1>")._as(l), t1._precomputed1._as(2), 3);
    },
    $signature: 15
  };
  A._nintTests_closure44.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.lastIndexOf$2$asx(t1._eval$1("List<1>")._as(l), t1._precomputed1._as(-1), null);
    },
    $signature: 15
  };
  A._nintTests_closure45.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().indexWhere$3(0, l, A.lib_03_converter_test__list_features___isGt3$closure(), null);
    },
    $signature: 15
  };
  A._nintTests_closure46.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().indexWhere$3(0, l, A.lib_03_converter_test__list_features___isGt3$closure(), 4);
    },
    $signature: 15
  };
  A._nintTests_closure47.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().indexWhere$3(0, l, A.lib_03_converter_test__list_features___isNeg$closure(), null);
    },
    $signature: 15
  };
  A._nintTests_closure48.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.lastIndexWhere$2$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()), null);
    },
    $signature: 15
  };
  A._nintTests_closure49.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.lastIndexWhere$2$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()), 4);
    },
    $signature: 15
  };
  A._nintTests_closure50.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.lastIndexWhere$2$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()), null);
    },
    $signature: 15
  };
  A._nintTests_closure51.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.sublist$2$ax($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), 0, null);
    },
    $signature: 6
  };
  A._nintTests_closure52.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.sublist$2$ax($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), 3, null);
    },
    $signature: 6
  };
  A._nintTests_closure53.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      return t2.sublist$2(t1.$ti._eval$1("List<1>")._as(l), t3 - 1, null);
    },
    $signature: 6
  };
  A._nintTests_closure54.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.sublist$2$ax($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), 0, 6);
    },
    $signature: 6
  };
  A._nintTests_closure55.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.sublist$2$ax($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), 3, 6);
    },
    $signature: 6
  };
  A._nintTests_closure56.prototype = {
    call$1(l) {
      var t1, t2, t3, t4;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      t4 = t2.get$length(l);
      return t2.sublist$2(t1.$ti._eval$1("List<1>")._as(l), t3 - 1, t4);
    },
    $signature: 6
  };
  A._nintTests_closure57.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.sublist$2$ax($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), 4, 3);
    },
    $signature: 6
  };
  A._nintTests_closure58.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      return t2.sublist$2(t1.$ti._eval$1("List<1>")._as(l), t3, null);
    },
    $signature: 6
  };
  A._nintTests_closure59.prototype = {
    call$1(l) {
      var t1, t2, t3;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      return t2.sublist$2(t1.$ti._eval$1("List<1>")._as(l), 0, t3 + 1);
    },
    $signature: 6
  };
  A._nintTests_closure60.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.map$1$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()), type$.bool);
    },
    $signature: 168
  };
  A._nintTests_closure61.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.expand$1$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("Iterable<int?>(1)")._as(new A._nintTests__closure11()), type$.nullable_int);
    },
    $signature: 28
  };
  A._nintTests__closure11.prototype = {
    call$1(n) {
      A._asIntQ(n);
      return A._setArrayType([n, n == null ? null : n * n], type$.JSArray_nullable_int);
    },
    $signature: 169
  };
  A._nintTests_closure62.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.fold$1$2$ax(t1._eval$1("List<1>")._as(l), 0, t1._eval$1("int(int,1)")._as(new A._nintTests__closure10()), type$.int);
    },
    $signature: 15
  };
  A._nintTests__closure10.prototype = {
    call$2(s, n) {
      A._asInt(s);
      A._asIntQ(n);
      return s + (n == null ? 0 : n);
    },
    $signature: 170
  };
  A._nintTests_closure63.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.reduce$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("1(1,1)")._as(new A._nintTests__closure9()));
    },
    $signature: 10
  };
  A._nintTests__closure9.prototype = {
    call$2(s, n) {
      var t1;
      A._asIntQ(s);
      A._asIntQ(n);
      t1 = s == null ? 0 : s;
      return t1 + (n == null ? 0 : n);
    },
    $signature: 171
  };
  A._nintTests_closure64.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.any$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()));
    },
    $signature: 49
  };
  A._nintTests_closure65.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.any$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()));
    },
    $signature: 49
  };
  A._nintTests_closure66.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.every$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()));
    },
    $signature: 49
  };
  A._nintTests_closure67.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.every$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNum$closure()));
    },
    $signature: 49
  };
  A._nintTests_closure68.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.skip$1$ax($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), 3);
    },
    $signature: 28
  };
  A._nintTests_closure69.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.skipWhile$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isInt$closure()));
    },
    $signature: 28
  };
  A._nintTests_closure70.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.skipWhile$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()));
    },
    $signature: 28
  };
  A._nintTests_closure71.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.take$1$ax($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), 3);
    },
    $signature: 28
  };
  A._nintTests_closure72.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.takeWhile$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isInt$closure()));
    },
    $signature: 28
  };
  A._nintTests_closure73.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.takeWhile$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()));
    },
    $signature: 28
  };
  A._nintTests_closure74.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.where$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt4$closure()));
    },
    $signature: 28
  };
  A._nintTests_closure75.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.where$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()));
    },
    $signature: 28
  };
  A._nintTests_closure76.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.singleWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(new A._nintTests__closure8()), null);
    },
    $signature: 10
  };
  A._nintTests__closure8.prototype = {
    call$1(n) {
      return A._asIntQ(n) === 2;
    },
    $signature: 90
  };
  A._nintTests_closure77.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.singleWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(new A._nintTests__closure7()), t1._eval$1("1()?")._as(B.CONSTANT4));
    },
    $signature: 10
  };
  A._nintTests__closure7.prototype = {
    call$1(n) {
      return A._asIntQ(n) === 2;
    },
    $signature: 90
  };
  A._nintTests_closure78.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.singleWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()), null);
    },
    $signature: 10
  };
  A._nintTests_closure79.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.singleWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt3$closure()), t1._eval$1("1()?")._as(B.CONSTANT4));
    },
    $signature: 10
  };
  A._nintTests_closure80.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.firstWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt4$closure()), null);
    },
    $signature: 10
  };
  A._nintTests_closure81.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.firstWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt4$closure()), t1._eval$1("1()?")._as(B.CONSTANT4));
    },
    $signature: 10
  };
  A._nintTests_closure82.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.firstWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()), null);
    },
    $signature: 10
  };
  A._nintTests_closure83.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.firstWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()), t1._eval$1("1()?")._as(B.CONSTANT4));
    },
    $signature: 10
  };
  A._nintTests_closure84.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.lastWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt4$closure()), null);
    },
    $signature: 10
  };
  A._nintTests_closure85.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.lastWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isGt4$closure()), t1._eval$1("1()?")._as(B.CONSTANT4));
    },
    $signature: 10
  };
  A._nintTests_closure86.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.lastWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()), null);
    },
    $signature: 10
  };
  A._nintTests_closure87.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.lastWhere$2$orElse$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("bool(1)")._as(A.lib_03_converter_test__list_features___isNeg$closure()), t1._eval$1("1()?")._as(B.CONSTANT4));
    },
    $signature: 10
  };
  A._nintTests_closure88.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().forEach$2(0, l, new A._nintTests__closure6());
    },
    $signature: 15
  };
  A._nintTests__closure6.prototype = {
    call$1(_) {
      A._asIntQ(_);
    },
    $signature: 172
  };
  A._nintTests_closure89.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti._eval$1("List<1>");
      return J.$add$ansx(t1._as(l), t1._as($._ix0));
    },
    $signature: 6
  };
  A._nintTests_closure90.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = A._setArrayType([], type$.JSArray_nullable_int);
      t1 = t1.$ti._eval$1("List<1>");
      return J.$add$ansx(t1._as(l), t1._as(t2));
    },
    $signature: 6
  };
  A._nintTests_closure91.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = B.JSArray_methods.get$first($._ix0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      J.add$1$ax(l, t1._precomputed1._as(t2));
      return l;
    },
    $signature: 6
  };
  A._nintTests_closure92.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().addAll$2(0, l, $._ix0);
    },
    $signature: 6
  };
  A._nintTests_closure93.prototype = {
    call$1(l) {
      var t1;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0().$ti;
      return J.followedBy$1$ax(t1._eval$1("List<1>")._as(l), t1._eval$1("Iterable<1>")._as($._ix0));
    },
    $signature: 28
  };
  A._nintTests_closure94.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = B.JSArray_methods.get$first($._ix0);
      t1 = t1.$ti;
      return J.fillRange$3$ax(t1._eval$1("List<1>")._as(l), 3, 5, t1._eval$1("1?")._as(t2));
    },
    $signature: 104
  };
  A._nintTests_closure95.prototype = {
    call$1(l) {
      var t1, t2, t3, t4;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      t4 = B.JSArray_methods.get$first($._ix0);
      t1 = t1.$ti;
      return t2.fillRange$3(t1._eval$1("List<1>")._as(l), 0, t3, t1._eval$1("1?")._as(t4));
    },
    $signature: 104
  };
  A._nintTests_closure96.prototype = {
    call$1(l) {
      var t1, t2, t3, t4;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      t4 = B.JSArray_methods.get$first($._ix0);
      t1 = t1.$ti;
      return t2.fillRange$3(t1._eval$1("List<1>")._as(l), -1, t3, t1._eval$1("1?")._as(t4));
    },
    $signature: 104
  };
  A._nintTests_closure97.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().setAll$3(0, l, 0, $._ix0);
    },
    $signature: 6
  };
  A._nintTests_closure98.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().setAll$3(0, l, 3, $._ix0);
    },
    $signature: 6
  };
  A._nintTests_closure99.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().setAll$3(0, l, J.get$length$asx(l) - 1, $._ix0);
    },
    $signature: 6
  };
  A._nintTests_closure100.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().setAll$3(0, l, J.get$length$asx(l), $._ix0);
    },
    $signature: 6
  };
  A._nintTests_closure101.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = B.JSArray_methods.get$first($._ix0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      J.insert$2$ax(l, 0, t1._precomputed1._as(t2));
      return l;
    },
    $signature: 6
  };
  A._nintTests_closure102.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = B.JSArray_methods.get$first($._ix0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      J.insert$2$ax(l, 3, t1._precomputed1._as(t2));
      return l;
    },
    $signature: 6
  };
  A._nintTests_closure103.prototype = {
    call$1(l) {
      var t1, t2, t3, t4;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      t4 = B.JSArray_methods.get$first($._ix0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t2.insert$2(l, t3 - 1, t1._precomputed1._as(t4));
      return l;
    },
    $signature: 6
  };
  A._nintTests_closure104.prototype = {
    call$1(l) {
      var t1, t2, t3, t4;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = J.getInterceptor$asx(l);
      t3 = t2.get$length(l);
      t4 = B.JSArray_methods.get$first($._ix0);
      t1 = t1.$ti;
      t1._eval$1("List<1>")._as(l);
      t2.insert$2(l, t3, t1._precomputed1._as(t4));
      return l;
    },
    $signature: 6
  };
  A._nintTests_closure105.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().insertAll$3(0, l, 0, $._ix0);
    },
    $signature: 6
  };
  A._nintTests_closure106.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().insertAll$3(0, l, 3, $._ix0);
    },
    $signature: 6
  };
  A._nintTests_closure107.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().insertAll$3(0, l, J.get$length$asx(l) - 1, $._ix0);
    },
    $signature: 6
  };
  A._nintTests_closure108.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().insertAll$3(0, l, J.get$length$asx(l), $._ix0);
    },
    $signature: 6
  };
  A._nintTests_closure109.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.remove$1$ax($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), 2);
    },
    $signature: 49
  };
  A._nintTests_closure110.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return J.removeAt$1$ax($.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l), 2);
    },
    $signature: 10
  };
  A._nintTests_closure111.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      $.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l);
      J.removeRange$2$ax(l, 3, 6);
      return l;
    },
    $signature: 6
  };
  A._nintTests_closure112.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().removeWhere$2(0, l, A.lib_03_converter_test__list_features___isGt3$closure());
    },
    $signature: 6
  };
  A._nintTests_closure113.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().retainWhere$2(0, l, A.lib_03_converter_test__list_features___isGt3$closure());
    },
    $signature: 6
  };
  A._nintTests_closure114.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().setRange$5(0, l, 3, 6, $._ix0, null);
    },
    $signature: 6
  };
  A._nintTests_closure115.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().setRange$5(0, l, 3, 6, $._ix0, 1);
    },
    $signature: 6
  };
  A._nintTests_closure116.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      return $.$get$_nintFeats0().replaceRange$4(0, l, 3, 6, $._ix0);
    },
    $signature: 6
  };
  A._nintTests_closure117.prototype = {
    call$1(l) {
      var t1, t2;
      type$.List_nullable_int._as(l);
      t1 = $.$get$_nintFeats0();
      t2 = new A._Random();
      t2._Random$1($.$get$_seed());
      t1.$ti._eval$1("List<1>")._as(l);
      J.shuffle$1$ax(l, t2);
      return l;
    },
    $signature: 6
  };
  A._nintTests_closure118.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      $.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l);
      return J.join$1$ax(l, "");
    },
    $signature: 148
  };
  A._nintTests_closure119.prototype = {
    call$1(l) {
      type$.List_nullable_int._as(l);
      $.$get$_nintFeats0().$ti._eval$1("List<1>")._as(l);
      return J.join$1$ax(l, " $ ");
    },
    $signature: 148
  };
  A._Features0.prototype = {
    addAll$2(_, l, x) {
      var t1 = this.$ti;
      t1._eval$1("List<1>")._as(l);
      J.addAll$1$ax(l, t1._eval$1("Iterable<1>")._as(x));
      return l;
    },
    asMap$1(_, l) {
      return J.asMap$0$ax(this.$ti._eval$1("List<1>")._as(l));
    },
    cast$1$1(_, l, $U) {
      return J.cast$1$0$ax(this.$ti._eval$1("List<1>")._as(l), $U);
    },
    cast$1(_, l) {
      return this.cast$1$1(0, l, type$.dynamic);
    },
    clear$1(_, l) {
      this.$ti._eval$1("List<1>")._as(l);
      J.clear$0$ax(l);
      return l;
    },
    decreaseLength$2(l, c) {
      var t1;
      this.$ti._eval$1("List<1>")._as(l);
      t1 = J.getInterceptor$asx(l);
      t1.set$length(l, t1.get$length(l) - c);
      return t1.get$length(l);
    },
    forEach$2(_, l, a) {
      var t1 = {},
        t2 = this.$ti;
      t2._eval$1("List<1>")._as(l);
      t2._eval$1("~(1)")._as(a);
      t1.n = 0;
      J.forEach$1$ax(l, new A._Features_forEach_$a0(t1, this, a));
      return t1.n;
    },
    getFirst$1(l) {
      return J.get$first$ax(this.$ti._eval$1("List<1>")._as(l));
    },
    getLast$1(l) {
      return J.get$last$ax(this.$ti._eval$1("List<1>")._as(l));
    },
    getLength$1(l) {
      return J.get$length$asx(this.$ti._eval$1("List<1>")._as(l));
    },
    getSingle$1(l) {
      return J.get$single$ax(this.$ti._eval$1("List<1>")._as(l));
    },
    getString$1(l) {
      return J.toString$0$(this.$ti._eval$1("List<1>")._as(l));
    },
    increaseLength$2(l, c) {
      var t1;
      this.$ti._eval$1("List<1>")._as(l);
      t1 = J.getInterceptor$asx(l);
      t1.set$length(l, t1.get$length(l) + c);
      return t1.get$length(l);
    },
    indexWhere$3(_, l, t, s) {
      var t1 = this.$ti;
      t1._eval$1("List<1>")._as(l);
      t1._eval$1("bool(1)")._as(t);
      return J.indexWhere$2$ax(l, t, s == null ? 0 : s);
    },
    insertAll$3(_, l, i, x) {
      var t1 = this.$ti;
      t1._eval$1("List<1>")._as(l);
      J.insertAll$2$ax(l, i, t1._eval$1("Iterable<1>")._as(x));
      return l;
    },
    isEmpty$1(_, l) {
      return J.get$isEmpty$asx(this.$ti._eval$1("List<1>")._as(l));
    },
    isNotEmpty$1(_, l) {
      return J.get$isNotEmpty$asx(this.$ti._eval$1("List<1>")._as(l));
    },
    removeLast$1(_, l) {
      return J.removeLast$0$ax(this.$ti._eval$1("List<1>")._as(l));
    },
    removeWhere$2(_, l, t) {
      var t1 = this.$ti;
      t1._eval$1("List<1>")._as(l);
      J.removeWhere$1$ax(l, t1._eval$1("bool(1)")._as(t));
      return l;
    },
    replaceRange$4(_, l, s, e, r) {
      var t1 = this.$ti;
      t1._eval$1("List<1>")._as(l);
      J.replaceRange$3$asx(l, s, e, t1._eval$1("Iterable<1>")._as(r));
      return l;
    },
    retainWhere$2(_, l, t) {
      var t1 = this.$ti;
      t1._eval$1("List<1>")._as(l);
      J.retainWhere$1$ax(l, t1._eval$1("bool(1)")._as(t));
      return l;
    },
    reversed$1(_, l) {
      return J.get$reversed$ax(this.$ti._eval$1("List<1>")._as(l));
    },
    setAll$3(_, l, i, x) {
      var t1 = this.$ti;
      t1._eval$1("List<1>")._as(l);
      J.setAll$2$ax(l, i, t1._eval$1("Iterable<1>")._as(x));
      return l;
    },
    setRange$5(_, l, s, e, x, c) {
      var t1 = this.$ti;
      t1._eval$1("List<1>")._as(l);
      t1._eval$1("Iterable<1>")._as(x);
      J.setRange$4$ax(l, s, e, x, c == null ? 0 : c);
      return l;
    },
    sort$2(_, l, c) {
      var t1 = this.$ti;
      t1._eval$1("List<1>")._as(l);
      J.sort$1$ax(l, t1._eval$1("int(1,1)?")._as(c));
      return l;
    },
    toList$1(_, l) {
      return J.toList$0$ax(this.$ti._eval$1("List<1>")._as(l));
    },
    toSet$1(_, l) {
      return J.toSet$0$ax(this.$ti._eval$1("List<1>")._as(l));
    },
    whereType$1$1(_, l, $U) {
      return J.whereType$1$0$ax(this.$ti._eval$1("List<1>")._as(l), $U);
    },
    whereType$1(_, l) {
      return this.whereType$1$1(0, l, type$.dynamic);
    }
  };
  A._Features_forEach_$a0.prototype = {
    call$1(i) {
      this.a.call$1(this.$this.$ti._precomputed1._as(i));
      ++this._box_0.n;
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1)");
    }
  };
  A._FeatureTestExt_check_closure.prototype = {
    call$0() {
      var t3,
        t1 = this.data,
        t2 = t1._0;
      t1 = t1._1;
      A.expect(t2, t1, "1");
      t3 = this._this;
      A.checkOutcome(t3.key, t2, t1, t3.value, $.$get$platform(), this.T._eval$1("List<0>"), type$.dynamic);
      A.expect(t2, t1, "2");
    },
    $signature: 1
  };
  A.testLazyMaps_$initDataContext.prototype = {
    call$1$2(data, cast, $V) {
      var t1, t2;
      $V._eval$1("0(@)")._as(cast);
      t1 = type$.dynamic;
      t1 = A.LinkedHashMap_LinkedHashMap$of(data, t1, t1);
      t2 = data.get$entries();
      return new A._Record_2_lazy_ref(new A.LazyInPlaceMap(t1, cast, type$.$env_1_1_String._bind$1($V)._eval$1("LazyInPlaceMap<1,2>")), A.Map_Map$fromEntries(t2.map$1$1(t2, new A.testLazyMaps_$initDataContext_closure(cast, $V), $V._eval$1("MapEntry<String,0>")), type$.String, $V));
    },
    call$2(data, cast) {
      return this.call$1$2(data, cast, type$.dynamic);
    },
    $signature: 178
  };
  A.testLazyMaps_$initDataContext_closure.prototype = {
    call$1(e) {
      type$.MapEntry_dynamic_dynamic._as(e);
      return new A.MapEntry(A._asString(e.key), this.cast.call$1(e.value), type$.$env_1_1_String._bind$1(this.V)._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return this.V._eval$1("MapEntry<String,0>(MapEntry<@,@>)");
    }
  };
  A.testLazyMaps_closure.prototype = {
    call$0() {
      var t2, t3, t4, t5,
        t1 = type$.dynamic,
        data = A.ConstantMap_ConstantMap$from(A.LinkedHashMap_LinkedHashMap$_literal(["one", 1, "two", 2, "3dot3", 3.3, "four", 4, "4dot4", 4.4], t1, t1), t1, t1);
      for (t1 = $.$get$_dblTests(), t1 = new A.LinkedHashMapEntriesIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapEntriesIterable<1,2>")).get$iterator(0), t2 = this.$$initDataContext, t3 = type$.double, t4 = this.tc; t1.moveNext$0();) {
        t5 = t1.__js_helper$_current;
        t5.toString;
        A._FeatureTestExt_test(t5, t4, t2.call$1$2(data, $.$get$_dbl(), t3), t3);
      }
    },
    $signature: 1
  };
  A.testLazyMaps_closure0.prototype = {
    call$0() {
      var t2, t3, t4, t5,
        t1 = type$.dynamic,
        data = A.ConstantMap_ConstantMap$from(A.LinkedHashMap_LinkedHashMap$_literal(["one", 1, "two", 2, "", null, "3dot3", 3.3, "four", 4, "4dot4", 4.4], t1, t1), t1, t1);
      for (t1 = $.$get$_ndblTests(), t1 = new A.LinkedHashMapEntriesIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapEntriesIterable<1,2>")).get$iterator(0), t2 = this.$$initDataContext, t3 = type$.nullable_double, t4 = this.tc; t1.moveNext$0();) {
        t5 = t1.__js_helper$_current;
        t5.toString;
        A._FeatureTestExt_test(t5, t4, t2.call$1$2(data, $.$get$_ndbl(), t3), t3);
      }
    },
    $signature: 1
  };
  A.testLazyMaps_closure1.prototype = {
    call$0() {
      var t2, t3, t4, t5,
        t1 = type$.dynamic,
        data = A.ConstantMap_ConstantMap$from(A.LinkedHashMap_LinkedHashMap$_literal(["one", 1, "two", 2, "", null, "three", 3, "four", 4, "five", 5], t1, t1), t1, t1);
      for (t1 = $.$get$_nintTests(), t1 = new A.LinkedHashMapEntriesIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapEntriesIterable<1,2>")).get$iterator(0), t2 = this.$$initDataContext, t3 = type$.nullable_int, t4 = this.tc; t1.moveNext$0();) {
        t5 = t1.__js_helper$_current;
        t5.toString;
        A._FeatureTestExt_test(t5, t4, t2.call$1$2(data, $.$get$_nint(), t3), t3);
      }
    },
    $signature: 1
  };
  A._dblTests_closure.prototype = {
    call$1(m) {
      var t1;
      type$.Map_String_double._as(m);
      t1 = $.$get$_dblFeats().$ti._eval$1("Map<String,1>")._as(m).get$entries();
      return t1.map$1$1(t1, new A._dblTests__closure5(), type$.String);
    },
    $signature: 179
  };
  A._dblTests__closure5.prototype = {
    call$1(e) {
      type$.MapEntry_String_double._as(e);
      return e.key + " = " + A.S(e.value);
    },
    $signature: 180
  };
  A._dblTests_closure0.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().$ti._eval$1("Map<String,1>")._as(m).$index(0, "one");
    },
    $signature: 68
  };
  A._dblTests_closure1.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().$ti._eval$1("Map<String,1>")._as(m).$index(0, "!");
    },
    $signature: 68
  };
  A._dblTests_closure2.prototype = {
    call$1(m) {
      var t1, t2, t3;
      type$.Map_String_double._as(m);
      t1 = $.$get$_dblFeats();
      t2 = m.get$keys();
      t2 = t2.get$first(t2);
      t3 = m.get$values();
      t3 = A._dblSq(t3.get$first(t3));
      t1 = t1.$ti;
      t1._eval$1("Map<String,1>")._as(m);
      m.$indexSet(0, t2, t1._precomputed1._as(t3));
      return m;
    },
    $signature: 35
  };
  A._dblTests_closure3.prototype = {
    call$1(m) {
      var t1, t2, t3;
      type$.Map_String_double._as(m);
      t1 = $.$get$_dblFeats();
      t2 = A._instanceType($._dx);
      t3 = new A.LinkedHashMapKeysIterable($._dx, t2._eval$1("LinkedHashMapKeysIterable<1>")).get$first(0);
      t2 = new A.LinkedHashMapValuesIterable($._dx, t2._eval$1("LinkedHashMapValuesIterable<2>")).get$first(0);
      t1 = t1.$ti;
      t1._eval$1("Map<String,1>")._as(m);
      m.$indexSet(0, t3, t1._precomputed1._as(t2));
      return m;
    },
    $signature: 35
  };
  A._dblTests_closure4.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().$ti._eval$1("Map<String,1>")._as(m).containsKey$1("one");
    },
    $signature: 67
  };
  A._dblTests_closure5.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().$ti._eval$1("Map<String,1>")._as(m).containsKey$1("!");
    },
    $signature: 67
  };
  A._dblTests_closure6.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_String_double._as(m);
      t1 = $.$get$_dblFeats();
      t2 = m.get$values();
      t2 = t2.elementAt$1(t2, 2);
      return t1.$ti._eval$1("Map<String,1>")._as(m).containsValue$1(t2);
    },
    $signature: 67
  };
  A._dblTests_closure7.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().$ti._eval$1("Map<String,1>")._as(m).containsKey$1(-1);
    },
    $signature: 67
  };
  A._dblTests_closure8.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().map$2$2(0, m, new A._dblTests__closure4(), type$.nullable_String, type$.nullable_num);
    },
    $signature: 184
  };
  A._dblTests__closure4.prototype = {
    call$2(k, v) {
      var t1;
      A._asString(k);
      A._asDouble(v);
      t1 = J.$negate$in($.$get$_dbl().call$1(v));
      return new A.MapEntry("*" + k, t1, type$.MapEntry_of_nullable_String_and_nullable_num);
    },
    $signature: 185
  };
  A._dblTests_closure9.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().forEach$2(0, m, new A._dblTests__closure3());
    },
    $signature: 186
  };
  A._dblTests__closure3.prototype = {
    call$2(_, __) {
      A._asDouble(__);
    },
    $signature: 187
  };
  A._dblTests_closure10.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().addAll$2(0, m, $._dx);
    },
    $signature: 35
  };
  A._dblTests_closure11.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().addAll$2(0, m, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.double));
    },
    $signature: 35
  };
  A._dblTests_closure12.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().addEntries$2(m, new A.LinkedHashMapEntriesIterable($._dx, A._instanceType($._dx)._eval$1("LinkedHashMapEntriesIterable<1,2>")));
    },
    $signature: 35
  };
  A._dblTests_closure13.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().addEntries$2(m, new A.LinkedHashMapEntriesIterable(new A.JsLinkedHashMap(type$.JsLinkedHashMap_String_double), type$.LinkedHashMapEntriesIterable_String_double));
    },
    $signature: 35
  };
  A._dblTests_closure14.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_String_double._as(m);
      t1 = $.$get$_dblFeats();
      t2 = new A.LinkedHashMapKeysIterable($._dx, A._instanceType($._dx)._eval$1("LinkedHashMapKeysIterable<1>")).get$first(0);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).putIfAbsent$2(t2, t1._eval$1("1()")._as(B.CONSTANT3));
    },
    $signature: 54
  };
  A._dblTests_closure15.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_String_double._as(m);
      t1 = $.$get$_dblFeats();
      t2 = m.get$keys();
      t2 = t2.get$first(t2);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).putIfAbsent$2(t2, t1._eval$1("1()")._as(B.CONSTANT3));
    },
    $signature: 54
  };
  A._dblTests_closure16.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_String_double._as(m);
      t1 = $.$get$_dblFeats();
      t2 = m.get$keys();
      t2 = t2.get$first(t2);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).update$3$ifAbsent(t2, t1._eval$1("1(1)")._as(A.lib_03_converter_test__map_features___dblSq$closure()), t1._eval$1("1()?")._as(B.CONSTANT3));
    },
    $signature: 54
  };
  A._dblTests_closure17.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_String_double._as(m);
      t1 = $.$get$_dblFeats();
      t2 = m.get$keys();
      t2 = t2.get$first(t2);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).update$3$ifAbsent(t2, t1._eval$1("1(1)")._as(A.lib_03_converter_test__map_features___dblSq$closure()), null);
    },
    $signature: 54
  };
  A._dblTests_closure18.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_String_double._as(m);
      t1 = $.$get$_dblFeats();
      t2 = new A.LinkedHashMapKeysIterable($._dx, A._instanceType($._dx)._eval$1("LinkedHashMapKeysIterable<1>")).get$first(0);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).update$3$ifAbsent(t2, t1._eval$1("1(1)")._as(A.lib_03_converter_test__map_features___dblSq$closure()), t1._eval$1("1()?")._as(B.CONSTANT3));
    },
    $signature: 54
  };
  A._dblTests_closure19.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_String_double._as(m);
      t1 = $.$get$_dblFeats();
      t2 = new A.LinkedHashMapKeysIterable($._dx, A._instanceType($._dx)._eval$1("LinkedHashMapKeysIterable<1>")).get$first(0);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).update$3$ifAbsent(t2, t1._eval$1("1(1)")._as(A.lib_03_converter_test__map_features___dblSq$closure()), null);
    },
    $signature: 54
  };
  A._dblTests_closure20.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().updateAll$2(m, new A._dblTests__closure2());
    },
    $signature: 35
  };
  A._dblTests__closure2.prototype = {
    call$2(k, v) {
      A._asString(k);
      return A._dblSq(A._asDouble(v));
    },
    $signature: 189
  };
  A._dblTests_closure21.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().$ti._eval$1("Map<String,1>")._as(m).remove$1(0, "one");
    },
    $signature: 68
  };
  A._dblTests_closure22.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().$ti._eval$1("Map<String,1>")._as(m).remove$1(0, "!");
    },
    $signature: 68
  };
  A._dblTests_closure23.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().removeWhere$2(0, m, new A._dblTests__closure1());
    },
    $signature: 35
  };
  A._dblTests__closure1.prototype = {
    call$2(k, v) {
      A._asString(k);
      A._asDouble(v);
      return k.length > 4;
    },
    $signature: 87
  };
  A._dblTests_closure24.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().removeWhere$2(0, m, new A._dblTests__closure0());
    },
    $signature: 35
  };
  A._dblTests__closure0.prototype = {
    call$2(k, v) {
      var t1;
      A._asString(k);
      A._asDouble(v);
      t1 = $.$get$_dbl().call$1(v);
      if (typeof t1 !== "number")
        return t1.$gt();
      return t1 > 3;
    },
    $signature: 87
  };
  A._dblTests_closure25.prototype = {
    call$1(m) {
      type$.Map_String_double._as(m);
      return $.$get$_dblFeats().removeWhere$2(0, m, new A._dblTests__closure());
    },
    $signature: 35
  };
  A._dblTests__closure.prototype = {
    call$2(k, v) {
      var t1;
      A._asString(k);
      A._asDouble(v);
      t1 = $.$get$_dbl().call$1(v);
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < 0;
    },
    $signature: 87
  };
  A._ndblTests_closure.prototype = {
    call$1(m) {
      var t1;
      type$.Map_of_String_and_nullable_double._as(m);
      t1 = $.$get$_ndblFeats().$ti._eval$1("Map<String,1>")._as(m).get$entries();
      return t1.map$1$1(t1, new A._ndblTests__closure5(), type$.String);
    },
    $signature: 191
  };
  A._ndblTests__closure5.prototype = {
    call$1(e) {
      type$.MapEntry_of_String_and_nullable_double._as(e);
      return e.key + " = " + A.S(e.value);
    },
    $signature: 192
  };
  A._ndblTests_closure0.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().$ti._eval$1("Map<String,1>")._as(m).$index(0, "one");
    },
    $signature: 30
  };
  A._ndblTests_closure1.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().$ti._eval$1("Map<String,1>")._as(m).$index(0, "!");
    },
    $signature: 30
  };
  A._ndblTests_closure2.prototype = {
    call$1(m) {
      var t1, t2, t3;
      type$.Map_of_String_and_nullable_double._as(m);
      t1 = $.$get$_ndblFeats();
      t2 = m.get$keys();
      t2 = t2.get$first(t2);
      t3 = m.get$values();
      t3 = A._dblSq(t3.get$first(t3));
      t1 = t1.$ti;
      t1._eval$1("Map<String,1>")._as(m);
      m.$indexSet(0, t2, t1._precomputed1._as(t3));
      return m;
    },
    $signature: 40
  };
  A._ndblTests_closure3.prototype = {
    call$1(m) {
      var t1, t2, t3;
      type$.Map_of_String_and_nullable_double._as(m);
      t1 = $.$get$_ndblFeats();
      t2 = A._instanceType($._dx);
      t3 = new A.LinkedHashMapKeysIterable($._dx, t2._eval$1("LinkedHashMapKeysIterable<1>")).get$first(0);
      t2 = new A.LinkedHashMapValuesIterable($._dx, t2._eval$1("LinkedHashMapValuesIterable<2>")).get$first(0);
      t1 = t1.$ti;
      t1._eval$1("Map<String,1>")._as(m);
      m.$indexSet(0, t3, t1._precomputed1._as(t2));
      return m;
    },
    $signature: 40
  };
  A._ndblTests_closure4.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().$ti._eval$1("Map<String,1>")._as(m).containsKey$1("one");
    },
    $signature: 76
  };
  A._ndblTests_closure5.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().$ti._eval$1("Map<String,1>")._as(m).containsKey$1("!");
    },
    $signature: 76
  };
  A._ndblTests_closure6.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_of_String_and_nullable_double._as(m);
      t1 = $.$get$_ndblFeats();
      t2 = m.get$values();
      t2 = t2.elementAt$1(t2, 2);
      return t1.$ti._eval$1("Map<String,1>")._as(m).containsValue$1(t2);
    },
    $signature: 76
  };
  A._ndblTests_closure7.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().$ti._eval$1("Map<String,1>")._as(m).containsKey$1(-1);
    },
    $signature: 76
  };
  A._ndblTests_closure8.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().map$2$2(0, m, new A._ndblTests__closure4(), type$.nullable_String, type$.nullable_num);
    },
    $signature: 196
  };
  A._ndblTests__closure4.prototype = {
    call$2(k, v) {
      var t1;
      A._asString(k);
      A._asDoubleQ(v);
      t1 = v == null ? null : J.$negate$in($.$get$_dbl().call$1(v));
      return new A.MapEntry("*" + k, t1, type$.MapEntry_of_nullable_String_and_nullable_num);
    },
    $signature: 197
  };
  A._ndblTests_closure9.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().forEach$2(0, m, new A._ndblTests__closure3());
    },
    $signature: 198
  };
  A._ndblTests__closure3.prototype = {
    call$2(_, __) {
      A._asDoubleQ(__);
    },
    $signature: 199
  };
  A._ndblTests_closure10.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().addAll$2(0, m, $._dx);
    },
    $signature: 40
  };
  A._ndblTests_closure11.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().addAll$2(0, m, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_double));
    },
    $signature: 40
  };
  A._ndblTests_closure12.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().addEntries$2(m, new A.LinkedHashMapEntriesIterable($._dx, A._instanceType($._dx)._eval$1("LinkedHashMapEntriesIterable<1,2>")));
    },
    $signature: 40
  };
  A._ndblTests_closure13.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().addEntries$2(m, new A.LinkedHashMapEntriesIterable(new A.JsLinkedHashMap(type$.JsLinkedHashMap_String_double), type$.LinkedHashMapEntriesIterable_String_double));
    },
    $signature: 40
  };
  A._ndblTests_closure14.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_of_String_and_nullable_double._as(m);
      t1 = $.$get$_ndblFeats();
      t2 = new A.LinkedHashMapKeysIterable($._dx, A._instanceType($._dx)._eval$1("LinkedHashMapKeysIterable<1>")).get$first(0);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).putIfAbsent$2(t2, t1._eval$1("1()")._as(B.CONSTANT2));
    },
    $signature: 30
  };
  A._ndblTests_closure15.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_of_String_and_nullable_double._as(m);
      t1 = $.$get$_ndblFeats();
      t2 = m.get$keys();
      t2 = t2.get$first(t2);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).putIfAbsent$2(t2, t1._eval$1("1()")._as(B.CONSTANT2));
    },
    $signature: 30
  };
  A._ndblTests_closure16.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_of_String_and_nullable_double._as(m);
      t1 = $.$get$_ndblFeats();
      t2 = m.get$keys();
      t2 = t2.get$first(t2);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).update$3$ifAbsent(t2, t1._eval$1("1(1)")._as(A.lib_03_converter_test__map_features___dblSq$closure()), t1._eval$1("1()?")._as(B.CONSTANT2));
    },
    $signature: 30
  };
  A._ndblTests_closure17.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_of_String_and_nullable_double._as(m);
      t1 = $.$get$_ndblFeats();
      t2 = m.get$keys();
      t2 = t2.get$first(t2);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).update$3$ifAbsent(t2, t1._eval$1("1(1)")._as(A.lib_03_converter_test__map_features___dblSq$closure()), null);
    },
    $signature: 30
  };
  A._ndblTests_closure18.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_of_String_and_nullable_double._as(m);
      t1 = $.$get$_ndblFeats();
      t2 = new A.LinkedHashMapKeysIterable($._dx, A._instanceType($._dx)._eval$1("LinkedHashMapKeysIterable<1>")).get$first(0);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).update$3$ifAbsent(t2, t1._eval$1("1(1)")._as(A.lib_03_converter_test__map_features___dblSq$closure()), t1._eval$1("1()?")._as(B.CONSTANT2));
    },
    $signature: 30
  };
  A._ndblTests_closure19.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_of_String_and_nullable_double._as(m);
      t1 = $.$get$_ndblFeats();
      t2 = new A.LinkedHashMapKeysIterable($._dx, A._instanceType($._dx)._eval$1("LinkedHashMapKeysIterable<1>")).get$first(0);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).update$3$ifAbsent(t2, t1._eval$1("1(1)")._as(A.lib_03_converter_test__map_features___dblSq$closure()), null);
    },
    $signature: 30
  };
  A._ndblTests_closure20.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().updateAll$2(m, new A._ndblTests__closure2());
    },
    $signature: 40
  };
  A._ndblTests__closure2.prototype = {
    call$2(k, v) {
      A._asString(k);
      return A._dblSq(A._asDoubleQ(v));
    },
    $signature: 200
  };
  A._ndblTests_closure21.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().$ti._eval$1("Map<String,1>")._as(m).remove$1(0, "one");
    },
    $signature: 30
  };
  A._ndblTests_closure22.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().$ti._eval$1("Map<String,1>")._as(m).remove$1(0, "!");
    },
    $signature: 30
  };
  A._ndblTests_closure23.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().removeWhere$2(0, m, new A._ndblTests__closure1());
    },
    $signature: 40
  };
  A._ndblTests__closure1.prototype = {
    call$2(k, v) {
      A._asString(k);
      A._asDoubleQ(v);
      return k.length > 4;
    },
    $signature: 86
  };
  A._ndblTests_closure24.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().removeWhere$2(0, m, new A._ndblTests__closure0());
    },
    $signature: 40
  };
  A._ndblTests__closure0.prototype = {
    call$2(k, v) {
      var t1;
      A._asString(k);
      A._asDoubleQ(v);
      if (v != null) {
        t1 = $.$get$_dbl().call$1(v);
        if (typeof t1 !== "number")
          return t1.$gt();
        t1 = t1 > 3;
      } else
        t1 = false;
      return t1;
    },
    $signature: 86
  };
  A._ndblTests_closure25.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_double._as(m);
      return $.$get$_ndblFeats().removeWhere$2(0, m, new A._ndblTests__closure());
    },
    $signature: 40
  };
  A._ndblTests__closure.prototype = {
    call$2(k, v) {
      var t1;
      A._asString(k);
      A._asDoubleQ(v);
      if (v != null) {
        t1 = $.$get$_dbl().call$1(v);
        if (typeof t1 !== "number")
          return t1.$lt();
        t1 = t1 < 0;
      } else
        t1 = false;
      return t1;
    },
    $signature: 86
  };
  A._nintTests_closure.prototype = {
    call$1(m) {
      var t1;
      type$.Map_of_String_and_nullable_int._as(m);
      t1 = $.$get$_nintFeats().$ti._eval$1("Map<String,1>")._as(m).get$entries();
      return t1.map$1$1(t1, new A._nintTests__closure5(), type$.String);
    },
    $signature: 202
  };
  A._nintTests__closure5.prototype = {
    call$1(e) {
      type$.MapEntry_of_String_and_nullable_int._as(e);
      return e.key + " = " + A.S(e.value);
    },
    $signature: 203
  };
  A._nintTests_closure0.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().$ti._eval$1("Map<String,1>")._as(m).$index(0, "one");
    },
    $signature: 39
  };
  A._nintTests_closure1.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().$ti._eval$1("Map<String,1>")._as(m).$index(0, "!");
    },
    $signature: 39
  };
  A._nintTests_closure2.prototype = {
    call$1(m) {
      var t1, t2, t3;
      type$.Map_of_String_and_nullable_int._as(m);
      t1 = $.$get$_nintFeats();
      t2 = m.get$keys();
      t2 = t2.get$first(t2);
      t3 = m.get$values();
      t3 = A._intSq(t3.get$first(t3));
      t1 = t1.$ti;
      t1._eval$1("Map<String,1>")._as(m);
      m.$indexSet(0, t2, t1._precomputed1._as(t3));
      return m;
    },
    $signature: 38
  };
  A._nintTests_closure3.prototype = {
    call$1(m) {
      var t1, t2, t3;
      type$.Map_of_String_and_nullable_int._as(m);
      t1 = $.$get$_nintFeats();
      t2 = A._instanceType($._ix);
      t3 = new A.LinkedHashMapKeysIterable($._ix, t2._eval$1("LinkedHashMapKeysIterable<1>")).get$first(0);
      t2 = new A.LinkedHashMapValuesIterable($._ix, t2._eval$1("LinkedHashMapValuesIterable<2>")).get$first(0);
      t1 = t1.$ti;
      t1._eval$1("Map<String,1>")._as(m);
      m.$indexSet(0, t3, t1._precomputed1._as(t2));
      return m;
    },
    $signature: 38
  };
  A._nintTests_closure4.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().$ti._eval$1("Map<String,1>")._as(m).containsKey$1("one");
    },
    $signature: 69
  };
  A._nintTests_closure5.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().$ti._eval$1("Map<String,1>")._as(m).containsKey$1("!");
    },
    $signature: 69
  };
  A._nintTests_closure6.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_of_String_and_nullable_int._as(m);
      t1 = $.$get$_nintFeats();
      t2 = m.get$values();
      t2 = t2.elementAt$1(t2, 2);
      return t1.$ti._eval$1("Map<String,1>")._as(m).containsValue$1(t2);
    },
    $signature: 69
  };
  A._nintTests_closure7.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().$ti._eval$1("Map<String,1>")._as(m).containsKey$1(-1);
    },
    $signature: 69
  };
  A._nintTests_closure8.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().map$2$2(0, m, new A._nintTests__closure4(), type$.nullable_String, type$.nullable_num);
    },
    $signature: 207
  };
  A._nintTests__closure4.prototype = {
    call$2(k, v) {
      var t1;
      A._asString(k);
      A._asIntQ(v);
      t1 = v == null ? null : J.$negate$in($.$get$_dbl().call$1(v));
      return new A.MapEntry("*" + k, t1, type$.MapEntry_of_nullable_String_and_nullable_num);
    },
    $signature: 208
  };
  A._nintTests_closure9.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().forEach$2(0, m, new A._nintTests__closure3());
    },
    $signature: 209
  };
  A._nintTests__closure3.prototype = {
    call$2(_, __) {
      A._asIntQ(__);
    },
    $signature: 132
  };
  A._nintTests_closure10.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().addAll$2(0, m, $._ix);
    },
    $signature: 38
  };
  A._nintTests_closure11.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().addAll$2(0, m, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_int));
    },
    $signature: 38
  };
  A._nintTests_closure12.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().addEntries$2(m, new A.LinkedHashMapEntriesIterable($._ix, A._instanceType($._ix)._eval$1("LinkedHashMapEntriesIterable<1,2>")));
    },
    $signature: 38
  };
  A._nintTests_closure13.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().addEntries$2(m, new A.LinkedHashMapEntriesIterable(new A.JsLinkedHashMap(type$.JsLinkedHashMap_String_int), type$.LinkedHashMapEntriesIterable_String_int));
    },
    $signature: 38
  };
  A._nintTests_closure14.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_of_String_and_nullable_int._as(m);
      t1 = $.$get$_nintFeats();
      t2 = new A.LinkedHashMapKeysIterable($._ix, A._instanceType($._ix)._eval$1("LinkedHashMapKeysIterable<1>")).get$first(0);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).putIfAbsent$2(t2, t1._eval$1("1()")._as(B.CONSTANT1));
    },
    $signature: 39
  };
  A._nintTests_closure15.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_of_String_and_nullable_int._as(m);
      t1 = $.$get$_nintFeats();
      t2 = m.get$keys();
      t2 = t2.get$first(t2);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).putIfAbsent$2(t2, t1._eval$1("1()")._as(B.CONSTANT1));
    },
    $signature: 39
  };
  A._nintTests_closure16.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_of_String_and_nullable_int._as(m);
      t1 = $.$get$_nintFeats();
      t2 = m.get$keys();
      t2 = t2.get$first(t2);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).update$3$ifAbsent(t2, t1._eval$1("1(1)")._as(A.lib_03_converter_test__map_features___intSq$closure()), t1._eval$1("1()?")._as(B.CONSTANT1));
    },
    $signature: 39
  };
  A._nintTests_closure17.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_of_String_and_nullable_int._as(m);
      t1 = $.$get$_nintFeats();
      t2 = m.get$keys();
      t2 = t2.get$first(t2);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).update$3$ifAbsent(t2, t1._eval$1("1(1)")._as(A.lib_03_converter_test__map_features___intSq$closure()), null);
    },
    $signature: 39
  };
  A._nintTests_closure18.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_of_String_and_nullable_int._as(m);
      t1 = $.$get$_nintFeats();
      t2 = new A.LinkedHashMapKeysIterable($._dx, A._instanceType($._dx)._eval$1("LinkedHashMapKeysIterable<1>")).get$first(0);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).update$3$ifAbsent(t2, t1._eval$1("1(1)")._as(A.lib_03_converter_test__map_features___intSq$closure()), t1._eval$1("1()?")._as(B.CONSTANT1));
    },
    $signature: 39
  };
  A._nintTests_closure19.prototype = {
    call$1(m) {
      var t1, t2;
      type$.Map_of_String_and_nullable_int._as(m);
      t1 = $.$get$_nintFeats();
      t2 = new A.LinkedHashMapKeysIterable($._dx, A._instanceType($._dx)._eval$1("LinkedHashMapKeysIterable<1>")).get$first(0);
      t1 = t1.$ti;
      return t1._eval$1("Map<String,1>")._as(m).update$3$ifAbsent(t2, t1._eval$1("1(1)")._as(A.lib_03_converter_test__map_features___intSq$closure()), null);
    },
    $signature: 39
  };
  A._nintTests_closure20.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().updateAll$2(m, new A._nintTests__closure2());
    },
    $signature: 38
  };
  A._nintTests__closure2.prototype = {
    call$2(k, v) {
      A._asString(k);
      return A._intSq(A._asIntQ(v));
    },
    $signature: 210
  };
  A._nintTests_closure21.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().$ti._eval$1("Map<String,1>")._as(m).remove$1(0, "one");
    },
    $signature: 39
  };
  A._nintTests_closure22.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().$ti._eval$1("Map<String,1>")._as(m).remove$1(0, "!");
    },
    $signature: 39
  };
  A._nintTests_closure23.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().removeWhere$2(0, m, new A._nintTests__closure1());
    },
    $signature: 38
  };
  A._nintTests__closure1.prototype = {
    call$2(k, v) {
      A._asString(k);
      A._asIntQ(v);
      return k.length > 4;
    },
    $signature: 85
  };
  A._nintTests_closure24.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().removeWhere$2(0, m, new A._nintTests__closure0());
    },
    $signature: 38
  };
  A._nintTests__closure0.prototype = {
    call$2(k, v) {
      var t1;
      A._asString(k);
      A._asIntQ(v);
      if (v != null) {
        t1 = $.$get$_dbl().call$1(v);
        if (typeof t1 !== "number")
          return t1.$gt();
        t1 = t1 > 3;
      } else
        t1 = false;
      return t1;
    },
    $signature: 85
  };
  A._nintTests_closure25.prototype = {
    call$1(m) {
      type$.Map_of_String_and_nullable_int._as(m);
      return $.$get$_nintFeats().removeWhere$2(0, m, new A._nintTests__closure());
    },
    $signature: 38
  };
  A._nintTests__closure.prototype = {
    call$2(k, v) {
      var t1;
      A._asString(k);
      A._asIntQ(v);
      if (v != null) {
        t1 = $.$get$_dbl().call$1(v);
        if (typeof t1 !== "number")
          return t1.$lt();
        t1 = t1 < 0;
      } else
        t1 = false;
      return t1;
    },
    $signature: 85
  };
  A._Features.prototype = {
    isEmpty$1(_, m) {
      this.$ti._eval$1("Map<String,1>")._as(m);
      return m.get$isEmpty(m);
    },
    isNotEmpty$1(_, m) {
      this.$ti._eval$1("Map<String,1>")._as(m);
      return m.get$isNotEmpty(m);
    },
    keys$1(m) {
      return this.$ti._eval$1("Map<String,1>")._as(m).get$keys();
    },
    getLength$1(m) {
      this.$ti._eval$1("Map<String,1>")._as(m);
      return m.get$length(m);
    },
    values$1(m) {
      return this.$ti._eval$1("Map<String,1>")._as(m).get$values();
    },
    addAll$2(_, m, x) {
      var t1 = this.$ti._eval$1("Map<String,1>");
      t1._as(m);
      m.addAll$1(0, t1._as(x));
      return m;
    },
    addEntries$2(m, x) {
      var t1 = this.$ti;
      t1._eval$1("Map<String,1>")._as(m);
      m.addEntries$1(t1._eval$1("Iterable<MapEntry<String,1>>")._as(x));
      return m;
    },
    cast$2$1(_, m, $RK, $RV) {
      return this.$ti._eval$1("Map<String,1>")._as(m).cast$2$0(0, $RK, $RV);
    },
    cast$1(_, m) {
      var t1 = type$.dynamic;
      return this.cast$2$1(0, m, t1, t1);
    },
    clear$1(_, m) {
      this.$ti._eval$1("Map<String,1>")._as(m);
      m.clear$0(0);
      return m;
    },
    forEach$2(_, m, a) {
      var t1 = {},
        t2 = this.$ti;
      t2._eval$1("Map<String,1>")._as(m);
      t2._eval$1("~(String,1)")._as(a);
      t1.n = 0;
      m.forEach$1(0, new A._Features_forEach_$a(t1, this, a));
      return t1.n;
    },
    map$2$2(_, m, c, $K2, $V2) {
      var t1 = this.$ti;
      return t1._eval$1("Map<String,1>")._as(m).map$2$1(0, t1._bind$1($K2)._bind$1($V2)._eval$1("MapEntry<1,2>(String,3)")._as(c), $K2, $V2);
    },
    removeWhere$2(_, m, t) {
      var t1 = this.$ti;
      t1._eval$1("Map<String,1>")._as(m);
      m.removeWhere$1(0, t1._eval$1("bool(String,1)")._as(t));
      return m;
    },
    getString$1(m) {
      return this.$ti._eval$1("Map<String,1>")._as(m).toString$0(0);
    },
    updateAll$2(m, u) {
      var t1 = this.$ti;
      t1._eval$1("Map<String,1>")._as(m);
      m.updateAll$1(t1._eval$1("1(String,1)")._as(u));
      return m;
    }
  };
  A._Features_forEach_$a.prototype = {
    call$2(k, v) {
      this.a.call$2(A._asString(k), this.$this.$ti._precomputed1._as(v));
      ++this._box_0.n;
    },
    $signature() {
      return this.$this.$ti._eval$1("~(String,1)");
    }
  };
  A._FeatureTestExt_test_closure.prototype = {
    call$0() {
      var t3,
        t1 = this.data,
        t2 = t1._0;
      t1 = t1._1;
      A.expect(t2, t1, null);
      t3 = this._this;
      A.checkOutcome(t3.key, t2, t1, t3.value, $.$get$platform(), this.V._eval$1("Map<String,0>"), type$.dynamic);
      A.expect(t2, t1, null);
    },
    $signature: 1
  };
  A.execute_closure9.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- SQUADRON PLATFORMS", new A.execute__closure10(t1));
      t1.group$2("- TARGET PLATFORMS", new A.execute__closure11(t1));
      t1.group$2("- ANNOTATIONS", new A.execute__closure12(t1));
      t1.group$2("- SQUADRON WORKER - START/STOP", new A.execute__closure13(t1));
      t1.group$2("- SQUADRON WORKER - NON-STREAMING", new A.execute__closure14(t1));
    },
    $signature: 2
  };
  A.execute__closure10.prototype = {
    call$0() {
      var t3,
        t1 = this.tc,
        t2 = $.$get$platform();
      t1.test$3$skip("- VM", new A.execute___closure97(), t2 !== B.SquadronPlatformType_Rhi);
      t3 = t2 !== B.SquadronPlatformType_JavaScript_js;
      t1.test$3$skip("- JS", new A.execute___closure98(), t3);
      t2 = t2 === B.SquadronPlatformType_Dqj;
      t1.test$3$skip("- WASM", new A.execute___closure99(), !t2);
      t2 = !t3 || t2;
      t1.test$3$skip("- Web", new A.execute___closure100(), !t2);
    },
    $signature: 1
  };
  A.execute___closure97.prototype = {
    call$0() {
      var t2, _null = null,
        t1 = $.$get$Squadron_platformType();
      A.expect(t1 === B.SquadronPlatformType_Rhi, B.C__IsTrue, _null);
      t2 = t1 === B.SquadronPlatformType_JavaScript_js;
      A.expect(t2, B.C__IsFalse, _null);
      t1 = t1 === B.SquadronPlatformType_Dqj;
      A.expect(t1, B.C__IsFalse, _null);
      A.expect(t2 || t1, B.C__IsFalse, _null);
    },
    $signature: 1
  };
  A.execute___closure98.prototype = {
    call$0() {
      var t2, _null = null,
        t1 = $.$get$Squadron_platformType();
      A.expect(t1 === B.SquadronPlatformType_Rhi, B.C__IsFalse, _null);
      t2 = t1 === B.SquadronPlatformType_JavaScript_js;
      A.expect(t2, B.C__IsTrue, _null);
      t1 = t1 === B.SquadronPlatformType_Dqj;
      A.expect(t1, B.C__IsFalse, _null);
      A.expect(t2 || t1, B.C__IsTrue, _null);
    },
    $signature: 1
  };
  A.execute___closure99.prototype = {
    call$0() {
      var t2, _null = null,
        t1 = $.$get$Squadron_platformType();
      A.expect(t1 === B.SquadronPlatformType_Rhi, B.C__IsFalse, _null);
      t2 = t1 === B.SquadronPlatformType_JavaScript_js;
      A.expect(t2, B.C__IsFalse, _null);
      t1 = t1 === B.SquadronPlatformType_Dqj;
      A.expect(t1, B.C__IsTrue, _null);
      A.expect(t2 || t1, B.C__IsTrue, _null);
    },
    $signature: 1
  };
  A.execute___closure100.prototype = {
    call$0() {
      var t1 = $.$get$Squadron_platformType();
      A.expect(t1 === B.SquadronPlatformType_Rhi, B.C__IsFalse, null);
      A.expect(t1 === B.SquadronPlatformType_JavaScript_js || t1 === B.SquadronPlatformType_Dqj, B.C__IsTrue, null);
    },
    $signature: 1
  };
  A.execute__closure11.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- VM", new A.execute___closure94());
      t1.test$2("- JS", new A.execute___closure95());
      t1.test$2("- WASM", new A.execute___closure96());
    },
    $signature: 1
  };
  A.execute___closure94.prototype = {
    call$0() {
      var _null = null;
      A.expect(true, B.C__IsTrue, _null);
      A.expect(true, B.C__IsTrue, _null);
      A.expect(false, B.C__IsFalse, _null);
      A.expect(false, B.C__IsFalse, _null);
      A.expect(false, B.C__IsFalse, _null);
    },
    $signature: 1
  };
  A.execute___closure95.prototype = {
    call$0() {
      var _null = null;
      A.expect(true, B.C__IsTrue, _null);
      A.expect(false, B.C__IsFalse, _null);
      A.expect(true, B.C__IsTrue, _null);
      A.expect(false, B.C__IsFalse, _null);
      A.expect(true, B.C__IsTrue, _null);
    },
    $signature: 1
  };
  A.execute___closure96.prototype = {
    call$0() {
      var _null = null;
      A.expect(true, B.C__IsTrue, _null);
      A.expect(false, B.C__IsFalse, _null);
      A.expect(false, B.C__IsFalse, _null);
      A.expect(true, B.C__IsTrue, _null);
      A.expect(true, B.C__IsTrue, _null);
    },
    $signature: 1
  };
  A.execute__closure12.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- VM", new A.execute___closure88());
      t1.test$2("- JS", new A.execute___closure89());
      t1.test$2("- WASM", new A.execute___closure90());
      t1.test$2("- WEB", new A.execute___closure91());
      t1.test$2("- ALL", new A.execute___closure92());
      t1.test$2("- ALL - no pool", new A.execute___closure93());
    },
    $signature: 1
  };
  A.execute___closure88.prototype = {
    call$0() {
      var _null = null;
      A.expect(false, B.C__IsFalse, _null);
      A.expect(true, B.C__IsTrue, _null);
      A.expect(true, B.C__IsTrue, _null);
      A.expect(false, B.C__IsFalse, _null);
      A.expect(false, B.C__IsFalse, _null);
    },
    $signature: 1
  };
  A.execute___closure89.prototype = {
    call$0() {
      var t1, _null = null,
        jsService = A.SquadronService$("~/", true, 2);
      A.expect(jsService.baseUrl, "~/", _null);
      A.expect(false, B.C__IsFalse, _null);
      A.expect(jsService.pool, B.C__IsTrue, _null);
      t1 = jsService.targetPlatform;
      A.expect((t1 & 1) !== 0, B.C__IsFalse, _null);
      A.expect((t1 & 2) !== 0, B.C__IsTrue, _null);
      A.expect((t1 & 4) !== 0, B.C__IsFalse, _null);
    },
    $signature: 1
  };
  A.execute___closure90.prototype = {
    call$0() {
      var t1, _null = null,
        wasmService = A.SquadronService$("~/", true, 4);
      A.expect(wasmService.baseUrl, "~/", _null);
      A.expect(false, B.C__IsFalse, _null);
      A.expect(wasmService.pool, B.C__IsTrue, _null);
      t1 = wasmService.targetPlatform;
      A.expect((t1 & 1) !== 0, B.C__IsFalse, _null);
      A.expect((t1 & 2) !== 0, B.C__IsFalse, _null);
      A.expect((t1 & 4) !== 0, B.C__IsTrue, _null);
    },
    $signature: 1
  };
  A.execute___closure91.prototype = {
    call$0() {
      var _null = null;
      A.expect("~/", "~/", _null);
      A.expect(false, B.C__IsFalse, _null);
      A.expect(true, B.C__IsTrue, _null);
      A.expect(false, B.C__IsFalse, _null);
      A.expect(true, B.C__IsTrue, _null);
      A.expect(true, B.C__IsTrue, _null);
    },
    $signature: 1
  };
  A.execute___closure92.prototype = {
    call$0() {
      var t1, _null = null,
        wasmService = A.SquadronService$("~/", true, 7);
      A.expect(wasmService.baseUrl, "~/", _null);
      A.expect(false, B.C__IsFalse, _null);
      A.expect(wasmService.pool, B.C__IsTrue, _null);
      t1 = wasmService.targetPlatform;
      A.expect((t1 & 1) !== 0, B.C__IsTrue, _null);
      A.expect((t1 & 2) !== 0, B.C__IsTrue, _null);
      A.expect((t1 & 4) !== 0, B.C__IsTrue, _null);
    },
    $signature: 1
  };
  A.execute___closure93.prototype = {
    call$0() {
      var t1, _null = null,
        wasmService = A.SquadronService$("~/", false, 7);
      A.expect(wasmService.baseUrl, "~/", _null);
      A.expect(false, B.C__IsFalse, _null);
      A.expect(wasmService.pool, B.C__IsFalse, _null);
      t1 = wasmService.targetPlatform;
      A.expect((t1 & 1) !== 0, B.C__IsTrue, _null);
      A.expect((t1 & 2) !== 0, B.C__IsTrue, _null);
      A.expect((t1 & 4) !== 0, B.C__IsTrue, _null);
    },
    $signature: 1
  };
  A.execute__closure13.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Start & stop", new A.execute___closure82(t1));
      t1.test$2("- Start & terminate (sync)", new A.execute___closure83(t1));
      t1.test$2("- Start & terminate (async)", new A.execute___closure84(t1));
      t1.test$2("- Hook installation", new A.execute___closure85(t1));
      t1.test$2("- Service installation", new A.execute___closure86(t1));
      t1.test$2("- Cannot restart after stop", new A.execute___closure87(t1));
    },
    $signature: 1
  };
  A.execute___closure82.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure126(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure126.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure64(type$.TestWorker._as(w));
    },
    $call$body$execute____closure64(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1, stats, t2, t3, upTime, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              A.expect(w._channel != null, B.C__IsFalse, null);
              t1 = w.get$_stats();
              stats = t1.get$snapshot();
              A.expect(stats.upTime, B.Duration_0, null);
              A.expect(stats.idleTime, new A._OrderingMatcher(B.Duration_0, true, false, true, "a value greater than or equal to", true), null);
              A.expect(stats.activeConnections, B._OrderingMatcher_HCW, null);
              A.expect(stats.isStopped, B.C__IsFalse, null);
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.start$0(), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsNotNull, null);
              A.expect(w._channel != null, B.C__IsTrue, null);
              t2 = type$.dynamic;
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, t2), $async$call$1);
            case 3:
              // returning from await.
              stats = t1.get$snapshot();
              t3 = stats.upTime;
              A.expect(t3, new A._OrderingMatcher(B.Duration_80000, true, false, true, "a value greater than or equal to", true), null);
              A.expect(stats.activeConnections, B._OrderingMatcher_HCW, null);
              A.expect(stats.isStopped, B.C__IsFalse, null);
              A.expect(stats.idleTime, new A._OrderingMatcher(t3, true, true, false, "a value less than or equal to", true), null);
              w.stop$0();
              stats = t1.get$snapshot();
              A.expect(stats.isStopped, B.C__IsTrue, null);
              upTime = stats.upTime;
              A.expect(w._channel != null, B.C__IsFalse, null);
              A.expect(stats.activeConnections, B._OrderingMatcher_HCW, null);
              A.expect(upTime, new A._OrderingMatcher(B.Duration_0, false, false, true, "a value greater than", true), null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t2), $async$call$1);
            case 4:
              // returning from await.
              stats = t1.get$snapshot();
              A.expect(stats.upTime, upTime, null);
              A.expect(stats.idleTime, new A._OrderingMatcher(B.Duration_80000, true, false, true, "a value greater than or equal to", true), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure83.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure125(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure125.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure63(type$.TestWorker._as(w));
    },
    $call$body$execute____closure63(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], duration, t2, stats, t3, t4, exception, upTime, t1, $async$exception, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              A.expect(w._channel != null, B.C__IsFalse, null);
              t2 = w.get$_stats();
              stats = t1.stats = t2.get$snapshot();
              A.expect(stats.upTime, B.Duration_0, null);
              A.expect(stats.idleTime, new A._OrderingMatcher(B.Duration_0, true, false, true, "a value greater than or equal to", true), null);
              A.expect(stats.activeConnections, B._OrderingMatcher_HCW, null);
              A.expect(stats.isStopped, B.C__IsFalse, null);
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.start$0(), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsNotNull, null);
              A.expect(w._channel != null, B.C__IsTrue, null);
              t3 = type$.dynamic;
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, t3), $async$call$1);
            case 3:
              // returning from await.
              stats = t1.stats = t2.get$snapshot();
              t4 = stats.upTime;
              A.expect(t4, new A._OrderingMatcher(B.Duration_80000, true, false, true, "a value greater than or equal to", true), null);
              A.expect(stats.idleTime, new A._OrderingMatcher(t4, true, true, false, "a value less than or equal to", true), null);
              A.expect(stats.activeConnections, B._OrderingMatcher_HCW, null);
              A.expect(stats.isStopped, B.C__IsFalse, null);
              duration = new A.Duration(320000);
              A.Future_Future$delayed(new A.Duration(B.JSNumber_methods.round$0(duration._duration * 0.5)), new A.execute_____closure70(t1, w), type$.Null);
              $async$handler = 5;
              $async$goto = 8;
              return A._asyncAwait(w.send$2$args(12, [B.JSInt_methods._tdivFast$1(duration._duration, 1000)]), $async$call$1);
            case 8:
              // returning from await.
              t4 = A.unexpectedSuccess("cpu completed after termination", null);
              throw A.wrapException(t4);
              $async$handler = 1;
              // goto after finally
              $async$goto = 7;
              break;
            case 5:
              // catch
              $async$handler = 4;
              $async$exception = $async$errorStack.pop();
              if (!(A.unwrapException($async$exception) instanceof A.TaskTerminatedException))
                throw $async$exception;
              // goto after finally
              $async$goto = 7;
              break;
            case 4:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 7:
              // after finally
              stats = t2.get$snapshot();
              t1.stats = stats;
              upTime = stats.upTime;
              A.expect(upTime, new A._OrderingMatcher(B.Duration_0, false, false, true, "a value greater than", true), null);
              A.expect(t1.stats.activeConnections, B._OrderingMatcher_HCW, null);
              $async$goto = 9;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t3), $async$call$1);
            case 9:
              // returning from await.
              stats = t2.get$snapshot();
              t1.stats = stats;
              A.expect(stats.upTime, upTime, null);
              A.expect(t1.stats.idleTime, new A._OrderingMatcher(B.Duration_80000, true, false, true, "a value greater than or equal to", true), null);
              A.expect(t1.stats.activeConnections, B._OrderingMatcher_HCW, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute_____closure70.prototype = {
    call$0() {
      var stats, t2,
        t1 = this.w;
      t1.terminate$0();
      stats = t1.get$_stats().get$snapshot();
      t2 = this._box_0;
      t2.stats = stats;
      A.expect(stats.activeConnections, B._OrderingMatcher_HCW, null);
      A.expect(t2.stats.isStopped, B.C__IsTrue, null);
      A.expect(t1._channel != null, B.C__IsFalse, null);
    },
    $signature: 1
  };
  A.execute___closure84.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure124(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure124.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure62(type$.TestWorker._as(w));
    },
    $call$body$execute____closure62(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], duration, t2, stats, t3, t4, exception, savedUpTime, t1, $async$exception, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              A.expect(w._channel != null, B.C__IsFalse, null);
              t2 = w.get$_stats();
              stats = t1.stats = t2.get$snapshot();
              A.expect(stats.upTime, B.Duration_0, null);
              A.expect(stats.idleTime, new A._OrderingMatcher(B.Duration_0, true, false, true, "a value greater than or equal to", true), null);
              A.expect(stats.activeConnections, B._OrderingMatcher_HCW, null);
              A.expect(stats.isStopped, B.C__IsFalse, null);
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.start$0(), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsNotNull, null);
              A.expect(w._channel != null, B.C__IsTrue, null);
              t3 = type$.dynamic;
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, t3), $async$call$1);
            case 3:
              // returning from await.
              stats = t1.stats = t2.get$snapshot();
              t4 = stats.upTime;
              A.expect(t4, new A._OrderingMatcher(B.Duration_80000, true, false, true, "a value greater than or equal to", true), null);
              A.expect(stats.idleTime, new A._OrderingMatcher(t4, true, true, false, "a value less than or equal to", true), null);
              A.expect(stats.activeConnections, B._OrderingMatcher_HCW, null);
              A.expect(stats.isStopped, B.C__IsFalse, null);
              duration = new A.Duration(320000);
              A.Future_Future$delayed(new A.Duration(B.JSNumber_methods.round$0(duration._duration * 0.5)), new A.execute_____closure69(t1, w), type$.Null);
              $async$handler = 5;
              $async$goto = 8;
              return A._asyncAwait(w.send$2$args(11, [B.JSInt_methods._tdivFast$1(duration._duration, 1000)]), $async$call$1);
            case 8:
              // returning from await.
              t4 = A.unexpectedSuccess("io completed after termination", null);
              throw A.wrapException(t4);
              $async$handler = 1;
              // goto after finally
              $async$goto = 7;
              break;
            case 5:
              // catch
              $async$handler = 4;
              $async$exception = $async$errorStack.pop();
              if (!(A.unwrapException($async$exception) instanceof A.TaskTerminatedException))
                throw $async$exception;
              // goto after finally
              $async$goto = 7;
              break;
            case 4:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 7:
              // after finally
              stats = t2.get$snapshot();
              t1.stats = stats;
              savedUpTime = stats.upTime;
              A.expect(savedUpTime, new A._OrderingMatcher(B.Duration_0, false, false, true, "a value greater than", true), null);
              A.expect(t1.stats.activeConnections, B._OrderingMatcher_HCW, null);
              $async$goto = 9;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t3), $async$call$1);
            case 9:
              // returning from await.
              stats = t2.get$snapshot();
              t1.stats = stats;
              A.expect(stats.upTime, savedUpTime, null);
              A.expect(t1.stats.idleTime, new A._OrderingMatcher(B.Duration_80000, true, false, true, "a value greater than or equal to", true), null);
              A.expect(t1.stats.activeConnections, B._OrderingMatcher_HCW, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute_____closure69.prototype = {
    call$0() {
      var stats, t2,
        t1 = this.w;
      t1.terminate$0();
      stats = t1.get$_stats().get$snapshot();
      t2 = this._box_1;
      t2.stats = stats;
      A.expect(stats.activeConnections, B._OrderingMatcher_HCW, null);
      A.expect(t2.stats.isStopped, B.C__IsTrue, null);
      A.expect(t1._channel != null, B.C__IsFalse, null);
    },
    $signature: 1
  };
  A.execute___closure85.prototype = {
    call$0() {
      return this.$call$body$execute___closure0();
    },
    $call$body$execute___closure0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t1.status = null;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, new A.execute___closure_hook0(t1)), new A.execute____closure123(t1), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure_hook0.prototype = {
    call$1(pw) {
      this._box_2.status = "hook called";
    },
    $signature: 27
  };
  A.execute____closure123.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure61(type$.TestWorker._as(w));
    },
    $call$body$execute____closure61(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._box_2;
              A.expect(t1.status, B.C__IsNull, null);
              $async$goto = 2;
              return A._asyncAwait(w.start$0(), $async$call$1);
            case 2:
              // returning from await.
              A.expect(t1.status, A._MatchesRegExp$("hook called"), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure86.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.InstallableWorker$($async$self.tc), new A.execute____closure122(), type$.InstallableWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure122.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure60(type$.InstallableWorker._as(w));
    },
    $call$body$execute____closure60(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1, logger, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              logger = A.MemoryLogger$();
              logger._memory_logger$_filter._level = B.Level_0_all;
              w.channelLogger = logger;
              $async$goto = 2;
              return A._asyncAwait(w.start$0(), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(w.isInstalled$0(), $async$call$1);
            case 3:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              $async$temp1 = A;
              $async$goto = 4;
              return A._asyncAwait(w.isUninstalled$0(), $async$call$1);
            case 4:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsFalse, null);
              t1 = type$.dynamic;
              $async$goto = 5;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, t1), $async$call$1);
            case 5:
              // returning from await.
              A.expect(logger.get$logs(), new A._Contains(A._MatchesRegExp$("service installed")), null);
              A.expect(logger.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("intended failure")))), null);
              w.stop$0();
              $async$goto = 6;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, t1), $async$call$1);
            case 6:
              // returning from await.
              A.expect(logger.get$logs(), new A._Contains(A._MatchesRegExp$("service uninstalled")), null);
              A.expect(logger.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("intended failure")))), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 84
  };
  A.execute___closure87.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure121(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure121.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure59(type$.TestWorker._as(w));
    },
    $call$body$execute____closure59(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], res, ex, t1, t2, exception, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(w.start$0(), $async$call$1);
            case 2:
              // returning from await.
              t1 = w.get$_stats();
              A.expect(t1.get$snapshot().isStopped, B.C__IsFalse, null);
              t2 = type$.dynamic;
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t2), $async$call$1);
            case 3:
              // returning from await.
              w.stop$0();
              A.expect(t1.get$snapshot().isStopped, B.C__IsTrue, null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t2), $async$call$1);
            case 4:
              // returning from await.
              $async$handler = 6;
              $async$goto = 9;
              return A._asyncAwait(w.start$0(), $async$call$1);
            case 9:
              // returning from await.
              res = $async$result;
              t2 = A.unexpectedSuccess("start()", res);
              throw A.wrapException(t2);
              $async$handler = 1;
              // goto after finally
              $async$goto = 8;
              break;
            case 6:
              // catch
              $async$handler = 5;
              $async$exception = $async$errorStack.pop();
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.WorkerException) {
                ex = t2;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("worker is stopped"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 8;
              break;
            case 5:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 8:
              // after finally
              A.expect(t1.get$snapshot().activeConnections, B._OrderingMatcher_HCW, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute__closure14.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Platform type", new A.execute___closure72(t1));
      t1.test$2("- Sending maps with BigInts", new A.execute___closure73(t1));
      t1.test$2("- Sending sets with BigInts", new A.execute___closure74(t1));
      t1.test$2("- Sending TypedData - different instances", new A.execute___closure75(t1));
      t1.test$2("- Sending TypedData - same instances", new A.execute___closure76(t1));
      t1.test$2("- Sending TypedData - same buffer", new A.execute___closure77(t1));
      t1.test$2("- Identity - different instances", new A.execute___closure78(t1));
      t1.test$2("- Identity - same instances", new A.execute___closure79(t1));
      t1.test$2("- Sequential workloads", new A.execute___closure80(t1));
      t1.test$2("- Parallel workloads", new A.execute___closure81(t1));
    },
    $signature: 1
  };
  A.execute___closure72.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$(t1, null, null), new A.execute____closure120(t1), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure120.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure58(type$.TestWorker._as(w));
    },
    $call$body$execute____closure58(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              A.expect($.$get$Squadron_platformType(), $.$get$platform(), null);
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.getPlatformType$0(), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, $async$self.tc.workerPlatform, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure73.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure119(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure119.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure57(type$.TestWorker._as(w));
    },
    $call$body$execute____closure57(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1, t2, t3, t4, t5, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$_BigIntImpl_one();
              t2 = t1.toString$0(0);
              t3 = $.$get$_BigIntImpl_two();
              t4 = type$.String;
              t5 = type$.BigInt;
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.map$1(0, A.LinkedHashMap_LinkedHashMap$_literal([t2, t1, t3.toString$0(0), t3], t4, t5)), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, A.LinkedHashMap_LinkedHashMap$_literal([t1, t1.toString$0(0), t3, t3.toString$0(0)], t5, t4), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure74.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure118(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure118.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure56(type$.TestWorker._as(w));
    },
    $call$body$execute____closure56(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1, t2, t3, t4, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$_BigIntImpl_one();
              t2 = $.$get$_BigIntImpl_two();
              t3 = type$.BigInt;
              t4 = type$.Set_BigInt;
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.send$2$args(53, [t4._as(A.LinkedHashSet_LinkedHashSet$_literal([t1, t2], t3))]).then$1$1($.$get$Squadron__converter().$set$1$0(t3), t4), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, A.LinkedHashSet_LinkedHashSet$_literal([t2, t2.$mul(0, t2)], t3), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure75.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure117(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure117.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure55(type$.TestWorker._as(w));
    },
    $call$body$execute____closure55(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSArray_int;
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.checkBuffers$2(new Uint32Array(A._ensureNativeList(A._setArrayType([1, 2, 3], t1))), new Uint32Array(A._ensureNativeList(A._setArrayType([1, 2, 3], t1)))), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsFalse, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure76.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$(t1, null, null), new A.execute____closure116(t1), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure116.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure54(type$.TestWorker._as(w));
    },
    $call$body$execute____closure54(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, a, res, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              a = new Uint32Array(A._ensureNativeList(A._setArrayType([1, 2, 3], type$.JSArray_int)));
              $async$goto = 2;
              return A._asyncAwait(w.checkBuffers$2(a, a), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              t1 = $async$self.tc.workerPlatform;
              if (t1 === B.SquadronPlatformType_Rhi)
                A.expect(res, B.C__IsFalse, null);
              else if (t1 === B.SquadronPlatformType_JavaScript_js)
                A.expect(res, B.C__IsTrue, null);
              else if (t1 === B.SquadronPlatformType_Dqj)
                A.expect(res, B.C__IsFalse, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure77.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$(t1, null, null), new A.execute____closure115(t1), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure115.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure53(type$.TestWorker._as(w));
    },
    $call$body$execute____closure53(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, a, res, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              a = new Float32Array(8);
              $async$goto = 2;
              return A._asyncAwait(w.checkBuffers$2(a, J.asUint8List$0$x(B.NativeFloat32List_methods.get$buffer(a))), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              t1 = $async$self.tc.workerPlatform;
              if (t1 === B.SquadronPlatformType_Rhi)
                A.expect(res, B.C__IsFalse, null);
              else if (t1 === B.SquadronPlatformType_JavaScript_js)
                if ($.$get$platform() === B.SquadronPlatformType_JavaScript_js)
                  A.expect(res, B.C__IsTrue, null);
                else
                  A.expect(res, B.C__IsFalse, null);
              else if (t1 === B.SquadronPlatformType_Dqj)
                A.expect(res, B.C__IsFalse, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure78.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure114(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure114.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure52(type$.TestWorker._as(w));
    },
    $call$body$execute____closure52(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.checkFractions$2(A.Fraction_Fraction(1, 2), A.Fraction_Fraction(1, 2)), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsFalse, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure79.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure113(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure113.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure51(type$.TestWorker._as(w));
    },
    $call$body$execute____closure51(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        a, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              a = A.Fraction_Fraction(1, 2);
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.checkFractions$2(a, a), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure80.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure112(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure112.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure50(type$.TestWorker._as(w));
    },
    $call$body$execute____closure50(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        completedTasks, t2, stats, task, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t1.taskId = 0;
              completedTasks = A._setArrayType([], type$.JSArray_int);
              t1 = new A.execute____closure_createTask0(t1, w, completedTasks);
              t2 = w.get$_stats();
              stats = t2.get$snapshot();
              A.expect(stats.workload, B._OrderingMatcher_HCW, null);
              A.expect(stats.maxWorkload, B._OrderingMatcher_HCW, null);
              A.expect(stats.totalWorkload, B._OrderingMatcher_HCW, null);
              $async$goto = 2;
              return A._asyncAwait(t1.call$1(B.Duration_80000), $async$call$1);
            case 2:
              // returning from await.
              A.expect(completedTasks, new A._Contains(1), null);
              stats = t2.get$snapshot();
              A.expect(stats.workload, B._OrderingMatcher_HCW, null);
              A.expect(stats.maxWorkload, 1, null);
              A.expect(stats.totalWorkload, 1, null);
              task = t1.call$1(new A.Duration(240000));
              A.expect(completedTasks, new A._Contains(1), null);
              stats = t2.get$snapshot();
              A.expect(stats.workload, 1, null);
              A.expect(stats.maxWorkload, 1, null);
              A.expect(stats.totalWorkload, 1, null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, type$.dynamic), $async$call$1);
            case 3:
              // returning from await.
              A.expect(completedTasks, new A._Contains(1), null);
              stats = t2.get$snapshot();
              A.expect(stats.workload, 1, null);
              A.expect(stats.maxWorkload, 1, null);
              A.expect(stats.totalWorkload, 1, null);
              $async$goto = 4;
              return A._asyncAwait(task, $async$call$1);
            case 4:
              // returning from await.
              A.expect(completedTasks, A._ContainsAll$([1, 2]), null);
              stats = t2.get$snapshot();
              A.expect(stats.workload, B._OrderingMatcher_HCW, null);
              A.expect(stats.maxWorkload, 1, null);
              A.expect(stats.totalWorkload, 2, null);
              $async$goto = 5;
              return A._asyncAwait(t1.call$1(B.Duration_80000), $async$call$1);
            case 5:
              // returning from await.
              A.expect(completedTasks, A._ContainsAll$([1, 2, 3]), null);
              stats = t2.get$snapshot();
              A.expect(stats.workload, B._OrderingMatcher_HCW, null);
              A.expect(stats.maxWorkload, 1, null);
              A.expect(stats.totalWorkload, 3, null);
              w.stop$0();
              stats = t2.get$snapshot();
              A.expect(stats.workload, B._OrderingMatcher_HCW, null);
              A.expect(stats.maxWorkload, 1, null);
              A.expect(stats.totalWorkload, 3, null);
              A.expect(stats.upTime, new A._OrderingMatcher(new A.Duration(400000), true, false, true, "a value greater than or equal to", true), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute____closure_createTask0.prototype = {
    call$1(duration) {
      var t1 = ++this._box_3.taskId;
      return this.w.send$2$args(11, [B.JSInt_methods._tdivFast$1(duration._duration, 1000)]).whenComplete$1(new A.execute_____createTask_closure0(this.completedTasks, t1));
    },
    $signature: 138
  };
  A.execute_____createTask_closure0.prototype = {
    call$0() {
      return B.JSArray_methods.add$1(this.completedTasks, this.id);
    },
    $signature: 2
  };
  A.execute___closure81.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure111(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure111.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure49(type$.TestWorker._as(w));
    },
    $call$body$execute____closure49(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        completedTasks, t2, stats, tasks, t3, t4, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t1.taskId = 0;
              completedTasks = A._setArrayType([], type$.JSArray_int);
              t1 = new A.execute____closure_createTask(t1, w, completedTasks);
              $async$goto = 2;
              return A._asyncAwait(w.start$0(), $async$call$1);
            case 2:
              // returning from await.
              t2 = w.get$_stats();
              stats = t2.get$snapshot();
              A.expect(stats.workload, B._OrderingMatcher_HCW, null);
              A.expect(stats.maxWorkload, B._OrderingMatcher_HCW, null);
              A.expect(stats.totalWorkload, B._OrderingMatcher_HCW, null);
              tasks = A._setArrayType([t1.call$1(B.Duration_80000), t1.call$1(new A.Duration(400000)), t1.call$1(new A.Duration(240000))], type$.JSArray_Future_dynamic);
              A.expect(completedTasks, B.C__Empty, null);
              stats = t2.get$snapshot();
              A.expect(stats.workload, 3, null);
              A.expect(stats.maxWorkload, 3, null);
              A.expect(stats.totalWorkload, B._OrderingMatcher_HCW, null);
              t3 = type$.dynamic;
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(tasks, false, t3), $async$call$1);
            case 3:
              // returning from await.
              A.expect(completedTasks, A._ContainsAll$([1, 2, 3]), null);
              stats = t2.get$snapshot();
              A.expect(stats.workload, B._OrderingMatcher_HCW, null);
              A.expect(stats.maxWorkload, 3, null);
              A.expect(stats.totalWorkload, 3, null);
              t4 = stats.upTime;
              A.expect(t4, new A._OrderingMatcher(new A.Duration(400000), true, false, true, "a value greater than or equal to", true), null);
              A.expect(t4, new A._OrderingMatcher(new A.Duration(560000), true, true, false, "a value less than or equal to", true), null);
              B.JSArray_methods.clear$0(completedTasks);
              t1.call$1(new A.Duration(720000));
              t1.call$1(new A.Duration(400000));
              t1.call$1(new A.Duration(240000));
              A.expect(completedTasks, B.C__Empty, null);
              stats = t2.get$snapshot();
              A.expect(stats.workload, 3, null);
              A.expect(stats.maxWorkload, 3, null);
              A.expect(stats.totalWorkload, 3, null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t3), $async$call$1);
            case 4:
              // returning from await.
              A.expect(completedTasks, B.C__Empty, null);
              stats = t2.get$snapshot();
              A.expect(stats.workload, 3, null);
              A.expect(stats.maxWorkload, 3, null);
              A.expect(stats.totalWorkload, 3, null);
              $async$goto = 5;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(240000), null, t3), $async$call$1);
            case 5:
              // returning from await.
              A.expect(completedTasks, new A._Contains(6), null);
              stats = t2.get$snapshot();
              A.expect(stats.workload, 2, null);
              A.expect(stats.maxWorkload, 3, null);
              A.expect(stats.totalWorkload, 4, null);
              t1.call$1(new A.Duration(400000));
              t1.call$1(new A.Duration(240000));
              A.expect(completedTasks, new A._Contains(6), null);
              stats = t2.get$snapshot();
              A.expect(stats.workload, 4, null);
              A.expect(stats.maxWorkload, 4, null);
              A.expect(stats.totalWorkload, 4, null);
              $async$goto = 6;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(320000), null, t3), $async$call$1);
            case 6:
              // returning from await.
              A.expect(completedTasks, A._ContainsAll$([5, 6, 8]), null);
              stats = t2.get$snapshot();
              A.expect(stats.workload, 2, null);
              A.expect(stats.maxWorkload, 4, null);
              A.expect(stats.totalWorkload, 6, null);
              $async$goto = 7;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(240000), null, t3), $async$call$1);
            case 7:
              // returning from await.
              A.expect(completedTasks, A._ContainsAll$([4, 5, 6, 7, 8]), null);
              stats = t2.get$snapshot();
              A.expect(stats.workload, B._OrderingMatcher_HCW, null);
              A.expect(stats.maxWorkload, 4, null);
              A.expect(stats.totalWorkload, 8, null);
              w.stop$0();
              stats = t2.get$snapshot();
              A.expect(stats.workload, B._OrderingMatcher_HCW, null);
              A.expect(stats.maxWorkload, 4, null);
              A.expect(stats.totalWorkload, 8, null);
              t2 = stats.upTime;
              A.expect(t2, new A._OrderingMatcher(new A.Duration(1280000), true, false, true, "a value greater than or equal to", true), null);
              A.expect(t2, new A._OrderingMatcher(new A.Duration(1520000), false, true, false, "a value less than", true), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute____closure_createTask.prototype = {
    call$1(duration) {
      var t1 = ++this._box_4.taskId;
      return this.w.send$2$args(11, [B.JSInt_methods._tdivFast$1(duration._duration, 1000) + 50]).whenComplete$1(new A.execute_____createTask_closure(this.completedTasks, t1));
    },
    $signature: 138
  };
  A.execute_____createTask_closure.prototype = {
    call$0() {
      return B.JSArray_methods.add$1(this.completedTasks, this.id);
    },
    $signature: 2
  };
  A.execute_closure8.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- SQUADRON WORKER - ERRORS", new A.execute__closure9(t1));
    },
    $signature: 2
  };
  A.execute__closure9.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$3$skip("- Missing worker", new A.execute___closure56(t1), t1.entryPoints.missingWorker == null);
      t1.test$2("- Failed initialization", new A.execute___closure57(t1));
      t1.test$3$skip("- Missing start request", new A.execute___closure58(t1), true);
      t1.test$2("- Invalid command ID", new A.execute___closure59(t1));
      t1.test$2("- Failed hook installation", new A.execute___closure60(t1));
      t1.test$2("- Failed service installation", new A.execute___closure61(t1));
      t1.test$2("- Failed service uninstallation", new A.execute___closure62(t1));
      t1.test$2("- Dart Exception", new A.execute___closure63(t1));
      t1.test$2("- WorkerException", new A.execute___closure64(t1));
      t1.test$2("- TaskTimeOutException", new A.execute___closure65(t1));
      t1.test$2("- CanceledException", new A.execute___closure66(t1));
      t1.test$2("- TestException (unregistered)", new A.execute___closure67(t1));
      t1.test$2("- TestException (registered)", new A.execute___closure68(t1));
      t1.test$2("- Invalid request", new A.execute___closure69(t1));
      t1.test$2("- Invalid response", new A.execute___closure70(t1));
      t1.test$2("- Missing operation", new A.execute___closure71(t1));
    },
    $signature: 1
  };
  A.execute___closure56.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc.entryPoints.missingWorker;
              t1.toString;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(new A.MissingWorker(t1, null, null, false, new A.Object()), new A.execute____closure110(), type$.MissingWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure110.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure48(type$.MissingWorker._as(w));
    },
    $call$body$execute____closure48(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null);
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A._expect(w.start$0(), new A.Throws(A.wrapMatcher(new A.TypeMatcher(type$.TypeMatcher_SquadronError))), null, null, null, false), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 217
  };
  A.execute___closure57.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc.entryPoints.errors;
              t1.toString;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(new A.ErrorWorker([1], t1, null, null, false, new A.Object()), new A.execute____closure109(), type$.ErrorWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure109.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure47(type$.ErrorWorker._as(w));
    },
    $call$body$execute____closure47(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.TypeMatcher_WorkerException;
              $async$goto = 2;
              return A._asyncAwait(A._expect(w.start$0(), new A.Throws(A.wrapMatcher(new A.TypeMatcher(t1))), null, null, null, false), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(w.ping$0(), new A.Throws(A.wrapMatcher(new A.TypeMatcher(t1))), null, null, null, false), $async$call$1);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 25
  };
  A.execute___closure58.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null);
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              null.toString;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(new A.ErrorWorker([0], null, null, null, false, new A.Object()), new A.execute____closure108(), type$.ErrorWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure108.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure46(type$.ErrorWorker._as(w));
    },
    $call$body$execute____closure46(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.TypeMatcher_SquadronError;
              $async$goto = 2;
              return A._asyncAwait(A._expect(w.start$0(), new A.Throws(A.wrapMatcher(new A.TypeMatcher(t1))), null, null, null, false), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(w.ping$0(), new A.Throws(A.wrapMatcher(new A.TypeMatcher(t1))), null, null, null, false), $async$call$1);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 25
  };
  A.execute___closure59.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc.entryPoints.errors;
              t1.toString;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(new A.ErrorWorker([2], t1, null, null, false, new A.Object()), new A.execute____closure107(), type$.ErrorWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure107.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure45(type$.ErrorWorker._as(w));
    },
    $call$body$execute____closure45(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.TypeMatcher_SquadronError;
              $async$goto = 2;
              return A._asyncAwait(A._expect(w.start$0(), new A.Throws(A.wrapMatcher(new A.TypeMatcher(t1))), null, null, null, false), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(w.ping$0(), new A.Throws(A.wrapMatcher(new A.TypeMatcher(t1))), null, null, null, false), $async$call$1);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 25
  };
  A.execute___closure60.prototype = {
    call$0() {
      return this.$call$body$execute___closure();
    },
    $call$body$execute___closure() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t1.status = null;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, new A.execute___closure_hook(t1)), new A.execute____closure106(t1), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute___closure_hook.prototype = {
    call$1(pw) {
      this._box_0.status = "hook called";
      throw A.wrapException(A.TestException$("intended exception after setting status", null, null));
    },
    $signature: 27
  };
  A.execute____closure106.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure44(type$.TestWorker._as(w));
    },
    $call$body$execute____closure44(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$self = this, res, ex, t2, exception, t1, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._box_0;
              A.expect(t1.status, B.C__IsNull, null);
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(w.start$0(), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t2 = A.unexpectedSuccess("start", res);
              throw A.wrapException(t2);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.TestException) {
                ex = t2;
                A.expect(t1.status, A._MatchesRegExp$("hook called"), null);
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("intended exception"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure61.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc.entryPoints.installable;
              t1.toString;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(new A.InstallableWorker([true, false], t1, null, null, false, new A.Object()), new A.execute____closure105(), type$.InstallableWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure105.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure43(type$.InstallableWorker._as(w));
    },
    $call$body$execute____closure43(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], res, ex, t1, exception, logger, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              logger = A.MemoryLogger$();
              w.set$channelLogger(logger);
              $async$goto = 2;
              return A._asyncAwait(w.start$0(), $async$call$1);
            case 2:
              // returning from await.
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(w.isInstalled$0(), $async$call$1);
            case 7:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("isInstalled()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              $async$goto = t1 instanceof A.WorkerException ? 8 : 10;
              break;
            case 8:
              // then
              ex = t1;
              A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("this exception is reported"))), null);
              $async$goto = 11;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, type$.dynamic), $async$call$1);
            case 11:
              // returning from await.
              A.expect(logger.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("service installed")))), null);
              // goto join
              $async$goto = 9;
              break;
            case 10:
              // else
              throw $async$exception;
            case 9:
              // join
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 6:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 84
  };
  A.execute___closure62.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc.entryPoints.installable;
              t1.toString;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(new A.InstallableWorker([false, true], t1, null, null, false, new A.Object()), new A.execute____closure104(), type$.InstallableWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure104.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure42(type$.InstallableWorker._as(w));
    },
    $call$body$execute____closure42(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1, logger, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              logger = w.channelLogger = A.MemoryLogger$();
              $async$goto = 2;
              return A._asyncAwait(w.start$0(), $async$call$1);
            case 2:
              // returning from await.
              t1 = type$.dynamic;
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, t1), $async$call$1);
            case 3:
              // returning from await.
              A.expect(logger.get$logs(), new A._Contains(A._MatchesRegExp$("service installed")), null);
              A.expect(logger.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("intended failure")))), null);
              $async$temp1 = A;
              $async$goto = 4;
              return A._asyncAwait(w.isInstalled$0(), $async$call$1);
            case 4:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(w.isUninstalled$0(), $async$call$1);
            case 5:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsFalse, null);
              w.stop$0();
              $async$goto = 6;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, t1), $async$call$1);
            case 6:
              // returning from await.
              A.expect(logger.get$logs(), new A._Contains(A._MatchesRegExp$("intended failure")), null);
              A.expect(logger.get$logs(), new A._IsNot(A.wrapMatcher(new A._Contains(A._MatchesRegExp$("service uninstalled")))), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 84
  };
  A.execute___closure63.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.ErrorWorker$($async$self.tc, null), new A.execute____closure103(), type$.ErrorWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure103.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure41(type$.ErrorWorker._as(w));
    },
    $call$body$execute____closure41(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], res, ex, t3, exception, t4, t1, t2, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = w.get$_stats();
              t2 = t1.get$snapshot();
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(w.throwException$0(), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t3 = A.unexpectedSuccess("throwException()", res);
              throw A.wrapException(t3);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t3 = A.unwrapException($async$exception);
              if (t3 instanceof A.WorkerException) {
                ex = t3;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("intentional exception"))), null);
                t3 = ex._squadron_exception$_stackTrace;
                t4 = A._MatchesRegExp$("throwException");
                A.expect(t3, new A.Called("Stack trace that called", "stack trace", A.wrapMatcher(t4)), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              A.expect(t1.get$snapshot().totalErrors, t2.totalErrors + 1, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 25
  };
  A.execute___closure64.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.ErrorWorker$($async$self.tc, null), new A.execute____closure102(), type$.ErrorWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure102.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure40(type$.ErrorWorker._as(w));
    },
    $call$body$execute____closure40(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], res, ex, t3, exception, t4, t1, t2, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = w.get$_stats();
              t2 = t1.get$snapshot();
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(w.throwWorkerException$0(), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t3 = A.unexpectedSuccess("throwWorkerException()", res);
              throw A.wrapException(t3);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t3 = A.unwrapException($async$exception);
              if (t3 instanceof A.WorkerException) {
                ex = t3;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("intentional worker exception"))), null);
                t3 = ex._squadron_exception$_stackTrace;
                t4 = A._MatchesRegExp$("throwWorkerException");
                A.expect(t3, new A.Called("Stack trace that called", "stack trace", A.wrapMatcher(t4)), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              A.expect(t1.get$snapshot().totalErrors, t2.totalErrors + 1, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 25
  };
  A.execute___closure65.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.ErrorWorker$($async$self.tc, null), new A.execute____closure101(), type$.ErrorWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure101.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure39(type$.ErrorWorker._as(w));
    },
    $call$body$execute____closure39(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], res, ex, t3, exception, t1, t2, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = w.get$_stats();
              t2 = t1.get$snapshot();
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(w.throwTaskTimeOutException$0(), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t3 = A.unexpectedSuccess("throwTaskTimeOutException()", res);
              throw A.wrapException(t3);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t3 = A.unwrapException($async$exception);
              if (t3 instanceof A.SquadronTimeoutException) {
                ex = t3;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("intentional timeout exception"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              A.expect(t1.get$snapshot().totalErrors, t2.totalErrors + 1, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 25
  };
  A.execute___closure66.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.ErrorWorker$($async$self.tc, null), new A.execute____closure100(), type$.ErrorWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure100.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure38(type$.ErrorWorker._as(w));
    },
    $call$body$execute____closure38(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], res, ex, t3, exception, t1, t2, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = w.get$_stats();
              t2 = t1.get$snapshot();
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(w.throwCanceledException$0(), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t3 = A.unexpectedSuccess("throwCanceledException()", res);
              throw A.wrapException(t3);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t3 = A.unwrapException($async$exception);
              if (t3 instanceof A.SquadronCanceledException) {
                ex = t3;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("intentional canceled exception"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              A.expect(t1.get$snapshot().totalErrors, t2.totalErrors + 1, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 25
  };
  A.execute___closure67.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.ErrorWorker$($async$self.tc, null), new A.execute____closure99(), type$.ErrorWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure99.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure37(type$.ErrorWorker._as(w));
    },
    $call$body$execute____closure37(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], res, ex, t3, exception, t1, t2, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = w.get$_stats();
              t2 = t1.get$snapshot();
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(w.throwTestException$0(), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t3 = A.unexpectedSuccess("throwTestException()", res);
              throw A.wrapException(t3);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t3 = A.unwrapException($async$exception);
              if (t3 instanceof A.WorkerException) {
                ex = t3;
                A.expect(ex, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(type$.TypeMatcher_TestException))), null);
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Failed to deserialize"))), null);
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("#TEST"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              A.expect(t1.get$snapshot().totalErrors, t2.totalErrors + 1, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 25
  };
  A.execute___closure68.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.ErrorWorker$($async$self.tc, null), new A.execute____closure98(), type$.ErrorWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure98.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure36(type$.ErrorWorker._as(w));
    },
    $call$body$execute____closure36(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], errors, res, ex, t1, t2, exception, t3, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              w.get$exceptionManager().register$2("#TEST", A.test_exception_TestException_deserialize$closure());
              t1 = w.get$_stats();
              errors = t1.get$snapshot().totalErrors;
              $async$handler = 7;
              $async$goto = 10;
              return A._asyncAwait(w.throwTestException$0(), $async$call$1);
            case 10:
              // returning from await.
              res = $async$result;
              t2 = A.unexpectedSuccess("throwTestException()", res);
              throw A.wrapException(t2);
              $async$handler = 3;
              // goto after finally
              $async$goto = 9;
              break;
            case 7:
              // catch
              $async$handler = 6;
              $async$exception = $async$errorStack.pop();
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.TestException) {
                ex = t2;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("intentional TEST exception"))), null);
                t2 = ex._squadron_exception$_stackTrace;
                t3 = A._MatchesRegExp$("throwTestException");
                A.expect(t2, new A.Called("Stack trace that called", "stack trace", A.wrapMatcher(t3)), null);
                A.expect(ex._worker_exception$_command, 15, null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 9;
              break;
            case 6:
              // uncaught
              // goto uncaught
              $async$goto = 3;
              break;
            case 9:
              // after finally
              t1 = t1.get$snapshot();
              t2 = errors;
              if (typeof t2 !== "number") {
                $async$returnValue = t2.$add();
                $async$next = [1];
                // goto finally
                $async$goto = 4;
                break;
              }
              A.expect(t1.totalErrors, t2 + 1, null);
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              w.get$exceptionManager().unregister$1("#TEST");
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 25
  };
  A.execute___closure69.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.ErrorWorker$($async$self.tc, null), new A.execute____closure97(), type$.ErrorWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure97.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure35(type$.ErrorWorker._as(w));
    },
    $call$body$execute____closure35(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], res, ex, t1, exception, $async$exception, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.ping$1(A._setArrayType([1], type$.JSArray_int)), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(w.ping$1($.$get$unsendable()), $async$call$1);
            case 7:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("ping()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronError._is(t1)) {
                ex = t1;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Failed to post request"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 6:
              // after finally
              $async$temp1 = A;
              $async$goto = 8;
              return A._asyncAwait(w.ping$0(), $async$call$1);
            case 8:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 25
  };
  A.execute___closure70.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.ErrorWorker$($async$self.tc, null), new A.execute____closure96(), type$.ErrorWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure96.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure34(type$.ErrorWorker._as(w));
    },
    $call$body$execute____closure34(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], res, ex, t1, exception, $async$exception, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(w.send$1(22), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("invalidResponse()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronError._is(t1)) {
                ex = t1;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Failed to post response"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              $async$temp1 = A;
              $async$goto = 7;
              return A._asyncAwait(w.ping$0(), $async$call$1);
            case 7:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 25
  };
  A.execute___closure71.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.ErrorWorker$($async$self.tc, null), new A.execute____closure95(), type$.ErrorWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure95.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure33(type$.ErrorWorker._as(w));
    },
    $call$body$execute____closure33(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], ex, t1, exception, $async$exception, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(w.send$1(21), $async$call$1);
            case 6:
              // returning from await.
              t1 = A.unexpectedSuccess("missing()", null);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronError._is(t1)) {
                ex = t1;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Unknown command"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              $async$temp1 = A;
              $async$goto = 7;
              return A._asyncAwait(w.ping$0(), $async$call$1);
            case 7:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 25
  };
  A.execute_closure7.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- SQUADRON WORKER - STREAMING", new A.execute__closure8(t1));
    },
    $signature: 2
  };
  A.execute__closure8.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- With cancelOnError = false", new A.execute___closure49(t1));
      t1.test$2("- With cancelOnError = true", new A.execute___closure50(t1));
      t1.test$2('- With "await for"', new A.execute___closure51(t1));
      t1.test$2('- Throwing in "await for"', new A.execute___closure52(t1));
      t1.test$2("- Pause & resume", new A.execute___closure53(t1));
      t1.test$2("- Immediate cancelation", new A.execute___closure54(t1));
      t1.test$2("- Subscription cancelation", new A.execute___closure55(t1));
    },
    $signature: 1
  };
  A.execute___closure49.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure94(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure94.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure32(type$.TestWorker._as(w));
    },
    $call$body$execute____closure32(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        sub, t1, done, numbers, errors, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = new A._Future($.Zone__current, type$._Future_dynamic);
              done = new A._AsyncCompleter(t1, type$._AsyncCompleter_dynamic);
              numbers = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_SquadronException);
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.getPendingInfiniteWithErrors$0(), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_HCW, null);
              sub = A._Cell$named("sub");
              sub.set$finalLocalValue(w.infiniteWithErrors$0().listen$4$cancelOnError$onDone$onError(type$.void_Function_int._as(B.JSArray_methods.get$add(numbers)), false, type$.void_Function_$opt_dynamic._as(done.get$complete()), new A.execute_____closure68(errors, 3, sub, done)));
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(w.getPendingInfiniteWithErrors$0(), $async$call$1);
            case 3:
              // returning from await.
              $async$temp1.expect($async$result, 1, null);
              $async$goto = 4;
              return A._asyncAwait(t1, $async$call$1);
            case 4:
              // returning from await.
              A.expect(errors, new A._HasLength(A.wrapMatcher(3)), null);
              A.expect(numbers, new A._HasLength(A.wrapMatcher(new A._OrderingMatcher(3, false, false, true, "a value greater than", true))), null);
              A.expect(errors, new A._EveryElement(A.wrapMatcher(new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("error #\\d+"))))), null);
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(w.getPendingInfiniteWithErrors$0(), $async$call$1);
            case 5:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_HCW, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute_____closure68.prototype = {
    call$1(ex) {
      var _this = this,
        t1 = _this.errors;
      B.JSArray_methods.add$1(t1, type$.SquadronException._as(ex));
      if (t1.length >= _this.maxErrors)
        _this.sub._readLocal$0().cancel$0().then$1$1(type$.void_Function_$opt_dynamic._as(_this.done.get$complete()), type$.void);
    },
    $signature: 33
  };
  A.execute___closure50.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure93(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure93.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure31(type$.TestWorker._as(w));
    },
    $call$body$execute____closure31(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], completer, res, ex, t2, t3, t4, exception, t1, numbers, pending, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSArray_int;
              numbers = A._setArrayType([], t1);
              $async$goto = 2;
              return A._asyncAwait(w.getPendingInfiniteWithErrors$0(), $async$call$1);
            case 2:
              // returning from await.
              pending = $async$result;
              A.expect(pending, B._OrderingMatcher_HCW, null);
              $async$handler = 4;
              completer = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic);
              t2 = w.infiniteWithErrors$0();
              t3 = type$.void_Function_int._as(J.get$add$ax(numbers));
              t4 = completer.get$completeError();
              t2.listen$4$cancelOnError$onDone$onError(t3, true, type$.void_Function_$opt_dynamic._as(completer.get$complete()), t4);
              $async$goto = 7;
              return A._asyncAwait(w.getPendingInfiniteWithErrors$0(), $async$call$1);
            case 7:
              // returning from await.
              pending = $async$result;
              A.expect(pending, 1, null);
              $async$goto = 8;
              return A._asyncAwait(completer.future, $async$call$1);
            case 8:
              // returning from await.
              res = $async$result;
              t4 = A.unexpectedSuccess("infiniteWithErrors()", res);
              throw A.wrapException(t4);
              $async$handler = 1;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.WorkerException) {
                ex = t2;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("error #\\d+"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 6:
              // after finally
              A.expect(numbers, A._setArrayType([0, 1, 2], t1), null);
              $async$goto = 9;
              return A._asyncAwait(w.getPendingInfiniteWithErrors$0(), $async$call$1);
            case 9:
              // returning from await.
              pending = $async$result;
              A.expect(pending, B._OrderingMatcher_HCW, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure51.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure92(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure92.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure30(type$.TestWorker._as(w));
    },
    $call$body$execute____closure30(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$next = [], number, pending, ex, t2, t3, exception, t1, numbers, $async$exception, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSArray_int;
              numbers = A._setArrayType([], t1);
              $async$handler = 3;
              t2 = new A._StreamIterator(A.checkNotNullable(w.infiniteWithErrors$0(), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 6;
              t3 = type$.int;
            case 9:
              // for condition
              $async$goto = 11;
              return A._asyncAwait(t2.moveNext$0(), $async$call$1);
            case 11:
              // returning from await.
              if (!$async$result) {
                // goto after for
                $async$goto = 10;
                break;
              }
              number = t2.get$current();
              $async$goto = 12;
              return A._asyncAwait(w.send$1(35).then$1$1($.$get$Squadron__converter().value$1$0(t3), t3), $async$call$1);
            case 12:
              // returning from await.
              pending = $async$result;
              A._expect(pending, 1, null, null, null, false);
              J.add$1$ax(numbers, number);
              // goto for condition
              $async$goto = 9;
              break;
            case 10:
              // after for
              $async$next.push(8);
              // goto finally
              $async$goto = 7;
              break;
            case 6:
              // uncaught
              $async$next = [3];
            case 7:
              // finally
              $async$handler = 3;
              $async$goto = 13;
              return A._asyncAwait(t2.cancel$0(), $async$call$1);
            case 13:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 8:
              // after finally
              t2 = A.unexpectedSuccess("infiniteWithErrors()", null);
              throw A.wrapException(t2);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.WorkerException) {
                ex = t2;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("error #\\d+"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              A.expect(numbers, A._setArrayType([0, 1, 2], t1), null);
              $async$temp1 = A;
              $async$goto = 14;
              return A._asyncAwait(w.getPendingInfiniteWithErrors$0(), $async$call$1);
            case 14:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_HCW, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure52.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure91(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure91.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure29(type$.TestWorker._as(w));
    },
    $call$body$execute____closure29(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$next = [], number, pending, ex, t2, t3, exception, t1, numbers, $async$exception, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSArray_int;
              numbers = A._setArrayType([], t1);
              $async$handler = 3;
              t2 = new A._StreamIterator(A.checkNotNullable(w.infiniteWithErrors$0(), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 6;
              t3 = type$.int;
            case 9:
              // for condition
              $async$goto = 11;
              return A._asyncAwait(t2.moveNext$0(), $async$call$1);
            case 11:
              // returning from await.
              if (!$async$result) {
                // goto after for
                $async$goto = 10;
                break;
              }
              number = t2.get$current();
              $async$goto = 12;
              return A._asyncAwait(w.send$1(35).then$1$1($.$get$Squadron__converter().value$1$0(t3), t3), $async$call$1);
            case 12:
              // returning from await.
              pending = $async$result;
              A._expect(pending, 1, null, null, null, false);
              if (J.get$length$asx(numbers) === 0)
                J.add$1$ax(numbers, number);
              else {
                t3 = A.TestException$("client-side exception", null, null);
                throw A.wrapException(t3);
              }
              // goto for condition
              $async$goto = 9;
              break;
            case 10:
              // after for
              $async$next.push(8);
              // goto finally
              $async$goto = 7;
              break;
            case 6:
              // uncaught
              $async$next = [3];
            case 7:
              // finally
              $async$handler = 3;
              $async$goto = 13;
              return A._asyncAwait(t2.cancel$0(), $async$call$1);
            case 13:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 8:
              // after finally
              t2 = A.unexpectedSuccess("infiniteWithErrors()", null);
              throw A.wrapException(t2);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.TestException) {
                ex = t2;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("client-side exception"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              A.expect(numbers, A._setArrayType([0], t1), null);
              $async$temp1 = A;
              $async$goto = 14;
              return A._asyncAwait(w.getPendingInfiniteWithErrors$0(), $async$call$1);
            case 14:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_HCW, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure53.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure90(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure90.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure28(type$.TestWorker._as(w));
    },
    $call$body$execute____closure28(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        numbers, errors, sub, t2, t3, t4, t1, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.getPendingInfiniteWithErrors$0(), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_HCW, null);
              numbers = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_SquadronException);
              sub = w.infiniteWithErrors$0().listen$3$cancelOnError$onError(type$.void_Function_int._as(B.JSArray_methods.get$add(numbers)), false, type$.void_Function_SquadronException._as(B.JSArray_methods.get$add(errors)));
              t1.paused = t1.countErrors = t1.countNumbers = 0;
              t2 = new A.execute____closure_pause(t1, sub, numbers, errors);
              t3 = new A.execute____closure_resume(t1, numbers, errors, sub);
              t3.call$0();
              sub.pause$0();
              A.expect(numbers, B.C__Empty, null);
              A.expect(errors, B.C__Empty, null);
              t4 = type$.dynamic;
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t4), $async$call$1);
            case 3:
              // returning from await.
              A.expect(numbers, B.C__Empty, null);
              A.expect(errors, B.C__Empty, null);
              t3.call$0();
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t4), $async$call$1);
            case 4:
              // returning from await.
              t2.call$0();
              t2.call$0();
              $async$goto = 5;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t4), $async$call$1);
            case 5:
              // returning from await.
              t3.call$0();
              $async$goto = 6;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t4), $async$call$1);
            case 6:
              // returning from await.
              t3.call$0();
              $async$goto = 7;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t4), $async$call$1);
            case 7:
              // returning from await.
              $async$goto = 8;
              return A._asyncAwait(sub.cancel$0(), $async$call$1);
            case 8:
              // returning from await.
              A.expect(numbers, new A._HasLength(A.wrapMatcher(new A._OrderingMatcher(t1.countNumbers, false, false, true, "a value greater than", true))), null);
              A.expect(errors, new A._HasLength(A.wrapMatcher(new A._OrderingMatcher(t1.countErrors, false, false, true, "a value greater than", true))), null);
              A.expect(errors, new A._EveryElement(A.wrapMatcher(new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("error #\\d+"))))), null);
              $async$goto = 9;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t4), $async$call$1);
            case 9:
              // returning from await.
              $async$temp1 = A;
              $async$goto = 10;
              return A._asyncAwait(w.getPendingInfiniteWithErrors$0(), $async$call$1);
            case 10:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_HCW, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute____closure_pause.prototype = {
    call$0() {
      var t1, t2, t3, t4, t5, _this = this, _null = null,
        _s20_ = "a value greater than";
      _this.sub.pause$0();
      t1 = _this._box_0;
      t2 = t1.paused;
      t3 = _this.numbers;
      t4 = t1.countNumbers;
      t5 = _this.errors;
      if (t2 === 0) {
        A.expect(t3, new A._HasLength(A.wrapMatcher(new A._OrderingMatcher(t4, false, false, true, _s20_, true))), _null);
        A.expect(t5, new A._HasLength(A.wrapMatcher(new A._OrderingMatcher(t1.countErrors, false, false, true, _s20_, true))), _null);
        t1.countNumbers = t3.length;
        t1.countErrors = t5.length;
      } else {
        A.expect(t3, new A._HasLength(A.wrapMatcher(t4)), _null);
        A.expect(t5, new A._HasLength(A.wrapMatcher(t1.countErrors)), _null);
      }
      ++t1.paused;
    },
    $signature: 2
  };
  A.execute____closure_resume.prototype = {
    call$0() {
      var t2, _this = this,
        t1 = _this._box_0;
      A.expect(_this.numbers, new A._HasLength(A.wrapMatcher(t1.countNumbers)), null);
      A.expect(_this.errors, new A._HasLength(A.wrapMatcher(t1.countErrors)), null);
      _this.sub.resume$0();
      t2 = t1.paused;
      if (t2 > 0)
        t1.paused = t2 - 1;
    },
    $signature: 2
  };
  A.execute___closure54.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure89(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure89.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure27(type$.TestWorker._as(w));
    },
    $call$body$execute____closure27(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        numbers, errors, sub, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.getPendingInfiniteWithErrors$0(), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_HCW, null);
              numbers = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_SquadronException);
              sub = w.infiniteWithErrors$0().listen$3$cancelOnError$onError(type$.void_Function_int._as(B.JSArray_methods.get$add(numbers)), false, type$.void_Function_SquadronException._as(B.JSArray_methods.get$add(errors)));
              A.expect(numbers, B.C__Empty, null);
              A.expect(errors, B.C__Empty, null);
              $async$goto = 3;
              return A._asyncAwait(sub.cancel$0(), $async$call$1);
            case 3:
              // returning from await.
              A.expect(numbers, B.C__Empty, null);
              A.expect(errors, B.C__Empty, null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, type$.dynamic), $async$call$1);
            case 4:
              // returning from await.
              A.expect(numbers, B.C__Empty, null);
              A.expect(errors, B.C__Empty, null);
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(w.getPendingInfiniteWithErrors$0(), $async$call$1);
            case 5:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_HCW, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure55.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              A.Using_useAsync(A.StreamingServiceWorker$($async$self.tc), new A.execute____closure88(), type$.StreamingServiceWorker, type$.Null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure88.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure26(type$.StreamingServiceWorker._as(w));
    },
    $call$body$execute____closure26(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t3, t4, sub1, t5, sub2, nb1_1, nb2_1, nb1_2, nb2_2, nb1_3, nb2_3, t1, t2, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t2 = type$.int;
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.send$1(1).then$1$1($.$get$Squadron__converter().value$1$0(t2), t2), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, 0, null);
              t1.nb1 = 0;
              t3 = w.stream$1(2);
              t4 = t3.$ti;
              sub1 = new A._MapStream(t4._eval$1("int(Stream.T)")._as($.$get$Squadron__converter().value$1$0(t2)), t3, t4._eval$1("_MapStream<Stream.T,int>")).listen$1(new A.execute_____closure66(t1));
              t4 = type$.dynamic;
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t4), $async$call$1);
            case 3:
              // returning from await.
              $async$temp1 = A;
              $async$goto = 4;
              return A._asyncAwait(w.send$1(1).then$1$1($.$get$Squadron__converter().value$1$0(t2), t2), $async$call$1);
            case 4:
              // returning from await.
              $async$temp1.expect($async$result, 1, null);
              A.expect(t1.nb1, B._OrderingMatcher_kMx, null);
              t1.nb2 = 0;
              t3 = w.stream$1(2);
              t5 = t3.$ti;
              sub2 = new A._MapStream(t5._eval$1("int(Stream.T)")._as($.$get$Squadron__converter().value$1$0(t2)), t3, t5._eval$1("_MapStream<Stream.T,int>")).listen$1(new A.execute_____closure67(t1));
              $async$goto = 5;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t4), $async$call$1);
            case 5:
              // returning from await.
              $async$temp1 = A;
              $async$goto = 6;
              return A._asyncAwait(w.send$1(1).then$1$1($.$get$Squadron__converter().value$1$0(t2), t2), $async$call$1);
            case 6:
              // returning from await.
              $async$temp1.expect($async$result, 2, null);
              A.expect(t1.nb2, B._OrderingMatcher_kMx, null);
              $async$goto = 7;
              return A._asyncAwait(sub1.cancel$0(), $async$call$1);
            case 7:
              // returning from await.
              nb1_1 = t1.nb1;
              nb2_1 = t1.nb2;
              $async$goto = 8;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t4), $async$call$1);
            case 8:
              // returning from await.
              A.expect(t1.nb1, nb1_1, null);
              A.expect(t1.nb2, new A._OrderingMatcher(nb2_1, false, false, true, "a value greater than", true), null);
              $async$temp1 = A;
              $async$goto = 9;
              return A._asyncAwait(w.send$1(1).then$1$1($.$get$Squadron__converter().value$1$0(t2), t2), $async$call$1);
            case 9:
              // returning from await.
              $async$temp1.expect($async$result, 1, null);
              nb1_2 = t1.nb1;
              nb2_2 = t1.nb2;
              $async$goto = 10;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t4), $async$call$1);
            case 10:
              // returning from await.
              A.expect(t1.nb1, nb1_2, null);
              A.expect(nb2_2, new A._OrderingMatcher(nb2_1, false, false, true, "a value greater than", true), null);
              A.expect(t1.nb2, new A._OrderingMatcher(nb2_2, false, false, true, "a value greater than", true), null);
              $async$goto = 11;
              return A._asyncAwait(sub2.cancel$0(), $async$call$1);
            case 11:
              // returning from await.
              nb1_3 = t1.nb1;
              nb2_3 = t1.nb2;
              $async$goto = 12;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t4), $async$call$1);
            case 12:
              // returning from await.
              A.expect(t1.nb1, nb1_3, null);
              A.expect(nb2_3, new A._OrderingMatcher(nb2_2, false, false, true, "a value greater than", true), null);
              A.expect(t1.nb2, nb2_3, null);
              $async$temp1 = A;
              $async$goto = 13;
              return A._asyncAwait(w.send$1(1).then$1$1($.$get$Squadron__converter().value$1$0(t2), t2), $async$call$1);
            case 13:
              // returning from await.
              $async$temp1.expect($async$result, 0, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 219
  };
  A.execute_____closure66.prototype = {
    call$1(_) {
      A._asInt(_);
      return this._box_1.nb1++;
    },
    $signature: 73
  };
  A.execute_____closure67.prototype = {
    call$1(_) {
      A._asInt(_);
      return this._box_1.nb2++;
    },
    $signature: 73
  };
  A.execute_closure4.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- LOCAL WORKER", new A.execute__closure5(t1, new A.LocalServiceImpl(), A.RegExp_RegExp('Worker running as "(0x[0-9A-Fa-f]+)", LocalService running as "(0x[0-9A-Fa-f]+)"', true, false)));
    },
    $signature: 2
  };
  A.execute__closure5.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.localService;
      t1.group$2("- Identity", new A.execute___closure35(t1, t2, this.regExp));
      t1.group$2("- Error handling", new A.execute___closure36(t1, t2));
      t1.group$2("- Streaming", new A.execute___closure37(t1, t2));
    },
    $signature: 1
  };
  A.execute___closure35.prototype = {
    call$0() {
      var t3,
        t1 = this.tc,
        t2 = this.localService;
      t1.test$2("- Local Worker", new A.execute____closure58(t2));
      t3 = this.regExp;
      t1.test$2("- Squadron Worker", new A.execute____closure59(t2, t1, t3));
      t1.test$2("- Worker Pool", new A.execute____closure60(t2, t1, t3));
    },
    $signature: 1
  };
  A.execute____closure58.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, id;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              id = 'LocalService running as "' + $.$get$threadId() + '"';
              A.expect(id, id, null);
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure42(), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure42.prototype = {
    call$1(lw) {
      return this.$call$body$execute_____closure38(type$.LocalWorker_LocalServiceImpl._as(lw));
    },
    $call$body$execute_____closure38(lw) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = lw.___WebLocalWorker__channel_A;
              t1 === $ && A.throwLateFieldNI("_channel");
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(t1.sendRequest$2(1, []), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, 'LocalService running as "' + $.$get$threadId() + '"', null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 41
  };
  A.execute____closure59.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure41($async$self.tc, $async$self.regExp), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure41.prototype = {
    call$1(lw) {
      return this.$call$body$execute_____closure37(type$.LocalWorker_LocalServiceImpl._as(lw));
    },
    $call$body$execute_____closure37(lw) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalClientWorker$($async$self.tc, lw), new A.execute______closure46($async$self.regExp), type$.LocalClientWorker, type$.Null), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 41
  };
  A.execute______closure46.prototype = {
    call$1(w) {
      return this.$call$body$execute______closure4(type$.LocalClientWorker._as(w));
    },
    $call$body$execute______closure4(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, t3, t1, t2, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = $async$self.regExp;
              $async$goto = 3;
              return A._asyncAwait(w.checkIds$0(), $async$call$1);
            case 3:
              // returning from await.
              t1 = $async$temp1.firstMatch$1($async$result)._match;
              t2 = t1.length;
              if (1 >= t2) {
                $async$returnValue = A.ioore(t1, 1);
                // goto return
                $async$goto = 1;
                break;
              }
              t3 = t1[1];
              if (2 >= t2) {
                $async$returnValue = A.ioore(t1, 2);
                // goto return
                $async$goto = 1;
                break;
              }
              A.expect(t3, new A._IsNot(A.wrapMatcher(t1[2])), null);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 82
  };
  A.execute____closure60.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure40($async$self.tc, $async$self.regExp), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure40.prototype = {
    call$1(lw) {
      return this.$call$body$execute_____closure36(type$.LocalWorker_LocalServiceImpl._as(lw));
    },
    $call$body$execute_____closure36(lw) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalClientWorkerPool$($async$self.tc, lw, B.ConcurrencySettings_2_5_3), new A.execute______closure45($async$self.regExp), type$.LocalClientWorkerPool, type$.Null), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 41
  };
  A.execute______closure45.prototype = {
    call$1(p) {
      return this.$call$body$execute______closure3(type$.LocalClientWorkerPool._as(p));
    },
    $call$body$execute______closure3(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, t1, i, t2, t3, wid, t4, tasks, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              tasks = A._setArrayType([], type$.JSArray_Future_String);
              for (t1 = p.concurrencySettings, t1 = t1.maxWorkers * t1.maxParallel, i = 0; i < t1; ++i)
                B.JSArray_methods.add$1(tasks, p.checkIds$0());
              $async$temp1 = J;
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(tasks, false, type$.String), $async$call$1);
            case 3:
              // returning from await.
              t1 = $async$temp1.get$iterator$ax($async$result), t2 = $async$self.regExp;
            case 4:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 5;
                break;
              }
              t3 = t2.firstMatch$1(t1.get$current())._match;
              if (1 >= t3.length) {
                $async$returnValue = A.ioore(t3, 1);
                // goto return
                $async$goto = 1;
                break;
              }
              wid = t3[1];
              A._expect(wid, B.C__IsNotNull, null, null, null, false);
              t4 = $.$get$threadId();
              A._expect(wid, new A._IsNot(A.wrapMatcher(t4)), null, null, null, false);
              if (2 >= t3.length) {
                $async$returnValue = A.ioore(t3, 2);
                // goto return
                $async$goto = 1;
                break;
              }
              A._expect(t3[2], t4, null, null, null, false);
              // goto for condition
              $async$goto = 4;
              break;
            case 5:
              // after for
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 79
  };
  A.execute___closure36.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.localService;
      t1.test$2("- Local Worker", new A.execute____closure55(t2));
      t1.test$2("- Squadron Worker", new A.execute____closure56(t2, t1));
      t1.test$2("- Worker Pool", new A.execute____closure57(t2, t1));
    },
    $signature: 1
  };
  A.execute____closure55.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, res, ex, exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              try {
                res = $async$self.localService.throwException$0();
              } catch (exception) {
                ex = A.unwrapException(exception);
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Intentional exception"))), null);
              }
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure39(), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure39.prototype = {
    call$1(lw) {
      return this.$call$body$execute_____closure35(type$.LocalWorker_LocalServiceImpl._as(lw));
    },
    $call$body$execute_____closure35(lw) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], res, ex, t1, exception, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              t1 = lw.___WebLocalWorker__channel_A;
              t1 === $ && A.throwLateFieldNI("_channel");
              $async$goto = 6;
              return A._asyncAwait(t1.sendRequest$2(2, []), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t1 = A.unexpectedSuccess("throwException()", res);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.WorkerException) {
                ex = t1;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Intentional exception"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 41
  };
  A.execute____closure56.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure38($async$self.tc), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure38.prototype = {
    call$1(lw) {
      return this.$call$body$execute_____closure34(type$.LocalWorker_LocalServiceImpl._as(lw));
    },
    $call$body$execute_____closure34(lw) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalClientWorker$($async$self.tc, lw), new A.execute______closure44(), type$.LocalClientWorker, type$.Null), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 41
  };
  A.execute______closure44.prototype = {
    call$1(w) {
      return this.$call$body$execute______closure2(type$.LocalClientWorker._as(w));
    },
    $call$body$execute______closure2(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.checkException$0(), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 82
  };
  A.execute____closure57.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure37($async$self.tc), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure37.prototype = {
    call$1(lw) {
      return this.$call$body$execute_____closure33(type$.LocalWorker_LocalServiceImpl._as(lw));
    },
    $call$body$execute_____closure33(lw) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalClientWorkerPool$($async$self.tc, lw, B.ConcurrencySettings_2_5_3), new A.execute______closure43(), type$.LocalClientWorkerPool, type$.Null), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 41
  };
  A.execute______closure43.prototype = {
    call$1(p) {
      return this.$call$body$execute______closure1(type$.LocalClientWorkerPool._as(p));
    },
    $call$body$execute______closure1(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1, i, tasks, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              tasks = A._setArrayType([], type$.JSArray_Future_bool);
              for (t1 = p.concurrencySettings, t1 = t1.maxWorkers * t1.maxParallel, i = 0; i < t1; ++i)
                B.JSArray_methods.add$1(tasks, p.checkException$0());
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(tasks, false, type$.bool), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, new A._EveryElement(A.wrapMatcher(B.C__IsTrue)), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 79
  };
  A.execute___closure37.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.localService;
      t1.test$2("- Local Worker", new A.execute____closure52(t2));
      t1.test$2("- Squadron Worker", new A.execute____closure53(t2, t1));
      t1.test$2("- Worker Pool", new A.execute____closure54(t2, t1));
    },
    $signature: 1
  };
  A.execute____closure52.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, list;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.int;
              $async$goto = 2;
              return A._asyncAwait(A.Stream_Stream$fromIterable(A.Iterable_Iterable$generate(19, t1), t1).toList$0(0), $async$call$0);
            case 2:
              // returning from await.
              list = $async$result;
              A.expect(list, A.Iterable_Iterable$generate(19, type$.dynamic), null);
              $async$goto = 3;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure36(list), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure36.prototype = {
    call$1(lw) {
      return this.$call$body$execute_____closure32(type$.LocalWorker_LocalServiceImpl._as(lw));
    },
    $call$body$execute_____closure32(lw) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = lw.___WebLocalWorker__channel_A;
              t1 === $ && A.throwLateFieldNI("_channel");
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(t1.sendStreamingRequest$2(3, [19]).toList$0(0), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, $async$self.list, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 41
  };
  A.execute____closure53.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure35($async$self.tc), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure35.prototype = {
    call$1(lw) {
      return this.$call$body$execute_____closure31(type$.LocalWorker_LocalServiceImpl._as(lw));
    },
    $call$body$execute_____closure31(lw) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalClientWorker$($async$self.tc, lw), new A.execute______closure42(), type$.LocalClientWorker, type$.Null), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 41
  };
  A.execute______closure42.prototype = {
    call$1(w) {
      return this.$call$body$execute______closure0(type$.LocalClientWorker._as(w));
    },
    $call$body$execute______closure0(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        res;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(w.checkSequence$1(19).toList$0(0), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              A.expect(res, new A._HasLength(A.wrapMatcher(19)), null);
              A.expect(J.map$1$1$ax(res, new A.execute_______closure4(), type$.dynamic), new A._EveryElement(A.wrapMatcher(B.C__IsTrue)), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 82
  };
  A.execute_______closure4.prototype = {
    call$1(e) {
      return type$.Map_String_dynamic._as(e).$index(0, "ok");
    },
    $signature: 147
  };
  A.execute____closure54.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalWorker_LocalWorker$create($async$self.localService, type$.LocalServiceImpl), new A.execute_____closure34($async$self.tc), type$.LocalWorker_LocalServiceImpl, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure34.prototype = {
    call$1(lw) {
      return this.$call$body$execute_____closure30(type$.LocalWorker_LocalServiceImpl._as(lw));
    },
    $call$body$execute_____closure30(lw) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.LocalClientWorkerPool$($async$self.tc, lw, B.ConcurrencySettings_2_5_3), new A.execute______closure41(), type$.LocalClientWorkerPool, type$.Null), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 41
  };
  A.execute______closure41.prototype = {
    call$1(p) {
      return this.$call$body$execute______closure(type$.LocalClientWorkerPool._as(p));
    },
    $call$body$execute______closure(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1, i, results, t2, tasks;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              tasks = A._setArrayType([], type$.JSArray_Future_List_Map_String_dynamic);
              for (t1 = p.concurrencySettings, t1 = t1.maxWorkers * t1.maxParallel, i = 0; i < t1; ++i)
                B.JSArray_methods.add$1(tasks, p.checkSequence$1(i).toList$0(0));
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(tasks, false, type$.List_Map_String_dynamic), $async$call$1);
            case 2:
              // returning from await.
              results = $async$result;
              for (t1 = J.getInterceptor$asx(results), t2 = type$.dynamic, i = 0; i < t1.get$length(results); ++i) {
                A._expect(t1.$index(results, i), new A._HasLength(A.wrapMatcher(i)), null, null, null, false);
                A._expect(J.map$1$1$ax(t1.$index(results, i), new A.execute_______closure3(), t2), new A._EveryElement(A.wrapMatcher(B.C__IsTrue)), null, null, null, false);
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 79
  };
  A.execute_______closure3.prototype = {
    call$1(e) {
      return type$.Map_String_dynamic._as(e).$index(0, "ok");
    },
    $signature: 147
  };
  A.execute_closure5.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- SHARED CHANNEL", new A.execute__closure6(t1));
    },
    $signature: 2
  };
  A.execute__closure6.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Standalone cache worker", new A.execute___closure38(t1));
      t1.test$2("- Prime worker + cache worker", new A.execute___closure39(t1));
    },
    $signature: 1
  };
  A.execute___closure38.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.CacheWorker$($async$self.tc), new A.execute____closure62(), type$.CacheWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure62.prototype = {
    call$1(cache) {
      return this.$call$body$execute____closure19(type$.CacheWorker._as(cache));
    },
    $call$body$execute____closure19(cache) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(cache.send$4$args$inspectRequest$inspectResponse(1, [1], true, true), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsNull, null);
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(cache.containsKey$1(1), $async$call$1);
            case 3:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsFalse, null);
              $async$goto = 4;
              return A._asyncAwait(cache.send$4$args$inspectRequest$inspectResponse(3, [1, "in cache", null], true, true), $async$call$1);
            case 4:
              // returning from await.
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(cache.containsKey$1(1), $async$call$1);
            case 5:
              // returning from await.
              $async$temp1.expect($async$result, B.C__IsTrue, null);
              $async$temp1 = A;
              $async$goto = 6;
              return A._asyncAwait(cache.send$4$args$inspectRequest$inspectResponse(1, [1], true, true), $async$call$1);
            case 6:
              // returning from await.
              $async$temp1.expect($async$result, "in cache", null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 93
  };
  A.execute___closure39.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.CacheWorker$(t1), new A.execute____closure61(t1), type$.CacheWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure61.prototype = {
    call$1(cache) {
      return this.$call$body$execute____closure18(type$.CacheWorker._as(cache));
    },
    $call$body$execute____closure18(cache) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, cacheStats, t1, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              $async$goto = 2;
              return A._asyncAwait(cache.start$0(), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1 = t1;
              $async$goto = 3;
              return A._asyncAwait(cache.getCacheStats$0(), $async$call$1);
            case 3:
              // returning from await.
              cacheStats = $async$temp1.cacheStats = $async$result;
              A.expect(cacheStats.hit, B._OrderingMatcher_HCW, null);
              A.expect(cacheStats.miss, B._OrderingMatcher_HCW, null);
              A.expect(cacheStats.expired, B._OrderingMatcher_HCW, null);
              A.expect(cacheStats.size, B._OrderingMatcher_HCW, null);
              A.expect(cacheStats.maxSize, B._OrderingMatcher_HCW, null);
              $async$goto = 4;
              return A._asyncAwait(A.Using_useAsync(A.PrimeWorker$($async$self.tc, cache, null), new A.execute_____closure43(t1, cache), type$.PrimeWorker, type$.Null), $async$call$1);
            case 4:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 93
  };
  A.execute_____closure43.prototype = {
    call$1(w) {
      return this.$call$body$execute_____closure39(type$.PrimeWorker._as(w));
    },
    $call$body$execute_____closure39(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, t3, t4, t5, t6, elapsedWithEmptyCache, cacheStats, cacheSize, t7, t8, elapsedWithFullCache, sw, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              sw = new A.Stopwatch();
              $.$get$Stopwatch__frequency();
              sw.start$0();
              t1 = B.Set_qRjxp.get$iterator(B.Set_qRjxp), t2 = type$._Future_bool, t3 = type$.Future_bool, t4 = type$.bool;
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              t5 = w.send$2$args(1, [t1.get$current()]).then$1$1($.$get$Squadron__converter().value$1$0(t4), t4);
              if (!t3._is(t5)) {
                A._asBool(t5);
                t6 = new A._Future($.Zone__current, t2);
                t6._state = 8;
                t6._resultOrListeners = t5;
                t5 = t6;
              }
              $async$temp1 = A;
              $async$goto = 4;
              return A._asyncAwait(t5, $async$call$1);
            case 4:
              // returning from await.
              $async$temp1._expect($async$result, B.C__IsTrue, null, null, null, false);
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              elapsedWithEmptyCache = sw.get$elapsedMicroseconds();
              t1 = $async$self.cache;
              $async$goto = 5;
              return A._asyncAwait(t1.getCacheStats$0(), $async$call$1);
            case 5:
              // returning from await.
              cacheStats = $async$result;
              t5 = $async$self._box_0;
              t5.cacheStats = cacheStats;
              cacheSize = cacheStats.size;
              A.expect(cacheSize, B._OrderingMatcher_kMx, null);
              A.expect(t5.cacheStats.hit, B._OrderingMatcher_HCW, null);
              A.expect(t5.cacheStats.miss, cacheSize, null);
              A.expect(t5.cacheStats.expired, B._OrderingMatcher_HCW, null);
              A.expect(t5.cacheStats.maxSize, cacheSize, null);
              sw.reset$0();
              t6 = B.Set_qRjxp.get$iterator(B.Set_qRjxp);
            case 6:
              // for condition
              if (!t6.moveNext$0()) {
                // goto after for
                $async$goto = 7;
                break;
              }
              t7 = w.send$2$args(1, [t6.get$current()]).then$1$1($.$get$Squadron__converter().value$1$0(t4), t4);
              if (!t3._is(t7)) {
                A._asBool(t7);
                t8 = new A._Future($.Zone__current, t2);
                t8._state = 8;
                t8._resultOrListeners = t7;
                t7 = t8;
              }
              $async$temp1 = A;
              $async$goto = 8;
              return A._asyncAwait(t7, $async$call$1);
            case 8:
              // returning from await.
              $async$temp1._expect($async$result, B.C__IsTrue, null, null, null, false);
              // goto for condition
              $async$goto = 6;
              break;
            case 7:
              // after for
              elapsedWithFullCache = sw.get$elapsedMicroseconds();
              $async$goto = 9;
              return A._asyncAwait(t1.getCacheStats$0(), $async$call$1);
            case 9:
              // returning from await.
              cacheStats = $async$result;
              t5.cacheStats = cacheStats;
              A.expect(cacheStats.hit, cacheSize, null);
              A.expect(t5.cacheStats.miss, cacheSize, null);
              A.expect(t5.cacheStats.expired, B._OrderingMatcher_HCW, null);
              A.expect(t5.cacheStats.size, cacheSize, null);
              A.expect(t5.cacheStats.maxSize, cacheSize, null);
              A.expect(elapsedWithFullCache, new A._OrderingMatcher(elapsedWithEmptyCache / 2, false, true, false, "a value less than", true), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 226
  };
  A.execute_closure0.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- CANCELATION", new A.execute__closure0(t1));
    },
    $signature: 2
  };
  A.execute__closure0.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- ValueTask", new A.execute___closure2(t1));
      t1.group$2("- StreamTask", new A.execute___closure3(t1));
      t1.group$2("- CancelationToken", new A.execute___closure4(t1));
      t1.group$2("- TimeoutToken", new A.execute___closure5(t1));
      t1.group$2("- CompositeToken", new A.execute___closure6(t1));
    },
    $signature: 1
  };
  A.execute___closure2.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Immediate with pool.cancel()", new A.execute____closure24(t1));
      t1.test$2("- Immediate with pool.cancel(task)", new A.execute____closure25(t1));
      t1.test$2("- Immediate with task.cancel()", new A.execute____closure26(t1));
      t1.test$2("- With pool.cancel()", new A.execute____closure27(t1));
      t1.test$2("- With pool.cancel(task)", new A.execute____closure28(t1));
      t1.test$2("- With task.cancel()", new A.execute____closure29(t1));
    },
    $signature: 1
  };
  A.execute____closure24.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure29(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure29.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure29(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure29(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, t3, _box_0, t1, count, tasks, digits, i;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_0 = {};
              t1 = p.concurrencySettings;
              count = 2 * (t1.maxWorkers * t1.maxParallel) + 1;
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              digits = A._setArrayType([], type$.JSArray_int);
              i = _box_0.errors = 0;
              for (t1 = B.JSArray_methods.get$add(digits), t2 = type$.void_Function_int, t3 = type$.dynamic; i < count; ++i)
                B.JSArray_methods.add$1(tasks, p.delayed_80ms$1(i).then$1$2$onError(t2._as(t1), new A.execute______closure40(_box_0), t3));
              p.cancelAll$0();
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(tasks, false, t3), $async$call$1);
            case 2:
              // returning from await.
              A.expect(digits, B.C__Empty, null);
              A.expect(_box_0.errors, count, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute______closure40.prototype = {
    call$1(_) {
      return this._box_0.errors++;
    },
    $signature: 46
  };
  A.execute____closure25.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure28(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure28.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure28(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure28(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], value2, ex, t1, exception, task1, task2, $async$exception, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              task1 = p.delayedTask$1(3);
              task2 = p.delayedTask$1(3);
              p.cancel$2(task2, "Immediate cancelation");
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(task2._result.future, $async$call$1);
            case 6:
              // returning from await.
              value2 = $async$result;
              t1 = A.unexpectedSuccess("delayedTask()", value2);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (type$.CanceledException._is(t1)) {
                ex = t1;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Immediate cancelation"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              $async$temp1 = A;
              $async$goto = 7;
              return A._asyncAwait(task1._result.future, $async$call$1);
            case 7:
              // returning from await.
              $async$temp1.expect($async$result, 3, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure26.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure27(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure27.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure27(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure27(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], value2, ex, t2, exception, task1, task2, t1, $async$exception, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              task1 = p.delayedTask$1(3);
              task2 = p.delayedTask$1(3);
              t1 = task2;
              t1.super$WorkerTask$cancel("Immediate cancelation");
              t2 = t1._canceledException;
              t2.toString;
              t1._failure$1(t2);
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(task2._result.future, $async$call$1);
            case 6:
              // returning from await.
              value2 = $async$result;
              t1 = A.unexpectedSuccess("delayedTask()", value2);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (type$.CanceledException._is(t1)) {
                ex = t1;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Immediate cancelation"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              $async$temp1 = A;
              $async$goto = 7;
              return A._asyncAwait(task1._result.future, $async$call$1);
            case 7:
              // returning from await.
              $async$temp1.expect($async$result, 3, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure27.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure26(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure26.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure26(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure26(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, t3, _box_1, t1, count, tasks, digits, i;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_1 = {};
              t1 = p.concurrencySettings;
              count = 2 * (t1.maxWorkers * t1.maxParallel) + 1;
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              digits = A._setArrayType([], type$.JSArray_int);
              i = _box_1.errors = 0;
              for (t1 = B.JSArray_methods.get$add(digits), t2 = type$.void_Function_int, t3 = type$.dynamic; i < count; ++i)
                B.JSArray_methods.add$1(tasks, p.delayed_80ms$1(i).then$1$2$onError(t2._as(t1), new A.execute______closure39(_box_1), t3));
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t3), $async$call$1);
            case 2:
              // returning from await.
              p.cancelAll$0();
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(tasks, false, t3), $async$call$1);
            case 3:
              // returning from await.
              A.expect(_box_1.errors, B._OrderingMatcher_kMx, null);
              A.expect(digits, new A._HasLength(A.wrapMatcher(count - _box_1.errors)), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute______closure39.prototype = {
    call$1(e) {
      return this._box_1.errors++;
    },
    $signature: 46
  };
  A.execute____closure28.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure25(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure25.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure25(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure25(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, t3, task, firstTask, lastTask, _box_2, t1, count, tasks, futures, digits, i;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_2 = {};
              t1 = p.concurrencySettings;
              count = 3 * (t1.maxWorkers * t1.maxParallel) + 1;
              tasks = A._setArrayType([], type$.JSArray_ValueTask_dynamic);
              futures = A._setArrayType([], type$.JSArray_Future_dynamic);
              digits = A._setArrayType([], type$.JSArray_int);
              i = _box_2.errors = 0;
              for (t1 = B.JSArray_methods.get$add(digits), t2 = type$.void_Function_int, t3 = type$.dynamic; i < count; ++i) {
                task = p.delayedTask$1(i);
                B.JSArray_methods.add$1(tasks, task);
                B.JSArray_methods.add$1(futures, task._result.future.then$1$2$onError(t2._as(t1), new A.execute______closure34(_box_2), t3));
              }
              firstTask = B.JSArray_methods.get$first(tasks);
              p.cancel$1(firstTask);
              A.expect(firstTask._canceled != null, B.C__IsTrue, null);
              A.expect(firstTask.get$isRunning(), B.C__IsFalse, null);
              A.expect(firstTask.get$isFinished(), B.C__IsFalse, null);
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(120000), null, t3), $async$call$1);
            case 2:
              // returning from await.
              lastTask = B.JSArray_methods.get$last(tasks);
              p.cancel$1(lastTask);
              A.expect(lastTask._canceled != null, B.C__IsTrue, null);
              A.expect(lastTask.get$isRunning(), B.C__IsFalse, null);
              A.expect(lastTask.get$isFinished(), B.C__IsFalse, null);
              A.expect(lastTask.get$runningTime()._duration, B._OrderingMatcher_HCW, null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(futures, false, t3), $async$call$1);
            case 3:
              // returning from await.
              A.expect(_box_2.errors, 2, null);
              A.expect(digits, new A._HasLength(A.wrapMatcher(count - _box_2.errors)), null);
              t1 = type$.bool_Function_ValueTask_dynamic;
              t2 = type$.WhereIterable_ValueTask_dynamic;
              $async$goto = !new A.WhereIterable(tasks, t1._as(new A.execute______closure35()), t2).get$isEmpty(0) ? 4 : 5;
              break;
            case 4:
              // then
              $async$goto = 6;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_0, null, t3), $async$call$1);
            case 6:
              // returning from await.
            case 5:
              // join
              A.expect(new A.WhereIterable(tasks, t1._as(new A.execute______closure36()), t2), B.C__Empty, null);
              A.expect(new A.WhereIterable(tasks, t1._as(new A.execute______closure37()), t2), new A._HasLength(A.wrapMatcher(_box_2.errors)), null);
              A.expect(new A.WhereIterable(tasks, t1._as(new A.execute______closure38()), t2), new A._HasLength(A.wrapMatcher(count - _box_2.errors)), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute______closure34.prototype = {
    call$1(_) {
      return this._box_2.errors++;
    },
    $signature: 46
  };
  A.execute______closure35.prototype = {
    call$1(t) {
      return type$.ValueTask_dynamic._as(t).get$isRunning();
    },
    $signature: 45
  };
  A.execute______closure36.prototype = {
    call$1(t) {
      return type$.ValueTask_dynamic._as(t).get$isRunning();
    },
    $signature: 45
  };
  A.execute______closure37.prototype = {
    call$1(t) {
      return type$.ValueTask_dynamic._as(t)._canceled != null;
    },
    $signature: 45
  };
  A.execute______closure38.prototype = {
    call$1(t) {
      return type$.ValueTask_dynamic._as(t).get$isFinished();
    },
    $signature: 45
  };
  A.execute____closure29.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure24(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure24.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure24(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure24(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, t3, task, firstTask, lastTask, _box_3, t1, count, tasks, futures, digits, i;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_3 = {};
              t1 = p.concurrencySettings;
              count = 3 * (t1.maxWorkers * t1.maxParallel) + 1;
              tasks = A._setArrayType([], type$.JSArray_ValueTask_dynamic);
              futures = A._setArrayType([], type$.JSArray_Future_dynamic);
              digits = A._setArrayType([], type$.JSArray_int);
              i = _box_3.errors = 0;
              for (t1 = B.JSArray_methods.get$add(digits), t2 = type$.void_Function_int, t3 = type$.dynamic; i < count; ++i) {
                task = p.delayedTask$1(i);
                B.JSArray_methods.add$1(tasks, task);
                B.JSArray_methods.add$1(futures, task._result.future.then$1$2$onError(t2._as(t1), new A.execute______closure29(_box_3), t3));
              }
              firstTask = B.JSArray_methods.get$first(tasks);
              firstTask.super$WorkerTask$cancel(null);
              t1 = firstTask._canceledException;
              t1.toString;
              firstTask._failure$1(t1);
              A.expect(firstTask._canceled != null, B.C__IsTrue, null);
              A.expect(firstTask.get$isRunning(), B.C__IsFalse, null);
              A.expect(firstTask.get$isFinished(), B.C__IsFalse, null);
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(120000), null, t3), $async$call$1);
            case 2:
              // returning from await.
              lastTask = B.JSArray_methods.get$last(tasks);
              lastTask.super$WorkerTask$cancel(null);
              t1 = lastTask._canceledException;
              t1.toString;
              lastTask._failure$1(t1);
              A.expect(lastTask._canceled != null, B.C__IsTrue, null);
              A.expect(lastTask.get$isRunning(), B.C__IsFalse, null);
              A.expect(lastTask.get$isFinished(), B.C__IsFalse, null);
              A.expect(lastTask.get$runningTime()._duration, B._OrderingMatcher_HCW, null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(futures, false, t3), $async$call$1);
            case 3:
              // returning from await.
              A.expect(_box_3.errors, 2, null);
              A.expect(digits, new A._HasLength(A.wrapMatcher(count - _box_3.errors)), null);
              t1 = type$.bool_Function_ValueTask_dynamic;
              t2 = type$.WhereIterable_ValueTask_dynamic;
              $async$goto = !new A.WhereIterable(tasks, t1._as(new A.execute______closure30()), t2).get$isEmpty(0) ? 4 : 5;
              break;
            case 4:
              // then
              $async$goto = 6;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_0, null, t3), $async$call$1);
            case 6:
              // returning from await.
            case 5:
              // join
              A.expect(new A.WhereIterable(tasks, t1._as(new A.execute______closure31()), t2), B.C__Empty, null);
              A.expect(new A.WhereIterable(tasks, t1._as(new A.execute______closure32()), t2), new A._HasLength(A.wrapMatcher(_box_3.errors)), null);
              A.expect(new A.WhereIterable(tasks, t1._as(new A.execute______closure33()), t2), new A._HasLength(A.wrapMatcher(count - _box_3.errors)), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute______closure29.prototype = {
    call$1(_) {
      return this._box_3.errors++;
    },
    $signature: 46
  };
  A.execute______closure30.prototype = {
    call$1(t) {
      return type$.ValueTask_dynamic._as(t).get$isRunning();
    },
    $signature: 45
  };
  A.execute______closure31.prototype = {
    call$1(t) {
      return type$.ValueTask_dynamic._as(t).get$isRunning();
    },
    $signature: 45
  };
  A.execute______closure32.prototype = {
    call$1(t) {
      return type$.ValueTask_dynamic._as(t)._canceled != null;
    },
    $signature: 45
  };
  A.execute______closure33.prototype = {
    call$1(t) {
      return type$.ValueTask_dynamic._as(t).get$isFinished();
    },
    $signature: 45
  };
  A.execute___closure3.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Immediate with pool.cancel()", new A.execute____closure18(t1));
      t1.test$2("- Immediate with pool.cancel(task)", new A.execute____closure19(t1));
      t1.test$2("- Immediate with task.cancel()", new A.execute____closure20(t1));
      t1.test$2("- With pool.cancelAll()", new A.execute____closure21(t1));
      t1.test$2("- With pool.cancel(task)", new A.execute____closure22(t1));
      t1.test$2("- With task.cancel()", new A.execute____closure23(t1));
    },
    $signature: 1
  };
  A.execute____closure18.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure23(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure23.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure23(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure23(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, t3, t4, t5, t6, t7, t8, i, t9, t10, t11, t1, count, futures, digits, errors;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = p.concurrencySettings;
              count = 2 * (t1.maxWorkers * t1.maxParallel) + 1;
              futures = A._setArrayType([], type$.JSArray_Future_dynamic);
              digits = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_Exception);
              for (t1 = type$.nullable_void_Function, t2 = type$._Future_dynamic, t3 = type$._AsyncCompleter_dynamic, t4 = B.JSArray_methods.get$add(digits), t5 = type$.void_Function_int, t6 = B.JSArray_methods.get$add(errors), t7 = type$.void_Function_Exception, t8 = type$.void_Function_$opt_dynamic, i = 0; i < count; ++i) {
                t9 = new A._Future($.Zone__current, t2);
                B.JSArray_methods.add$1(futures, t9);
                t10 = p.finiteTask$1(100).__WorkerStreamTask__controller_F;
                t10 === $ && A.throwLateFieldNI("_controller");
                t10 = t10.__ForwardStreamController__controller_F;
                t10 === $ && A.throwLateFieldNI("_controller");
                t11 = A._instanceType(t10);
                t5._as(t4);
                t7._as(t6);
                t9 = t8._as(new A._AsyncCompleter(t9, t3).get$complete());
                t11._eval$1("_ControllerStream<1>")._eval$1("~(1)?")._as(t4);
                t1._as(t9);
                t10._subscribe$4(t11._eval$1("~(1)?")._as(t4), t6, t9, false);
              }
              p.cancelAll$1("Immediate cancelation");
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(futures, false, type$.dynamic), $async$call$1);
            case 2:
              // returning from await.
              A.expect(digits, B.C__Empty, null);
              A.expect(errors, new A._HasLength(A.wrapMatcher(count)), null);
              A.expect(errors, new A._EveryElement(A.wrapMatcher(new A.TypeMatcher(type$.TypeMatcher_CanceledException))), null);
              A.expect(errors, new A._EveryElement(A.wrapMatcher(new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Immediate cancelation"))))), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure19.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure22(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure22.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure22(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure22(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        digits, errors, task, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              digits = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_Exception);
              task = p.finiteTask$1(100);
              t1 = task.__WorkerStreamTask__controller_F;
              t1 === $ && A.throwLateFieldNI("_controller");
              t1 = t1.__ForwardStreamController__controller_F;
              t1 === $ && A.throwLateFieldNI("_controller");
              new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>")).listen$2$onError(type$.void_Function_int._as(B.JSArray_methods.get$add(digits)), type$.void_Function_Exception._as(B.JSArray_methods.get$add(errors)));
              p.cancel$2(task, "Immediate cancelation");
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, type$.dynamic), $async$call$1);
            case 2:
              // returning from await.
              A.expect(digits, B.C__Empty, null);
              A.expect(errors, new A._HasLength(A.wrapMatcher(1)), null);
              A.expect(B.JSArray_methods.get$first(errors), new A.TypeMatcher(type$.TypeMatcher_CanceledException), null);
              A.expect(B.JSArray_methods.get$first(errors), new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Immediate cancelation"))), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure20.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure21(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure21.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure21(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure21(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        digits, errors, task, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              digits = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_Exception);
              task = p.finiteTask$1(100);
              t1 = task.__WorkerStreamTask__controller_F;
              t1 === $ && A.throwLateFieldNI("_controller");
              t1 = t1.__ForwardStreamController__controller_F;
              t1 === $ && A.throwLateFieldNI("_controller");
              new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>")).listen$2$onError(type$.void_Function_int._as(B.JSArray_methods.get$add(digits)), type$.void_Function_Exception._as(B.JSArray_methods.get$add(errors)));
              task.cancel$1("Immediate cancelation");
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, type$.dynamic), $async$call$1);
            case 2:
              // returning from await.
              A.expect(digits, B.C__Empty, null);
              A.expect(errors, new A._HasLength(A.wrapMatcher(1)), null);
              A.expect(B.JSArray_methods.get$first(errors), new A.TypeMatcher(type$.TypeMatcher_CanceledException), null);
              A.expect(B.JSArray_methods.get$first(errors), new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Immediate cancelation"))), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure21.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure20(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure20.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure20(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure20(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, t3, t4, t5, i, t6, res, t7, t8, t9, fullExecutions, partialExecutions, fullCancelations, multipleErrors, t1, count, results, tasks;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = p.concurrencySettings;
              count = 2 * (t1.maxWorkers * t1.maxParallel) + 1;
              results = A._setArrayType([], type$.JSArray_List_dynamic);
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              for (t1 = type$.nullable_void_Function, t2 = type$._Future_dynamic, t3 = type$._AsyncCompleter_dynamic, t4 = type$.void_Function_dynamic, t5 = type$.void_Function_$opt_dynamic, i = 0; i < count; ++i) {
                t6 = new A._Future($.Zone__current, t2);
                res = [];
                B.JSArray_methods.add$1(results, res);
                B.JSArray_methods.add$1(tasks, t6);
                t7 = p.finite_20ms$1(2 * i + 1);
                t8 = t4._as(B.JSArray_methods.get$add(res));
                t6 = t5._as(new A._AsyncCompleter(t6, t3).get$complete());
                t9 = t7.$ti;
                t9._eval$1("~(1)?")._as(t8);
                t1._as(t6);
                t7._controller._subscribe$4(t9._eval$1("~(1)?")._as(t8), t8, t6, false);
              }
              t1 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, t1), $async$call$1);
            case 2:
              // returning from await.
              p.cancelAll$0();
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(tasks, false, t1), $async$call$1);
            case 3:
              // returning from await.
              t1 = type$.bool_Function_List_dynamic;
              t2 = type$.WhereIterable_List_dynamic;
              fullExecutions = new A.WhereIterable(results, t1._as(new A.execute______closure25()), t2).get$length(0);
              partialExecutions = new A.WhereIterable(results, t1._as(new A.execute______closure26()), t2).get$length(0);
              fullCancelations = new A.WhereIterable(results, t1._as(new A.execute______closure27()), t2).get$length(0);
              multipleErrors = new A.WhereIterable(results, t1._as(new A.execute______closure28()), t2).get$length(0);
              A.expect(fullExecutions, B._OrderingMatcher_kMx, null);
              A.expect(partialExecutions, B._OrderingMatcher_kMx, null);
              A.expect(fullCancelations, B._OrderingMatcher_kMx, null);
              A.expect(multipleErrors, B._OrderingMatcher_HCW, null);
              A.expect(fullExecutions + partialExecutions + fullCancelations, count, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute______closure25.prototype = {
    call$1(r) {
      return J.every$1$ax(type$.List_dynamic._as(r), new A.execute_______closure2());
    },
    $signature: 61
  };
  A.execute_______closure2.prototype = {
    call$1(e) {
      return A._isInt(e);
    },
    $signature: 17
  };
  A.execute______closure26.prototype = {
    call$1(r) {
      var t1;
      type$.List_dynamic._as(r);
      t1 = J.getInterceptor$ax(r);
      return t1.any$1(r, new A.execute_______closure0()) && t1.any$1(r, new A.execute_______closure1());
    },
    $signature: 61
  };
  A.execute_______closure0.prototype = {
    call$1(e) {
      return A._isInt(e);
    },
    $signature: 17
  };
  A.execute_______closure1.prototype = {
    call$1(e) {
      return type$.CanceledException._is(e);
    },
    $signature: 17
  };
  A.execute______closure27.prototype = {
    call$1(r) {
      return J.every$1$ax(type$.List_dynamic._as(r), new A.execute_______closure());
    },
    $signature: 61
  };
  A.execute_______closure.prototype = {
    call$1(e) {
      return type$.CanceledException._is(e);
    },
    $signature: 17
  };
  A.execute______closure28.prototype = {
    call$1(r) {
      return J.whereType$1$0$ax(type$.List_dynamic._as(r), type$.CanceledException).get$length(0) > 1;
    },
    $signature: 61
  };
  A.execute____closure22.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure19(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure19.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure19(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure19(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, t3, t4, i0, task, t5, t6, t7, _box_4, t1, count, tasks, started, $status, i;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_4 = {};
              t1 = p.concurrencySettings;
              count = 2 * (t1.maxWorkers * t1.maxParallel) + 1;
              tasks = A._setArrayType([], type$.JSArray_StreamTask_dynamic);
              started = A._setArrayType([], type$.JSArray_Future_dynamic);
              $status = A.List_List$filled(count, "not started", false, type$.String);
              i = _box_4.errors = 0;
              for (t1 = type$.nullable_void_Function, t2 = type$._Future_dynamic, t3 = type$._AsyncCompleter_dynamic; i < count; i = i0) {
                t4 = new A._Future($.Zone__current, t2);
                B.JSArray_methods.add$1(started, t4);
                i0 = i + 1;
                task = p.finiteTask$1(i0 * 2);
                B.JSArray_methods.add$1(tasks, task);
                t5 = task.__WorkerStreamTask__controller_F;
                t5 === $ && A.throwLateFieldNI("_controller");
                t5 = t5.__ForwardStreamController__controller_F;
                t5 === $ && A.throwLateFieldNI("_controller");
                t6 = A._instanceType(t5);
                t4 = t6._eval$1("_ControllerStream<1>")._eval$1("~(1)?")._as(new A.execute______closure12(new A._AsyncCompleter(t4, t3), $status, i));
                t7 = t1._as(new A.execute______closure13($status, i));
                t5._subscribe$4(t6._eval$1("~(1)?")._as(t4), new A.execute______closure14(_box_4, $status, i), t7, false);
              }
              t1 = A._arrayInstanceType($status);
              t2 = t1._eval$1("bool(1)");
              t1 = t1._eval$1("WhereIterable<1>");
              A.expect(new A.WhereIterable($status, t2._as(new A.execute______closure15()), t1), B.C__Empty, null);
              $async$goto = 2;
              return A._asyncAwait(B.JSArray_methods.get$first(started), $async$call$1);
            case 2:
              // returning from await.
              p.cancel$1(B.JSArray_methods.get$first(tasks));
              A.expect(B.JSArray_methods.get$first(tasks)._canceled != null, B.C__IsTrue, null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, type$.dynamic), $async$call$1);
            case 3:
              // returning from await.
              p.cancel$1(B.JSArray_methods.get$last(tasks));
              A.expect(B.JSArray_methods.get$last(tasks)._canceled != null, B.C__IsTrue, null);
              A.expect(new A.WhereIterable($status, t2._as(new A.execute______closure16()), t1), new A._HasLength(A.wrapMatcher(B._OrderingMatcher_kMx)), null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_wait(new A.MappedListIterable(tasks, type$.Future_void_Function_StreamTask_dynamic._as(new A.execute______closure17()), type$.MappedListIterable_of_StreamTask_dynamic_and_Future_void), false, type$.void), $async$call$1);
            case 4:
              // returning from await.
              t3 = type$.bool_Function_StreamTask_dynamic;
              t4 = type$.WhereIterable_StreamTask_dynamic;
              A.expect(new A.WhereIterable(tasks, t3._as(new A.execute______closure18()), t4), B.C__Empty, null);
              A.expect(new A.WhereIterable(tasks, t3._as(new A.execute______closure19()), t4), new A._HasLength(A.wrapMatcher(2)), null);
              t5 = count - 2;
              A.expect(new A.WhereIterable(tasks, t3._as(new A.execute______closure20()), t4), new A._HasLength(A.wrapMatcher(t5)), null);
              A.expect(_box_4.errors, 2, null);
              A.expect(new A.WhereIterable($status, t2._as(new A.execute______closure21()), t1), B.C__Empty, null);
              A.expect(new A.WhereIterable($status, t2._as(new A.execute______closure22()), t1), new A._HasLength(A.wrapMatcher(1)), null);
              A.expect(new A.WhereIterable($status, t2._as(new A.execute______closure23()), t1), new A._HasLength(A.wrapMatcher(1)), null);
              A.expect(new A.WhereIterable($status, t2._as(new A.execute______closure24()), t1), new A._HasLength(A.wrapMatcher(t5)), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute______closure12.prototype = {
    call$1($event) {
      var t1;
      A._asInt($event);
      t1 = this.start;
      if ((t1.future._state & 30) === 0) {
        t1.complete$0();
        B.JSArray_methods.$indexSet(this.status, this.i, "started");
      }
    },
    $signature: 73
  };
  A.execute______closure14.prototype = {
    call$1(e) {
      var t1 = this.status,
        t2 = this.i;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      B.JSArray_methods.$indexSet(t1, t2, t1[t2] === "started" ? "interrupted" : "canceled");
      ++this._box_4.errors;
    },
    $signature: 33
  };
  A.execute______closure13.prototype = {
    call$0() {
      var t1 = this.status,
        t2 = this.i;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      if (t1[t2] === "started")
        B.JSArray_methods.$indexSet(t1, t2, "completed");
    },
    $signature: 2
  };
  A.execute______closure15.prototype = {
    call$1(s) {
      return A._asString(s) === "started";
    },
    $signature: 8
  };
  A.execute______closure16.prototype = {
    call$1(s) {
      return A._asString(s) === "started";
    },
    $signature: 8
  };
  A.execute______closure17.prototype = {
    call$1(t) {
      return type$.StreamTask_dynamic._as(t)._done.future;
    },
    $signature: 137
  };
  A.execute______closure18.prototype = {
    call$1(t) {
      return type$.StreamTask_dynamic._as(t).get$isRunning();
    },
    $signature: 57
  };
  A.execute______closure19.prototype = {
    call$1(t) {
      return type$.StreamTask_dynamic._as(t)._canceled != null;
    },
    $signature: 57
  };
  A.execute______closure20.prototype = {
    call$1(t) {
      return type$.StreamTask_dynamic._as(t).get$isFinished();
    },
    $signature: 57
  };
  A.execute______closure21.prototype = {
    call$1(s) {
      return A._asString(s) === "started";
    },
    $signature: 8
  };
  A.execute______closure22.prototype = {
    call$1(s) {
      return A._asString(s) === "interrupted";
    },
    $signature: 8
  };
  A.execute______closure23.prototype = {
    call$1(s) {
      return A._asString(s) === "canceled";
    },
    $signature: 8
  };
  A.execute______closure24.prototype = {
    call$1(s) {
      return A._asString(s) === "completed";
    },
    $signature: 8
  };
  A.execute____closure23.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure18(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure18.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure18(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure18(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, t3, i0, task, t4, t5, t6, t7, _box_5, t1, count, tasks, started, $status, i;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_5 = {};
              t1 = p.concurrencySettings;
              count = 2 * (t1.maxWorkers * t1.maxParallel) + 1;
              tasks = A._setArrayType([], type$.JSArray_StreamTask_dynamic);
              started = A._setArrayType([], type$.JSArray_Future_dynamic);
              $status = A.List_List$filled(count, "not started", false, type$.String);
              i = _box_5.errors = 0;
              for (t1 = type$.nullable_void_Function, t2 = type$._Future_dynamic, t3 = type$._AsyncCompleter_dynamic; i < count; i = i0) {
                i0 = i + 1;
                task = p.finiteTask$1(i0 * 2);
                B.JSArray_methods.add$1(tasks, task);
                t4 = new A._Future($.Zone__current, t2);
                B.JSArray_methods.add$1(started, t4);
                t5 = task.__WorkerStreamTask__controller_F;
                t5 === $ && A.throwLateFieldNI("_controller");
                t5 = t5.__ForwardStreamController__controller_F;
                t5 === $ && A.throwLateFieldNI("_controller");
                t6 = A._instanceType(t5);
                t4 = t6._eval$1("_ControllerStream<1>")._eval$1("~(1)?")._as(new A.execute______closure(new A._AsyncCompleter(t4, t3), $status, i));
                t7 = t1._as(new A.execute______closure0($status, i));
                t5._subscribe$4(t6._eval$1("~(1)?")._as(t4), new A.execute______closure1(_box_5, $status, i), t7, false);
              }
              t1 = A._arrayInstanceType($status);
              t2 = t1._eval$1("bool(1)");
              t1 = t1._eval$1("WhereIterable<1>");
              A.expect(new A.WhereIterable($status, t2._as(new A.execute______closure2()), t1), B.C__Empty, null);
              $async$goto = 2;
              return A._asyncAwait(B.JSArray_methods.get$first(started), $async$call$1);
            case 2:
              // returning from await.
              B.JSArray_methods.get$first(tasks).cancel$0();
              A.expect(B.JSArray_methods.get$first(tasks)._canceled != null, B.C__IsTrue, null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, type$.dynamic), $async$call$1);
            case 3:
              // returning from await.
              B.JSArray_methods.get$last(tasks).cancel$0();
              A.expect(B.JSArray_methods.get$last(tasks)._canceled != null, B.C__IsTrue, null);
              A.expect(new A.WhereIterable($status, t2._as(new A.execute______closure3()), t1), new A._HasLength(A.wrapMatcher(B._OrderingMatcher_kMx)), null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_wait(new A.MappedListIterable(tasks, type$.Future_void_Function_StreamTask_dynamic._as(new A.execute______closure4()), type$.MappedListIterable_of_StreamTask_dynamic_and_Future_void), false, type$.void), $async$call$1);
            case 4:
              // returning from await.
              t3 = type$.bool_Function_StreamTask_dynamic;
              t4 = type$.WhereIterable_StreamTask_dynamic;
              A.expect(new A.WhereIterable(tasks, t3._as(new A.execute______closure5()), t4), B.C__Empty, null);
              A.expect(new A.WhereIterable(tasks, t3._as(new A.execute______closure6()), t4), new A._HasLength(A.wrapMatcher(2)), null);
              t5 = count - 2;
              A.expect(new A.WhereIterable(tasks, t3._as(new A.execute______closure7()), t4), new A._HasLength(A.wrapMatcher(t5)), null);
              A.expect(_box_5.errors, 2, null);
              A.expect(new A.WhereIterable($status, t2._as(new A.execute______closure8()), t1), B.C__Empty, null);
              A.expect(new A.WhereIterable($status, t2._as(new A.execute______closure9()), t1), new A._HasLength(A.wrapMatcher(1)), null);
              A.expect(new A.WhereIterable($status, t2._as(new A.execute______closure10()), t1), new A._HasLength(A.wrapMatcher(1)), null);
              A.expect(new A.WhereIterable($status, t2._as(new A.execute______closure11()), t1), new A._HasLength(A.wrapMatcher(t5)), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute______closure.prototype = {
    call$1($event) {
      var t1;
      A._asInt($event);
      t1 = this.start;
      if ((t1.future._state & 30) === 0) {
        t1.complete$0();
        B.JSArray_methods.$indexSet(this.status, this.i, "started");
      }
    },
    $signature: 73
  };
  A.execute______closure1.prototype = {
    call$1(e) {
      var t1 = this.status,
        t2 = this.i;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      B.JSArray_methods.$indexSet(t1, t2, t1[t2] === "started" ? "interrupted" : "canceled");
      ++this._box_5.errors;
    },
    $signature: 33
  };
  A.execute______closure0.prototype = {
    call$0() {
      var t1 = this.status,
        t2 = this.i;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      if (t1[t2] === "started")
        B.JSArray_methods.$indexSet(t1, t2, "completed");
    },
    $signature: 2
  };
  A.execute______closure2.prototype = {
    call$1(s) {
      return A._asString(s) === "started";
    },
    $signature: 8
  };
  A.execute______closure3.prototype = {
    call$1(s) {
      return A._asString(s) === "started";
    },
    $signature: 8
  };
  A.execute______closure4.prototype = {
    call$1(t) {
      return type$.StreamTask_dynamic._as(t)._done.future;
    },
    $signature: 137
  };
  A.execute______closure5.prototype = {
    call$1(t) {
      return type$.StreamTask_dynamic._as(t).get$isRunning();
    },
    $signature: 57
  };
  A.execute______closure6.prototype = {
    call$1(t) {
      return type$.StreamTask_dynamic._as(t)._canceled != null;
    },
    $signature: 57
  };
  A.execute______closure7.prototype = {
    call$1(t) {
      return type$.StreamTask_dynamic._as(t).get$isFinished();
    },
    $signature: 57
  };
  A.execute______closure8.prototype = {
    call$1(s) {
      return A._asString(s) === "started";
    },
    $signature: 8
  };
  A.execute______closure9.prototype = {
    call$1(s) {
      return A._asString(s) === "interrupted";
    },
    $signature: 8
  };
  A.execute______closure10.prototype = {
    call$1(s) {
      return A._asString(s) === "canceled";
    },
    $signature: 8
  };
  A.execute______closure11.prototype = {
    call$1(s) {
      return A._asString(s) === "completed";
    },
    $signature: 8
  };
  A.execute___closure4.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Finite() worker", new A.execute____closure14(t1));
      t1.test$2("- Infinite() worker", new A.execute____closure15(t1));
      t1.test$2("- Finite() pool", new A.execute____closure16(t1));
      t1.test$2("- Infinite() pool", new A.execute____closure17(t1));
    },
    $signature: 1
  };
  A.execute____closure14.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute_____closure17(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure17.prototype = {
    call$1(w) {
      return this.$call$body$execute_____closure17(type$.TestWorker._as(w));
    },
    $call$body$execute_____closure17(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        res, t1, cancelation;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              cancelation = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
              A.Timer_Timer(new A.Duration(300000), cancelation.get$cancel());
              A.expect(cancelation.get$exception() != null, B.C__IsFalse, null);
              $async$goto = 2;
              return A._asyncAwait(A._testFiniteCancelation(w, 15, cancelation), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              A.expect(cancelation.get$exception() != null, B.C__IsTrue, null);
              A.expect(res._1, new A.TypeMatcher(type$.TypeMatcher_CanceledException), null);
              t1 = res._0;
              A.expect(t1, B.C__NotEmpty, null);
              A.expect(t1, A.Iterable_Iterable$generate(J.get$length$asx(t1), type$.dynamic), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute____closure15.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute_____closure16(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure16.prototype = {
    call$1(w) {
      return this.$call$body$execute_____closure16(type$.TestWorker._as(w));
    },
    $call$body$execute_____closure16(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        res, t1, cancelation;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              cancelation = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
              A.Timer_Timer(new A.Duration(300000), cancelation.get$cancel());
              A.expect(cancelation.get$exception() != null, B.C__IsFalse, null);
              $async$goto = 2;
              return A._asyncAwait(A._testInfiniteCancelation(w, cancelation), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              A.expect(cancelation.get$exception() != null, B.C__IsTrue, null);
              A.expect(res._1, new A.TypeMatcher(type$.TypeMatcher_CanceledException), null);
              t1 = res._0;
              A.expect(t1, B.C__NotEmpty, null);
              A.expect(t1, A.Iterable_Iterable$generate(J.get$length$asx(t1), type$.dynamic), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute____closure16.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure15(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure15.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure15(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure15(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        count, token, res, t2, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = p.concurrencySettings;
              t1 = t1.maxWorkers * t1.maxParallel;
              count = 2 * t1 + 1;
              token = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
              A.Timer_Timer(new A.Duration(570000), token.get$cancel());
              $async$goto = 2;
              return A._asyncAwait(A._testFinitePoolCancelation(p, 15, count, token), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              A.expect(token.get$exception() != null, B.C__IsTrue, null);
              A.expect(p._worker_pool$_queue.get$length(0), B._OrderingMatcher_HCW, null);
              t2 = res._1;
              A.expect(t2, new A._OrderingMatcher(t1, true, true, false, "a value less than or equal to", true), null);
              A.expect(res._0, count - t2, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure17.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure14(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure14.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure14(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure14(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        res, t1, count, token;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = p.concurrencySettings;
              count = 2 * (t1.maxWorkers * t1.maxParallel) + 1;
              token = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
              A.Timer_Timer(new A.Duration(570000), token.get$cancel());
              $async$goto = 2;
              return A._asyncAwait(A._testInfinitePoolCancelation(p, count, token), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              A.expect(token.get$exception() != null, B.C__IsTrue, null);
              A.expect(p._worker_pool$_queue.get$length(0), B._OrderingMatcher_HCW, null);
              A.expect(res._1, 0, null);
              A.expect(res._0, count, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute___closure5.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Finite() worker", new A.execute____closure10(t1));
      t1.test$2("- Infinite() worker", new A.execute____closure11(t1));
      t1.test$2("- Finite() pool", new A.execute____closure12(t1));
      t1.test$2("- Infinite() pool", new A.execute____closure13(t1));
    },
    $signature: 1
  };
  A.execute____closure10.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute_____closure13(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure13.prototype = {
    call$1(w) {
      return this.$call$body$execute_____closure13(type$.TestWorker._as(w));
    },
    $call$body$execute_____closure13(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        res, t1, timeout;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              timeout = A.TimeoutToken$(new A.Duration(300000));
              A.expect(timeout.get$exception() != null, B.C__IsFalse, null);
              $async$goto = 2;
              return A._asyncAwait(A._testFiniteCancelation(w, 15, timeout), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              A.expect(timeout.get$exception() != null, B.C__IsTrue, null);
              A.expect(res._1, new A.TypeMatcher(type$.TypeMatcher_TimeoutException), null);
              t1 = res._0;
              A.expect(t1, B.C__NotEmpty, null);
              A.expect(t1, A.Iterable_Iterable$generate(J.get$length$asx(t1), type$.dynamic), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute____closure11.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute_____closure12(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure12.prototype = {
    call$1(w) {
      return this.$call$body$execute_____closure12(type$.TestWorker._as(w));
    },
    $call$body$execute_____closure12(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        res, t1, timeout;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              timeout = A.TimeoutToken$(new A.Duration(300000));
              A.expect(timeout.get$exception() != null, B.C__IsFalse, null);
              $async$goto = 2;
              return A._asyncAwait(A._testInfiniteCancelation(w, timeout), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              A.expect(timeout.get$exception() != null, B.C__IsTrue, null);
              A.expect(res._1, new A.TypeMatcher(type$.TypeMatcher_TimeoutException), null);
              t1 = res._0;
              A.expect(t1, B.C__NotEmpty, null);
              A.expect(t1, A.Iterable_Iterable$generate(J.get$length$asx(t1), type$.dynamic), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute____closure12.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure11(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure11.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure11(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure11(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        count, timeout, res, t2, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = p.concurrencySettings;
              t1 = t1.maxWorkers * t1.maxParallel;
              count = 2 * t1 + 1;
              timeout = A.TimeoutToken$(new A.Duration(570000));
              $async$goto = 2;
              return A._asyncAwait(A._testFinitePoolCancelation(p, 15, count, timeout), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              A.expect(timeout.get$exception() != null, B.C__IsTrue, null);
              A.expect(p._worker_pool$_queue.get$length(0), B._OrderingMatcher_HCW, null);
              t2 = res._1;
              A.expect(t2, new A._OrderingMatcher(t1, true, true, false, "a value less than or equal to", true), null);
              A.expect(res._0, count - t2, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure13.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure10(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure10.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure10(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure10(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1, count, timeout, res;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = p.concurrencySettings;
              count = 2 * (t1.maxWorkers * t1.maxParallel) + 1;
              timeout = A.TimeoutToken$(new A.Duration(570000));
              $async$goto = 2;
              return A._asyncAwait(A._testInfinitePoolCancelation(p, count, timeout), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              A.expect(timeout.get$exception() != null, B.C__IsTrue, null);
              A.expect(p._worker_pool$_queue.get$length(0), B._OrderingMatcher_HCW, null);
              A.expect(res._1, 0, null);
              A.expect(res._0, count, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute___closure6.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Finite() worker", new A.execute____closure6(t1));
      t1.test$2("- Infinite() worker", new A.execute____closure7(t1));
      t1.test$2("- Finite() pool", new A.execute____closure8(t1));
      t1.test$2("- Infinite() pool", new A.execute____closure9(t1));
    },
    $signature: 1
  };
  A.execute____closure6.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute_____closure9(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure9.prototype = {
    call$1(w) {
      return this.$call$body$execute_____closure9(type$.TestWorker._as(w));
    },
    $call$body$execute_____closure9(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t3, composite1, res, t4, timeout2, cancelation2, composite2, timeout3, cancelation3, composite3, timeout1, t1, t2, cancelation1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              timeout1 = A.TimeoutToken$(new A.Duration(570000));
              t1 = type$._Future_CanceledException;
              t2 = type$._AsyncCompleter_CanceledException;
              cancelation1 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2));
              A.Timer_Timer(new A.Duration(B.JSNumber_methods.round$0(timeout1.timeout._duration * 0.25)), cancelation1.get$cancel());
              t3 = type$.JSArray_CancelationToken;
              composite1 = A.CompositeToken$any(A._setArrayType([timeout1, cancelation1], t3));
              composite1._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite1), B.C__IsFalse, null);
              $async$goto = 2;
              return A._asyncAwait(A._testFiniteCancelation(w, 15, composite1), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              composite1._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite1), B.C__IsTrue, null);
              A.expect(timeout1.get$exception() != null, B.C__IsFalse, null);
              A.expect(cancelation1.get$exception() != null, B.C__IsTrue, null);
              A.expect(res._1, new A.TypeMatcher(type$.TypeMatcher_CanceledException), null);
              timeout1 = res._0;
              A.expect(timeout1, B.C__NotEmpty, null);
              t4 = type$.dynamic;
              A.expect(timeout1, A.Iterable_Iterable$generate(J.get$length$asx(timeout1), t4), null);
              timeout2 = A.TimeoutToken$(new A.Duration(570000));
              cancelation2 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2));
              A.Timer_Timer(new A.Duration(B.JSInt_methods.round$0(timeout2.timeout._duration * 2)), cancelation2.get$cancel());
              composite2 = A.CompositeToken$any(A._setArrayType([timeout2, cancelation2], t3));
              composite2._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite2), B.C__IsFalse, null);
              $async$goto = 3;
              return A._asyncAwait(A._testFiniteCancelation(w, 15, composite2), $async$call$1);
            case 3:
              // returning from await.
              res = $async$result;
              composite2._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite2), B.C__IsTrue, null);
              A.expect(timeout2.get$exception() != null, B.C__IsTrue, null);
              A.expect(cancelation2.get$exception() != null, B.C__IsFalse, null);
              A.expect(res._1, new A.TypeMatcher(type$.TypeMatcher_TimeoutException), null);
              timeout2 = res._0;
              A.expect(timeout2, B.C__NotEmpty, null);
              A.expect(timeout2, A.Iterable_Iterable$generate(J.get$length$asx(timeout2), t4), null);
              timeout3 = A.TimeoutToken$(new A.Duration(570000));
              cancelation3 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2));
              A.Timer_Timer(new A.Duration(B.JSNumber_methods.round$0(timeout3.timeout._duration * 0.25)), cancelation3.get$cancel());
              composite3 = A.CompositeToken$all(A._setArrayType([timeout3, cancelation3], t3));
              composite3._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite3), B.C__IsFalse, null);
              $async$goto = 4;
              return A._asyncAwait(A._testFiniteCancelation(w, 15, composite3), $async$call$1);
            case 4:
              // returning from await.
              res = $async$result;
              composite3._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite3), B.C__IsTrue, null);
              A.expect(timeout3.get$exception() != null, B.C__IsTrue, null);
              A.expect(cancelation3.get$exception() != null, B.C__IsTrue, null);
              A.expect(res._1, new A.TypeMatcher(type$.TypeMatcher_CanceledExceptions), null);
              timeout3 = res._0;
              A.expect(timeout3, B.C__NotEmpty, null);
              A.expect(timeout3, A.Iterable_Iterable$generate(J.get$length$asx(timeout3), t4), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute____closure7.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute_____closure8(), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure8.prototype = {
    call$1(w) {
      return this.$call$body$execute_____closure8(type$.TestWorker._as(w));
    },
    $call$body$execute_____closure8(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t3, composite1, res, t4, timeout2, cancelation2, composite2, timeout3, cancelation3, composite3, timeout1, t1, t2, cancelation1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              timeout1 = A.TimeoutToken$(new A.Duration(570000));
              t1 = type$._Future_CanceledException;
              t2 = type$._AsyncCompleter_CanceledException;
              cancelation1 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2));
              A.Timer_Timer(new A.Duration(B.JSNumber_methods.round$0(timeout1.timeout._duration * 0.25)), cancelation1.get$cancel());
              t3 = type$.JSArray_CancelationToken;
              composite1 = A.CompositeToken$any(A._setArrayType([timeout1, cancelation1], t3));
              composite1._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite1), B.C__IsFalse, null);
              $async$goto = 2;
              return A._asyncAwait(A._testInfiniteCancelation(w, composite1), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              composite1._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite1), B.C__IsTrue, null);
              A.expect(timeout1.get$exception() != null, B.C__IsFalse, null);
              A.expect(cancelation1.get$exception() != null, B.C__IsTrue, null);
              A.expect(res._1, new A.TypeMatcher(type$.TypeMatcher_CanceledException), null);
              timeout1 = res._0;
              A.expect(timeout1, B.C__NotEmpty, null);
              t4 = type$.dynamic;
              A.expect(timeout1, A.Iterable_Iterable$generate(J.get$length$asx(timeout1), t4), null);
              timeout2 = A.TimeoutToken$(new A.Duration(570000));
              cancelation2 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2));
              A.Timer_Timer(new A.Duration(B.JSInt_methods.round$0(timeout2.timeout._duration * 2)), cancelation2.get$cancel());
              composite2 = A.CompositeToken$any(A._setArrayType([timeout2, cancelation2], t3));
              composite2._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite2), B.C__IsFalse, null);
              $async$goto = 3;
              return A._asyncAwait(A._testInfiniteCancelation(w, composite2), $async$call$1);
            case 3:
              // returning from await.
              res = $async$result;
              composite2._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite2), B.C__IsTrue, null);
              A.expect(timeout2.get$exception() != null, B.C__IsTrue, null);
              A.expect(cancelation2.get$exception() != null, B.C__IsFalse, null);
              A.expect(res._1, new A.TypeMatcher(type$.TypeMatcher_TimeoutException), null);
              timeout2 = res._0;
              A.expect(timeout2, B.C__NotEmpty, null);
              A.expect(timeout2, A.Iterable_Iterable$generate(J.get$length$asx(timeout2), t4), null);
              timeout3 = A.TimeoutToken$(new A.Duration(570000));
              cancelation3 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2));
              A.Timer_Timer(new A.Duration(B.JSNumber_methods.round$0(timeout3.timeout._duration * 0.25)), cancelation3.get$cancel());
              composite3 = A.CompositeToken$all(A._setArrayType([timeout3, cancelation3], t3));
              composite3._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite3), B.C__IsFalse, null);
              $async$goto = 4;
              return A._asyncAwait(A._testInfiniteCancelation(w, composite3), $async$call$1);
            case 4:
              // returning from await.
              res = $async$result;
              composite3._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite3), B.C__IsTrue, null);
              A.expect(timeout3.get$exception() != null, B.C__IsTrue, null);
              A.expect(cancelation3.get$exception() != null, B.C__IsTrue, null);
              A.expect(res._1, new A.TypeMatcher(type$.TypeMatcher_CanceledExceptions), null);
              timeout3 = res._0;
              A.expect(timeout3, B.C__NotEmpty, null);
              A.expect(timeout3, A.Iterable_Iterable$generate(J.get$length$asx(timeout3), t4), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute____closure8.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure7(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure7.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure7(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure7(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        count, timeout1, t2, t3, cancelation1, t4, composite1, res, t5, timeout2, cancelation2, composite2, timeout3, cancelation3, composite3, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = p.concurrencySettings;
              t1 = t1.maxWorkers * t1.maxParallel;
              count = 2 * t1 + 1;
              timeout1 = A.TimeoutToken$(new A.Duration(570000));
              t2 = type$._Future_CanceledException;
              t3 = type$._AsyncCompleter_CanceledException;
              cancelation1 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t2), t3));
              A.Timer_Timer(new A.Duration(B.JSNumber_methods.round$0(timeout1.timeout._duration * 0.25)), cancelation1.get$cancel());
              t4 = type$.JSArray_CancelationToken;
              composite1 = A.CompositeToken$any(A._setArrayType([timeout1, cancelation1], t4));
              composite1._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite1), B.C__IsFalse, null);
              $async$goto = 2;
              return A._asyncAwait(A._testFinitePoolCancelation(p, 15, count, composite1), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              composite1._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite1), B.C__IsTrue, null);
              A.expect(timeout1.get$exception() != null, B.C__IsFalse, null);
              A.expect(cancelation1.get$exception() != null, B.C__IsTrue, null);
              timeout1 = p._worker_pool$_queue;
              A.expect(timeout1.get$length(0), B._OrderingMatcher_HCW, null);
              t5 = res._1;
              A.expect(t5, new A._OrderingMatcher(t1, true, true, false, "a value less than or equal to", true), null);
              A.expect(res._0, count - t5, null);
              timeout2 = A.TimeoutToken$(new A.Duration(570000));
              cancelation2 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t2), t3));
              A.Timer_Timer(new A.Duration(B.JSInt_methods.round$0(timeout2.timeout._duration * 4)), cancelation2.get$cancel());
              composite2 = A.CompositeToken$any(A._setArrayType([timeout2, cancelation2], t4));
              composite2._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite2), B.C__IsFalse, null);
              $async$goto = 3;
              return A._asyncAwait(A._testFinitePoolCancelation(p, 15, count, composite2), $async$call$1);
            case 3:
              // returning from await.
              res = $async$result;
              composite2._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite2), B.C__IsTrue, null);
              A.expect(timeout2.get$exception() != null, B.C__IsTrue, null);
              A.expect(cancelation2.get$exception() != null, B.C__IsFalse, null);
              A.expect(timeout1.get$length(0), B._OrderingMatcher_HCW, null);
              timeout2 = res._1;
              A.expect(timeout2, new A._OrderingMatcher(t1, true, true, false, "a value less than or equal to", true), null);
              A.expect(res._0, count - timeout2, null);
              timeout3 = A.TimeoutToken$(new A.Duration(570000));
              cancelation3 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t2), t3));
              A.Timer_Timer(new A.Duration(B.JSNumber_methods.round$0(timeout3.timeout._duration * 0.25)), cancelation3.get$cancel());
              composite3 = A.CompositeToken$all(A._setArrayType([timeout3, cancelation3], t4));
              composite3._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite3), B.C__IsFalse, null);
              $async$goto = 4;
              return A._asyncAwait(A._testFinitePoolCancelation(p, 15, count, composite3), $async$call$1);
            case 4:
              // returning from await.
              res = $async$result;
              composite3._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite3), B.C__IsTrue, null);
              A.expect(timeout3.get$exception() != null, B.C__IsTrue, null);
              A.expect(cancelation3.get$exception() != null, B.C__IsTrue, null);
              A.expect(timeout1.get$length(0), B._OrderingMatcher_HCW, null);
              timeout1 = res._1;
              A.expect(timeout1, new A._OrderingMatcher(t1, true, true, false, "a value less than or equal to", true), null);
              A.expect(res._0, count - timeout1, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure9.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure6(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure6.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure6(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure6(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, cancelation1, t3, composite1, res, timeout2, cancelation2, composite2, timeout3, cancelation3, composite3, t1, count, timeout1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = p.concurrencySettings;
              count = 2 * (t1.maxWorkers * t1.maxParallel) + 1;
              timeout1 = A.TimeoutToken$(new A.Duration(570000));
              t1 = type$._Future_CanceledException;
              t2 = type$._AsyncCompleter_CanceledException;
              cancelation1 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2));
              A.Timer_Timer(new A.Duration(B.JSNumber_methods.round$0(timeout1.timeout._duration * 0.25)), cancelation1.get$cancel());
              t3 = type$.JSArray_CancelationToken;
              composite1 = A.CompositeToken$any(A._setArrayType([timeout1, cancelation1], t3));
              composite1._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite1), B.C__IsFalse, null);
              $async$goto = 2;
              return A._asyncAwait(A._testInfinitePoolCancelation(p, count, composite1), $async$call$1);
            case 2:
              // returning from await.
              res = $async$result;
              composite1._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite1), B.C__IsTrue, null);
              A.expect(timeout1.get$exception() != null, B.C__IsFalse, null);
              A.expect(cancelation1.get$exception() != null, B.C__IsTrue, null);
              timeout1 = p._worker_pool$_queue;
              A.expect(timeout1.get$length(0), B._OrderingMatcher_HCW, null);
              A.expect(res._1, 0, null);
              A.expect(res._0, count, null);
              timeout2 = A.TimeoutToken$(new A.Duration(570000));
              cancelation2 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2));
              A.Timer_Timer(new A.Duration(B.JSInt_methods.round$0(timeout2.timeout._duration * 4)), cancelation2.get$cancel());
              composite2 = A.CompositeToken$any(A._setArrayType([timeout2, cancelation2], t3));
              composite2._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite2), B.C__IsFalse, null);
              $async$goto = 3;
              return A._asyncAwait(A._testInfinitePoolCancelation(p, count, composite2), $async$call$1);
            case 3:
              // returning from await.
              res = $async$result;
              composite2._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite2), B.C__IsTrue, null);
              A.expect(timeout2.get$exception() != null, B.C__IsTrue, null);
              A.expect(cancelation2.get$exception() != null, B.C__IsFalse, null);
              A.expect(timeout1.get$length(0), B._OrderingMatcher_HCW, null);
              A.expect(res._1, 0, null);
              A.expect(res._0, count, null);
              timeout3 = A.TimeoutToken$(new A.Duration(570000));
              cancelation3 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t1), t2));
              A.Timer_Timer(new A.Duration(B.JSNumber_methods.round$0(timeout3.timeout._duration * 0.25)), cancelation3.get$cancel());
              composite3 = A.CompositeToken$all(A._setArrayType([timeout3, cancelation3], t3));
              composite3._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite3), B.C__IsFalse, null);
              $async$goto = 4;
              return A._asyncAwait(A._testInfinitePoolCancelation(p, count, composite3), $async$call$1);
            case 4:
              // returning from await.
              res = $async$result;
              composite3._checkTokens$0();
              A.expect(A.CancelationToken.prototype.get$isCanceled.call(composite3), B.C__IsTrue, null);
              A.expect(timeout3.get$exception() != null, B.C__IsTrue, null);
              A.expect(cancelation3.get$exception() != null, B.C__IsTrue, null);
              A.expect(timeout1.get$length(0), B._OrderingMatcher_HCW, null);
              A.expect(res._1, 0, null);
              A.expect(res._0, count, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A._testFinitePoolCancelation_closure.prototype = {
    call$1(_) {
      type$.List_int._as(_);
      return this._box_0.success++;
    },
    $signature: 131
  };
  A._testFinitePoolCancelation_closure0.prototype = {
    call$1(_) {
      return this._box_0.errors++;
    },
    $signature: 46
  };
  A._testInfinitePoolCancelation_closure.prototype = {
    call$1(_) {
      type$.List_int._as(_);
      return this._box_0.success++;
    },
    $signature: 131
  };
  A._testInfinitePoolCancelation_closure0.prototype = {
    call$1(_) {
      return this._box_0.errors++;
    },
    $signature: 46
  };
  A.execute_dob.prototype = {
    call$0() {
      var t1 = Date.now();
      return new A.DateTime(t1, 0, false)._addMicroseconds$1(0 - A.Duration$((1 + B.C__JSRandom.nextInt$1(60)) * 365, 0, 0, 0, 0)._duration);
    },
    $signature: 234
  };
  A.execute_closure1.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.tc;
      t1.group$2("- MARSHALING", new A.execute__closure1(t1, _this.dob, _this.cityAFr, _this.cityABe, _this.cityBFr));
    },
    $signature: 2
  };
  A.execute__closure1.prototype = {
    call$0() {
      var me, p1, p2, p3, c1, c2, t5, c3, c4, c5, a, b, d, _this = this, _null = null,
        t1 = new A.execute__closure_testSum(),
        t2 = _this.tc,
        t3 = _this.dob,
        t4 = _this.cityAFr;
      t2.group$2("- CONTEXT AWARENESS", new A.execute___closure7(t2, t3, t4));
      t2.test$2('- Unmarshaled "non-native" types work in VM, fail on Web', new A.execute___closure8(t2, t1));
      t2.test$2('- Unmarshaled "non-native" input types work in VM, fail on Web', new A.execute___closure9(t2, t1));
      t2.test$2('- Unmarshaled "non-native" output types work in VM, fail on Web', new A.execute___closure10(t2, t1));
      t2.test$2('- Marshaled "non-native" types always work', new A.execute___closure11(t2, t1));
      me = new A.Person("ME", "Myself", t3.call$0(), t4, _null, _null);
      p1 = new A.Person("P", "1", t3.call$0(), t4, _null, _null);
      p2 = new A.Person("P", "2", t3.call$0(), t4, _null, _null);
      t1 = _this.cityABe;
      p3 = new A.Person("P", "3", t3.call$0(), t1, _null, _null);
      c1 = new A.Person("C", "1", t3.call$0(), t4, p1, p2);
      c2 = new A.Person("C", "2", t3.call$0(), t4, p2, p1);
      t5 = _this.cityBFr;
      c3 = new A.Person("C", "3", t3.call$0(), t5, p1, _null);
      c4 = new A.Person("C", "4", t3.call$0(), t5, _null, p1);
      c5 = new A.Person("C", "5", t3.call$0(), t1, p3, _null);
      a = new A.Person("A", "a", t3.call$0(), t4, _null, _null);
      b = new A.Person("B", "b", t3.call$0(), t4, _null, _null);
      d = new A.Person("D", "d", t3.call$0(), t1, _null, _null);
      J.add$1$ax(a.get$friends(), b);
      J.add$1$ax(b.get$friends(), a);
      J.add$1$ax(d.get$friends(), b);
      t2.test$2("- Person - Self", new A.execute___closure12(t2, me, p1));
      t2.test$2("- Person - Other", new A.execute___closure13(t2, me, p1, c1, p2));
      t2.test$2("- Person - Parent", new A.execute___closure14(t2, p1, c1, p2, c2, c3, c4, p3, c5));
      t2.test$2("- Person - Child", new A.execute___closure15(t2, c1, p1, p2, c2, c3, c4, c5, p3));
      t2.test$2("- Person - Sibling", new A.execute___closure16(t2, c1, c2, c3, c4));
      t2.test$2("- Person - Friend", new A.execute___closure17(t2, a, b, d));
      t2.test$2("- Person - Friend of friend", new A.execute___closure18(t2, a, d));
    },
    $signature: 1
  };
  A.execute__closure_testSum.prototype = {
    call$3$marshalIn$marshalOut(testWorker, marshalIn, marshalOut) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Fraction),
        $async$returnValue, res;
      var $async$call$3$marshalIn$marshalOut = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(testWorker.fractionAdd$4$marshalIn$marshalOut(A.Fraction_Fraction(1, 2), A.Fraction_Fraction(1, 6), marshalIn, marshalOut), $async$call$3$marshalIn$marshalOut);
            case 3:
              // returning from await.
              res = $async$result;
              A.expect(res, A.Fraction_Fraction(2, 3), null);
              $async$returnValue = res;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$3$marshalIn$marshalOut, $async$completer);
    },
    $signature: 235
  };
  A.execute___closure7.prototype = {
    call$0() {
      var t1 = this.tc,
        t2 = this.dob,
        t3 = this.cityAFr;
      t1.test$2("- Aware", new A.execute____closure41(t2, t3));
      t1.test$2("- Unaware", new A.execute____closure42(t2, t3));
    },
    $signature: 1
  };
  A.execute____closure41.prototype = {
    call$0() {
      var marshal, context2, unmarshal, a, l, r, _null = null,
        t1 = A.ContextAwareConverter$(_null),
        t2 = type$.Object,
        t3 = A.HashMap_HashMap(A.core__identical$closure(), t2, t2),
        context1 = new A.MarshalingContext(t1, new A.SerializationContext(t3));
      A.expect(true, B.C__IsTrue, _null);
      marshal = A.ConverterExt_get_converter(context1).list$1$1(new A.execute_____closure32(context1), t2);
      t1 = A.ContextAwareConverter$(_null);
      t2 = A.HashMap_HashMap(A.core__identical$closure(), t2, t2);
      context2 = new A.MarshalingContext(t1, new A.SerializationContext(t2));
      A.expect(true, B.C__IsTrue, _null);
      unmarshal = A.ConverterExt_get_converter(context2).list$1$1(new A.execute_____closure33(context2), type$.Person);
      a = new A.Person("X", "y", this.dob.call$0(), this.cityAFr, _null, _null);
      l = A._setArrayType([a, a], type$.JSArray_Person);
      r = unmarshal.call$1(marshal.call$1(l));
      A.expect(r === l, B.C__IsFalse, _null);
      t1 = J.getInterceptor$asx(r);
      A.expect(t1.$index(r, 0) === t1.$index(r, 1), B.C__IsTrue, _null);
    },
    $signature: 1
  };
  A.execute_____closure32.prototype = {
    call$1(x) {
      var t1 = B.C_PersonMarshaler.marshal$2(type$.Person._as(x), this.context1);
      return t1;
    },
    $signature: 129
  };
  A.execute_____closure33.prototype = {
    call$1(x) {
      return B.C_PersonMarshaler.unmarshal$2(x, this.context2);
    },
    $signature: 78
  };
  A.execute____closure42.prototype = {
    call$0() {
      var marshal, context2, unmarshal, a, l, r, _null = null,
        t1 = $.$get$Squadron__converter(),
        context1 = new A.MarshalingContext(t1, _null);
      A.expect(false, B.C__IsFalse, _null);
      marshal = A.ConverterExt_get_converter(context1).list$1$1(new A.execute_____closure30(context1), type$.Object);
      t1 = $.$get$Squadron__converter();
      context2 = new A.MarshalingContext(t1, _null);
      A.expect(false, B.C__IsFalse, _null);
      unmarshal = A.ConverterExt_get_converter(context2).list$1$1(new A.execute_____closure31(context2), type$.Person);
      a = new A.Person("X", "y", this.dob.call$0(), this.cityAFr, _null, _null);
      l = A._setArrayType([a, a], type$.JSArray_Person);
      r = unmarshal.call$1(marshal.call$1(l));
      A.expect(r, new A.TypeMatcher(type$.TypeMatcher_List_Person), _null);
      A.expect(r === l, B.C__IsFalse, _null);
      t1 = J.getInterceptor$asx(r);
      A.expect(t1.$index(r, 0) === t1.$index(r, 1), B.C__IsFalse, _null);
    },
    $signature: 1
  };
  A.execute_____closure30.prototype = {
    call$1(x) {
      var t1 = B.C_PersonMarshaler.marshal$2(type$.Person._as(x), this.context1);
      return t1;
    },
    $signature: 129
  };
  A.execute_____closure31.prototype = {
    call$1(x) {
      return B.C_PersonMarshaler.unmarshal$2(x, this.context2);
    },
    $signature: 78
  };
  A.execute___closure8.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$(t1, null, null), new A.execute____closure40($async$self.testSum, t1), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure40.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure9(type$.TestWorker._as(w));
    },
    $call$body$execute____closure9(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$self = this, sum, ex, t1, exception, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait($async$self.testSum.call$3$marshalIn$marshalOut(w, false, false), $async$call$1);
            case 6:
              // returning from await.
              sum = $async$result;
              t1 = $async$self.tc.workerPlatform;
              if (t1 === B.SquadronPlatformType_JavaScript_js || t1 === B.SquadronPlatformType_Dqj) {
                t1 = A.unexpectedSuccess("unmarshalled call to fractionAdd()", sum);
                throw A.wrapException(t1);
              }
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronException._is(t1)) {
                ex = t1;
                if ($async$self.tc.workerPlatform === B.SquadronPlatformType_Rhi)
                  throw $async$exception;
                A.expect(ex, A.anyOf(new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("TypeError"))), new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("not a subtype"))), new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Failed to post request")))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure9.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$(t1, null, null), new A.execute____closure39($async$self.testSum, t1), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure39.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure8(type$.TestWorker._as(w));
    },
    $call$body$execute____closure8(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$self = this, sum, ex, t1, exception, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait($async$self.testSum.call$3$marshalIn$marshalOut(w, false, true), $async$call$1);
            case 6:
              // returning from await.
              sum = $async$result;
              t1 = $async$self.tc.workerPlatform;
              if (t1 === B.SquadronPlatformType_JavaScript_js || t1 === B.SquadronPlatformType_Dqj) {
                t1 = A.unexpectedSuccess("unmarshalled call to fractionAdd()", sum);
                throw A.wrapException(t1);
              }
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronException._is(t1)) {
                ex = t1;
                if ($async$self.tc.workerPlatform === B.SquadronPlatformType_Rhi)
                  throw $async$exception;
                A.expect(ex, A.anyOf(new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("TypeError"))), new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("not a subtype"))), new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Failed to post request")))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure10.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$(t1, null, null), new A.execute____closure38($async$self.testSum, t1), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure38.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure7(type$.TestWorker._as(w));
    },
    $call$body$execute____closure7(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$self = this, sum, ex, t1, exception, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait($async$self.testSum.call$3$marshalIn$marshalOut(w, true, false), $async$call$1);
            case 6:
              // returning from await.
              sum = $async$result;
              t1 = $async$self.tc.workerPlatform;
              if (t1 === B.SquadronPlatformType_JavaScript_js || t1 === B.SquadronPlatformType_Dqj) {
                t1 = A.unexpectedSuccess("unmarshalled call to fractionAdd()", sum);
                throw A.wrapException(t1);
              }
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              ex = A.unwrapException($async$exception);
              if ($async$self.tc.workerPlatform === B.SquadronPlatformType_Rhi)
                throw $async$exception;
              A.expect(ex, A.anyOf(new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("TypeError"))), new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("not a subtype"))), new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Failed to post response")))), null);
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure11.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorker$($async$self.tc, null, null), new A.execute____closure37($async$self.testSum), type$.TestWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure37.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure6(type$.TestWorker._as(w));
    },
    $call$body$execute____closure6(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self.testSum.call$3$marshalIn$marshalOut(w, true, true), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 7
  };
  A.execute___closure12.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.PersonWorker$($async$self.tc), new A.execute____closure36($async$self.me, $async$self.p1), type$.PersonWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure36.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure5(type$.PersonWorker._as(w));
    },
    $call$body$execute____closure5(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.me;
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.getKindType$2(t1, t1), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, "self", null);
              t1 = $async$self.p1;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(w.getKindType$2(t1, t1), $async$call$1);
            case 3:
              // returning from await.
              $async$temp1.expect($async$result, "self", null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 47
  };
  A.execute___closure13.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.PersonWorker$($async$self.tc), new A.execute____closure35($async$self.me, $async$self.p1, $async$self.c1, $async$self.p2), type$.PersonWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure35.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure4(type$.PersonWorker._as(w));
    },
    $call$body$execute____closure4(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.me;
              t2 = $async$self.p1;
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.getKindType$2(t1, t2), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, "other", null);
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(w.getKindType$2(t1, $async$self.c1), $async$call$1);
            case 3:
              // returning from await.
              $async$temp1.expect($async$result, "other", null);
              $async$temp1 = A;
              $async$goto = 4;
              return A._asyncAwait(w.getKindType$2(t2, $async$self.p2), $async$call$1);
            case 4:
              // returning from await.
              $async$temp1.expect($async$result, "other", null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 47
  };
  A.execute___closure14.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.PersonWorker$($async$self.tc), new A.execute____closure34($async$self.p1, $async$self.c1, $async$self.p2, $async$self.c2, $async$self.c3, $async$self.c4, $async$self.p3, $async$self.c5), type$.PersonWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure34.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure3(type$.PersonWorker._as(w));
    },
    $call$body$execute____closure3(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t3, t1, t2, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.p1;
              t2 = $async$self.c1;
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.getKindType$2(t1, t2), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, "parent", null);
              t3 = $async$self.p2;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(w.getKindType$2(t3, t2), $async$call$1);
            case 3:
              // returning from await.
              $async$temp1.expect($async$result, "parent", null);
              t2 = $async$self.c2;
              $async$temp1 = A;
              $async$goto = 4;
              return A._asyncAwait(w.getKindType$2(t1, t2), $async$call$1);
            case 4:
              // returning from await.
              $async$temp1.expect($async$result, "parent", null);
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(w.getKindType$2(t3, t2), $async$call$1);
            case 5:
              // returning from await.
              $async$temp1.expect($async$result, "parent", null);
              $async$temp1 = A;
              $async$goto = 6;
              return A._asyncAwait(w.getKindType$2(t1, $async$self.c3), $async$call$1);
            case 6:
              // returning from await.
              $async$temp1.expect($async$result, "parent", null);
              $async$temp1 = A;
              $async$goto = 7;
              return A._asyncAwait(w.getKindType$2(t1, $async$self.c4), $async$call$1);
            case 7:
              // returning from await.
              $async$temp1.expect($async$result, "parent", null);
              $async$temp1 = A;
              $async$goto = 8;
              return A._asyncAwait(w.getKindType$2($async$self.p3, $async$self.c5), $async$call$1);
            case 8:
              // returning from await.
              $async$temp1.expect($async$result, "parent", null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 47
  };
  A.execute___closure15.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.PersonWorker$($async$self.tc), new A.execute____closure33($async$self.c1, $async$self.p1, $async$self.p2, $async$self.c2, $async$self.c3, $async$self.c4, $async$self.c5, $async$self.p3), type$.PersonWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure33.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure2(type$.PersonWorker._as(w));
    },
    $call$body$execute____closure2(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t3, t1, t2, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.c1;
              t2 = $async$self.p1;
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.getKindType$2(t1, t2), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, "child", null);
              t3 = $async$self.p2;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(w.getKindType$2(t1, t3), $async$call$1);
            case 3:
              // returning from await.
              $async$temp1.expect($async$result, "child", null);
              t1 = $async$self.c2;
              $async$temp1 = A;
              $async$goto = 4;
              return A._asyncAwait(w.getKindType$2(t1, t2), $async$call$1);
            case 4:
              // returning from await.
              $async$temp1.expect($async$result, "child", null);
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(w.getKindType$2(t1, t3), $async$call$1);
            case 5:
              // returning from await.
              $async$temp1.expect($async$result, "child", null);
              $async$temp1 = A;
              $async$goto = 6;
              return A._asyncAwait(w.getKindType$2($async$self.c3, t2), $async$call$1);
            case 6:
              // returning from await.
              $async$temp1.expect($async$result, "child", null);
              $async$temp1 = A;
              $async$goto = 7;
              return A._asyncAwait(w.getKindType$2($async$self.c4, t2), $async$call$1);
            case 7:
              // returning from await.
              $async$temp1.expect($async$result, "child", null);
              $async$temp1 = A;
              $async$goto = 8;
              return A._asyncAwait(w.getKindType$2($async$self.c5, $async$self.p3), $async$call$1);
            case 8:
              // returning from await.
              $async$temp1.expect($async$result, "child", null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 47
  };
  A.execute___closure16.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.PersonWorker$($async$self.tc), new A.execute____closure32($async$self.c1, $async$self.c2, $async$self.c3, $async$self.c4), type$.PersonWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure32.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure1(type$.PersonWorker._as(w));
    },
    $call$body$execute____closure1(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t3, t4, t1, t2, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.c1;
              t2 = $async$self.c2;
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.getKindType$2(t1, t2), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, "sibling", null);
              t3 = $async$self.c3;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(w.getKindType$2(t1, t3), $async$call$1);
            case 3:
              // returning from await.
              $async$temp1.expect($async$result, "sibling", null);
              t4 = $async$self.c4;
              $async$temp1 = A;
              $async$goto = 4;
              return A._asyncAwait(w.getKindType$2(t1, t4), $async$call$1);
            case 4:
              // returning from await.
              $async$temp1.expect($async$result, "sibling", null);
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(w.getKindType$2(t2, t1), $async$call$1);
            case 5:
              // returning from await.
              $async$temp1.expect($async$result, "sibling", null);
              $async$temp1 = A;
              $async$goto = 6;
              return A._asyncAwait(w.getKindType$2(t2, t3), $async$call$1);
            case 6:
              // returning from await.
              $async$temp1.expect($async$result, "sibling", null);
              $async$temp1 = A;
              $async$goto = 7;
              return A._asyncAwait(w.getKindType$2(t2, t4), $async$call$1);
            case 7:
              // returning from await.
              $async$temp1.expect($async$result, "sibling", null);
              $async$temp1 = A;
              $async$goto = 8;
              return A._asyncAwait(w.getKindType$2(t3, t1), $async$call$1);
            case 8:
              // returning from await.
              $async$temp1.expect($async$result, "sibling", null);
              $async$temp1 = A;
              $async$goto = 9;
              return A._asyncAwait(w.getKindType$2(t3, t2), $async$call$1);
            case 9:
              // returning from await.
              $async$temp1.expect($async$result, "sibling", null);
              $async$temp1 = A;
              $async$goto = 10;
              return A._asyncAwait(w.getKindType$2(t3, t4), $async$call$1);
            case 10:
              // returning from await.
              $async$temp1.expect($async$result, "sibling", null);
              $async$temp1 = A;
              $async$goto = 11;
              return A._asyncAwait(w.getKindType$2(t4, t1), $async$call$1);
            case 11:
              // returning from await.
              $async$temp1.expect($async$result, "sibling", null);
              $async$temp1 = A;
              $async$goto = 12;
              return A._asyncAwait(w.getKindType$2(t4, t2), $async$call$1);
            case 12:
              // returning from await.
              $async$temp1.expect($async$result, "sibling", null);
              $async$temp1 = A;
              $async$goto = 13;
              return A._asyncAwait(w.getKindType$2(t4, t3), $async$call$1);
            case 13:
              // returning from await.
              $async$temp1.expect($async$result, "sibling", null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 47
  };
  A.execute___closure17.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.PersonWorker$($async$self.tc), new A.execute____closure31($async$self.a, $async$self.b, $async$self.d), type$.PersonWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure31.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure0(type$.PersonWorker._as(w));
    },
    $call$body$execute____closure0(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t3, t1, t2, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.a;
              t2 = $async$self.b;
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.getKindType$2(t1, t2), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, "friend", null);
              t3 = $async$self.d;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(w.getKindType$2(t2, t3), $async$call$1);
            case 3:
              // returning from await.
              $async$temp1.expect($async$result, "friend", null);
              $async$temp1 = A;
              $async$goto = 4;
              return A._asyncAwait(w.getKindType$2(t2, t1), $async$call$1);
            case 4:
              // returning from await.
              $async$temp1.expect($async$result, "friend", null);
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(w.getKindType$2(t3, t2), $async$call$1);
            case 5:
              // returning from await.
              $async$temp1.expect($async$result, "friend", null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 47
  };
  A.execute___closure18.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.PersonWorker$($async$self.tc), new A.execute____closure30($async$self.a, $async$self.d), type$.PersonWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure30.prototype = {
    call$1(w) {
      return this.$call$body$execute____closure(type$.PersonWorker._as(w));
    },
    $call$body$execute____closure(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.a;
              t2 = $async$self.d;
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(w.getKindType$2(t1, t2), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, "friend-of-friend", null);
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(w.getKindType$2(t2, t1), $async$call$1);
            case 3:
              // returning from await.
              $async$temp1.expect($async$result, "friend-of-friend", null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 47
  };
  A.execute_closure6.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- SQUADRON WORKER - POOL", new A.execute__closure7(t1));
    },
    $signature: 2
  };
  A.execute__closure7.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Prime worker pool + cache worker", new A.execute___closure40(t1));
      t1.test$2("- Worker pool monitoring", new A.execute___closure41(t1));
      t1.group$2("- Error handling", new A.execute___closure42(t1));
      t1.group$2("- Performance", new A.execute___closure43(t1));
      t1.test$2("- Stopped pool will not accept new requests", new A.execute___closure44(t1));
      t1.test$2("- Restarted pool will serve new requests", new A.execute___closure45(t1));
      t1.test$2("- Stopping a pool does not prevent processing of pending tasks", new A.execute___closure46(t1));
      t1.test$2("- Pool termination", new A.execute___closure47(t1));
      t1.group$2("- Streaming - with multiple errors", new A.execute___closure48(t1));
    },
    $signature: 1
  };
  A.execute___closure40.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.tc;
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.CacheWorker$(t1), new A.execute____closure87(t1), type$.CacheWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure87.prototype = {
    call$1(cache) {
      return this.$call$body$execute____closure25(type$.CacheWorker._as(cache));
    },
    $call$body$execute____closure25(cache) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(cache.start$0(), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A.Using_useAsync(A.PrimeWorkerPool$($async$self.tc, cache, B.ConcurrencySettings_2_2_2), new A.execute_____closure65(), type$.PrimeWorkerPool, type$.Null), $async$call$1);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 93
  };
  A.execute_____closure65.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure59(type$.PrimeWorkerPool._as(p));
    },
    $call$body$execute_____closure59(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        count, completedTasks, tasks, t3, i, t4, t1, t2;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = p.concurrencySettings;
              t2 = t1.maxWorkers;
              t1 = t1.maxParallel;
              count = 2 * (t2 * t1) + 1;
              completedTasks = A._setArrayType([], type$.JSArray_int);
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              for (t3 = type$.dynamic, i = 0; i <= count; ++i)
                B.JSArray_methods.add$1(tasks, p.isPrime$1(i).then$1$1(new A.execute______closure54(completedTasks, i), t3));
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(tasks, false, t3), $async$call$1);
            case 2:
              // returning from await.
              A.expect(completedTasks, new A._HasLength(A.wrapMatcher(tasks.length)), null);
              t3 = p._workers;
              t4 = A._arrayInstanceType(t3);
              t4._eval$1("WorkerStat(1)")._as(A._pool_worker_PoolWorker_getStats$closure());
              t4 = t4._eval$1("MappedListIterable<1,WorkerStat>");
              A.expect(new A.MappedListIterable(t3, A._pool_worker_PoolWorker_getStats$closure(), t4), new A._HasLength(A.wrapMatcher(t2)), null);
              A.expect(new A.MappedListIterable(new A.MappedListIterable(t3, A._pool_worker_PoolWorker_getStats$closure(), t4), t4._eval$1("int(ListIterable.E)")._as(new A.execute______closure55()), t4._eval$1("MappedListIterable<ListIterable.E,int>")), new A._EveryElement(A.wrapMatcher(new A._OrderingMatcher(t1, true, true, false, "a value less than or equal to", true))), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 108
  };
  A.execute______closure54.prototype = {
    call$1(_) {
      A._asBool(_);
      return B.JSArray_methods.add$1(this.completedTasks, this.i);
    },
    $signature: 105
  };
  A.execute______closure55.prototype = {
    call$1(s) {
      return type$.WorkerStat._as(s).maxWorkload;
    },
    $signature: 240
  };
  A.execute___closure41.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_2_5_3), new A.execute____closure86(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure86.prototype = {
    call$1(p) {
      return this.$call$body$execute____closure24(type$.TestWorkerPool._as(p));
    },
    $call$body$execute____closure24(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$next = [], tasks, timer, i, t4, _box_0, t1, t2, count, t3;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_0 = {};
              t1 = p.concurrencySettings;
              t2 = t1.maxWorkers;
              count = 2 * (t2 * t1.maxParallel) + 1;
              t3 = p.start$0();
              $async$goto = 2;
              return A._asyncAwait(t3 instanceof A._Future ? t3 : A._Future$value(t3, type$.void), $async$call$1);
            case 2:
              // returning from await.
              t3 = p._workers;
              t1 = t1.minWorkers;
              A.expect(t3.length, t1, null);
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              for (i = 0; i < count; ++i)
                J.add$1$ax(tasks, p.io$1$ms(400));
              t4 = type$.dynamic;
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, t4), $async$call$1);
            case 3:
              // returning from await.
              A.expect(t3.length, t2, null);
              _box_0.stopped = 0;
              timer = A.Timer_Timer$periodic(new A.Duration(40000), new A.execute_____closure64(_box_0, p));
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, t4), $async$call$1);
            case 7:
              // returning from await.
              A.expect(_box_0.stopped, new A._OrderingMatcher(t2, false, true, false, "a value less than", true), null);
              $async$goto = 8;
              return A._asyncAwait(A.Future_wait(tasks, false, t4), $async$call$1);
            case 8:
              // returning from await.
              A.expect(_box_0.stopped, B._OrderingMatcher_kMx, null);
              $async$goto = 9;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, t4), $async$call$1);
            case 9:
              // returning from await.
              A.expect(t3.length, t1, null);
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // uncaught
              $async$next = [1];
            case 5:
              // finally
              $async$handler = 1;
              timer.cancel$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute_____closure64.prototype = {
    call$1(timer) {
      var t1;
      type$.Timer._as(timer);
      t1 = this._box_0;
      t1.stopped = t1.stopped + this.p.stop$1(new A.execute______closure53());
    },
    $signature: 111
  };
  A.execute______closure53.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).get$_stats().get$snapshot().idleTime._duration > 80000;
    },
    $signature: 241
  };
  A.execute___closure42.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Failed initialization", new A.execute____closure77(t1));
      t1.test$3$skip("- Missing command", new A.execute____closure78(t1), true);
      t1.test$2("- Invalid command ID", new A.execute____closure79(t1));
      t1.test$2("- Dart Exception", new A.execute____closure80(t1));
      t1.test$2("- WorkerException", new A.execute____closure81(t1));
      t1.test$2("- TaskTimeOutException", new A.execute____closure82(t1));
      t1.test$2("- CanceledException", new A.execute____closure83(t1));
      t1.test$2("- TestException (unregistered)", new A.execute____closure84(t1));
      t1.test$2("- TestException (registered)", new A.execute____closure85(t1));
    },
    $signature: 1
  };
  A.execute____closure77.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$throws($async$self.tc), new A.execute_____closure63(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure63.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure58(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure58(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null);
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A._expect(p.start$0(), new A.Throws(A.wrapMatcher(new A.TypeMatcher(type$.TypeMatcher_WorkerException))), null, null, null, false), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(p.ping$0(), new A.Throws(A.wrapMatcher(new A.TypeMatcher(type$.TypeMatcher_CanceledException))), null, null, null, false), $async$call$1);
            case 3:
              // returning from await.
              A.expect(p._workers.length, B._OrderingMatcher_HCW, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure78.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$missingStartRequest($async$self.tc), new A.execute_____closure62(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure62.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure57(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure57(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null);
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A._expect(p.start$0(), new A.Throws(A.wrapMatcher(new A.TypeMatcher(type$.TypeMatcher_SquadronError))), null, null, null, false), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(p.ping$0(), new A.Throws(A.wrapMatcher(new A.TypeMatcher(type$.TypeMatcher_CanceledException))), null, null, null, false), $async$call$1);
            case 3:
              // returning from await.
              A.expect(p._workers.length, B._OrderingMatcher_HCW, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure79.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$invalid($async$self.tc), new A.execute_____closure61(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure61.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure56(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure56(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null);
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A._expect(p.start$0(), new A.Throws(A.wrapMatcher(new A.TypeMatcher(type$.TypeMatcher_SquadronError))), null, null, null, false), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(A._expect(p.ping$0(), new A.Throws(A.wrapMatcher(new A.TypeMatcher(type$.TypeMatcher_CanceledException))), null, null, null, false), $async$call$1);
            case 3:
              // returning from await.
              A.expect(p._workers.length, B._OrderingMatcher_HCW, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure80.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.ErrorWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure60(), type$.ErrorWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure60.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure55(type$.ErrorWorkerPool._as(p));
    },
    $call$body$execute_____closure55(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], ex, t1, exception, t2, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(p.throwException$0(), $async$call$1);
            case 6:
              // returning from await.
              t1 = A.unexpectedSuccess("throwException()", null);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.WorkerException) {
                ex = t1;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("intentional exception"))), null);
                t1 = ex._squadron_exception$_stackTrace;
                t2 = A._MatchesRegExp$("throwException");
                A.expect(t1, new A.Called("Stack trace that called", "stack trace", A.wrapMatcher(t2)), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              t1 = p._workers;
              t2 = A._arrayInstanceType(t1);
              A.expect(new A.MappedListIterable(t1, t2._eval$1("WorkerStat(1)")._as(A._pool_worker_PoolWorker_getStats$closure()), t2._eval$1("MappedListIterable<1,WorkerStat>")).fold$1$2(0, 0, new A.execute______closure52(), type$.int), 1, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 53
  };
  A.execute______closure52.prototype = {
    call$2(t, s) {
      return A._asInt(t) + type$.WorkerStat._as(s).totalErrors;
    },
    $signature: 112
  };
  A.execute____closure81.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.ErrorWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure59(), type$.ErrorWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure59.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure54(type$.ErrorWorkerPool._as(p));
    },
    $call$body$execute_____closure54(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], ex, t1, exception, t2, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(p.throwWorkerException$0(), $async$call$1);
            case 6:
              // returning from await.
              t1 = A.unexpectedSuccess("throwWorkerException()", null);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.WorkerException) {
                ex = t1;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("intentional worker exception"))), null);
                t1 = ex._squadron_exception$_stackTrace;
                t2 = A._MatchesRegExp$("throwWorkerException");
                A.expect(t1, new A.Called("Stack trace that called", "stack trace", A.wrapMatcher(t2)), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              t1 = p._workers;
              t2 = A._arrayInstanceType(t1);
              A.expect(new A.MappedListIterable(t1, t2._eval$1("WorkerStat(1)")._as(A._pool_worker_PoolWorker_getStats$closure()), t2._eval$1("MappedListIterable<1,WorkerStat>")).fold$1$2(0, 0, new A.execute______closure51(), type$.int), 1, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 53
  };
  A.execute______closure51.prototype = {
    call$2(t, s) {
      return A._asInt(t) + type$.WorkerStat._as(s).totalErrors;
    },
    $signature: 112
  };
  A.execute____closure82.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.ErrorWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure58(), type$.ErrorWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure58.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure53(type$.ErrorWorkerPool._as(p));
    },
    $call$body$execute_____closure53(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], ex, t1, exception, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(p.throwTaskTimeOutException$0(), $async$call$1);
            case 6:
              // returning from await.
              t1 = A.unexpectedSuccess("timeOut()", null);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (type$.TimeoutException._is(t1)) {
                ex = t1;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("intentional timeout exception"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 53
  };
  A.execute____closure83.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.ErrorWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure57(), type$.ErrorWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure57.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure52(type$.ErrorWorkerPool._as(p));
    },
    $call$body$execute_____closure52(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], ex, t1, exception, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(p.throwCanceledException$0(), $async$call$1);
            case 6:
              // returning from await.
              t1 = A.unexpectedSuccess("cancel()", null);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (type$.CanceledException._is(t1)) {
                ex = t1;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("intentional canceled exception"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 53
  };
  A.execute____closure84.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.ErrorWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure56(), type$.ErrorWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure56.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure51(type$.ErrorWorkerPool._as(p));
    },
    $call$body$execute_____closure51(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$next = [], ex, t1, exception, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(p.throwTestException$0(), $async$call$1);
            case 6:
              // returning from await.
              t1 = A.unexpectedSuccess("cancel()", null);
              throw A.wrapException(t1);
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.WorkerException) {
                ex = t1;
                A.expect(ex, new A._IsNot(A.wrapMatcher(new A.TypeMatcher(type$.TypeMatcher_TestException))), null);
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Failed to deserialize"))), null);
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("#TEST"))), null);
                A.expect(ex._worker_exception$_command, 15, null);
              } else
                throw $async$exception;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 4:
              // finally
              $async$handler = 1;
              p.get$exceptionManager().unregister$1("#TEST");
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 53
  };
  A.execute____closure85.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.ErrorWorkerPool$($async$self.tc, B.ConcurrencySettings_2_2_2), new A.execute_____closure55(), type$.ErrorWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure55.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure50(type$.ErrorWorkerPool._as(p));
    },
    $call$body$execute_____closure50(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$next = [], ex, t1, exception, t2, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              p.get$exceptionManager().register$2("#TEST", A.test_exception_TestException_deserialize$closure());
              $async$goto = 6;
              return A._asyncAwait(p.throwTestException$0(), $async$call$1);
            case 6:
              // returning from await.
              t1 = A.unexpectedSuccess("cancel()", null);
              throw A.wrapException(t1);
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.TestException) {
                ex = t1;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("intentional TEST exception"))), null);
                t1 = ex._squadron_exception$_stackTrace;
                t2 = A._MatchesRegExp$("throwTestException");
                A.expect(t1, new A.Called("Stack trace that called", "stack trace", A.wrapMatcher(t2)), null);
                A.expect(ex._worker_exception$_command, 15, null);
              } else
                throw $async$exception;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 4:
              // finally
              $async$handler = 1;
              p.get$exceptionManager().unregister$1("#TEST");
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 53
  };
  A.execute___closure43.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Non-streaming (prime worker)", new A.execute____closure75(t1));
      t1.test$2("- Streaming (prime worker)", new A.execute____closure76(t1));
    },
    $signature: 1
  };
  A.execute____closure75.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.PrimeWorkerPool$($async$self.tc, null, B.ConcurrencySettings_1_3_1), new A.execute_____closure54(), type$.PrimeWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure54.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure49(type$.PrimeWorkerPool._as(p));
    },
    $call$body$execute_____closure49(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        i, start, progress, t2, end, t1, count, counter, tasks;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = p.concurrencySettings;
              count = 3 * (t1.maxWorkers * t1.maxParallel) + 1;
              counter = A.PerfCounter$("perf");
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              for (i = 0; i < count; ++i)
                B.JSArray_methods.add$1(tasks, p.isPrime$2(B.Set_qRjxp.get$last(0), counter));
              start = A.PerfCounterSnapshot$(counter);
              A.expect(start.totalCount, B._OrderingMatcher_HCW, null);
              A.expect(start.totalErrors, B._OrderingMatcher_HCW, null);
              A.expect(start.totalTimeInMicroseconds, B._OrderingMatcher_HCW, null);
              $async$goto = 2;
              return A._asyncAwait(B.JSArray_methods.get$first(tasks), $async$call$1);
            case 2:
              // returning from await.
              progress = A.PerfCounterSnapshot$(counter);
              $async$goto = progress.totalCount === 0 ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, type$.dynamic), $async$call$1);
            case 5:
              // returning from await.
              progress = A.PerfCounterSnapshot$(counter);
            case 4:
              // join
              t1 = progress.totalCount;
              A.expect(t1, B._OrderingMatcher_kMx, null);
              A.expect(progress.totalErrors, B._OrderingMatcher_HCW, null);
              t2 = progress.totalTimeInMicroseconds;
              A.expect(t2, B._OrderingMatcher_kMx, null);
              $async$goto = 6;
              return A._asyncAwait(A.Future_wait(tasks, false, type$.dynamic), $async$call$1);
            case 6:
              // returning from await.
              end = A.PerfCounterSnapshot$(counter);
              A.expect(end.totalCount, new A._OrderingMatcher(t1, true, false, true, "a value greater than or equal to", true), null);
              A.expect(end.totalErrors, B._OrderingMatcher_HCW, null);
              A.expect(end.totalTimeInMicroseconds, new A._OrderingMatcher(t2, true, false, true, "a value greater than or equal to", true), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 108
  };
  A.execute____closure76.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.PrimeWorkerPool$($async$self.tc, null, B.ConcurrencySettings_1_3_1), new A.execute_____closure53(), type$.PrimeWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure53.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure48(type$.PrimeWorkerPool._as(p));
    },
    $call$body$execute_____closure48(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        i, t2, start, progress, t3, end, t1, count, counter, tasks;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = p.concurrencySettings;
              count = 3 * (t1.maxWorkers * t1.maxParallel) + 1;
              counter = A.PerfCounter$("perf");
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              for (t1 = type$.dynamic, i = 0; i < count; ++i) {
                t2 = p.getPrimes$3(0, 1000, counter);
                B.JSArray_methods.add$1(tasks, t2.listen$2$cancelOnError(null, true).asFuture$1$1(null, t1));
              }
              start = A.PerfCounterSnapshot$(counter);
              A.expect(start.totalCount, B._OrderingMatcher_HCW, null);
              A.expect(start.totalErrors, B._OrderingMatcher_HCW, null);
              A.expect(start.totalTimeInMicroseconds, B._OrderingMatcher_HCW, null);
              $async$goto = 2;
              return A._asyncAwait(B.JSArray_methods.get$first(tasks), $async$call$1);
            case 2:
              // returning from await.
              progress = A.PerfCounterSnapshot$(counter);
              $async$goto = progress.totalCount === 0 ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, t1), $async$call$1);
            case 5:
              // returning from await.
              progress = A.PerfCounterSnapshot$(counter);
            case 4:
              // join
              t2 = progress.totalCount;
              A.expect(t2, B._OrderingMatcher_kMx, null);
              A.expect(progress.totalErrors, B._OrderingMatcher_HCW, null);
              t3 = progress.totalTimeInMicroseconds;
              A.expect(t3, B._OrderingMatcher_kMx, null);
              $async$goto = 6;
              return A._asyncAwait(A.Future_wait(tasks, false, t1), $async$call$1);
            case 6:
              // returning from await.
              end = A.PerfCounterSnapshot$(counter);
              A.expect(end.totalCount, new A._OrderingMatcher(t2, true, false, true, "a value greater than or equal to", true), null);
              A.expect(end.totalErrors, B._OrderingMatcher_HCW, null);
              A.expect(end.totalTimeInMicroseconds, new A._OrderingMatcher(t3, true, false, true, "a value greater than or equal to", true), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 108
  };
  A.execute___closure44.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_0_1_50), new A.execute____closure74(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure74.prototype = {
    call$1(p) {
      return this.$call$body$execute____closure23(type$.TestWorkerPool._as(p));
    },
    $call$body$execute____closure23(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], n, ex, t1, exception, $async$exception, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 2;
              return A._asyncAwait(p.delayed_80ms$1(-1), $async$call$1);
            case 2:
              // returning from await.
              $async$temp1.expect($async$result, -1, null);
              p.stop$0();
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(p.delayed_80ms$1(-1), $async$call$1);
            case 7:
              // returning from await.
              n = $async$result;
              t1 = A.unexpectedSuccess("delayed()", n);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronError._is(t1)) {
                ex = t1;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("cannot accept new requests"))), null);
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("stopped"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 6:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute___closure45.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_0_2_50), new A.execute____closure73(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure73.prototype = {
    call$1(p) {
      return this.$call$body$execute____closure22(type$.TestWorkerPool._as(p));
    },
    $call$body$execute____closure22(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], n, ex, exception, t1, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = p.start$0();
              $async$goto = 2;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$1);
            case 2:
              // returning from await.
              t1 = p._workers;
              A.expect(t1.length, B._OrderingMatcher_kMx, null);
              $async$goto = 3;
              return A._asyncAwait(p.delayed_80ms$1(-1), $async$call$1);
            case 3:
              // returning from await.
              n = $async$result;
              A.expect(n, -1, null);
              p.stop$0();
              A.expect(p._worker_pool$_stopped, B.C__IsTrue, null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, type$.dynamic), $async$call$1);
            case 4:
              // returning from await.
              A.expect(t1.length, B._OrderingMatcher_HCW, null);
              $async$handler = 6;
              $async$goto = 9;
              return A._asyncAwait(p.delayed_80ms$1(-1), $async$call$1);
            case 9:
              // returning from await.
              n = $async$result;
              t1 = A.unexpectedSuccess("delayed()", n);
              throw A.wrapException(t1);
              $async$handler = 1;
              // goto after finally
              $async$goto = 8;
              break;
            case 6:
              // catch
              $async$handler = 5;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (type$.SquadronError._is(t1)) {
                ex = t1;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("cannot accept new requests"))), null);
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("stopped"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 8;
              break;
            case 5:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 8:
              // after finally
              p.start$0();
              $async$goto = 10;
              return A._asyncAwait(p.delayed_80ms$1(-2), $async$call$1);
            case 10:
              // returning from await.
              n = $async$result;
              A.expect(n, -2, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute___closure46.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_1_3_1), new A.execute____closure72(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure72.prototype = {
    call$1(p) {
      return this.$call$body$execute____closure21(type$.TestWorkerPool._as(p));
    },
    $call$body$execute____closure21(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t3, i, t1, t2, count, digits, tasks;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = p.concurrencySettings;
              t2 = t1.maxWorkers;
              count = 2 * (t2 * t1.maxParallel) + t2;
              digits = A._setArrayType([], type$.JSArray_int);
              tasks = A._setArrayType([], type$.JSArray_Future_dynamic);
              for (t1 = B.JSArray_methods.get$add(digits), t2 = type$.void_Function_int, t3 = type$.dynamic, i = 0; i < count; ++i)
                B.JSArray_methods.add$1(tasks, p.delayed_80ms$1(i).then$1$1(t2._as(t1), t3));
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_80000, null, t3), $async$call$1);
            case 2:
              // returning from await.
              p.stop$0();
              A.expect(p._worker_pool$_stopped, B.C__IsTrue, null);
              t1 = p._worker_pool$_queue;
              A.expect(t1.get$length(0), B._OrderingMatcher_PXr, null);
              A.expect(digits, new A._HasLength(A.wrapMatcher(new A._OrderingMatcher(count, true, true, false, "a value less than or equal to", true))), null);
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(tasks, false, t3), $async$call$1);
            case 3:
              // returning from await.
              A.expect(p._worker_pool$_stopped, B.C__IsTrue, null);
              A.expect(t1.get$length(0), B._OrderingMatcher_HCW, null);
              A.expect(digits, new A._HasLength(A.wrapMatcher(count)), null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, t3), $async$call$1);
            case 4:
              // returning from await.
              A.expect(p._workers.length, B._OrderingMatcher_HCW, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute___closure47.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_1_3_1), new A.execute____closure71(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute____closure71.prototype = {
    call$1(p) {
      return this.$call$body$execute____closure20(type$.TestWorkerPool._as(p));
    },
    $call$body$execute____closure20(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], duration, futures, exception, t1, t2, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = p.start$0();
              t2 = type$.void;
              $async$goto = 2;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, t2), $async$call$1);
            case 2:
              // returning from await.
              duration = new A.Duration(800000);
              A.Timer_Timer(new A.Duration(B.JSNumber_methods.round$0(duration._duration * 0.5)), new A.execute_____closure52(p));
              $async$handler = 4;
              futures = A._setArrayType([p.cpu$1$ms(B.JSInt_methods._tdivFast$1(duration._duration, 1000)), p.cpu$1$ms(B.JSInt_methods._tdivFast$1(duration._duration, 1000)), p.cpu$1$ms(B.JSInt_methods._tdivFast$1(duration._duration, 1000)), p.cpu$1$ms(B.JSInt_methods._tdivFast$1(duration._duration, 1000)), p.cpu$1$ms(B.JSInt_methods._tdivFast$1(duration._duration, 1000)), p.cpu$1$ms(B.JSInt_methods._tdivFast$1(duration._duration, 1000))], type$.JSArray_Future_void);
              $async$goto = 7;
              return A._asyncAwait(A.Future_wait(futures, false, t2), $async$call$1);
            case 7:
              // returning from await.
              $async$handler = 1;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              if (!(A.unwrapException($async$exception) instanceof A.TaskTerminatedException))
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 6:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute_____closure52.prototype = {
    call$0() {
      var t1 = this.p;
      t1.terminate$0();
      A.expect(t1._worker_pool$_stopped, B.C__IsTrue, null);
    },
    $signature: 2
  };
  A.execute___closure48.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- With cancelOnError = false", new A.execute____closure63(t1));
      t1.test$2("- With cancelOnError = true", new A.execute____closure64(t1));
      t1.test$2('- With "await for"', new A.execute____closure65(t1));
      t1.test$2('- Throwing in "await for"', new A.execute____closure66(t1));
      t1.test$2("- Pause & resume", new A.execute____closure67(t1));
      t1.test$2("- Pause/resume/cancel with a StreamTask", new A.execute____closure68(t1));
      t1.test$2("- Early cancelation", new A.execute____closure69(t1));
      t1.test$2("- Streaming task early cancelation", new A.execute____closure70(t1));
    },
    $signature: 1
  };
  A.execute____closure63.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure51(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure51.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure47(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure47(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        numbers, errors, messages, t1, token;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.Zone__current;
              token = new A.CancelableToken(new A._AsyncCompleter(new A._Future(t1, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException));
              t1 = new A._Future(t1, type$._Future_dynamic);
              numbers = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_SquadronException);
              p.infiniteWithErrors$1(token).listen$4$cancelOnError$onDone$onError(type$.void_Function_int._as(B.JSArray_methods.get$add(numbers)), false, type$.void_Function_$opt_dynamic._as(new A._AsyncCompleter(t1, type$._AsyncCompleter_dynamic).get$complete()), new A.execute______closure47(errors, token));
              $async$goto = 2;
              return A._asyncAwait(t1, $async$call$1);
            case 2:
              // returning from await.
              A.expect(numbers, new A._HasLength(A.wrapMatcher(new A._OrderingMatcher(6, false, false, true, "a value greater than", true))), null);
              A.expect(errors, new A._HasLength(A.wrapMatcher(new A._OrderingMatcher(3, false, false, true, "a value greater than", true))), null);
              t1 = type$.MappedListIterable_SquadronException_String;
              messages = new A.MappedListIterable(errors, type$.String_Function_SquadronException._as(new A.execute______closure48()), t1);
              t1 = t1._eval$1("bool(ListIterable.E)");
              A.expect(messages.super$Iterable$where(0, t1._as(new A.execute______closure49())), new A._HasLength(A.wrapMatcher(3)), null);
              A.expect(messages.super$Iterable$where(0, t1._as(new A.execute______closure50())), new A._HasLength(A.wrapMatcher(1)), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute______closure47.prototype = {
    call$1(ex) {
      var t1 = this.errors;
      B.JSArray_methods.add$1(t1, type$.SquadronException._as(ex));
      if (t1.length >= 3)
        this.token.cancel$1(new A.CanceledException("forced"));
    },
    $signature: 33
  };
  A.execute______closure48.prototype = {
    call$1(e) {
      return type$.SquadronException._as(e).get$message().toLowerCase();
    },
    $signature: 244
  };
  A.execute______closure49.prototype = {
    call$1(m) {
      return B.JSString_methods.contains$1(A._asString(m), "error #");
    },
    $signature: 8
  };
  A.execute______closure50.prototype = {
    call$1(m) {
      return B.JSString_methods.contains$1(A._asString(m), "forced");
    },
    $signature: 8
  };
  A.execute____closure64.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure50(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure50.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure46(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure46(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], res, ex, t2, exception, t1, numbers, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSArray_int;
              numbers = A._setArrayType([], t1);
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(p.infiniteWithErrors$0().listen$2$cancelOnError(type$.void_Function_int._as(J.get$add$ax(numbers)), true).asFuture$1$0(type$.dynamic), $async$call$1);
            case 6:
              // returning from await.
              res = $async$result;
              t2 = A.unexpectedSuccess("infiniteWithErrors()", res);
              throw A.wrapException(t2);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.WorkerException) {
                ex = t2;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("error #\\d+"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              A.expect(numbers, A._setArrayType([0, 1, 2], t1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure65.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure49(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure49.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure45(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure45(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$next = [], number, ex, t2, exception, t1, numbers, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSArray_int;
              numbers = A._setArrayType([], t1);
              $async$handler = 3;
              t2 = new A._StreamIterator(A.checkNotNullable(p.infiniteWithErrors$0(), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 6;
            case 9:
              // for condition
              $async$goto = 11;
              return A._asyncAwait(t2.moveNext$0(), $async$call$1);
            case 11:
              // returning from await.
              if (!$async$result) {
                // goto after for
                $async$goto = 10;
                break;
              }
              number = t2.get$current();
              J.add$1$ax(numbers, number);
              // goto for condition
              $async$goto = 9;
              break;
            case 10:
              // after for
              $async$next.push(8);
              // goto finally
              $async$goto = 7;
              break;
            case 6:
              // uncaught
              $async$next = [3];
            case 7:
              // finally
              $async$handler = 3;
              $async$goto = 12;
              return A._asyncAwait(t2.cancel$0(), $async$call$1);
            case 12:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 8:
              // after finally
              t2 = A.unexpectedSuccess("infiniteWithErrors()", null);
              throw A.wrapException(t2);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.WorkerException) {
                ex = t2;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("error #\\d+"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              A.expect(numbers, A._setArrayType([0, 1, 2], t1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure66.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure48(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure48.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure44(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure44(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$next = [], number, ex, t2, t3, exception, t1, numbers, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSArray_int;
              numbers = A._setArrayType([], t1);
              $async$handler = 3;
              t2 = new A._StreamIterator(A.checkNotNullable(p.infiniteWithErrors$0(), "stream", type$.Object), type$._StreamIterator_int);
              $async$handler = 6;
            case 9:
              // for condition
              $async$goto = 11;
              return A._asyncAwait(t2.moveNext$0(), $async$call$1);
            case 11:
              // returning from await.
              if (!$async$result) {
                // goto after for
                $async$goto = 10;
                break;
              }
              number = t2.get$current();
              if (J.get$length$asx(numbers) !== 0) {
                t3 = A.WorkerException$("Client-side exception", null, null);
                throw A.wrapException(t3);
              }
              J.add$1$ax(numbers, number);
              // goto for condition
              $async$goto = 9;
              break;
            case 10:
              // after for
              $async$next.push(8);
              // goto finally
              $async$goto = 7;
              break;
            case 6:
              // uncaught
              $async$next = [3];
            case 7:
              // finally
              $async$handler = 3;
              $async$goto = 12;
              return A._asyncAwait(t2.cancel$0(), $async$call$1);
            case 12:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 8:
              // after finally
              t2 = A.unexpectedSuccess("infiniteWithErrors()", null);
              throw A.wrapException(t2);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t2 = A.unwrapException($async$exception);
              if (t2 instanceof A.WorkerException) {
                ex = t2;
                A.expect(ex, new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("Client-side exception"))), null);
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              A.expect(numbers, A._setArrayType([0], t1), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure67.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure47(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure47.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure43(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure43(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t2, t3, t4, t1, numbers, errors, sub;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              numbers = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_SquadronException);
              sub = p.infiniteWithErrors$1(new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_CanceledException), type$._AsyncCompleter_CanceledException))).listen$3$cancelOnError$onError(type$.void_Function_int._as(B.JSArray_methods.get$add(numbers)), false, type$.void_Function_SquadronException._as(B.JSArray_methods.get$add(errors)));
              t1.paused = t1.countErrors = t1.countNumbers = 0;
              t2 = new A.execute_____closure_pause(t1, sub, numbers, errors);
              t3 = new A.execute_____closure_resume(t1, numbers, errors, sub);
              t3.call$0();
              sub.pause$0();
              A.expect(numbers, B.C__Empty, null);
              A.expect(errors, B.C__Empty, null);
              t4 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(320000), null, t4), $async$call$1);
            case 2:
              // returning from await.
              A.expect(numbers, B.C__Empty, null);
              A.expect(errors, B.C__Empty, null);
              t3.call$0();
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(320000), null, t4), $async$call$1);
            case 3:
              // returning from await.
              t2.call$0();
              t2.call$0();
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(320000), null, t4), $async$call$1);
            case 4:
              // returning from await.
              t3.call$0();
              $async$goto = 5;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(320000), null, t4), $async$call$1);
            case 5:
              // returning from await.
              t3.call$0();
              $async$goto = 6;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(320000), null, t4), $async$call$1);
            case 6:
              // returning from await.
              sub.cancel$0();
              A.expect(numbers, new A._HasLength(A.wrapMatcher(new A._OrderingMatcher(t1.countNumbers, false, false, true, "a value greater than", true))), null);
              A.expect(errors, new A._HasLength(A.wrapMatcher(new A._OrderingMatcher(t1.countErrors, false, false, true, "a value greater than", true))), null);
              A.expect(errors, new A._EveryElement(A.wrapMatcher(new A._IsNot(A.wrapMatcher(new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("by request"))))))), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute_____closure_pause.prototype = {
    call$0() {
      var t1, t2, t3, t4, t5, _this = this, _null = null,
        _s20_ = "a value greater than";
      _this.sub.pause$0();
      t1 = _this._box_1;
      t2 = t1.paused;
      t3 = _this.numbers;
      t4 = t1.countNumbers;
      t5 = _this.errors;
      if (t2 === 0) {
        A.expect(t3, new A._HasLength(A.wrapMatcher(new A._OrderingMatcher(t4, false, false, true, _s20_, true))), _null);
        A.expect(t5, new A._HasLength(A.wrapMatcher(new A._OrderingMatcher(t1.countErrors, false, false, true, _s20_, true))), _null);
        t1.countNumbers = t3.length;
        t1.countErrors = t5.length;
      } else {
        A.expect(t3, new A._HasLength(A.wrapMatcher(t4)), _null);
        A.expect(t5, new A._HasLength(A.wrapMatcher(t1.countErrors)), _null);
      }
      ++t1.paused;
    },
    $signature: 2
  };
  A.execute_____closure_resume.prototype = {
    call$0() {
      var t2, _this = this,
        t1 = _this._box_1;
      A.expect(_this.numbers, new A._HasLength(A.wrapMatcher(t1.countNumbers)), null);
      A.expect(_this.errors, new A._HasLength(A.wrapMatcher(t1.countErrors)), null);
      _this.sub.resume$0();
      t2 = t1.paused;
      if (t2 > 0)
        t1.paused = t2 - 1;
    },
    $signature: 2
  };
  A.execute____closure68.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, B.ConcurrencySettings_1_1_1), new A.execute_____closure46(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure46.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure42(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure42(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t6, t7, sub0, numbers1, errors1, sub1, numbersCount0, errorsCount0, t1, numbers0, t2, errors0, t3, t4, token0, t5, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSArray_int;
              numbers0 = A._setArrayType([], t1);
              t2 = type$.JSArray_SquadronException;
              errors0 = A._setArrayType([], t2);
              t3 = type$._Future_CanceledException;
              t4 = type$._AsyncCompleter_CanceledException;
              token0 = new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t3), t4));
              t5 = p.infiniteWithErrorsTask$1(token0).__WorkerStreamTask__controller_F;
              t5 === $ && A.throwLateFieldNI("_controller");
              t5 = t5.__ForwardStreamController__controller_F;
              t5 === $ && A.throwLateFieldNI("_controller");
              t6 = type$.void_Function_int;
              t7 = type$.void_Function_SquadronException;
              sub0 = new A._ControllerStream(t5, A._instanceType(t5)._eval$1("_ControllerStream<1>")).listen$3$cancelOnError$onError(t6._as(B.JSArray_methods.get$add(numbers0)), false, t7._as(B.JSArray_methods.get$add(errors0)));
              numbers1 = A._setArrayType([], t1);
              errors1 = A._setArrayType([], t2);
              t4 = p.infiniteWithErrorsTask$1(new A.CancelableToken(new A._AsyncCompleter(new A._Future($.Zone__current, t3), t4))).__WorkerStreamTask__controller_F;
              t4 === $ && A.throwLateFieldNI("_controller");
              t4 = t4.__ForwardStreamController__controller_F;
              t4 === $ && A.throwLateFieldNI("_controller");
              sub1 = new A._ControllerStream(t4, A._instanceType(t4)._eval$1("_ControllerStream<1>")).listen$3$cancelOnError$onError(t6._as(B.JSArray_methods.get$add(numbers1)), false, t7._as(B.JSArray_methods.get$add(errors1)));
              sub0.pause$0();
              sub1.pause$0();
              t7 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, t7), $async$call$1);
            case 2:
              // returning from await.
              A.expect(numbers0, B.C__Empty, null);
              A.expect(errors0, B.C__Empty, null);
              A.expect(numbers1, B.C__Empty, null);
              A.expect(errors1, B.C__Empty, null);
              sub0.resume$0();
              sub1.resume$0();
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, t7), $async$call$1);
            case 3:
              // returning from await.
              A.expect(numbers0, B.C__NotEmpty, null);
              A.expect(errors0, B.C__NotEmpty, null);
              A.expect(numbers1, B.C__Empty, null);
              A.expect(errors1, B.C__Empty, null);
              sub1.pause$0();
              $async$goto = 4;
              return A._asyncAwait(token0.cancel$1(new A.CanceledException("by token #0")), $async$call$1);
            case 4:
              // returning from await.
              numbersCount0 = numbers0.length;
              errorsCount0 = errors0.length;
              A.expect(numbers1, B.C__Empty, null);
              A.expect(errors1, B.C__Empty, null);
              $async$goto = 5;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(320000), null, t7), $async$call$1);
            case 5:
              // returning from await.
              A.expect(numbers0, new A._HasLength(A.wrapMatcher(numbersCount0)), null);
              ++errorsCount0;
              A.expect(errors0, new A._HasLength(A.wrapMatcher(errorsCount0)), null);
              A.expect(B.JSArray_methods.get$last(errors0), new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("by token #0"))), null);
              A.expect(numbers1, B.C__Empty, null);
              A.expect(errors1, B.C__Empty, null);
              sub1.resume$0();
              $async$goto = 6;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(320000), null, t7), $async$call$1);
            case 6:
              // returning from await.
              A.expect(numbers0, new A._HasLength(A.wrapMatcher(numbersCount0)), null);
              A.expect(errors0, new A._HasLength(A.wrapMatcher(errorsCount0)), null);
              A.expect(numbers1, B.C__NotEmpty, null);
              A.expect(errors1, B.C__NotEmpty, null);
              $async$goto = 7;
              return A._asyncAwait(A.Future_wait(A._setArrayType([sub0.cancel$0(), sub1.cancel$0()], type$.JSArray_Future_void), false, type$.void), $async$call$1);
            case 7:
              // returning from await.
              $async$temp1 = A;
              $async$goto = 8;
              return A._asyncAwait(p.getPendingInfiniteWithErrors$0(), $async$call$1);
            case 8:
              // returning from await.
              $async$temp1.expect($async$result, B._OrderingMatcher_HCW, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure69.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure45(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure45.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure41(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure41(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        numbers, errors, task, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              numbers = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_SquadronException);
              task = p.infiniteWithErrorsTask$0();
              t1 = task.__WorkerStreamTask__controller_F;
              t1 === $ && A.throwLateFieldNI("_controller");
              t1 = t1.__ForwardStreamController__controller_F;
              t1 === $ && A.throwLateFieldNI("_controller");
              new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>")).listen$3$cancelOnError$onError(type$.void_Function_int._as(B.JSArray_methods.get$add(numbers)), false, type$.void_Function_SquadronException._as(B.JSArray_methods.get$add(errors))).cancel$0();
              A.expect(task._scheduled == null && task._canceled == null, B.C__IsTrue, null);
              A.expect(task.get$isRunning(), B.C__IsFalse, null);
              A.expect(task._canceled != null, B.C__IsFalse, null);
              A.expect(task.get$isFinished(), B.C__IsFalse, null);
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(new A.Duration(160000), null, type$.dynamic), $async$call$1);
            case 2:
              // returning from await.
              A.expect(task._scheduled == null && task._canceled == null, B.C__IsFalse, null);
              A.expect(task.get$isRunning(), B.C__IsFalse, null);
              A.expect(task._canceled != null, B.C__IsFalse, null);
              A.expect(task.get$isFinished(), B.C__IsTrue, null);
              A.expect(numbers, B.C__Empty, null);
              A.expect(errors, B.C__Empty, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute____closure70.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.TestWorkerPool$($async$self.tc, null), new A.execute_____closure44(), type$.TestWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure44.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure40(type$.TestWorkerPool._as(p));
    },
    $call$body$execute_____closure40(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        sub, numbers, errors, task, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              numbers = A._setArrayType([], type$.JSArray_int);
              errors = A._setArrayType([], type$.JSArray_SquadronException);
              task = p.infiniteWithErrorsTask$0();
              t1 = task.__WorkerStreamTask__controller_F;
              t1 === $ && A.throwLateFieldNI("_controller");
              t1 = t1.__ForwardStreamController__controller_F;
              t1 === $ && A.throwLateFieldNI("_controller");
              task.cancel$0();
              A.expect(task._scheduled == null && task._canceled == null, B.C__IsFalse, null);
              A.expect(task.get$isRunning(), B.C__IsFalse, null);
              A.expect(task._canceled != null, B.C__IsTrue, null);
              A.expect(task.get$isFinished(), B.C__IsFalse, null);
              sub = new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>")).listen$3$cancelOnError$onError(type$.void_Function_int._as(B.JSArray_methods.get$add(numbers)), false, type$.void_Function_SquadronException._as(B.JSArray_methods.get$add(errors)));
              $async$goto = 2;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_20000, null, type$.dynamic), $async$call$1);
            case 2:
              // returning from await.
              A.expect(numbers, B.C__Empty, null);
              A.expect(errors, new A._HasLength(A.wrapMatcher(1)), null);
              A.expect(B.JSArray_methods.get$first(errors), new A.TypeMatcher(type$.TypeMatcher_TaskCanceledException), null);
              sub.cancel$0();
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 4
  };
  A.execute_closure.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- GITHUB ISSUES", new A.execute__closure(t1));
    },
    $signature: 2
  };
  A.execute__closure.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.group$2("- #8 - Exceptions from Streams must come through onError", new A.execute___closure(t1));
      t1.group$2("- #23 - Handle case where Map<int, _> is received as Map<JSString, _> in wasm worker", new A.execute___closure0(t1));
      t1.group$2("- #70 - ForwardStreamController leak", new A.execute___closure1(t1));
    },
    $signature: 1
  };
  A.execute___closure.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Using a Squadron worker", new A.execute____closure4(t1));
      t1.test$2("- Using a worker pool", new A.execute____closure5(t1));
    },
    $signature: 1
  };
  A.execute____closure4.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.IssuesWorker$($async$self.tc, null), new A.execute_____closure5(), type$.IssuesWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure5.prototype = {
    call$1(w) {
      return this.$call$body$execute_____closure5(type$.IssuesWorker._as(w));
    },
    $call$body$execute_____closure5(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1, results, errors, t2, t3, t4;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(w.start$0(), $async$call$1);
            case 2:
              // returning from await.
              t1 = new A._Future($.Zone__current, type$._Future_dynamic);
              results = [];
              errors = [];
              t2 = w.issue_8$1(A._setArrayType([0, 1, 2, 3, 4], type$.JSArray_int));
              t3 = type$.void_Function_dynamic;
              t4 = t3._as(B.JSArray_methods.get$add(results));
              t3 = t3._as(B.JSArray_methods.get$add(errors));
              t2.listen$4$cancelOnError$onDone$onError(t4, false, type$.void_Function_$opt_dynamic._as(new A._AsyncCompleter(t1, type$._AsyncCompleter_dynamic).get$complete()), t3);
              $async$goto = 3;
              return A._asyncAwait(t1, $async$call$1);
            case 3:
              // returning from await.
              t1 = type$.String;
              t3 = type$.int;
              A.expect(results, A._setArrayType([A.LinkedHashMap_LinkedHashMap$_literal(["id", 1, "num", 0], t1, t3), A.LinkedHashMap_LinkedHashMap$_literal(["id", 2, "num", 1], t1, t3)], type$.JSArray_Map_String_int), null);
              A.expect(errors, new A._HasLength(A.wrapMatcher(1)), null);
              A.expect(B.JSArray_methods.get$first(errors), new A.TypeMatcher(type$.TypeMatcher_WorkerException), null);
              A.expect(B.JSArray_methods.get$first(errors), new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("issue 8 error message"))), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 62
  };
  A.execute____closure5.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.IssuesWorkerPool$($async$self.tc), new A.execute_____closure4(), type$.IssuesWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure4.prototype = {
    call$1(p) {
      return this.$call$body$execute_____closure4(type$.IssuesWorkerPool._as(p));
    },
    $call$body$execute_____closure4(p) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        results, errors, t2, t3, t4, t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = p.start$0();
              $async$goto = 2;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$call$1);
            case 2:
              // returning from await.
              t1 = new A._Future($.Zone__current, type$._Future_dynamic);
              results = [];
              errors = [];
              t2 = p.issue_8$1(A._setArrayType([0, 1, 2, 3, 4], type$.JSArray_int));
              t3 = type$.void_Function_dynamic;
              t4 = t3._as(B.JSArray_methods.get$add(results));
              t3 = t3._as(B.JSArray_methods.get$add(errors));
              t2.listen$3$onDone$onError(t4, type$.void_Function_$opt_dynamic._as(new A._AsyncCompleter(t1, type$._AsyncCompleter_dynamic).get$complete()), t3);
              $async$goto = 3;
              return A._asyncAwait(t1, $async$call$1);
            case 3:
              // returning from await.
              t1 = type$.String;
              t3 = type$.int;
              A.expect(results, A._setArrayType([A.LinkedHashMap_LinkedHashMap$_literal(["id", 1, "num", 0], t1, t3), A.LinkedHashMap_LinkedHashMap$_literal(["id", 2, "num", 1], t1, t3)], type$.JSArray_Map_String_int), null);
              A.expect(errors, new A._HasLength(A.wrapMatcher(1)), null);
              A.expect(B.JSArray_methods.get$first(errors), new A.TypeMatcher(type$.TypeMatcher_WorkerException), null);
              A.expect(B.JSArray_methods.get$first(errors), new A.Reported("Error that reported", "error message", A.wrapMatcher(A._MatchesRegExp$("issue 8 error message"))), null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 126
  };
  A.execute___closure0.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- Using a Squadron worker", new A.execute____closure2(t1));
      t1.test$2("- Using a worker pool", new A.execute____closure3(t1));
    },
    $signature: 1
  };
  A.execute____closure2.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.IssuesWorker$($async$self.tc, null), new A.execute_____closure3(), type$.IssuesWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure3.prototype = {
    call$1(w) {
      return this.$call$body$execute_____closure3(type$.IssuesWorker._as(w));
    },
    $call$body$execute_____closure3(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSArray_int;
              $async$goto = 2;
              return A._asyncAwait(w.issue_23$2$columnWidths(A._setArrayType([0], t1), B.Map_JEAD0), $async$call$1);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(w.issue_23$2$columnWidths(A._setArrayType([0], t1), B.Map_s4j9M), $async$call$1);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(w.issue_23$2$columnWidths(A._setArrayType([0], t1), A.LinkedHashMap_LinkedHashMap$_literal([-12, 125], type$.int, type$.double)), $async$call$1);
            case 4:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 62
  };
  A.execute____closure3.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.IssuesWorkerPool$($async$self.tc), new A.execute_____closure2(), type$.IssuesWorkerPool, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure2.prototype = {
    call$1(w) {
      return this.$call$body$execute_____closure2(type$.IssuesWorkerPool._as(w));
    },
    $call$body$execute_____closure2(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSArray_int;
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(A._setArrayType([w.issue_23$2$columnWidths(A._setArrayType([0], t1), B.Map_JEAD0), w.issue_23$2$columnWidths(A._setArrayType([0], t1), B.Map_s4j9M), w.issue_23$2$columnWidths(A._setArrayType([0], t1), A.LinkedHashMap_LinkedHashMap$_literal([-12, 125], type$.int, type$.double))], type$.JSArray_Future_nullable_ByteBuffer), false, type$.nullable_ByteBuffer), $async$call$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 126
  };
  A.execute___closure1.prototype = {
    call$0() {
      var t1 = this.tc;
      t1.test$2("- sendRequest should clean up active connections", new A.execute____closure(t1));
      t1.test$2("- sendStreamingRequest should clean up active connections", new A.execute____closure0(t1));
      t1.test$2("- Early canceled streams should clean up active connections", new A.execute____closure1(t1));
    },
    $signature: 1
  };
  A.execute____closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.IssuesWorker$($async$self.tc, null), new A.execute_____closure1(), type$.IssuesWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure1.prototype = {
    call$1(w) {
      return this.$call$body$execute_____closure1(type$.IssuesWorker._as(w));
    },
    $call$body$execute_____closure1(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1, initialCount, t2, i, finalCount;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(w.start$0(), $async$call$1);
            case 2:
              // returning from await.
              t1 = w.get$_stats();
              initialCount = t1.get$snapshot().activeConnections;
              A.expect(initialCount, B._OrderingMatcher_HCW, null);
              t2 = type$.String, i = 0;
            case 3:
              // for condition
              if (!(i < 10)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $async$goto = 6;
              return A._asyncAwait(w.send$1(9999).then$1$1($.$get$Squadron__converter().value$1$0(t2), t2), $async$call$1);
            case 6:
              // returning from await.
            case 4:
              // for update
              ++i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$goto = 7;
              return A._asyncAwait(A.Future_Future$delayed(A.Duration$(0, 0, 0, 100, 0), null, type$.dynamic), $async$call$1);
            case 7:
              // returning from await.
              finalCount = t1.get$snapshot().activeConnections;
              A.expect(finalCount, new A._DeepMatcher(initialCount, 100), "Memory leak detected: " + (finalCount - initialCount) + " connections retained after 10 requests");
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 62
  };
  A.execute____closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.IssuesWorker$($async$self.tc, null), new A.execute_____closure0(), type$.IssuesWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure0.prototype = {
    call$1(w) {
      return this.$call$body$execute_____closure0(type$.IssuesWorker._as(w));
    },
    $call$body$execute_____closure0(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$handler = 1, $async$errorStack = [], $async$next = [], values, value, t1, initialCount, t2, finalCount;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(w.start$0(), $async$call$1);
            case 2:
              // returning from await.
              t1 = w.get$_stats();
              initialCount = t1.get$snapshot().activeConnections;
              A.expect(initialCount, B._OrderingMatcher_HCW, null);
              values = [];
              t2 = new A._StreamIterator(A.checkNotNullable(w.issue_8$1(A._setArrayType([0, 1], type$.JSArray_int)), "stream", type$.Object), type$._StreamIterator_Map_String_int);
              $async$handler = 3;
            case 6:
              // for condition
              $async$goto = 8;
              return A._asyncAwait(t2.moveNext$0(), $async$call$1);
            case 8:
              // returning from await.
              if (!$async$result) {
                // goto after for
                $async$goto = 7;
                break;
              }
              value = t2.get$current();
              J.add$1$ax(values, value);
              // goto for condition
              $async$goto = 6;
              break;
            case 7:
              // after for
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [1];
            case 4:
              // finally
              $async$handler = 1;
              $async$goto = 9;
              return A._asyncAwait(t2.cancel$0(), $async$call$1);
            case 9:
              // returning from await.
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              $async$goto = 10;
              return A._asyncAwait(A.Future_Future$delayed(A.Duration$(0, 0, 0, 100, 0), null, type$.dynamic), $async$call$1);
            case 10:
              // returning from await.
              finalCount = t1.get$snapshot().activeConnections;
              A.expect(finalCount, new A._DeepMatcher(initialCount, 100), "Memory leak detected: " + (finalCount - initialCount) + " connections retained after streaming request");
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 62
  };
  A.execute____closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Using_useAsync(A.IssuesWorker$($async$self.tc, null), new A.execute_____closure(), type$.IssuesWorker, type$.Null), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.execute_____closure.prototype = {
    call$1(w) {
      return this.$call$body$execute_____closure(type$.IssuesWorker._as(w));
    },
    $call$body$execute_____closure(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        t1, initialCount, finalCount, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(w.start$0(), $async$call$1);
            case 2:
              // returning from await.
              t1 = w.get$_stats();
              initialCount = t1.get$snapshot().activeConnections;
              A.expect(initialCount, B._OrderingMatcher_HCW, null);
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(w.issue_8$1(A._setArrayType([0, 1, 2, 3, 4], type$.JSArray_int)).get$first(0), $async$call$1);
            case 3:
              // returning from await.
              $async$temp1.expect($async$result, A.LinkedHashMap_LinkedHashMap$_literal(["id", 1, "num", 0], type$.String, type$.int), null);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(A.Duration$(0, 0, 0, 200, 0), null, type$.dynamic), $async$call$1);
            case 4:
              // returning from await.
              finalCount = t1.get$snapshot().activeConnections;
              A.expect(finalCount, new A._DeepMatcher(initialCount, 100), "Memory leak detected: " + (finalCount - initialCount) + " connections retained after early stream cancellation");
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 62
  };
  A._checkWebWorkers_closure.prototype = {
    call$1(u) {
      return type$.Uri._as(u).get$scheme() !== "data";
    },
    $signature: 247
  };
  A.CacheStat.prototype = {};
  A.CacheWorker.prototype = {
    getStartArgs$0() {
      return null;
    },
    containsKey$1(key) {
      var t1 = type$.bool;
      return this.send$2$args(2, [key]).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    },
    getCacheStats$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.CacheStat),
        $async$returnValue, $async$self = this, t1, t2, $async$temp1;
      var $async$getCacheStats$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = type$.List_dynamic;
              $async$goto = 3;
              return A._asyncAwait($async$self.send$1(4), $async$getCacheStats$0);
            case 3:
              // returning from await.
              t1 = $async$temp1._as($async$result);
              t2 = J.getInterceptor$asx(t1);
              $async$returnValue = new A.CacheStat(B.JSNumber_methods.toInt$0(A._asNum(t2.$index(t1, 0))), B.JSNumber_methods.toInt$0(A._asNum(t2.$index(t1, 1))), B.JSNumber_methods.toInt$0(A._asNum(t2.$index(t1, 2))), B.JSNumber_methods.toInt$0(A._asNum(t2.$index(t1, 3))), B.JSNumber_methods.toInt$0(A._asNum(t2.$index(t1, 4))));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getCacheStats$0, $async$completer);
    }
  };
  A._CacheWorker_Worker_WorkerVersion.prototype = {};
  A.City.prototype = {
    toString$0(_) {
      return "City(" + this.name + ", " + A.S(this._country) + ")";
    }
  };
  A.CityMarshaler.prototype = {
    marshal$2(data, context) {
      var t1 = type$.List_dynamic,
        res = context.getReference$1$1(data, t1);
      if (res != null)
        return res;
      res = [data.zip, data.name, null];
      context.setReference$1$2(data, res, t1);
      t1 = data._country;
      if (t1 != null)
        B.JSArray_methods.$indexSet(res, 2, B.C_CountryMarshaler.marshal$2(t1, context));
      return res;
    },
    unmarshal$2(data, context) {
      var t2,
        t1 = type$.City,
        res = context.getReference$1$1(data, t1);
      if (res != null)
        return res;
      t2 = J.getInterceptor$asx(data);
      res = new A.City(A._asString(t2.$index(data, 0)), A._asString(t2.$index(data, 1)), null);
      context.setReference$1$2(data, res, t1);
      res._country = B.C_CountryMarshaler.unmarshal$2(type$.List_dynamic._as(t2.$index(data, 2)), context);
      return res;
    }
  };
  A.main_$setStatus.prototype = {
    call$1($status) {
      this.consoleStatus.textContent = $status;
    },
    $signature: 127
  };
  A.main_closure.prototype = {
    call$1(m) {
      var t1, _this = this,
        msg = J.toString$0$(A.dartify(m.data));
      if (msg === "@@READY@@") {
        t1 = _this._box_0.testRunnerCompleter;
        if ((t1.future._state & 30) === 0)
          t1.complete$0();
      } else if (msg === "@@STARTED@@")
        _this.cancelButton.disabled = false;
      else if (msg === "@@DONE@@")
        _this.cancelButton.disabled = true;
      else
        _this.$$setStatus.call$1(msg);
    },
    $signature: 27
  };
  A.main_$setPlatformButtons.prototype = {
    call$2$runner$workers(runner, workers) {
      var t2, workersPlatform, _this = this, _s2_ = "on", _s3_ = "off",
        runnerPlatform = runner == null ? _this._box_0.runnerPlatform : runner,
        t1 = _this._box_0;
      t1.runnerPlatform = runnerPlatform;
      t2 = runnerPlatform === B.SquadronPlatformType_JavaScript_js ? _s2_ : _s3_;
      _this.jsRunner.className = t2;
      t2 = t1.runnerPlatform === B.SquadronPlatformType_Dqj ? _s2_ : _s3_;
      _this.wasmRunner.className = t2;
      workersPlatform = workers == null ? t1.workersPlatform : workers;
      t1.workersPlatform = workersPlatform;
      t2 = workersPlatform === B.SquadronPlatformType_JavaScript_js ? _s2_ : _s3_;
      _this.jsWorkers.className = t2;
      t1 = t1.workersPlatform === B.SquadronPlatformType_Dqj ? _s2_ : _s3_;
      _this.wasmWorkers.className = t1;
    },
    call$0() {
      return this.call$2$runner$workers(null, null);
    },
    call$1$workers(workers) {
      return this.call$2$runner$workers(null, workers);
    },
    call$1$runner(runner) {
      return this.call$2$runner$workers(runner, null);
    },
    $signature: 249
  };
  A.main_closure0.prototype = {
    call$1(_) {
      return this.$$setPlatformButtons.call$1$runner(B.SquadronPlatformType_JavaScript_js);
    },
    $signature: 27
  };
  A.main_closure1.prototype = {
    call$1(_) {
      return this.$$setPlatformButtons.call$1$runner(B.SquadronPlatformType_Dqj);
    },
    $signature: 27
  };
  A.main_closure2.prototype = {
    call$1(_) {
      return this.$$setPlatformButtons.call$1$workers(B.SquadronPlatformType_JavaScript_js);
    },
    $signature: 27
  };
  A.main_closure3.prototype = {
    call$1(_) {
      return this.$$setPlatformButtons.call$1$workers(B.SquadronPlatformType_Dqj);
    },
    $signature: 27
  };
  A.main_$getTestRunnerUrl.prototype = {
    call$0() {
      var t1 = this._box_0;
      return "test_runner_" + A._extension_0_get_code(t1.runnerPlatform) + "2" + A._extension_0_get_code(t1.workersPlatform) + ".html?ts=" + Date.now();
    },
    $signature: 18
  };
  A.main_$launch.prototype = {
    call$1(_) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, testIds, t1, entry, t2;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.promiseToFuture(A._asJSObject(init.G.loadFragments()), type$.nullable_Object), $async$call$1);
            case 2:
              // returning from await.
              testIds = A._setArrayType([], type$.JSArray_String);
              for (t1 = $async$self.tests, t1 = new A.LinkedHashMapEntriesIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapEntriesIterable<1,2>")).get$iterator(0); t1.moveNext$0();) {
                entry = t1.__js_helper$_current;
                if (A._asBool(entry.value.checked))
                  B.JSArray_methods.add$1(testIds, entry.key);
              }
              if (testIds.length !== 0) {
                t1 = new A._Future($.Zone__current, type$._Future_void);
                $async$self._box_0.testRunnerCompleter = new A._AsyncCompleter(t1, type$._AsyncCompleter_void);
                t2 = $async$self.testRunner;
                t1.then$1$1(new A.main_$launch_closure(t2, testIds), type$.Null);
                t2.src = $async$self.$$getTestRunnerUrl.call$0();
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 43
  };
  A.main_$launch_closure.prototype = {
    call$1(_) {
      A.NotifyChildExt_notify(this.testRunner, "@@RUN@@\n" + B.JSArray_methods.join$1(this.testIds, "\n"));
    },
    $signature: 118
  };
  A.main_$selectAll.prototype = {
    call$1(_) {
      var t1;
      for (t1 = this.tests, t1 = new A.LinkedHashMapValueIterator(t1, t1.__js_helper$_modifications, t1.__js_helper$_first, A._instanceType(t1)._eval$1("LinkedHashMapValueIterator<2>")); t1.moveNext$0();)
        t1.__js_helper$_current.checked = true;
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 43
  };
  A.main_$deselectAll.prototype = {
    call$1(_) {
      var t1;
      for (t1 = this.tests, t1 = new A.LinkedHashMapValueIterator(t1, t1.__js_helper$_modifications, t1.__js_helper$_first, A._instanceType(t1)._eval$1("LinkedHashMapValueIterator<2>")); t1.moveNext$0();)
        t1.__js_helper$_current.checked = false;
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 43
  };
  A.main_$toggle.prototype = {
    call$1(_) {
      var t1, t2;
      for (t1 = this.tests, t1 = new A.LinkedHashMapValueIterator(t1, t1.__js_helper$_modifications, t1.__js_helper$_first, A._instanceType(t1)._eval$1("LinkedHashMapValueIterator<2>")); t1.moveNext$0();) {
        t2 = t1.__js_helper$_current;
        t2.checked = !A._asBool(t2.checked);
      }
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 43
  };
  A.main_$cancel.prototype = {
    call$1(_) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              A.NotifyChildExt_notify($async$self.testRunner, "@@CANCEL@@");
              $async$self.cancelButton.disabled = true;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 43
  };
  A.main_$nextError.prototype = {
    call$1(_) {
      A.NotifyChildExt_notify(this.testRunner, "@@NEXT-ERROR@@");
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 43
  };
  A.main_$prevError.prototype = {
    call$1(_) {
      A.NotifyChildExt_notify(this.testRunner, "@@PREV-ERROR@@");
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 43
  };
  A.main_$clear.prototype = {
    call$1(_) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              A.NotifyChildExt_notify($async$self.testRunner, "@@CLEAR@@");
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 43
  };
  A.main_closure4.prototype = {
    call$2(a, b) {
      var t1 = type$.Record_2_String_label_and_int_tests;
      return B.JSString_methods.compareTo$1(t1._as(a)._0, t1._as(b)._0);
    },
    $signature: 251
  };
  A.SequenceReplacement.prototype = {
    get$length(_) {
      return this._sequence._string.length;
    }
  };
  A.Country.prototype = {
    toString$0(_) {
      return "Country(" + this.id + ", " + this.name + ")";
    }
  };
  A.CountryMarshaler.prototype = {
    marshal$2(data, context) {
      var t1 = type$.List_dynamic,
        res = context.getReference$1$1(data, t1);
      if (res != null)
        return res;
      res = [data.id, data.name];
      context.setReference$1$2(data, res, t1);
      return res;
    },
    unmarshal$2(data, context) {
      var t2, country,
        t1 = type$.Country,
        res = context.getReference$1$1(data, t1);
      if (res != null)
        return res;
      t2 = J.getInterceptor$asx(data);
      country = new A.Country(A.ConverterExt_get_converter(context).value$1$0(type$.int).call$1(t2.$index(data, 0)), A._asString(t2.$index(data, 1)));
      context.setReference$1$2(data, country, t1);
      return country;
    }
  };
  A.ErrorWorkerPool.prototype = {
    throwException$0() {
      return this.execute$1$1(new A.ErrorWorkerPool_throwException_closure(), type$.void);
    },
    throwWorkerException$0() {
      return this.execute$1$1(new A.ErrorWorkerPool_throwWorkerException_closure(), type$.void);
    },
    throwTaskTimeOutException$0() {
      return this.execute$1$1(new A.ErrorWorkerPool_throwTaskTimeOutException_closure(), type$.void);
    },
    throwCanceledException$0() {
      return this.execute$1$1(new A.ErrorWorkerPool_throwCanceledException_closure(), type$.void);
    },
    throwTestException$0() {
      return this.execute$1$1(new A.ErrorWorkerPool_throwTestException_closure(), type$.void);
    }
  };
  A.ErrorWorkerPool_closure.prototype = {
    call$1(exceptionManager) {
      return A.ErrorWorker$(this.context, type$.ExceptionManager._as(exceptionManager));
    },
    $signature: 252
  };
  A.ErrorWorkerPool_throwException_closure.prototype = {
    call$1(w) {
      return type$.ErrorWorker._as(w).throwException$0();
    },
    $signature: 63
  };
  A.ErrorWorkerPool_throwWorkerException_closure.prototype = {
    call$1(w) {
      return type$.ErrorWorker._as(w).throwWorkerException$0();
    },
    $signature: 63
  };
  A.ErrorWorkerPool_throwTaskTimeOutException_closure.prototype = {
    call$1(w) {
      return type$.ErrorWorker._as(w).throwTaskTimeOutException$0();
    },
    $signature: 63
  };
  A.ErrorWorkerPool_throwCanceledException_closure.prototype = {
    call$1(w) {
      return type$.ErrorWorker._as(w).throwCanceledException$0();
    },
    $signature: 63
  };
  A.ErrorWorkerPool_throwTestException_closure.prototype = {
    call$1(w) {
      return type$.ErrorWorker._as(w).throwTestException$0();
    },
    $signature: 63
  };
  A.ErrorWorker.prototype = {
    getStartArgs$0() {
      return this.args;
    },
    ping$1(data) {
      var t1 = type$.bool;
      return this.send$2$args(3, [data]).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    },
    ping$0() {
      return this.ping$1(null);
    },
    throwException$0() {
      var t1 = type$.int;
      return this.send$1(11).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    },
    throwWorkerException$0() {
      var t1 = type$.int;
      return this.send$1(12).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    },
    throwTaskTimeOutException$0() {
      var t1 = type$.int;
      return this.send$1(13).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    },
    throwCanceledException$0() {
      var t1 = type$.int;
      return this.send$1(14).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    },
    throwTestException$0() {
      var t1 = type$.int;
      return this.send$1(15).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    }
  };
  A._ErrorWorker_Worker_WorkerVersion.prototype = {};
  A._ErrorWorkerPool_WorkerPool_PoolVersion.prototype = {};
  A.Fraction.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (other instanceof A.Fraction)
        return _this.numerator === other.numerator && _this.denominator === other.denominator;
      else if (typeof other == "number")
        return _this.numerator / _this.denominator === other;
      else
        return false;
    },
    get$hashCode(_) {
      return A.Object_hash(this.numerator, this.denominator, B.C_SentinelValue, B.C_SentinelValue);
    }
  };
  A.FractionMarshaler.prototype = {
    marshal$2(data, context) {
      var t1 = type$.List_int,
        ref = context.getReference$1$1(data, t1);
      if (ref != null)
        return ref;
      ref = A._setArrayType([data.numerator, data.denominator], type$.JSArray_int);
      context.setReference$1$2(data, ref, t1);
      return ref;
    },
    unmarshal$2(data, context) {
      var t1, ref, list, t2;
      type$.List_int._as(data);
      t1 = type$.Fraction;
      ref = context.getReference$1$1(data, t1);
      if (ref != null)
        return ref;
      list = A.ConverterExt_get_converter(context).list$1$0(type$.int).call$1(data);
      t2 = J.getInterceptor$asx(list);
      ref = new A.Fraction(t2.$index(list, 0), t2.$index(list, 1));
      context.setReference$1$2(data, ref, t1);
      return ref;
    }
  };
  A.NotifyChildExt_get_notify_closure.prototype = {
    call$1(message) {
      return A.NotifyChildExt_notify(this._this, message);
    },
    $signature: 37
  };
  A.InstallableWorker.prototype = {
    getStartArgs$0() {
      return this.args;
    },
    isInstalled$0() {
      var t1 = type$.bool;
      return this.send$1(1).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    },
    isUninstalled$0() {
      var t1 = type$.bool;
      return this.send$1(2).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    }
  };
  A._InstallableWorker_Worker_WorkerVersion.prototype = {};
  A.IssuesWorkerPool.prototype = {
    issue_8$1(nums) {
      return this.stream$1$1(new A.IssuesWorkerPool_issue_8_closure(type$.List_int._as(nums)), type$.Map_String_int);
    },
    issue_23$2$columnWidths(bytes, columnWidths) {
      return this.issue_23$body$IssuesWorkerPool(type$.List_int._as(bytes), type$.nullable_Map_int_double._as(columnWidths));
    },
    issue_23$body$IssuesWorkerPool(bytes, columnWidths) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_ByteBuffer),
        $async$returnValue, $async$self = this;
      var $async$issue_23$2$columnWidths = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $async$self.execute$1$1(new A.IssuesWorkerPool_issue_23_closure(bytes, null, true, null, columnWidths, null, null, null), type$.nullable_ByteBuffer);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$issue_23$2$columnWidths, $async$completer);
    }
  };
  A.IssuesWorkerPool_closure.prototype = {
    call$2(exceptionManager, logger) {
      var t1;
      type$.ExceptionManager._as(exceptionManager);
      type$.nullable_Logger._as(logger);
      t1 = A.IssuesWorker$(this.context, exceptionManager);
      t1.channelLogger = logger;
      return t1;
    },
    call$1(exceptionManager) {
      return this.call$2(exceptionManager, null);
    },
    $signature: 254
  };
  A.IssuesWorkerPool_issue_8_closure.prototype = {
    call$1(w) {
      return type$.IssuesWorker._as(w).issue_8$1(this.nums);
    },
    $signature: 255
  };
  A.IssuesWorkerPool_issue_23_closure.prototype = {
    call$1(w) {
      var _this = this;
      return type$.IssuesWorker._as(w).issue_23$8$columnWidths$columns$dataFonts$fontData$isLandscape$title$titleFonts(_this.bytes, _this.columnWidths, _this.columns, _this.dataFonts, _this.fontData, _this.isLandscape, _this.title, _this.titleFonts);
    },
    $signature: 256
  };
  A.IssuesWorker.prototype = {
    getStartArgs$0() {
      return null;
    },
    issue_8$1(nums) {
      var t1 = this.stream$2$args(1, [type$.List_int._as(nums)]),
        t2 = t1.$ti;
      return new A._MapStream(t2._eval$1("Map<String,int>(Stream.T)")._as($.$get$Squadron__converter().map$2$0(0, type$.String, type$.int)), t1, t2._eval$1("_MapStream<Stream.T,Map<String,int>>"));
    },
    issue_23$8$columnWidths$columns$dataFonts$fontData$isLandscape$title$titleFonts(bytes, columnWidths, columns, dataFonts, fontData, isLandscape, title, titleFonts) {
      var t1 = type$.ByteBuffer;
      return this.send$2$args(2, [type$.List_int._as(bytes), title, true, columns, type$.nullable_Map_int_double._as(columnWidths), fontData, titleFonts, dataFonts]).then$1$1(A.Converter_allowNull($.$get$Squadron__converter().value$1$0(t1), t1), type$.nullable_ByteBuffer);
    },
    issue_23$2$columnWidths(bytes, columnWidths) {
      var _null = null;
      return this.issue_23$8$columnWidths$columns$dataFonts$fontData$isLandscape$title$titleFonts(bytes, columnWidths, _null, _null, _null, true, _null, _null);
    }
  };
  A._IssuesWorker_Worker_WorkerVersion.prototype = {};
  A._IssuesWorkerPool_WorkerPool_PoolVersion.prototype = {};
  A.LocalClientWorkerPool.prototype = {
    checkIds$0() {
      return this.execute$1$1(new A.LocalClientWorkerPool_checkIds_closure(), type$.String);
    },
    checkException$0() {
      return this.execute$1$1(new A.LocalClientWorkerPool_checkException_closure(), type$.bool);
    },
    checkSequence$1(count) {
      return this.stream$1$1(new A.LocalClientWorkerPool_checkSequence_closure(count), type$.Map_String_dynamic);
    }
  };
  A.LocalClientWorkerPool_closure.prototype = {
    call$1(exceptionManager) {
      type$.ExceptionManager._as(exceptionManager);
      return A.LocalClientWorker$(this.context, this.localService);
    },
    $signature: 257
  };
  A.LocalClientWorkerPool_checkIds_closure.prototype = {
    call$1(w) {
      return type$.LocalClientWorker._as(w).checkIds$0();
    },
    $signature: 258
  };
  A.LocalClientWorkerPool_checkException_closure.prototype = {
    call$1(w) {
      return type$.LocalClientWorker._as(w).checkException$0();
    },
    $signature: 259
  };
  A.LocalClientWorkerPool_checkSequence_closure.prototype = {
    call$1(w) {
      return type$.LocalClientWorker._as(w).checkSequence$1(this.count);
    },
    $signature: 260
  };
  A.LocalClientWorker.prototype = {
    getStartArgs$0() {
      var t1 = this.localService.___WebLocalWorker__channel_A;
      t1 === $ && A.throwLateFieldNI("_channel");
      return [t1 == null ? null : t1.share$0()._sendPort];
    },
    checkIds$0() {
      var t1 = type$.String;
      return this.send$1(1).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    },
    checkException$0() {
      var t1 = type$.bool;
      return this.send$1(2).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    },
    checkSequence$1(count) {
      var t1 = this.stream$2$args(3, [count]),
        t2 = t1.$ti;
      return new A._MapStream(t2._eval$1("Map<String,@>(Stream.T)")._as($.$get$Squadron__converter().nmap$2$0(type$.String, type$.Object)), t1, t2._eval$1("_MapStream<Stream.T,Map<String,@>>"));
    }
  };
  A._LocalClientWorker_Worker_WorkerVersion.prototype = {};
  A._LocalClientWorkerPool_WorkerPool_PoolVersion.prototype = {};
  A.LocalService.prototype = {$isWorkerService: 1};
  A.LocalServiceImpl.prototype = {
    throwException$0() {
      return A.throwExpression(A.Exception_Exception("Intentional exception"));
    },
    get$operations() {
      var _this0, _this = this,
        value = _this.__LocalServiceImpl_operations_FI;
      if (value === $) {
        _this0 = A.LinkedHashMap_LinkedHashMap$_literal([9999, new A.LocalServiceImpl_operations_closure(_this), 1, new A.LocalServiceImpl_operations_closure0(_this), 2, new A.LocalServiceImpl_operations_closure1(_this), 3, new A.LocalServiceImpl_operations_closure2(_this)], type$.int, type$.dynamic_Function_List_dynamic);
        _this.__LocalServiceImpl_operations_FI !== $ && A.throwLateFieldADI("operations");
        _this.__LocalServiceImpl_operations_FI = _this0;
        value = _this0;
      }
      return value;
    }
  };
  A.LocalServiceImpl_operations_closure.prototype = {
    call$1(req) {
      return this.$this.getVersion$0();
    },
    $signature: 261
  };
  A.LocalServiceImpl_operations_closure0.prototype = {
    call$1(req) {
      return 'LocalService running as "' + $.$get$threadId() + '"';
    },
    $signature: 262
  };
  A.LocalServiceImpl_operations_closure1.prototype = {
    call$1(req) {
      return this.$this.throwException$0();
    },
    $signature: 61
  };
  A.LocalServiceImpl_operations_closure2.prototype = {
    call$1(req) {
      var t1 = type$.int;
      return A.Stream_Stream$fromIterable(A.Iterable_Iterable$generate(A._asInt($.$get$Squadron__converter().value$1$0(t1).call$1(J.$index$asx(type$.List_dynamic._as(J.$index$asx(req, 3)), 0))), t1), t1);
    },
    $signature: 263
  };
  A._LocalService_Object_SquadronVersion.prototype = {};
  A._LocalServiceImpl_LocalService_SquadronVersion.prototype = {};
  A.LogWorker.prototype = {
    getStartArgs$0() {
      return null;
    }
  };
  A._LogWorker_Worker_WorkerVersion.prototype = {};
  A.MemoryLogger.prototype = {
    get$logs() {
      var t1 = this._logs,
        t2 = A._arrayInstanceType(t1);
      return new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.MemoryLogger_logs_closure()), t2._eval$1("WhereIterable<1>"));
    },
    log$5$error$stackTrace$time(level, message, error, stackTrace, time) {
      var msg,
        t1 = this._memory_logger$_filter._level;
      if (t1 == null)
        t1 = B.Level_1000_trace;
      if (level.value >= t1.value) {
        msg = type$.Function._is(message) ? message.call$0() : message;
        t1 = msg == null ? null : J.toString$0$(msg);
        if (t1 == null)
          t1 = error == null ? null : J.toString$0$(error);
        if (t1 == null)
          t1 = "<no log message>";
        B.JSArray_methods.add$1(this._logs, t1);
      }
      this.super$Logger$log(level, message, error, stackTrace, time == null ? new A.DateTime(Date.now(), 0, false) : time);
    }
  };
  A.MemoryLogger_logs_closure.prototype = {
    call$1(_) {
      A._asString(_);
      return true;
    },
    $signature: 8
  };
  A.MissingWorker.prototype = {
    getStartArgs$0() {
      return null;
    }
  };
  A.NotAWorker.prototype = {
    getStartArgs$0() {
      return null;
    }
  };
  A.Person.prototype = {
    get$friends() {
      var t1 = this._friends;
      return t1 == null ? this._friends = A._setArrayType([], type$.JSArray_Person) : t1;
    },
    toString$0(_) {
      var _this = this;
      return "Person(" + _this.firstName + ", " + _this.lastName + ", " + _this.dateOfBirth.toString$0(0) + ", " + A.S(_this._parent1) + ", " + A.S(_this._parent2) + ")";
    },
    set$_parent1(_parent1) {
      this._parent1 = type$.nullable_Person._as(_parent1);
    },
    set$_parent2(_parent2) {
      this._parent2 = type$.nullable_Person._as(_parent2);
    },
    set$_friends(_friends) {
      this._friends = type$.nullable_List_Person._as(_friends);
    }
  };
  A.PersonMarshaler.prototype = {
    marshal$2(data, context) {
      var pob, p1, p2,
        t1 = type$.List_dynamic,
        res = context.getReference$1$1(data, t1);
      if (res != null)
        return res;
      res = [data.lastName, data.firstName, data.dateOfBirth, null, null, null, []];
      context.setReference$1$2(data, res, t1);
      pob = data._placeOfBidth;
      if (pob != null)
        B.JSArray_methods.$indexSet(res, 3, B.C_CityMarshaler.marshal$2(pob, context));
      p1 = data._parent1;
      p2 = data._parent2;
      if (p1 != null)
        B.JSArray_methods.$indexSet(res, 4, this.marshal$2(p1, context));
      if (p2 != null)
        B.JSArray_methods.$indexSet(res, 5, this.marshal$2(p2, context));
      if (6 >= res.length)
        return A.ioore(res, 6);
      J.addAll$1$ax(t1._as(res[6]), J.map$1$1$ax(data.get$friends(), new A.PersonMarshaler_marshal_closure(this, context), type$.dynamic));
      return res;
    },
    unmarshal$2(data, context) {
      var t2, res, t3,
        t1 = type$.List_dynamic;
      t1._as(data);
      t2 = type$.Person;
      res = context.getReference$1$1(data, t2);
      if (res != null)
        return res;
      t3 = J.getInterceptor$asx(data);
      res = new A.Person(A._asString(t3.$index(data, 0)), A._asString(t3.$index(data, 1)), type$.DateTime._as(t3.$index(data, 2)), null, null, null);
      context.setReference$1$2(data, res, t2);
      if (t3.$index(data, 3) != null)
        res._placeOfBidth = B.C_CityMarshaler.unmarshal$2(t1._as(t3.$index(data, 3)), context);
      t2 = new A.PersonMarshaler_unmarshal_$unmarshal(this, context);
      if (t3.$index(data, 4) != null)
        res.set$_parent1(t2.call$1(t3.$index(data, 4)));
      if (t3.$index(data, 5) != null)
        res.set$_parent2(t2.call$1(t3.$index(data, 5)));
      res.set$_friends(new A.LazyInPlaceList(t1._as(t3.$index(data, 6)), t2, type$.LazyInPlaceList_Person));
      return res;
    }
  };
  A.PersonMarshaler_marshal_closure.prototype = {
    call$1(f) {
      return this.$this.marshal$2(type$.Person._as(f), this.context);
    },
    $signature: 264
  };
  A.PersonMarshaler_unmarshal_$unmarshal.prototype = {
    call$1(data) {
      return this.$this.unmarshal$2(data, this.context);
    },
    $signature: 78
  };
  A.PersonWorker.prototype = {
    getStartArgs$0() {
      return null;
    },
    getKindType$2(person, other) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, cin, t1, t2, $async$temp1;
      var $async$getKindType$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.ContextAwareConverter$(null);
              t2 = type$.Object;
              t2 = A.HashMap_HashMap(A.core__identical$closure(), t2, t2);
              cin = new A.MarshalingContext(t1, new A.SerializationContext(t2));
              $async$temp1 = type$.FutureOr_String;
              $async$goto = 3;
              return A._asyncAwait($async$self.send$2$args(1, [B.C_PersonMarshaler.marshal$2(person, cin), B.C_PersonMarshaler.marshal$2(other, cin)]), $async$getKindType$2);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1._as($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getKindType$2, $async$completer);
    }
  };
  A._PersonWorker_Worker_WorkerVersion.prototype = {};
  A.PrimeWorkerPool.prototype = {
    isPrime$2(n, counter) {
      return this.execute$1$2$counter(new A.PrimeWorkerPool_isPrime_closure(n), counter, type$.bool);
    },
    isPrime$1(n) {
      return this.isPrime$2(n, null);
    },
    getPrimes$3(min, max, counter) {
      return this.stream$1$2$counter(new A.PrimeWorkerPool_getPrimes_closure(min, max), counter, type$.int);
    }
  };
  A.PrimeWorkerPool_closure.prototype = {
    call$1(exceptionManager) {
      return A.PrimeWorker$(this.context, this.cache, type$.ExceptionManager._as(exceptionManager));
    },
    $signature: 265
  };
  A.PrimeWorkerPool_isPrime_closure.prototype = {
    call$1(w) {
      return this.$call$body$PrimeWorkerPool_isPrime_closure(type$.PrimeWorker._as(w));
    },
    $call$body$PrimeWorkerPool_isPrime_closure(w) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = w.isPrime$1($async$self.n);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 266
  };
  A.PrimeWorkerPool_getPrimes_closure.prototype = {
    call$1(w) {
      var t1 = type$.PrimeWorker._as(w).stream$2$args(2, [this.min, this.max]),
        t2 = t1.$ti;
      return new A._MapStream(t2._eval$1("int(Stream.T)")._as($.$get$Squadron__converter().value$1$0(type$.int)), t1, t2._eval$1("_MapStream<Stream.T,int>"));
    },
    $signature: 267
  };
  A.PrimeWorker.prototype = {
    getStartArgs$0() {
      var t1 = this.cache;
      if (t1 == null)
        t1 = null;
      else {
        t1 = t1._channel;
        t1 = (t1 == null ? null : t1.share$0())._sendPort;
      }
      return [t1];
    },
    isPrime$1(n) {
      var t1 = type$.bool;
      return this.send$2$args(1, [n]).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    }
  };
  A._PrimeWorker_Worker_WorkerVersion.prototype = {};
  A._PrimeWorkerPool_WorkerPool_PoolVersion.prototype = {};
  A.SquadronVersion.prototype = {
    getVersion$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue;
      var $async$getVersion$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = "7.2.0";
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getVersion$0, $async$completer);
    }
  };
  A.WorkerVersion.prototype = {
    getVersion$0() {
      var t1 = type$.String;
      return this.send$1(9999).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    }
  };
  A.PoolVersion.prototype = {};
  A.StreamingServiceWorker.prototype = {
    getStartArgs$0() {
      return null;
    }
  };
  A._StreamingServiceWorker_Worker_WorkerVersion.prototype = {};
  A.RunMode.prototype = {
    _enumToString$0() {
      return "RunMode." + this._name;
    }
  };
  A.TestContext.prototype = {
    wait$0() {
      var t1 = this.testResults,
        t2 = A._arrayInstanceType(t1);
      return A.Future_wait(new A.MappedListIterable(t1, t2._eval$1("Future<~>(1)")._as(new A.TestContext_wait_closure()), t2._eval$1("MappedListIterable<1,Future<~>>")), false, type$.void);
    },
    launch$1(testSuite) {
      type$.void_Function._as(testSuite);
      return A.group(A._extension_0_get_shortLabel($.$get$platform()) + " runner / " + A._extension_0_get_shortLabel(this.workerPlatform) + " workers", testSuite);
    },
    _skipTest$2(skip, result) {
      var t1;
      if (!skip) {
        t1 = this.onlyTests;
        t1 = t1._collection$_length !== 0 && !t1.any$1(0, result.get$isMatch());
      } else
        t1 = true;
      return t1;
    },
    test$3$skip(description, body, skip) {
      var result, t1, _this = this;
      type$.dynamic_Function._as(body);
      result = A.TestResult$(_this._testPath, description);
      t1 = result.testPath;
      _this._testPath = t1;
      B.JSArray_methods.add$1(_this.testResults, result);
      if (_this.runMode === B.RunMode_0) {
        _this._knownTests.add$1(0, t1);
        result.pass$0();
      } else if (_this._skipTest$2(skip, result)) {
        A.test(description, body, true);
        result.skip$0(0);
      } else
        A.test(description, new A.TestContext_test_closure(_this, result, body), null);
      _this._testPath = result.parentPath;
    },
    test$2(description, body) {
      return this.test$3$skip(description, body, false);
    },
    group$2(description, body) {
      var result, t1, _this = this;
      type$.dynamic_Function._as(body);
      result = A.TestResult$(_this._testPath, description);
      t1 = result.testPath;
      _this._testPath = t1;
      if (_this.runMode === B.RunMode_0) {
        _this._knownGroups.add$1(0, t1);
        body.call$0();
      } else if (!_this._skipTest$2(false, result))
        A.group(description, body);
      _this._testPath = result.parentPath;
    },
    get$rootGroups() {
      return new A._SyncStarIterable(this.rootGroups$body$TestContext(), type$._SyncStarIterable_Record_2_String_label_and_int_tests);
    },
    rootGroups$body$TestContext() {
      var $async$self = this;
      return function() {
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], t1, t2, t3, t4, t5, t6, t7;
        return function $async$get$rootGroups($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._knownGroups, t2 = A._LinkedHashSetIterator$(t1, t1._modifications, A._instanceType(t1)._precomputed1), t3 = $async$self._knownTests, t4 = A._instanceType(t3), t5 = t4._eval$1("bool(1)"), t4 = t4._eval$1("WhereIterable<1>"), t6 = t2.$ti._precomputed1;
              case 2:
                // for condition
                if (!t2.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                t7 = t2._collection$_current;
                if (t7 == null)
                  t7 = t6._as(t7);
                if (t1.any$1(0, new A.TestContext_rootGroups_closure(t7))) {
                  // goto for condition
                  $async$goto = 2;
                  break;
                }
                $async$goto = 4;
                return $async$iterator._async$_current = new A._Record_2_label_tests(t7, new A.WhereIterable(t3, t5._as(new A.TestContext_rootGroups_closure0(t7)), t4).get$length(0)), 1;
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    }
  };
  A.TestContext_wait_closure.prototype = {
    call$1(r) {
      return type$.TestResult._as(r)._test_result$_completer.future;
    },
    $signature: 268
  };
  A.TestContext_test_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, timeout, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              timeout = new A.TestTimeout(A.Duration$(0, 0, 0, 0, 25), new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void));
              t1 = $async$self.result;
              $async$goto = 2;
              return A._asyncAwait(A.Future_any(A._setArrayType([A.Future_Future$value($async$self.body.call$0(), type$.dynamic), timeout.get$completion()], type$.JSArray_Future_void), type$.void).catchError$1(new A.TestContext_test__closure(t1)).whenComplete$1(new A.TestContext_test__closure0(timeout, t1)), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 0
  };
  A.TestContext_test__closure.prototype = {
    call$2(ex, st) {
      var t1 = ex == null,
        t2 = t1 ? A._asObject(ex) : ex;
      type$.nullable_StackTrace._as(st);
      this.result.fail$2(t2, st);
      t1 = t1 ? A._asObject(ex) : ex;
      A.Error_throwWithStackTrace(t1, type$.StackTrace._as(st));
    },
    $signature: 269
  };
  A.TestContext_test__closure0.prototype = {
    call$0() {
      var t2,
        t1 = this.timeout;
      A.FutureExtensions_ignore(t1._test_timeout$_completer.future, type$.void);
      t1._cancelled = true;
      t2 = t1._test_timeout$_timer;
      if (t2 != null)
        t2.cancel$0();
      t1._test_timeout$_timer = null;
      this.result.pass$0();
    },
    $signature: 1
  };
  A.TestContext_rootGroups_closure.prototype = {
    call$1(g) {
      var t1;
      A._asString(g);
      t1 = this.group;
      return g !== t1 && B.JSString_methods.startsWith$1(t1, g);
    },
    $signature: 8
  };
  A.TestContext_rootGroups_closure0.prototype = {
    call$1(t) {
      return B.JSString_methods.startsWith$1(A._asString(t), this.group);
    },
    $signature: 8
  };
  A.TestEntryPoints.prototype = {};
  A.TestException0.prototype = {
    toString$0(_) {
      return A.getRuntimeTypeOfDartObject(this).toString$0(0) + ": " + this.message;
    },
    $isException: 1
  };
  A.TestTimeOutException.prototype = {};
  A.TestException.prototype = {
    serialize$0() {
      var t1 = this._squadron_exception$_stackTrace;
      t1 = t1 == null ? null : t1.toString$0(0);
      return A.List_List$unmodifiable(["#TEST", this.message, t1, this._worker_exception$_command], type$.dynamic);
    }
  };
  A.NoOutput.prototype = {
    output$1($event) {
    }
  };
  A.EmptyPrinter.prototype = {
    log$1($event) {
      return B.List_4i6;
    }
  };
  A.TestState.prototype = {
    _enumToString$0() {
      return "TestState." + this._name;
    }
  };
  A.TestResult.prototype = {
    isMatch$1(pattern) {
      return !J.allMatches$1$s(type$.Pattern._as(pattern), this.testPath).get$isEmpty(0);
    },
    _setState$3(state, error, stackTrace) {
      var t1 = this._test_result$_completer;
      if ((t1.future._state & 30) === 0)
        t1.complete$0();
    },
    _setState$1(state) {
      return this._setState$3(state, null, null);
    },
    skip$0(_) {
      return A.Future_Future(new A.TestResult_skip_closure(this), type$.void);
    },
    pass$0() {
      return A.Future_Future(new A.TestResult_pass_closure(this), type$.void);
    },
    fail$2(error, stackTrace) {
      return A.Future_Future(new A.TestResult_fail_closure(this, error, stackTrace), type$.void);
    }
  };
  A.TestResult_skip_closure.prototype = {
    call$0() {
      return this.$this._setState$1(B.TestState_1);
    },
    $signature: 2
  };
  A.TestResult_pass_closure.prototype = {
    call$0() {
      return this.$this._setState$1(B.TestState_3);
    },
    $signature: 2
  };
  A.TestResult_fail_closure.prototype = {
    call$0() {
      return this.$this._setState$3(B.TestState_4, this.error, this.stackTrace);
    },
    $signature: 2
  };
  A.displayVersions_closure.prototype = {
    call$0() {
      return A.CacheWorker$(this.ctx);
    },
    $signature: 271
  };
  A.displayVersions_closure0.prototype = {
    call$0() {
      return A.InstallableWorker$(this.ctx);
    },
    $signature: 272
  };
  A.displayVersions_closure1.prototype = {
    call$0() {
      return A.IssuesWorker$(this.ctx, null);
    },
    $signature: 273
  };
  A.displayVersions_closure2.prototype = {
    call$0() {
      return A.LocalClientWorker$(this.ctx, A.LocalWorker_LocalWorker$create(new A.LocalServiceImpl(), type$.LocalService));
    },
    $signature: 274
  };
  A.displayVersions_closure3.prototype = {
    call$0() {
      return A.PrimeWorker$(this.ctx, null, null);
    },
    $signature: 275
  };
  A.displayVersions_closure4.prototype = {
    call$0() {
      return A.LogWorker$(this.ctx);
    },
    $signature: 276
  };
  A.displayVersions_closure5.prototype = {
    call$0() {
      return A.StreamingServiceWorker$(this.ctx);
    },
    $signature: 277
  };
  A.displayVersions_closure6.prototype = {
    call$0() {
      return A.TestWorker$(this.ctx, null, null);
    },
    $signature: 278
  };
  A.displayVersions_closure7.prototype = {
    call$0() {
      return A.ErrorWorker$(this.ctx, null);
    },
    $signature: 279
  };
  A.TestWorkerPool.prototype = {
    io$1$ms(ms) {
      return this.execute$1$1(new A.TestWorkerPool_io_closure(ms), type$.void);
    },
    cpu$1$ms(ms) {
      return this.execute$1$1(new A.TestWorkerPool_cpu_closure(ms), type$.void);
    },
    delayed_80ms$1(n) {
      return this.execute$1$1(new A.TestWorkerPool_delayed_80ms_closure(n), type$.int);
    },
    ping$0() {
      return this.execute$1$1(new A.TestWorkerPool_ping_closure(), type$.bool);
    },
    finite_20ms$2(count, token) {
      return this.stream$1$1(new A.TestWorkerPool_finite_20ms_closure(count, token), type$.int);
    },
    finite_20ms$1(count) {
      return this.finite_20ms$2(count, null);
    },
    infinite_20ms$1(token) {
      return this.stream$1$1(new A.TestWorkerPool_infinite_20ms_closure(token), type$.int);
    },
    getPendingInfiniteWithErrors$0() {
      return this.concurrencySettings.maxWorkers === 1 ? this.execute$1$1(new A.TestWorkerPool_getPendingInfiniteWithErrors_closure(), type$.int) : A.throwExpression(A.WorkerException$("getPendingInfiniteWithErrors() is not supported for worker pools with maxWorker != 1", null, null));
    },
    infiniteWithErrors$1(token) {
      return this.stream$1$1(new A.TestWorkerPool_infiniteWithErrors_closure(token), type$.int);
    },
    infiniteWithErrors$0() {
      return this.infiniteWithErrors$1(null);
    },
    delayedTask$1(n) {
      return this.scheduleValueTask$1$1(new A.TestWorkerPool_delayedTask_closure(n), type$.int);
    },
    finiteTask$1(n) {
      return this.scheduleStreamTask$1$1(new A.TestWorkerPool_finiteTask_closure(n, null), type$.int);
    },
    infiniteWithErrorsTask$1(token) {
      return this.scheduleStreamTask$1$1(new A.TestWorkerPool_infiniteWithErrorsTask_closure(token), type$.int);
    },
    infiniteWithErrorsTask$0() {
      return this.infiniteWithErrorsTask$1(null);
    },
    map$1(_, input) {
      return this.execute$1$1(new A.TestWorkerPool_map_closure(type$.Map_String_BigInt._as(input)), type$.Map_BigInt_String);
    }
  };
  A.TestWorkerPool_closure.prototype = {
    call$1(exceptionManager) {
      return A.TestWorker$(this.context, type$.ExceptionManager._as(exceptionManager), null);
    },
    $signature: 74
  };
  A.TestWorkerPool$throws_closure.prototype = {
    call$1(exceptionManager) {
      var t1;
      type$.ExceptionManager._as(exceptionManager);
      t1 = this.context.entryPoints.test;
      t1.toString;
      return new A.TestWorker([1], t1, exceptionManager, null, false, new A.Object());
    },
    $signature: 74
  };
  A.TestWorkerPool$missingStartRequest_closure.prototype = {
    call$1(exceptionManager) {
      type$.ExceptionManager._as(exceptionManager);
      null.toString;
      return new A.TestWorker([0], null, exceptionManager, null, false, new A.Object());
    },
    $signature: 74
  };
  A.TestWorkerPool$invalid_closure.prototype = {
    call$1(exceptionManager) {
      var t1;
      type$.ExceptionManager._as(exceptionManager);
      t1 = this.context.entryPoints.test;
      t1.toString;
      return new A.TestWorker([2], t1, exceptionManager, null, false, new A.Object());
    },
    $signature: 74
  };
  A.TestWorkerPool_io_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).send$2$args(11, [this.ms]);
    },
    $signature: 141
  };
  A.TestWorkerPool_cpu_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).send$2$args(12, [this.ms]);
    },
    $signature: 141
  };
  A.TestWorkerPool_delayed_80ms_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).delayed_80ms$1(this.n);
    },
    $signature: 80
  };
  A.TestWorkerPool_ping_closure.prototype = {
    call$1(w) {
      var t1 = type$.bool;
      return type$.TestWorker._as(w).send$1(21).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    },
    $signature: 283
  };
  A.TestWorkerPool_finite_20ms_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).finite_20ms$2(this.count, this.token);
    },
    $signature: 65
  };
  A.TestWorkerPool_infinite_20ms_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).infinite_20ms$1(this.token);
    },
    $signature: 65
  };
  A.TestWorkerPool_getPendingInfiniteWithErrors_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).getPendingInfiniteWithErrors$0();
    },
    $signature: 80
  };
  A.TestWorkerPool_infiniteWithErrors_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).infiniteWithErrors$1(this.token);
    },
    $signature: 65
  };
  A.TestWorkerPool_delayedTask_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).delayed_80ms$1(this.n);
    },
    $signature: 80
  };
  A.TestWorkerPool_finiteTask_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).finite_20ms$2(this.n, this.token);
    },
    $signature: 65
  };
  A.TestWorkerPool_infiniteWithErrorsTask_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).infiniteWithErrors$1(this.token);
    },
    $signature: 65
  };
  A.TestWorkerPool_map_closure.prototype = {
    call$1(w) {
      return type$.TestWorker._as(w).map$1(0, this.input);
    },
    $signature: 285
  };
  A.TestWorker.prototype = {
    getStartArgs$0() {
      return this.args;
    },
    delayed_80ms$1(n) {
      var t1 = type$.int;
      return this.send$2$args(13, [n]).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    },
    finite_20ms$2(count, token) {
      var t1 = this.stream$3$args$token(31, [count], token),
        t2 = t1.$ti;
      return new A._MapStream(t2._eval$1("int(Stream.T)")._as($.$get$Squadron__converter().value$1$0(type$.int)), t1, t2._eval$1("_MapStream<Stream.T,int>"));
    },
    infinite_20ms$1(token) {
      var t1 = this.stream$2$token(32, token),
        t2 = t1.$ti;
      return new A._MapStream(t2._eval$1("int(Stream.T)")._as($.$get$Squadron__converter().value$1$0(type$.int)), t1, t2._eval$1("_MapStream<Stream.T,int>"));
    },
    getPendingInfiniteWithErrors$0() {
      var t1 = type$.int;
      return this.send$1(35).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    },
    infiniteWithErrors$1(token) {
      var t1 = this.stream$2$token(36, token),
        t2 = t1.$ti;
      return new A._MapStream(t2._eval$1("int(Stream.T)")._as($.$get$Squadron__converter().value$1$0(type$.int)), t1, t2._eval$1("_MapStream<Stream.T,int>"));
    },
    infiniteWithErrors$0() {
      return this.infiniteWithErrors$1(null);
    },
    fractionAdd$4$marshalIn$marshalOut(a, b, marshalIn, marshalOut) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Fraction),
        $async$returnValue, $async$self = this, t1, t2, t3, cin, marshal, res;
      var $async$fractionAdd$4$marshalIn$marshalOut = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.ContextAwareConverter$(null);
              t2 = type$.Object;
              t3 = A.HashMap_HashMap(A.core__identical$closure(), t2, t2);
              cin = new A.MarshalingContext(t1, new A.SerializationContext(t3));
              marshal = marshalIn ? new A.TestWorker_fractionAdd_closure(B.C_FractionMarshaler, cin) : A.ConverterExt_get_converter(cin).value$1$0(type$.Fraction);
              $async$goto = 3;
              return A._asyncAwait($async$self.send$4$args$inspectRequest$inspectResponse(41, [marshal.call$1(a), marshal.call$1(b), marshalIn, marshalOut], true, true), $async$fractionAdd$4$marshalIn$marshalOut);
            case 3:
              // returning from await.
              res = $async$result;
              t1 = A.ContextAwareConverter$(null);
              t2 = A.HashMap_HashMap(A.core__identical$closure(), t2, t2);
              $async$returnValue = (marshalOut ? new A.TestWorker_fractionAdd_closure0(B.C_FractionMarshaler, new A.MarshalingContext(t1, new A.SerializationContext(t2))) : $.$get$Squadron__converter().value$1$0(type$.Fraction)).call$1(res);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$fractionAdd$4$marshalIn$marshalOut, $async$completer);
    },
    map$1(_, input) {
      return this.send$2$args(52, [type$.Map_String_BigInt._as(input)]).then$1$1($.$get$Squadron__converter().map$2$0(0, type$.BigInt, type$.String), type$.Map_BigInt_String);
    },
    checkBuffers$2(a, b) {
      var t1 = type$.bool;
      return this.send$2$args(61, [a, b]).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    },
    checkFractions$2(a, b) {
      var marshalingContext,
        t1 = A.ContextAwareConverter$(null),
        t2 = type$.Object;
      t2 = A.HashMap_HashMap(A.core__identical$closure(), t2, t2);
      marshalingContext = new A.MarshalingContext(t1, new A.SerializationContext(t2));
      t1 = type$.bool;
      return this.send$2$args(62, [B.C_FractionMarshaler.marshal$2(a, marshalingContext), B.C_FractionMarshaler.marshal$2(b, marshalingContext)]).then$1$1($.$get$Squadron__converter().value$1$0(t1), t1);
    },
    getPlatformType$0() {
      return this.send$1(51).then$1$1(new A.TestWorker_getPlatformType_closure(), type$.SquadronPlatformType);
    }
  };
  A.TestWorker_fractionAdd_closure.prototype = {
    call$1(x) {
      return this.marshaler.marshal$2(x, this.cin);
    },
    $signature: 286
  };
  A.TestWorker_fractionAdd_closure0.prototype = {
    call$1(x) {
      var t1 = this.cout;
      return this.marshaler.unmarshal$2(A.ConverterExt_get_converter(t1).list$1$1(null, type$.int).call$1(x), t1);
    },
    $signature: 287
  };
  A.TestWorker_getPlatformType_closure.prototype = {
    call$1($$) {
      var t1 = A.SquadronPlatformType_tryParse($.$get$Squadron__converter().value$1$0(type$.String).call$1($$));
      t1.toString;
      return t1;
    },
    $signature: 288
  };
  A._TestWorker_Worker_WorkerVersion.prototype = {};
  A._TestWorkerPool_WorkerPool_PoolVersion.prototype = {};
  A.TestSuite.prototype = {};
  A.TestTimeout.prototype = {
    get$completion() {
      var _this = this;
      if (_this._test_timeout$_timer == null && !_this._cancelled)
        _this._test_timeout$_timer = A.Timer_Timer(_this.duration, new A.TestTimeout_completion_closure(_this));
      return _this._test_timeout$_completer.future;
    }
  };
  A.TestTimeout_completion_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      if (!t1._cancelled && (t1._test_timeout$_completer.future._state & 30) === 0)
        t1._test_timeout$_completer.completeError$1(new A.TestTimeOutException("Timeout"));
    },
    $signature: 2
  };
  A.UnexpectedException.prototype = {
    toString$0(_) {
      return this.message;
    },
    $isException: 1
  };
  A.Called.prototype = {
    featureValueOf$1(actual) {
      return type$.StackTrace._is(actual) ? actual.toString$0(0) : null;
    }
  };
  A.Reported.prototype = {
    featureValueOf$1(actual) {
      return type$.SquadronException._is(actual) ? actual.get$message() : J.toString$0$(actual);
    }
  };
  (function aliases() {
    var _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A._BroadcastStreamController.prototype;
    _.super$_BroadcastStreamController$_addEventError = _._addEventError$0;
    _ = A._BufferingStreamSubscription.prototype;
    _.super$_BufferingStreamSubscription$_add = _._add$1;
    _.super$_BufferingStreamSubscription$_addError = _._addError$2;
    _ = A._HashMap.prototype;
    _.super$_HashMap$_containsKey = _._containsKey$1;
    _.super$_HashMap$_get = _._get$1;
    _.super$_HashMap$_set = _._set$2;
    _.super$_HashMap$_remove = _._remove$1;
    _ = A._HashSet.prototype;
    _.super$_HashSet$_contains = _._contains$1;
    _.super$_HashSet$_add = _._collection$_add$1;
    _ = A.ListBase.prototype;
    _.super$ListBase$setRange = _.setRange$4;
    _ = A.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _.super$Iterable$skipWhile = _.skipWhile$1;
    _ = A.Logger.prototype;
    _.super$Logger$log = _.log$5$error$stackTrace$time;
    _ = A.FeatureMatcher.prototype;
    _.super$FeatureMatcher$describeMismatch = _.describeMismatch$4;
    _ = A.Matcher.prototype;
    _.super$Matcher$describeMismatch = _.describeMismatch$4;
    _ = A.TypeMatcher.prototype;
    _.super$TypeMatcher$describe = _.describe$1;
    _.super$TypeMatcher$matches = _.matches$2;
    _ = A.WorkerTask.prototype;
    _.super$WorkerTask$cancel = _.cancel$1;
    _ = A.Releasable.prototype;
    _.super$Releasable$release = _.release$0;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance = hunkHelpers.installInstanceTearOff,
      _static_0 = hunkHelpers._static_0,
      _static_1 = hunkHelpers._static_1,
      _static = hunkHelpers.installStaticTearOff,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_1_u = hunkHelpers._instance_1u;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 92);
    _instance_1_i(J.JSArray.prototype, "get$add", "add$1", 37);
    _instance(J.JSString.prototype, "get$startsWith", 1, 1, null, ["call$2", "call$1"], ["startsWith$2", "startsWith$1"], 248, 0, 0);
    _static_0(A, "_js_helper_Primitives_dateNow$closure", "Primitives_dateNow", 12);
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 101);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 101);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 101);
    _static_1(A, "async_Future__kTrue$closure", "Future__kTrue", 23);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 2);
    _static_1(A, "async___nullDataHandler$closure", "_nullDataHandler", 16);
    _static_2(A, "async___nullErrorHandler$closure", "_nullErrorHandler", 64);
    _static_0(A, "async___nullDoneHandler$closure", "_nullDoneHandler", 2);
    _static(A, "async___rootHandleUncaughtError$closure", 5, null, ["call$5"], ["_rootHandleUncaughtError"], 290, 0);
    _static(A, "async___rootRun$closure", 4, null, ["call$1$4", "call$4"], ["_rootRun", function($self, $parent, zone, f) {
      return A._rootRun($self, $parent, zone, f, type$.dynamic);
    }], 291, 0);
    _static(A, "async___rootRunUnary$closure", 5, null, ["call$2$5", "call$5"], ["_rootRunUnary", function($self, $parent, zone, f, arg) {
      var t1 = type$.dynamic;
      return A._rootRunUnary($self, $parent, zone, f, arg, t1, t1);
    }], 292, 0);
    _static(A, "async___rootRunBinary$closure", 6, null, ["call$3$6"], ["_rootRunBinary"], 293, 0);
    _static(A, "async___rootRegisterCallback$closure", 4, null, ["call$1$4", "call$4"], ["_rootRegisterCallback", function($self, $parent, zone, f) {
      return A._rootRegisterCallback($self, $parent, zone, f, type$.dynamic);
    }], 294, 0);
    _static(A, "async___rootRegisterUnaryCallback$closure", 4, null, ["call$2$4", "call$4"], ["_rootRegisterUnaryCallback", function($self, $parent, zone, f) {
      var t1 = type$.dynamic;
      return A._rootRegisterUnaryCallback($self, $parent, zone, f, t1, t1);
    }], 295, 0);
    _static(A, "async___rootRegisterBinaryCallback$closure", 4, null, ["call$3$4", "call$4"], ["_rootRegisterBinaryCallback", function($self, $parent, zone, f) {
      var t1 = type$.dynamic;
      return A._rootRegisterBinaryCallback($self, $parent, zone, f, t1, t1, t1);
    }], 296, 0);
    _static(A, "async___rootErrorCallback$closure", 5, null, ["call$5"], ["_rootErrorCallback"], 297, 0);
    _static(A, "async___rootScheduleMicrotask$closure", 4, null, ["call$4"], ["_rootScheduleMicrotask"], 298, 0);
    _static(A, "async___rootCreateTimer$closure", 5, null, ["call$5"], ["_rootCreateTimer"], 299, 0);
    _static(A, "async___rootCreatePeriodicTimer$closure", 5, null, ["call$5"], ["_rootCreatePeriodicTimer"], 300, 0);
    _static(A, "async___rootPrint$closure", 4, null, ["call$4"], ["_rootPrint"], 122, 0);
    _static_1(A, "async___printToZone$closure", "_printToZone", 127);
    _static(A, "async___rootFork$closure", 5, null, ["call$5"], ["_rootFork"], 301, 0);
    var _;
    _instance_0_u(_ = A._BroadcastSubscription.prototype, "get$_onPause", "_onPause$0", 2);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 2);
    _instance_1_i(_ = A._BroadcastStreamController.prototype, "get$add", "add$1", 37);
    _instance(_, "get$addError", 0, 1, null, ["call$2", "call$1"], ["addError$2", "addError$1"], 58, 0, 0);
    _instance_0_u(_, "get$close", "close$0", 14);
    _instance(A._Completer.prototype, "get$completeError", 0, 1, null, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 58, 0, 0);
    _instance(A._AsyncCompleter.prototype, "get$complete", 0, 0, null, ["call$1", "call$0"], ["complete$1", "complete$0"], 110, 0, 0);
    _instance_2_u(A._Future.prototype, "get$_completeError", "_completeError$2", 64);
    _instance_0_u(_ = A._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 2);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 2);
    _instance(_ = A._BufferingStreamSubscription.prototype, "get$pause", 0, 0, null, ["call$1", "call$0"], ["pause$1", "pause$0"], 130, 0, 0);
    _instance_0_u(_, "get$resume", "resume$0", 2);
    _instance_0_u(_, "get$cancel", "cancel$0", 103);
    _instance_0_u(_, "get$_onPause", "_onPause$0", 2);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 2);
    _instance(_ = A._DoneStreamSubscription.prototype, "get$pause", 0, 0, null, ["call$1", "call$0"], ["pause$1", "pause$0"], 130, 0, 0);
    _instance_0_u(_, "get$resume", "resume$0", 2);
    _instance_0_u(_, "get$cancel", "cancel$0", 103);
    _instance_0_u(_, "get$_onMicrotask", "_onMicrotask$0", 2);
    _instance_1_u(_ = A._StreamIterator.prototype, "get$_async$_onData", "_async$_onData$1", 37);
    _instance_2_u(_, "get$_onError", "_onError$2", 64);
    _instance_0_u(_, "get$_onDone", "_onDone$0", 2);
    _instance_0_u(_ = A._ForwardingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 2);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 2);
    _instance_1_u(_, "get$_handleData", "_handleData$1", 37);
    _instance_2_u(_, "get$_handleError", "_handleError$2", 214);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 2);
    _static_1(A, "collection___defaultHashCode$closure", "_defaultHashCode", 106);
    _static_2(A, "collection_ListBase__compareAny$closure", "ListBase__compareAny", 92);
    _instance(_ = A._HashSet.prototype, "get$_newSimilarSet", 0, 0, null, ["call$1$0", "call$0"], ["_newSimilarSet$1$0", "_newSimilarSet$0"], 96, 0, 0);
    _instance_1_i(_, "get$contains", "contains$1", 23);
    _instance(_ = A._CustomHashSet.prototype, "get$_newSimilarSet", 0, 0, null, ["call$1$0", "call$0"], ["_newSimilarSet$1$0", "_newSimilarSet$0"], 96, 0, 0);
    _instance_1_i(_, "get$contains", "contains$1", 23);
    _instance(_ = A._LinkedHashSet.prototype, "get$_newSimilarSet", 0, 0, null, ["call$1$0", "call$0"], ["_newSimilarSet$1$0", "_newSimilarSet$0"], 96, 0, 0);
    _instance_1_i(_, "get$contains", "contains$1", 23);
    _static_1(A, "convert___defaultToEncodable$closure", "_defaultToEncodable", 83);
    _static_2(A, "core__identical$closure", "identical", 302);
    _static_1(A, "core__GeneratorIterable__id$closure", "_GeneratorIterable__id", 135);
    _static_1(A, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 31);
    _static(A, "math__max$closure", 2, null, ["call$1$2", "call$2"], ["max", function(a, b) {
      return A.max(a, b, type$.num);
    }], 303, 0);
    _instance_0_u(_ = A.StreamGroup.prototype, "get$_stream_group$_onListen", "_stream_group$_onListen$0", 2);
    _instance_0_u(_, "get$_onCancelBroadcast", "_onCancelBroadcast$0", 2);
    _static(A, "canceled_exceptions___self$closure", 1, null, ["call$1$1", "call$1"], ["_self", function(x) {
      return A._self(x, type$.dynamic);
    }], 304, 0);
    _instance(A.CancelableToken.prototype, "get$cancel", 0, 0, null, ["call$1", "call$0"], ["cancel$1", "cancel$0"], 323, 0, 0);
    _instance_1_i(A._DelegatingIterableBase.prototype, "get$contains", "contains$1", 23);
    _instance(A._DeepMatcher.prototype, "get$_recursiveMatch", 0, 4, null, ["call$4"], ["_recursiveMatch$4"], 289, 0, 0);
    _static_1(A, "pretty_print___escapeString$closure", "_escapeString", 31);
    _static_1(A, "util__wrapMatcher$closure", "wrapMatcher", 305);
    _static_1(A, "util___getHexLiteral$closure", "_getHexLiteral", 31);
    _instance_0_u(A.Pool.prototype, "get$_pool$_close", "_pool$_close$0", 14);
    _instance_1_u(A._WebForwardChannel.prototype, "get$_forward", "_forward$1", 27);
    _instance(_ = A._WebChannel.prototype, "get$_postRequest", 0, 1, null, ["call$2$force", "call$1"], ["_postRequest$2$force", "_postRequest$1"], 239, 0, 0);
    _instance_1_u(_, "get$_inspectAndPostRequest", "_inspectAndPostRequest$1", 72);
    _instance_0_u(_ = A.EventBuffer.prototype, "get$activate", "activate$0", 2);
    _instance_0_u(_, "get$deactivate", "deactivate$0", 2);
    _instance_1_i(_, "get$add", "add$1", 37);
    _instance_2_u(_, "get$addError", "addError$2", 121);
    _static_2(A, "_patch___$is$closure", "_$is", 109);
    _static_1(A, "_patch___toJSStr$closure", "_toJSStr", 32);
    _static_1(A, "_patch___toJSBool$closure", "_toJSBool", 32);
    _static_1(A, "_patch___toJSNum$closure", "_toJSNum", 32);
    _static_1(A, "_patch___toJSBigInt$closure", "_toJSBigInt", 32);
    _static_1(A, "_patch___toJSDate$closure", "_toJSDate", 32);
    _instance_1_u(_ = A._WebWorkerChannel.prototype, "get$reply", "reply$1", 16);
    _instance_1_u(_, "get$inspectAndReply", "inspectAndReply$1", 16);
    _instance(_, "get$error", 0, 1, null, ["call$3", "call$2", "call$1"], ["error$3", "error$2", "error$1"], 237, 0, 0);
    _instance_1_i(_ = A.ForwardStreamController.prototype, "get$add", "add$1", 37);
    _instance_0_u(_, "get$close", "close$0", 14);
    _instance_0_u(_, "get$_pause", "_pause$0", 2);
    _instance_0_u(_, "get$_resume", "_resume$0", 2);
    _static(A, "converter_Converter_identity$closure", 1, null, ["call$1$1", "call$1"], ["Converter_identity", function(x) {
      return A.Converter_identity(x, type$.dynamic);
    }], 307, 0);
    _static(A, "converter_Converter__castList$closure", 1, null, ["call$1$1", "call$1"], ["Converter__castList", function(x) {
      return A.Converter__castList(x, type$.dynamic);
    }], 308, 0);
    _static(A, "converter_Converter__castSet$closure", 1, null, ["call$1$1", "call$1"], ["Converter__castSet", function(x) {
      return A.Converter__castSet(x, type$.dynamic);
    }], 309, 0);
    _static(A, "converter_Converter__castMap$closure", 1, null, ["call$2$1", "call$1"], ["Converter__castMap", function(x) {
      var t1 = type$.dynamic;
      return A.Converter__castMap(x, t1, t1);
    }], 310, 0);
    _static_1(A, "num_converter_NumConverter__toInt$closure", "NumConverter__toInt", 46);
    _static_1(A, "num_converter_NumConverter__toDbl$closure", "NumConverter__toDbl", 311);
    _static_1(A, "squadron_canceled_exception__SquadronCanceledExceptionExt_deserialize$closure", "SquadronCanceledExceptionExt_deserialize", 312);
    _static_1(A, "squadron_canceled_exceptions__SquadronCanceledExceptionsExt_deserialize$closure", "SquadronCanceledExceptionsExt_deserialize", 313);
    _static_1(A, "squadron_error__SquadronErrorImpl_deserialize$closure", "SquadronErrorImpl_deserialize", 314);
    _static_1(A, "squadron_timeout_exception__SquadronTimeoutExceptionExt_deserialize$closure", "SquadronTimeoutExceptionExt_deserialize", 315);
    _static_1(A, "task_canceled_exception__TaskCanceledExceptionExt_deserialize$closure", "TaskCanceledExceptionExt_deserialize", 316);
    _static_1(A, "task_terminated_exception__TaskTerminatedExceptionExt_deserialize$closure", "TaskTerminatedExceptionExt_deserialize", 317);
    _static_1(A, "worker_exception__WorkerExceptionImpl_deserialize$closure", "WorkerExceptionImpl_deserialize", 318);
    _static_2(A, "_pool_worker_PoolWorker_compareCapacity$closure", "PoolWorker_compareCapacity", 319);
    _static_1(A, "_pool_worker_PoolWorker_getStats$closure", "PoolWorker_getStats", 320);
    _instance_1_u(_ = A.WorkerStreamTask.prototype, "get$__worker_stream_task$_onData", "__worker_stream_task$_onData$1", 37);
    _instance(_, "get$__worker_stream_task$_onError", 0, 1, null, ["call$2", "call$1"], ["__worker_stream_task$_onError$2", "__worker_stream_task$_onError$1"], 58, 0, 0);
    _instance_1_u(_ = A.WorkerTask.prototype, "get$_success", "_success$1", 105);
    _instance(_, "get$_fail", 0, 0, null, ["call$1", "call$0"], ["_fail$1", "_fail$0"], 110, 0, 0);
    _instance_0_u(A.WorkerPool.prototype, "get$__schedule", "__schedule$0", 2);
    _instance(A.SquadronCancelationToken.prototype, "get$_checkToken", 0, 0, null, ["call$1", "call$0"], ["_checkToken$1", "_checkToken$0"], 146, 0, 0);
    _instance(A._Stats.prototype, "get$endWork", 0, 0, null, ["call$1", "call$0"], ["endWork$1", "endWork$0"], 146, 0, 0);
    _instance_0_u(A.Chain.prototype, "get$toTrace", "toTrace$0", 52);
    _static_1(A, "frame_Frame___parseVM_tearOff$closure", "Frame___parseVM_tearOff", 75);
    _static_1(A, "frame_Frame___parseV8_tearOff$closure", "Frame___parseV8_tearOff", 75);
    _static_1(A, "frame_Frame___parseFirefox_tearOff$closure", "Frame___parseFirefox_tearOff", 75);
    _static_1(A, "frame_Frame___parseFriendly_tearOff$closure", "Frame___parseFriendly_tearOff", 75);
    _instance_0_u(A.LazyChain.prototype, "get$toTrace", "toTrace$0", 52);
    _static_1(A, "trace_Trace___parseVM_tearOff$closure", "Trace___parseVM_tearOff", 128);
    _static_1(A, "trace_Trace___parseFriendly_tearOff$closure", "Trace___parseFriendly_tearOff", 128);
    _instance_0_u(A.OutstandingWork.prototype, "get$complete", "complete$0", 2);
    _instance_0_u(_ = A.Invoker.prototype, "get$removeOutstandingCallback", "removeOutstandingCallback$0", 2);
    _instance_0_u(_, "get$_onRun", "_onRun$0", 2);
    _instance_0_u(A.LiveTestController.prototype, "get$run", "run$0", 14);
    _instance_0_u(A.Engine.prototype, "get$run", "run$0", 190);
    _instance_1_u(_ = A.ExpandedReporter.prototype, "get$_onTestStarted", "_onTestStarted$1", 176);
    _instance_1_u(_, "get$_expanded$_onDone", "_expanded$_onDone$1", 174);
    _instance_0_u(_ = A._EventStreamSubscription.prototype, "get$cancel", "cancel$0", 14);
    _instance(_, "get$pause", 0, 0, null, ["call$1", "call$0"], ["pause$1", "pause$0"], 164, 0, 0);
    _instance_0_u(_, "get$resume", "resume$0", 2);
    _static_1(A, "lib_00_jsify_dartify_test__execute$closure", "execute", 22);
    _static_1(A, "lib_00_not_a_worker_test__execute$closure", "execute0", 22);
    _static_1(A, "lib_01_web_worker_test__execute$closure", "execute1", 22);
    _static_1(A, "lib_02_logging_test__execute$closure", "execute2", 22);
    _static_1(A, "lib_03_converter_test___asInt$closure", "_asInt0", 46);
    _static_1(A, "lib_03_converter_test__execute$closure", "execute3", 22);
    _static_1(A, "lib_03_converter_test__list_features___isNum$closure", "_isNum0", 66);
    _static_1(A, "lib_03_converter_test__list_features___isGt3$closure", "_isGt3", 66);
    _static_1(A, "lib_03_converter_test__list_features___isGt4$closure", "_isGt4", 66);
    _static_1(A, "lib_03_converter_test__list_features___isInt$closure", "_isInt0", 66);
    _static_1(A, "lib_03_converter_test__list_features___isNeg$closure", "_isNeg", 66);
    _static(A, "lib_03_converter_test__list_features___nf$closure", 0, null, ["call$1$0", "call$0"], ["_nf", function() {
      return A._nf(type$.dynamic);
    }], 123, 0);
    _instance_1_i(_ = A._Features0.prototype, "get$asMap", "asMap$1", "Map<int,1>(Object?)");
    _instance(_, "get$cast", 1, 1, null, ["call$1$1", "call$1"], ["cast$1$1", "cast$1"], 175, 0, 0);
    _instance_1_i(_, "get$clear", "clear$1", "List<1>(Object?)");
    _instance_1_u(_, "get$getFirst", "getFirst$1", "1(Object?)");
    _instance_1_u(_, "get$getLast", "getLast$1", "1(Object?)");
    _instance_1_u(_, "get$getLength", "getLength$1", 106);
    _instance_1_u(_, "get$getSingle", "getSingle$1", "1(Object?)");
    _instance_1_u(_, "get$getString", "getString$1", 81);
    _instance_1_i(_, "get$isEmpty", "isEmpty$1", 23);
    _instance_1_i(_, "get$isNotEmpty", "isNotEmpty$1", 23);
    _instance_1_i(_, "get$removeLast", "removeLast$1", "1(Object?)");
    _instance_1_i(_, "get$reversed", "reversed$1", "Iterable<1>(Object?)");
    _instance_1_i(_, "get$toList", "toList$1", "List<1>(Object?)");
    _instance_1_i(_, "get$toSet", "toSet$1", "Set<1>(Object?)");
    _instance(_, "get$whereType", 1, 1, null, ["call$1$1", "call$1"], ["whereType$1$1", "whereType$1"], 177, 0, 0);
    _static_1(A, "lib_03_converter_test__map_features___intSq$closure", "_intSq", 326);
    _static_1(A, "lib_03_converter_test__map_features___dblSq$closure", "_dblSq", 327);
    _static(A, "lib_03_converter_test__map_features___nf$closure", 0, null, ["call$1$0", "call$0"], ["_nf0", function() {
      return A._nf0(type$.dynamic);
    }], 123, 0);
    _instance_1_i(_ = A._Features.prototype, "get$isEmpty", "isEmpty$1", 23);
    _instance_1_i(_, "get$isNotEmpty", "isNotEmpty$1", 23);
    _instance_1_u(_, "get$keys", "keys$1", 212);
    _instance_1_u(_, "get$getLength", "getLength$1", 106);
    _instance_1_u(_, "get$values", "values$1", "Iterable<1>(Object?)");
    _instance(_, "get$cast", 1, 1, null, ["call$2$1", "call$1"], ["cast$2$1", "cast$1"], 213, 0, 0);
    _instance_1_i(_, "get$clear", "clear$1", "Map<String,1>(Object?)");
    _instance_1_u(_, "get$getString", "getString$1", 81);
    _static_1(A, "lib_04_worker_test__execute$closure", "execute4", 22);
    _static_1(A, "lib_05_worker_errors_test__execute$closure", "execute5", 22);
    _static_1(A, "lib_06_worker_streaming_test__execute$closure", "execute6", 22);
    _static_1(A, "lib_07_local_worker_test__execute$closure", "execute7", 22);
    _static_1(A, "lib_08_shared_channel_test__execute$closure", "execute8", 22);
    _static_1(A, "lib_09_cancelation_test__execute$closure", "execute9", 22);
    _static_1(A, "lib_10_marshaler_test__execute$closure", "execute10", 22);
    _static_1(A, "lib_11_worker_pool_test__execute$closure", "execute11", 22);
    _static_1(A, "lib_12_issues_test__execute$closure", "execute12", 22);
    _static_1(A, "console_to_html_Log_bold$closure", "Log_bold", 31);
    _static_1(A, "console_to_html_Log_red$closure", "Log_red", 31);
    _static_1(A, "console_to_html_Log_green$closure", "Log_green", 31);
    _static_1(A, "test_exception_TestException_deserialize$closure", "TestException_deserialize", 218);
    _instance_1_u(A.TestResult.prototype, "get$isMatch", "isMatch$1", 270);
    _static_2(A, "_platform__isSameInstance$closure", "isSameInstance", 109);
    _static_0(A, "_platform_web__unsendable$closure", "unsendable", 2);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, A.SafeToStringHook, J.ArrayIterator, A.Iterable, A.Closure, A.CastIterator, A.MapBase, A.Error, A.ListBase, A.SentinelValue, A.ListIterator, A.MappedIterator, A.WhereIterator, A.ExpandIterator, A.TakeIterator, A.TakeWhileIterator, A.SkipIterator, A.SkipWhileIterator, A.EmptyIterator, A.FollowedByIterator, A.WhereTypeIterator, A.NonNullsIterator, A.FixedLengthListMixin, A.UnmodifiableListMixin, A.Symbol, A._Record, A.MapView, A.ConstantMap, A._KeysOrValuesOrElementsIterator, A.SetBase, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.LinkedHashMapValueIterator, A.LinkedHashMapEntryIterator, A.JSSyntaxRegExp, A._MatchImplementation, A._AllMatchesIterator, A.StringMatch, A._StringAllMatchesIterator, A._Cell, A._UnmodifiableNativeByteBufferView, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A._SyncStarIterator, A.AsyncError, A.Stream, A._BufferingStreamSubscription, A._BroadcastStreamController, A.TimeoutException, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A._StreamController, A._SyncStreamControllerDispatch, A._AsyncStreamControllerDispatch, A._StreamSinkWrapper, A._DelayedEvent, A._DelayedDone, A._PendingEvents, A._DoneStreamSubscription, A._StreamIterator, A._ZoneFunction, A._ZoneSpecification, A._ZoneDelegate, A._Zone, A._HashMapKeyIterator, A._HashSetIterator, A._LinkedHashSetCell, A._LinkedHashSetIterator, A._MapBaseValueIterator, A._UnmodifiableMapMixin, A._ListQueueIterator, A.Codec, A.Converter, A._Base64Encoder, A._JsonStringifier, A._JsonPrettyPrintMixin, A._Utf8Encoder, A._Utf8Decoder, A._BigIntImpl, A.DateTime, A.Duration, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.IntegerDivisionByZeroException, A.MapEntry, A.Null, A._StringStackTrace, A.Stopwatch, A.RuneIterator, A.StringBuffer, A._Uri, A.UriData, A._SimpleUri, A.Expando, A.NullRejectionException, A._JSRandom, A._Random, A._JSSecureRandom, A.AsyncMemoizer, A.DelegatingSink, A.FutureGroup, A.StreamGroup, A._StreamGroupState, A.All, A.CancelationToken, A.CanceledException, A.CanceledExceptions, A._QueueList_Object_ListMixin, A.UnionSetController, A._DelegatingIterableBase, A.UnmodifiableSetMixin, A.LogFilter, A.LogEvent, A.LogOutput, A.LogPrinter, A.Logger, A.OutputEvent, A.Matcher, A.StringDescription, A._Mismatch, A.Context, A.Style, A.ParsedPath, A.PathException, A.Pool, A.PoolResource, A._WebChannel, A._EntryPointUri_Object_Releasable, A.EventBuffer, A.__WebLocalWorker_Object_Releasable, A._WebWorkerChannel, A.DisconnectedChannel, A.ForwardCompleter, A.ForwardStreamController, A.ResultStream, A.WorkerRunner, A.SquadronService, A.ConcurrencySettings, A.Converter0, A.LazyInPlaceList, A.LazyInPlaceMap, A.SerializationContext, A.ExceptionManager, A.SquadronException, A.TaskCanceledException, A.TaskTerminatedException, A.SquadronMarshaler, A.MarshalingContext, A.PoolWorker, A.WorkerTask, A._WorkerPool_Object_Releasable, A.PerfCounter, A.PerfCounterSnapshot, A.WorkerStat, A.CancelationTokenReference, A._Worker_Object_Releasable, A._Stats, A.Chain, A.Frame, A.LazyChain, A.LazyTrace, A._Node, A.Trace, A.UnparsedFrame, A.TestHandle, A.OutstandingWork, A.OutsideTestException, A.ClosedException, A.Timeout, A.Declarer, A.DuplicateTestNameException, A.Group, A.Test, A.Invoker, A._AsyncCounter, A.LiveTest, A.Message, A.MessageType, A.Metadata, A.OperatingSystem, A.PlatformSelector, A.Runtime, A.StackTraceFormatter, A.State, A.Suite, A.SuitePlatform, A.TestFailure, A.Engine, A.LiveSuite, A.LiveSuiteController, A.ExpandedReporter, A.RunnerSuiteController, A.SuiteConfiguration, A._IterableSet_Object_SetMixin, A.PrintSink, A.ReleasedException, A.Releasable, A.EventStreamProvider, A._EventStreamSubscription, A._Features0, A._Features, A.CacheStat, A.City, A.SequenceReplacement, A.Country, A.Fraction, A._LocalService_Object_SquadronVersion, A.Person, A.SquadronVersion, A.WorkerVersion, A.PoolVersion, A.TestContext, A.TestEntryPoints, A.TestException0, A.TestResult, A.TestSuite, A.TestTimeout, A.UnexpectedException]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JavaScriptBigInt, J.JavaScriptSymbol, J.JSNumber, J.JSString]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, J.JSArray, A.NativeByteBuffer, A.NativeTypedData]);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSArraySafeToStringHook, A.SafeToStringHook);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Iterable, [A._CastIterableBase, A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable, A.ExpandIterable, A.TakeIterable, A.TakeWhileIterable, A.SkipIterable, A.SkipWhileIterable, A.FollowedByIterable, A.WhereTypeIterable, A.NonNullsIterable, A._KeysOrValues, A._AllMatchesIterable, A._StringAllMatchesIterable, A._SyncStarIterable, A.Runes, A._EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin]);
    _inheritMany(A.Closure, [A._CastIterableBase_lastWhere_closure0, A.Closure0Args, A.Closure2Args, A._CastListBase_removeWhere_closure, A._CastListBase_retainWhere_closure, A.CastMap_update_closure0, A.CastMap_entries_closure, A.Instantiation, A.TearOffClosure, A.JsLinkedHashMap_containsValue_closure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A._SyncBroadcastStreamController__sendData_closure, A._SyncBroadcastStreamController__sendError_closure, A._SyncBroadcastStreamController__sendDone_closure, A.Future_wait_closure, A.Future_any_onValue, A.Future_doWhile_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A.Stream_Stream$fromFuture_closure, A.Stream_Stream$fromIterable_closure, A.Stream_length_closure, A.Stream_isEmpty_closure0, A.Stream_toList_closure, A.Stream_first_closure0, A._CustomZone_bindUnaryCallback_closure, A._CustomZone_bindUnaryCallbackGuarded_closure, A._RootZone_bindUnaryCallback_closure, A._RootZone_bindUnaryCallbackGuarded_closure, A._HashMap_values_closure, A._HashMap_containsValue_closure, A._CustomHashMap_closure, A._CustomHashSet_closure, A.MapBase_entries_closure, A._BigIntImpl_hashCode_finish, A._Uri__makePath_closure, A.jsify__convert, A.promiseToFuture_closure, A.promiseToFuture_closure0, A.dartify_convert, A.FutureGroup_add_closure, A.StreamGroup__onListen_closure, A.StreamGroup__onCancel_closure, A.CanceledExceptions_message_closure, A.CompositeToken$__closure, A.CompositeToken__checkTokens_closure, A.TimeoutToken_ensureStarted_closure, A.UnionSet__iterable_closure, A.UnionSet_contains_closure, A._Contains_matches_closure, A.CustomMatcher_matches_closure, A._DeepMatcher__compareSets_closure, A.AsyncMatcher_matches_closure, A._expect_closure2, A._expect_closure, A._UnorderedMatches__test_closure, A._UnorderedMatches__findPairingInner_closure, A._wrapArgs_closure, A.prettyPrint_prettyPrintImpl, A.prettyPrint_prettyPrintImpl_pp, A.prettyPrint_prettyPrintImpl_closure, A.prettyPrint_prettyPrintImpl_closure0, A.prettyPrint_prettyPrintImpl_closure1, A.wrapMatcher_closure, A.escape_closure, A.Context_joinAll_closure, A.Context_split_closure, A._validateArgList_closure, A.WindowsStyle_absolutePathToUri_closure, A.Pool__runOnRelease_closure, A.openChannel_fail, A.openChannel_success, A.openChannel_$errorHandler, A.openChannel_$errorHandler_closure0, A.openChannel_closure, A.openChannel_closure0, A._WebChannel__getResponseStream_$sendRequest_$forwardMessage, A._WebChannel__getResponseStream_$sendRequest__closure, A._WebChannel__getResponseStream_$sendRequest__closure0, A._WebChannel_sendRequest_$success, A._WebChannel_sendRequest_$fail, A.$transferify_closure, A.$jsify_closure, A.$jsify_closure0, A.$jsify_closure1, A.$jsify2_closure0, A.$jsify2_closure, A.$dartify_closure, A.JsWorkerRunnerExt_get_handle_closure, A.ResultStream_$decodeStreamOfResponses, A.ResultStream_$decodeSingleResponse, A.ResultStream_$getStreamId, A.ResultStream_$closeWithError, A.WorkerRunner_WorkerRunner$use_closure, A.WorkerRunner__checkOperations_closure, A.WorkerRunner_processRequest_$postError, A.WorkerRunner_processRequest_post, A.WorkerRunner__pipe_closure1, A.ContextAwareConverter_value_closure, A.ContextAwareConverter_list_closure, A.ContextAwareConverter_list_closure0, A.ContextAwareConverter_nlist_closure, A.ContextAwareConverter_nlist_closure0, A.ContextAwareConverter_set_closure, A.ContextAwareConverter_set_closure0, A.ContextAwareConverter_nset_closure, A.ContextAwareConverter_nset_closure0, A.ContextAwareConverter_map_closure, A.ContextAwareConverter_map_closure0, A.ContextAwareConverter_map_closure1, A.ContextAwareConverter_map__closure, A.ContextAwareConverter_nmap_closure, A.ContextAwareConverter_nmap_closure0, A.ContextAwareConverter_nmap_closure1, A.ContextAwareConverter_nmap__closure, A.Converter__mapList_closure, A.Converter__mapSet_closure, A.Converter__mapMap_closure, A.Converter_allowNull_closure, A.LazyInPlaceList_retainWhere_closure, A.LazyInPlaceMap_entries_closure, A.LazyInPlaceMap_values_closure, A.LazyInPlaceMap_containsValue_closure, A.LazyInPlaceMap_update_closure, A.SquadronCanceledException_SquadronCanceledException$from_closure, A.SquadronCanceledExceptions_message_closure, A.SquadronCanceledExceptions_serialize_closure, A.WorkerStreamTask_execute_closure, A.WorkerStreamTask_execute_closure0, A.WorkerPool__provisionWorkers_closure0, A.WorkerPool__provisionWorkers__closure, A.WorkerPool__provisionWorkers__closure1, A.WorkerPool_stop_closure, A.WorkerPool___schedule_closure, A.WorkerPool___schedule_closure0, A.WorkerPool_cancel_closure, A.Worker_send_closure, A.Worker_stream_closure, A._LogEventSerializationExt__getLevel_closure, A.Chain_Chain$parse_closure, A.Chain_foldFrames_closure, A.Chain_foldFrames_closure0, A.Chain_toTrace_closure, A.Chain_toString_closure0, A.Chain_toString__closure0, A.Chain_toString_closure, A.Chain_toString__closure, A.Trace__parseVM_closure, A.Trace$parseV8_closure, A.Trace$parseJSCore_closure, A.Trace$parseFirefox_closure, A.Trace$parseFriendly_closure, A.Trace_foldFrames_closure, A.Trace_foldFrames_closure0, A.Trace_toString_closure0, A.Trace_toString_closure, A.Declarer_build_closure, A.Declarer__runSetUps_closure, A.Group_forPlatform_closure, A.Group__map_closure, A.Invoker_guard_closure, A.Invoker_runTearDowns__closure0, A.Invoker__onRun___closure0, A.Metadata__validateTags_closure, A.Metadata__validateTags_closure0, A.PlatformSelector_validate__closure, A.PlatformSelector_evaluate_closure, A.StackTraceFormatter_formatStackTrace_closure, A.Engine_success_closure, A.Engine_closure, A.Engine_run_closure, A.Engine__runLiveTest_closure, A.LiveSuiteController_reportLiveTest_closure, A.ExpandedReporter__onTestStarted_closure, A.ExpandedReporter__onTestStarted_closure0, A.ExpandedReporter__onTestStarted_closure1, A._EventStreamSubscription_closure, A._EventStreamSubscription_onData_closure, A.execute____closure_unused, A.execute____closure173, A.execute_____closure76, A.execute_____closure77, A.execute_____closure78, A.execute____closure172, A.execute_____closure73, A.execute_____closure74, A.execute_____closure75, A.execute____closure135, A.execute____closure136, A.execute____closure133, A.execute____closure134, A.execute____closure131, A.execute____closure132, A.execute____closure129, A.execute____closure130, A.execute____closure127, A.execute____closure128, A.execute____closure51, A.execute____closure50, A.execute____closure49, A.execute____closure48, A.execute____closure47, A.execute____closure46, A.execute____closure45, A.execute____closure44, A.testCastConverter__closure_$platformSensitive0, A.testCastConverter__closure_$fails0, A.testCastConverter__closure_$succeeds0, A.testCastConverter__closure_$platformSensitive, A.testCastConverter__closure_$fails, A.testCastConverter__closure_$succeeds, A.testLazyLists_$initDataContext, A._dblTests_closure26, A._dblTests_closure27, A._dblTests_closure28, A._dblTests_closure29, A._dblTests_closure30, A._dblTests_closure31, A._dblTests_closure32, A._dblTests_closure33, A._dblTests_closure34, A._dblTests_closure35, A._dblTests_closure36, A._dblTests_closure37, A._dblTests_closure38, A._dblTests_closure39, A._dblTests_closure40, A._dblTests_closure41, A._dblTests_closure42, A._dblTests_closure43, A._dblTests_closure44, A._dblTests_closure45, A._dblTests_closure46, A._dblTests_closure47, A._dblTests_closure48, A._dblTests_closure49, A._dblTests_closure50, A._dblTests_closure51, A._dblTests_closure52, A._dblTests_closure53, A._dblTests_closure54, A._dblTests_closure55, A._dblTests_closure56, A._dblTests_closure57, A._dblTests_closure58, A._dblTests_closure59, A._dblTests_closure60, A._dblTests_closure61, A._dblTests__closure12, A._dblTests_closure62, A._dblTests_closure63, A._dblTests_closure64, A._dblTests_closure65, A._dblTests_closure66, A._dblTests_closure67, A._dblTests_closure68, A._dblTests_closure69, A._dblTests_closure70, A._dblTests_closure71, A._dblTests_closure72, A._dblTests_closure73, A._dblTests_closure74, A._dblTests_closure75, A._dblTests_closure76, A._dblTests__closure9, A._dblTests_closure77, A._dblTests__closure8, A._dblTests_closure78, A._dblTests_closure79, A._dblTests_closure80, A._dblTests_closure81, A._dblTests_closure82, A._dblTests_closure83, A._dblTests_closure84, A._dblTests_closure85, A._dblTests_closure86, A._dblTests_closure87, A._dblTests_closure88, A._dblTests__closure7, A._dblTests_closure89, A._dblTests_closure90, A._dblTests_closure91, A._dblTests_closure92, A._dblTests_closure93, A._dblTests_closure94, A._dblTests_closure95, A._dblTests_closure96, A._dblTests_closure97, A._dblTests_closure98, A._dblTests_closure99, A._dblTests_closure100, A._dblTests_closure101, A._dblTests_closure102, A._dblTests_closure103, A._dblTests_closure104, A._dblTests_closure105, A._dblTests_closure106, A._dblTests_closure107, A._dblTests_closure108, A._dblTests_closure109, A._dblTests_closure110, A._dblTests_closure111, A._dblTests_closure112, A._dblTests_closure113, A._dblTests_closure114, A._dblTests_closure115, A._dblTests_closure116, A._dblTests_closure117, A._dblTests_closure118, A._dblTests_closure119, A._dblTests_closure120, A._dblTests_closure121, A._ndblTests_closure26, A._ndblTests_closure27, A._ndblTests_closure28, A._ndblTests_closure29, A._ndblTests_closure30, A._ndblTests_closure31, A._ndblTests_closure32, A._ndblTests_closure33, A._ndblTests_closure34, A._ndblTests_closure35, A._ndblTests_closure36, A._ndblTests_closure37, A._ndblTests_closure38, A._ndblTests_closure39, A._ndblTests_closure40, A._ndblTests_closure41, A._ndblTests_closure42, A._ndblTests_closure43, A._ndblTests_closure44, A._ndblTests_closure45, A._ndblTests_closure46, A._ndblTests_closure47, A._ndblTests_closure48, A._ndblTests_closure49, A._ndblTests_closure50, A._ndblTests_closure51, A._ndblTests_closure52, A._ndblTests_closure53, A._ndblTests_closure54, A._ndblTests_closure55, A._ndblTests_closure56, A._ndblTests_closure57, A._ndblTests_closure58, A._ndblTests_closure59, A._ndblTests_closure60, A._ndblTests_closure61, A._ndblTests__closure11, A._ndblTests_closure62, A._ndblTests_closure63, A._ndblTests_closure64, A._ndblTests_closure65, A._ndblTests_closure66, A._ndblTests_closure67, A._ndblTests_closure68, A._ndblTests_closure69, A._ndblTests_closure70, A._ndblTests_closure71, A._ndblTests_closure72, A._ndblTests_closure73, A._ndblTests_closure74, A._ndblTests_closure75, A._ndblTests_closure76, A._ndblTests__closure8, A._ndblTests_closure77, A._ndblTests__closure7, A._ndblTests_closure78, A._ndblTests_closure79, A._ndblTests_closure80, A._ndblTests_closure81, A._ndblTests_closure82, A._ndblTests_closure83, A._ndblTests_closure84, A._ndblTests_closure85, A._ndblTests_closure86, A._ndblTests_closure87, A._ndblTests_closure88, A._ndblTests__closure6, A._ndblTests_closure89, A._ndblTests_closure90, A._ndblTests_closure91, A._ndblTests_closure92, A._ndblTests_closure93, A._ndblTests_closure94, A._ndblTests_closure95, A._ndblTests_closure96, A._ndblTests_closure97, A._ndblTests_closure98, A._ndblTests_closure99, A._ndblTests_closure100, A._ndblTests_closure101, A._ndblTests_closure102, A._ndblTests_closure103, A._ndblTests_closure104, A._ndblTests_closure105, A._ndblTests_closure106, A._ndblTests_closure107, A._ndblTests_closure108, A._ndblTests_closure109, A._ndblTests_closure110, A._ndblTests_closure111, A._ndblTests_closure112, A._ndblTests_closure113, A._ndblTests_closure114, A._ndblTests_closure115, A._ndblTests_closure116, A._ndblTests_closure117, A._ndblTests_closure118, A._ndblTests_closure119, A._nintTests_closure26, A._nintTests_closure27, A._nintTests_closure28, A._nintTests_closure29, A._nintTests_closure30, A._nintTests_closure31, A._nintTests_closure32, A._nintTests_closure33, A._nintTests_closure34, A._nintTests_closure35, A._nintTests_closure36, A._nintTests_closure37, A._nintTests_closure38, A._nintTests_closure39, A._nintTests_closure40, A._nintTests_closure41, A._nintTests_closure42, A._nintTests_closure43, A._nintTests_closure44, A._nintTests_closure45, A._nintTests_closure46, A._nintTests_closure47, A._nintTests_closure48, A._nintTests_closure49, A._nintTests_closure50, A._nintTests_closure51, A._nintTests_closure52, A._nintTests_closure53, A._nintTests_closure54, A._nintTests_closure55, A._nintTests_closure56, A._nintTests_closure57, A._nintTests_closure58, A._nintTests_closure59, A._nintTests_closure60, A._nintTests_closure61, A._nintTests__closure11, A._nintTests_closure62, A._nintTests_closure63, A._nintTests_closure64, A._nintTests_closure65, A._nintTests_closure66, A._nintTests_closure67, A._nintTests_closure68, A._nintTests_closure69, A._nintTests_closure70, A._nintTests_closure71, A._nintTests_closure72, A._nintTests_closure73, A._nintTests_closure74, A._nintTests_closure75, A._nintTests_closure76, A._nintTests__closure8, A._nintTests_closure77, A._nintTests__closure7, A._nintTests_closure78, A._nintTests_closure79, A._nintTests_closure80, A._nintTests_closure81, A._nintTests_closure82, A._nintTests_closure83, A._nintTests_closure84, A._nintTests_closure85, A._nintTests_closure86, A._nintTests_closure87, A._nintTests_closure88, A._nintTests__closure6, A._nintTests_closure89, A._nintTests_closure90, A._nintTests_closure91, A._nintTests_closure92, A._nintTests_closure93, A._nintTests_closure94, A._nintTests_closure95, A._nintTests_closure96, A._nintTests_closure97, A._nintTests_closure98, A._nintTests_closure99, A._nintTests_closure100, A._nintTests_closure101, A._nintTests_closure102, A._nintTests_closure103, A._nintTests_closure104, A._nintTests_closure105, A._nintTests_closure106, A._nintTests_closure107, A._nintTests_closure108, A._nintTests_closure109, A._nintTests_closure110, A._nintTests_closure111, A._nintTests_closure112, A._nintTests_closure113, A._nintTests_closure114, A._nintTests_closure115, A._nintTests_closure116, A._nintTests_closure117, A._nintTests_closure118, A._nintTests_closure119, A._Features_forEach_$a0, A.testLazyMaps_$initDataContext, A.testLazyMaps_$initDataContext_closure, A._dblTests_closure, A._dblTests__closure5, A._dblTests_closure0, A._dblTests_closure1, A._dblTests_closure2, A._dblTests_closure3, A._dblTests_closure4, A._dblTests_closure5, A._dblTests_closure6, A._dblTests_closure7, A._dblTests_closure8, A._dblTests_closure9, A._dblTests_closure10, A._dblTests_closure11, A._dblTests_closure12, A._dblTests_closure13, A._dblTests_closure14, A._dblTests_closure15, A._dblTests_closure16, A._dblTests_closure17, A._dblTests_closure18, A._dblTests_closure19, A._dblTests_closure20, A._dblTests_closure21, A._dblTests_closure22, A._dblTests_closure23, A._dblTests_closure24, A._dblTests_closure25, A._ndblTests_closure, A._ndblTests__closure5, A._ndblTests_closure0, A._ndblTests_closure1, A._ndblTests_closure2, A._ndblTests_closure3, A._ndblTests_closure4, A._ndblTests_closure5, A._ndblTests_closure6, A._ndblTests_closure7, A._ndblTests_closure8, A._ndblTests_closure9, A._ndblTests_closure10, A._ndblTests_closure11, A._ndblTests_closure12, A._ndblTests_closure13, A._ndblTests_closure14, A._ndblTests_closure15, A._ndblTests_closure16, A._ndblTests_closure17, A._ndblTests_closure18, A._ndblTests_closure19, A._ndblTests_closure20, A._ndblTests_closure21, A._ndblTests_closure22, A._ndblTests_closure23, A._ndblTests_closure24, A._ndblTests_closure25, A._nintTests_closure, A._nintTests__closure5, A._nintTests_closure0, A._nintTests_closure1, A._nintTests_closure2, A._nintTests_closure3, A._nintTests_closure4, A._nintTests_closure5, A._nintTests_closure6, A._nintTests_closure7, A._nintTests_closure8, A._nintTests_closure9, A._nintTests_closure10, A._nintTests_closure11, A._nintTests_closure12, A._nintTests_closure13, A._nintTests_closure14, A._nintTests_closure15, A._nintTests_closure16, A._nintTests_closure17, A._nintTests_closure18, A._nintTests_closure19, A._nintTests_closure20, A._nintTests_closure21, A._nintTests_closure22, A._nintTests_closure23, A._nintTests_closure24, A._nintTests_closure25, A.execute____closure126, A.execute____closure125, A.execute____closure124, A.execute___closure_hook0, A.execute____closure123, A.execute____closure122, A.execute____closure121, A.execute____closure120, A.execute____closure119, A.execute____closure118, A.execute____closure117, A.execute____closure116, A.execute____closure115, A.execute____closure114, A.execute____closure113, A.execute____closure112, A.execute____closure_createTask0, A.execute____closure111, A.execute____closure_createTask, A.execute____closure110, A.execute____closure109, A.execute____closure108, A.execute____closure107, A.execute___closure_hook, A.execute____closure106, A.execute____closure105, A.execute____closure104, A.execute____closure103, A.execute____closure102, A.execute____closure101, A.execute____closure100, A.execute____closure99, A.execute____closure98, A.execute____closure97, A.execute____closure96, A.execute____closure95, A.execute____closure94, A.execute_____closure68, A.execute____closure93, A.execute____closure92, A.execute____closure91, A.execute____closure90, A.execute____closure89, A.execute____closure88, A.execute_____closure66, A.execute_____closure67, A.execute_____closure42, A.execute_____closure41, A.execute______closure46, A.execute_____closure40, A.execute______closure45, A.execute_____closure39, A.execute_____closure38, A.execute______closure44, A.execute_____closure37, A.execute______closure43, A.execute_____closure36, A.execute_____closure35, A.execute______closure42, A.execute_______closure4, A.execute_____closure34, A.execute______closure41, A.execute_______closure3, A.execute____closure62, A.execute____closure61, A.execute_____closure43, A.execute_____closure29, A.execute______closure40, A.execute_____closure28, A.execute_____closure27, A.execute_____closure26, A.execute______closure39, A.execute_____closure25, A.execute______closure34, A.execute______closure35, A.execute______closure36, A.execute______closure37, A.execute______closure38, A.execute_____closure24, A.execute______closure29, A.execute______closure30, A.execute______closure31, A.execute______closure32, A.execute______closure33, A.execute_____closure23, A.execute_____closure22, A.execute_____closure21, A.execute_____closure20, A.execute______closure25, A.execute_______closure2, A.execute______closure26, A.execute_______closure0, A.execute_______closure1, A.execute______closure27, A.execute_______closure, A.execute______closure28, A.execute_____closure19, A.execute______closure12, A.execute______closure14, A.execute______closure15, A.execute______closure16, A.execute______closure17, A.execute______closure18, A.execute______closure19, A.execute______closure20, A.execute______closure21, A.execute______closure22, A.execute______closure23, A.execute______closure24, A.execute_____closure18, A.execute______closure, A.execute______closure1, A.execute______closure2, A.execute______closure3, A.execute______closure4, A.execute______closure5, A.execute______closure6, A.execute______closure7, A.execute______closure8, A.execute______closure9, A.execute______closure10, A.execute______closure11, A.execute_____closure17, A.execute_____closure16, A.execute_____closure15, A.execute_____closure14, A.execute_____closure13, A.execute_____closure12, A.execute_____closure11, A.execute_____closure10, A.execute_____closure9, A.execute_____closure8, A.execute_____closure7, A.execute_____closure6, A._testFinitePoolCancelation_closure, A._testFinitePoolCancelation_closure0, A._testInfinitePoolCancelation_closure, A._testInfinitePoolCancelation_closure0, A.execute__closure_testSum, A.execute_____closure32, A.execute_____closure33, A.execute_____closure30, A.execute_____closure31, A.execute____closure40, A.execute____closure39, A.execute____closure38, A.execute____closure37, A.execute____closure36, A.execute____closure35, A.execute____closure34, A.execute____closure33, A.execute____closure32, A.execute____closure31, A.execute____closure30, A.execute____closure87, A.execute_____closure65, A.execute______closure54, A.execute______closure55, A.execute____closure86, A.execute_____closure64, A.execute______closure53, A.execute_____closure63, A.execute_____closure62, A.execute_____closure61, A.execute_____closure60, A.execute_____closure59, A.execute_____closure58, A.execute_____closure57, A.execute_____closure56, A.execute_____closure55, A.execute_____closure54, A.execute_____closure53, A.execute____closure74, A.execute____closure73, A.execute____closure72, A.execute____closure71, A.execute_____closure51, A.execute______closure47, A.execute______closure48, A.execute______closure49, A.execute______closure50, A.execute_____closure50, A.execute_____closure49, A.execute_____closure48, A.execute_____closure47, A.execute_____closure46, A.execute_____closure45, A.execute_____closure44, A.execute_____closure5, A.execute_____closure4, A.execute_____closure3, A.execute_____closure2, A.execute_____closure1, A.execute_____closure0, A.execute_____closure, A._checkWebWorkers_closure, A.main_$setStatus, A.main_closure, A.main_$setPlatformButtons, A.main_closure0, A.main_closure1, A.main_closure2, A.main_closure3, A.main_$launch, A.main_$launch_closure, A.main_$selectAll, A.main_$deselectAll, A.main_$toggle, A.main_$cancel, A.main_$nextError, A.main_$prevError, A.main_$clear, A.ErrorWorkerPool_closure, A.ErrorWorkerPool_throwException_closure, A.ErrorWorkerPool_throwWorkerException_closure, A.ErrorWorkerPool_throwTaskTimeOutException_closure, A.ErrorWorkerPool_throwCanceledException_closure, A.ErrorWorkerPool_throwTestException_closure, A.NotifyChildExt_get_notify_closure, A.IssuesWorkerPool_closure, A.IssuesWorkerPool_issue_8_closure, A.IssuesWorkerPool_issue_23_closure, A.LocalClientWorkerPool_closure, A.LocalClientWorkerPool_checkIds_closure, A.LocalClientWorkerPool_checkException_closure, A.LocalClientWorkerPool_checkSequence_closure, A.LocalServiceImpl_operations_closure, A.LocalServiceImpl_operations_closure0, A.LocalServiceImpl_operations_closure1, A.LocalServiceImpl_operations_closure2, A.MemoryLogger_logs_closure, A.PersonMarshaler_marshal_closure, A.PersonMarshaler_unmarshal_$unmarshal, A.PrimeWorkerPool_closure, A.PrimeWorkerPool_isPrime_closure, A.PrimeWorkerPool_getPrimes_closure, A.TestContext_wait_closure, A.TestContext_rootGroups_closure, A.TestContext_rootGroups_closure0, A.TestWorkerPool_closure, A.TestWorkerPool$throws_closure, A.TestWorkerPool$missingStartRequest_closure, A.TestWorkerPool$invalid_closure, A.TestWorkerPool_io_closure, A.TestWorkerPool_cpu_closure, A.TestWorkerPool_delayed_80ms_closure, A.TestWorkerPool_ping_closure, A.TestWorkerPool_finite_20ms_closure, A.TestWorkerPool_infinite_20ms_closure, A.TestWorkerPool_getPendingInfiniteWithErrors_closure, A.TestWorkerPool_infiniteWithErrors_closure, A.TestWorkerPool_delayedTask_closure, A.TestWorkerPool_finiteTask_closure, A.TestWorkerPool_infiniteWithErrorsTask_closure, A.TestWorkerPool_map_closure, A.TestWorker_fractionAdd_closure, A.TestWorker_fractionAdd_closure0, A.TestWorker_getPlatformType_closure]);
    _inheritMany(A.Closure0Args, [A._CastIterableBase_lastWhere_closure, A.CastMap_putIfAbsent_closure, A.CastMap_update_closure, A.nullFuture_closure, A.Primitives_initTicker_closure, A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._TimerImpl$periodic_closure, A.Future_Future_closure, A.Future_Future$microtask_closure, A.Future_Future$delayed_closure, A.Future_forEach_closure, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainCoreFuture_closure, A._Future__asyncCompleteWithValue_closure, A._Future__asyncCompleteErrorObject_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A.Stream_Stream$fromIterable_closure_next, A.Stream_Stream$fromIterable__closure, A.Stream_length_closure0, A.Stream_isEmpty_closure, A.Stream_toList_closure0, A.Stream_first_closure, A._StreamController__subscribe_closure, A._StreamController__recordCancel_complete, A._BufferingStreamSubscription_asFuture_closure, A._BufferingStreamSubscription_asFuture__closure, A._BufferingStreamSubscription__sendError_sendError, A._BufferingStreamSubscription__sendDone_sendDone, A._PendingEvents_schedule_closure, A._DoneStreamSubscription_asFuture_closure, A._MultiStream_listen_closure, A._cancelAndValue_closure, A._CustomZone_bindCallback_closure, A._CustomZone_bindCallbackGuarded_closure, A._rootHandleError_closure, A._RootZone_bindCallback_closure, A._RootZone_bindCallbackGuarded_closure, A._Utf8Decoder__decoder_closure, A._Utf8Decoder__decoderNonfatal_closure, A.StreamGroup_add_closure, A.StreamGroup_add_closure0, A.StreamGroup__listenToStream_closure, A.Logger_defaultFilter_closure, A._expect_closure0, A._expect_closure1, A.Pool__onResourceReleaseAllowed_closure, A.openChannel_$errorHandler_closure, A.openChannel_$errorHandler__closure, A.openChannel_$errorHandler__closure0, A.openChannel__closure1, A.openChannel__closure, A.openChannel__closure0, A.openChannel_closure1, A.openChannel_closure2, A._WebForwardChannel__forward_closure, A._WebChannel__postRequest_closure, A._WebChannel__inspectAndPostRequest_closure, A._WebChannel__getResponseStream_$sendRequest, A._WebChannel__getResponseStream_$sendRequest_$close, A._WebChannel__getResponseStream_$sendRequest_closure, A._WebChannel__getResponseStream_closure, A._WebChannel_sendRequest_$done, A.EventBuffer_add_closure, A.EventBuffer_addError_closure, A._WebWorkerChannel__postResponse_closure, A._WebWorkerChannel__inspectAndPostResponse_closure, A.ResultStream_$onCancel, A.ResultStream_$onListen, A.WorkerRunner__getTokenRef_closure, A.WorkerRunner__pipe_onDone, A.WorkerRunner__pipe_closure, A.WorkerRunner__pipe_closure0, A.PoolWorker_run_closure, A.WorkerStreamTask_closure, A.WorkerPool__provisionWorkers_closure, A.WorkerPool__provisionWorkers_closure2, A.WorkerPool__provisionWorkers__closure0, A.WorkerPool__provisionWorkers__closure2, A.WorkerPool__dispatchTasks_closure, A.Worker_stream_closure0, A.Chain_Chain$current_closure, A.Chain_Chain$forTrace_closure, A.Frame_Frame$parseVM_closure, A.Frame_Frame$parseV8_closure, A.Frame_Frame$_parseFirefoxEval_closure, A.Frame_Frame$parseFirefox_closure, A.Frame_Frame$parseFriendly_closure, A.LazyChain_foldFrames_closure, A.LazyTrace_foldFrames_closure, A.StackZoneSpecification_chainFor_closure, A.StackZoneSpecification_chainFor_closure0, A.StackZoneSpecification__currentTrace_closure, A.Trace_Trace$from_closure, A.Declarer_test_closure, A.Declarer_test__closure, A.Declarer_group_closure, A.Declarer_build__closure, A.Declarer__tearDownAll_closure, A.Declarer__tearDownAll__closure, A.Invoker_guard__closure, A.Invoker_runTearDowns_closure, A.Invoker_runTearDowns__closure, A.Invoker__waitForOutstandingCallbacks_closure, A.Invoker__waitForOutstandingCallbacks_closure0, A.Invoker_heartbeat_message, A.Invoker_heartbeat_closure, A.Invoker_heartbeat__closure, A.Invoker__handleError_closure, A.Invoker__onRun_closure, A.Invoker__onRun__closure, A.Invoker__onRun___closure, A.Invoker__onRun____closure, A.Invoker__onRun____closure0, A.Metadata_Metadata_unresolved, A.PlatformSelector_validate_closure, A.pumpEventQueue_closure, A.Engine_run__closure, A.Engine_run___closure, A.Engine_run_closure0, A.Engine__runLiveTest_closure0, A.Engine__runLiveTest_closure1, A.Engine__runSkippedTest_closure, A.Engine__runSkippedTest_closure0, A.Engine__runSkippedTest_closure1, A.LiveSuiteController_close_closure, A.RunnerSuiteController__close_closure, A._declarer_closure, A._declarer__closure, A.currentOSGuess_closure, A.Using_useAsync_closure, A.execute_closure11, A.execute__closure16, A.execute___closure106, A.execute____closure170, A.execute____closure171, A.execute___closure107, A.execute____closure156, A.execute____closure157, A.execute____closure158, A.execute____closure159, A.execute____closure160, A.execute____closure161, A.execute____closure162, A.execute____closure163, A.execute____closure164, A.execute____closure165, A.execute____closure166, A.execute____closure167, A.execute____closure168, A.execute____closure169, A.execute_____closure71, A.execute_____closure72, A.execute___closure108, A.execute____closure143, A.execute____closure144, A.execute____closure145, A.execute____closure146, A.execute____closure147, A.execute____closure148, A.execute____closure149, A.execute____closure150, A.execute____closure151, A.execute____closure152, A.execute____closure153, A.execute____closure154, A.execute____closure155, A.execute___closure109, A.execute____closure137, A.execute____closure138, A.execute____closure139, A.execute____closure140, A.execute____closure141, A.execute____closure142, A.execute_closure12, A.execute__closure17, A.execute___closure110, A.execute___closure111, A.execute_closure10, A.execute__closure15, A.execute___closure101, A.execute___closure102, A.execute___closure103, A.execute___closure104, A.execute___closure105, A.execute_closure3, A.execute__closure4, A.execute___closure25, A.execute___closure26, A.execute___closure27, A.execute___closure28, A.execute___closure29, A.execute___closure30, A.execute___closure31, A.execute___closure32, A.execute___closure33, A.execute___closure34, A.execute_closure2, A.execute__closure2, A.execute___closure23, A.execute___closure24, A.execute__closure3, A.execute___closure19, A.execute____closure43, A.execute___closure20, A.execute___closure21, A.execute___closure_check, A.execute___closure22, A.execute___closure_check1, A.execute___closure_check2, A.testCastConverter_closure, A.testCastConverter__closure, A.testCastConverter___closure29, A.testCastConverter___closure30, A.testCastConverter___closure31, A.testCastConverter___closure32, A.testCastConverter___closure33, A.testCastConverter___closure34, A.testCastConverter___closure35, A.testCastConverter__closure0, A.testCastConverter___closure22, A.testCastConverter___closure23, A.testCastConverter___closure24, A.testCastConverter___closure25, A.testCastConverter___closure26, A.testCastConverter___closure27, A.testCastConverter___closure28, A.testCastConverter__closure1, A.testCastConverter___closure14, A.testCastConverter____closure19, A.testCastConverter___closure15, A.testCastConverter____closure18, A.testCastConverter___closure16, A.testCastConverter____closure17, A.testCastConverter___closure17, A.testCastConverter____closure16, A.testCastConverter___closure18, A.testCastConverter____closure15, A.testCastConverter___closure19, A.testCastConverter____closure14, A.testCastConverter___closure20, A.testCastConverter____closure13, A.testCastConverter___closure21, A.testCastConverter____closure12, A.testCastConverter__closure2, A.testCastConverter___closure6, A.testCastConverter____closure11, A.testCastConverter___closure7, A.testCastConverter____closure10, A.testCastConverter___closure8, A.testCastConverter____closure9, A.testCastConverter___closure9, A.testCastConverter____closure8, A.testCastConverter___closure10, A.testCastConverter____closure7, A.testCastConverter___closure11, A.testCastConverter____closure6, A.testCastConverter___closure12, A.testCastConverter____closure5, A.testCastConverter___closure13, A.testCastConverter____closure4, A.testCastConverter__closure3, A.testCastConverter___closure1, A.testCastConverter____closure3, A.testCastConverter___closure2, A.testCastConverter____closure2, A.testCastConverter___closure3, A.testCastConverter____closure1, A.testCastConverter___closure4, A.testCastConverter____closure0, A.testCastConverter___closure5, A.testCastConverter____closure, A.testCastConverter__closure4, A.testCastConverter___closure, A.testCastConverter___closure0, A.testContextAwareConverter_closure, A.testContextAwareConverter__closure, A.testContextAwareConverter__closure0, A.testContextAwareConverter___closure29, A.testContextAwareConverter___closure30, A.testContextAwareConverter___closure31, A.testContextAwareConverter____closure35, A.testContextAwareConverter____closure36, A.testContextAwareConverter____closure37, A.testContextAwareConverter____closure38, A.testContextAwareConverter____closure39, A.testContextAwareConverter____closure40, A.testContextAwareConverter____closure41, A.testContextAwareConverter____closure42, A.testContextAwareConverter___closure32, A.testContextAwareConverter____closure34, A.testContextAwareConverter___closure33, A.testContextAwareConverter____closure32, A.testContextAwareConverter____closure33, A.testContextAwareConverter___closure34, A.testContextAwareConverter____closure28, A.testContextAwareConverter____closure29, A.testContextAwareConverter____closure30, A.testContextAwareConverter____closure31, A.testContextAwareConverter___closure35, A.testContextAwareConverter____closure26, A.testContextAwareConverter____closure27, A.testContextAwareConverter__closure1, A.testContextAwareConverter___closure22, A.testContextAwareConverter___closure23, A.testContextAwareConverter___closure24, A.testContextAwareConverter___closure25, A.testContextAwareConverter____closure25, A.testContextAwareConverter___closure26, A.testContextAwareConverter____closure23, A.testContextAwareConverter____closure24, A.testContextAwareConverter___closure27, A.testContextAwareConverter____closure21, A.testContextAwareConverter____closure22, A.testContextAwareConverter___closure28, A.testContextAwareConverter____closure19, A.testContextAwareConverter____closure20, A.testContextAwareConverter__closure2, A.testContextAwareConverter___closure14, A.testContextAwareConverter____closure18, A.testContextAwareConverter___closure15, A.testContextAwareConverter___closure16, A.testContextAwareConverter____closure17, A.testContextAwareConverter___closure17, A.testContextAwareConverter____closure16, A.testContextAwareConverter___closure18, A.testContextAwareConverter____closure15, A.testContextAwareConverter___closure19, A.testContextAwareConverter____closure14, A.testContextAwareConverter___closure20, A.testContextAwareConverter____closure13, A.testContextAwareConverter___closure21, A.testContextAwareConverter____closure12, A.testContextAwareConverter__closure3, A.testContextAwareConverter___closure6, A.testContextAwareConverter____closure11, A.testContextAwareConverter___closure7, A.testContextAwareConverter____closure10, A.testContextAwareConverter___closure8, A.testContextAwareConverter____closure9, A.testContextAwareConverter___closure9, A.testContextAwareConverter____closure8, A.testContextAwareConverter___closure10, A.testContextAwareConverter____closure7, A.testContextAwareConverter___closure11, A.testContextAwareConverter____closure6, A.testContextAwareConverter___closure12, A.testContextAwareConverter____closure5, A.testContextAwareConverter___closure13, A.testContextAwareConverter____closure4, A.testContextAwareConverter__closure4, A.testContextAwareConverter___closure1, A.testContextAwareConverter____closure3, A.testContextAwareConverter___closure2, A.testContextAwareConverter____closure2, A.testContextAwareConverter___closure3, A.testContextAwareConverter____closure1, A.testContextAwareConverter___closure4, A.testContextAwareConverter____closure0, A.testContextAwareConverter___closure5, A.testContextAwareConverter____closure, A.testContextAwareConverter__closure5, A.testContextAwareConverter___closure, A.testContextAwareConverter___closure0, A.testNumConverter_closure, A.testNumConverter__closure, A.testNumConverter___closure29, A.testNumConverter___closure30, A.testNumConverter___closure31, A.testNumConverter____closure35, A.testNumConverter____closure36, A.testNumConverter____closure37, A.testNumConverter____closure38, A.testNumConverter____closure39, A.testNumConverter____closure40, A.testNumConverter____closure41, A.testNumConverter____closure42, A.testNumConverter___closure32, A.testNumConverter____closure34, A.testNumConverter___closure33, A.testNumConverter____closure32, A.testNumConverter____closure33, A.testNumConverter___closure34, A.testNumConverter____closure28, A.testNumConverter____closure29, A.testNumConverter____closure30, A.testNumConverter____closure31, A.testNumConverter___closure35, A.testNumConverter____closure26, A.testNumConverter____closure27, A.testNumConverter__closure0, A.testNumConverter___closure22, A.testNumConverter___closure23, A.testNumConverter___closure24, A.testNumConverter___closure25, A.testNumConverter____closure25, A.testNumConverter___closure26, A.testNumConverter____closure23, A.testNumConverter____closure24, A.testNumConverter___closure27, A.testNumConverter____closure21, A.testNumConverter____closure22, A.testNumConverter___closure28, A.testNumConverter____closure19, A.testNumConverter____closure20, A.testNumConverter__closure1, A.testNumConverter___closure14, A.testNumConverter____closure18, A.testNumConverter___closure15, A.testNumConverter___closure16, A.testNumConverter____closure17, A.testNumConverter___closure17, A.testNumConverter____closure16, A.testNumConverter___closure18, A.testNumConverter____closure15, A.testNumConverter___closure19, A.testNumConverter____closure14, A.testNumConverter___closure20, A.testNumConverter____closure13, A.testNumConverter___closure21, A.testNumConverter____closure12, A.testNumConverter__closure2, A.testNumConverter___closure6, A.testNumConverter____closure11, A.testNumConverter___closure7, A.testNumConverter____closure10, A.testNumConverter___closure8, A.testNumConverter____closure9, A.testNumConverter___closure9, A.testNumConverter____closure8, A.testNumConverter___closure10, A.testNumConverter____closure7, A.testNumConverter___closure11, A.testNumConverter____closure6, A.testNumConverter___closure12, A.testNumConverter____closure5, A.testNumConverter___closure13, A.testNumConverter____closure4, A.testNumConverter__closure3, A.testNumConverter___closure1, A.testNumConverter____closure3, A.testNumConverter___closure2, A.testNumConverter____closure2, A.testNumConverter___closure3, A.testNumConverter____closure1, A.testNumConverter___closure4, A.testNumConverter____closure0, A.testNumConverter___closure5, A.testNumConverter____closure, A.testNumConverter__closure4, A.testNumConverter___closure, A.testNumConverter___closure0, A.testLazyLists_closure, A.testLazyLists_closure0, A.testLazyLists_closure1, A._FeatureTestExt_check_closure, A.testLazyMaps_closure, A.testLazyMaps_closure0, A.testLazyMaps_closure1, A._FeatureTestExt_test_closure, A.execute_closure9, A.execute__closure10, A.execute___closure97, A.execute___closure98, A.execute___closure99, A.execute___closure100, A.execute__closure11, A.execute___closure94, A.execute___closure95, A.execute___closure96, A.execute__closure12, A.execute___closure88, A.execute___closure89, A.execute___closure90, A.execute___closure91, A.execute___closure92, A.execute___closure93, A.execute__closure13, A.execute___closure82, A.execute___closure83, A.execute_____closure70, A.execute___closure84, A.execute_____closure69, A.execute___closure85, A.execute___closure86, A.execute___closure87, A.execute__closure14, A.execute___closure72, A.execute___closure73, A.execute___closure74, A.execute___closure75, A.execute___closure76, A.execute___closure77, A.execute___closure78, A.execute___closure79, A.execute___closure80, A.execute_____createTask_closure0, A.execute___closure81, A.execute_____createTask_closure, A.execute_closure8, A.execute__closure9, A.execute___closure56, A.execute___closure57, A.execute___closure58, A.execute___closure59, A.execute___closure60, A.execute___closure61, A.execute___closure62, A.execute___closure63, A.execute___closure64, A.execute___closure65, A.execute___closure66, A.execute___closure67, A.execute___closure68, A.execute___closure69, A.execute___closure70, A.execute___closure71, A.execute_closure7, A.execute__closure8, A.execute___closure49, A.execute___closure50, A.execute___closure51, A.execute___closure52, A.execute___closure53, A.execute____closure_pause, A.execute____closure_resume, A.execute___closure54, A.execute___closure55, A.execute_closure4, A.execute__closure5, A.execute___closure35, A.execute____closure58, A.execute____closure59, A.execute____closure60, A.execute___closure36, A.execute____closure55, A.execute____closure56, A.execute____closure57, A.execute___closure37, A.execute____closure52, A.execute____closure53, A.execute____closure54, A.execute_closure5, A.execute__closure6, A.execute___closure38, A.execute___closure39, A.execute_closure0, A.execute__closure0, A.execute___closure2, A.execute____closure24, A.execute____closure25, A.execute____closure26, A.execute____closure27, A.execute____closure28, A.execute____closure29, A.execute___closure3, A.execute____closure18, A.execute____closure19, A.execute____closure20, A.execute____closure21, A.execute____closure22, A.execute______closure13, A.execute____closure23, A.execute______closure0, A.execute___closure4, A.execute____closure14, A.execute____closure15, A.execute____closure16, A.execute____closure17, A.execute___closure5, A.execute____closure10, A.execute____closure11, A.execute____closure12, A.execute____closure13, A.execute___closure6, A.execute____closure6, A.execute____closure7, A.execute____closure8, A.execute____closure9, A.execute_dob, A.execute_closure1, A.execute__closure1, A.execute___closure7, A.execute____closure41, A.execute____closure42, A.execute___closure8, A.execute___closure9, A.execute___closure10, A.execute___closure11, A.execute___closure12, A.execute___closure13, A.execute___closure14, A.execute___closure15, A.execute___closure16, A.execute___closure17, A.execute___closure18, A.execute_closure6, A.execute__closure7, A.execute___closure40, A.execute___closure41, A.execute___closure42, A.execute____closure77, A.execute____closure78, A.execute____closure79, A.execute____closure80, A.execute____closure81, A.execute____closure82, A.execute____closure83, A.execute____closure84, A.execute____closure85, A.execute___closure43, A.execute____closure75, A.execute____closure76, A.execute___closure44, A.execute___closure45, A.execute___closure46, A.execute___closure47, A.execute_____closure52, A.execute___closure48, A.execute____closure63, A.execute____closure64, A.execute____closure65, A.execute____closure66, A.execute____closure67, A.execute_____closure_pause, A.execute_____closure_resume, A.execute____closure68, A.execute____closure69, A.execute____closure70, A.execute_closure, A.execute__closure, A.execute___closure, A.execute____closure4, A.execute____closure5, A.execute___closure0, A.execute____closure2, A.execute____closure3, A.execute___closure1, A.execute____closure, A.execute____closure0, A.execute____closure1, A.main_$getTestRunnerUrl, A.TestContext_test_closure, A.TestContext_test__closure0, A.TestResult_skip_closure, A.TestResult_pass_closure, A.TestResult_fail_closure, A.displayVersions_closure, A.displayVersions_closure0, A.displayVersions_closure1, A.displayVersions_closure2, A.displayVersions_closure3, A.displayVersions_closure4, A.displayVersions_closure5, A.displayVersions_closure6, A.displayVersions_closure7, A.TestTimeout_completion_closure]);
    _inheritMany(A._CastIterableBase, [A.CastIterable, A.__CastListBase__CastIterableBase_ListMixin, A.CastSet, A.CastQueue]);
    _inherit(A._EfficientLengthCastIterable, A.CastIterable);
    _inherit(A._CastListBase, A.__CastListBase__CastIterableBase_ListMixin);
    _inheritMany(A.Closure2Args, [A._CastListBase_sort_closure, A.CastMap_forEach_closure, A.CastMap_updateAll_closure, A.CastMap_removeWhere_closure, A.ConstantMap_map_closure, A.JsLinkedHashMap_addAll_closure, A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A.Future_wait_handleError, A.Future_any_onError, A.FutureExtensions_onError_onError, A._Future__propagateToListeners_handleWhenCompleteCallback_closure0, A.Stream_Stream$fromFuture_closure0, A._BufferingStreamSubscription_asFuture_closure0, A._HashMap_addAll_closure, A.HashMap_HashMap$from_closure, A.LinkedHashMap_LinkedHashMap$from_closure, A.MapBase_addAll_closure, A.MapBase_mapToString_closure, A._JsonStringifier_writeMap_closure, A._JsonPrettyPrintMixin_writeMap_closure, A._BigIntImpl_hashCode_combine, A.Uri__parseIPv4Address_error, A.Uri_parseIPv6Address_error, A.Uri_parseIPv6Address_parseHex, A.FutureGroup_add_closure0, A.StreamGroup__onCancelBroadcast_closure, A.mergeMaps_closure, A.UnionSet_length_closure, A._DeepMatcher__compareSets_closure0, A._DeepMatcher__recursiveMatch_closure, A._DeepMatcher__recursiveMatch_closure0, A._DeepMatcher__recursiveMatch_closure1, A._DeepMatcher__recursiveMatch_closure2, A._DeepMatcher__recursiveMatch_closure3, A._Mismatch$simple_closure, A.Pool__runOnRelease_closure0, A._WebChannel__getResponseStream_$sendRequest_$forwardError, A.WorkerRunner__pipe_closure2, A.Converter__mapMap__closure, A.LazyInPlaceList_sort_closure, A.WorkerPool__provisionWorkers_closure1, A.Worker_stream__closure, A.Frame_Frame$parseV8_closure_parseJsLocation, A.Metadata_Metadata_closure, A.Metadata_validatePlatformSelectors_closure, A.Metadata_merge_closure, A.Metadata_merge_closure0, A.Metadata_forPlatform_closure, A.Engine_closure0, A._dblTests__closure11, A._dblTests__closure10, A._dblTests__closure6, A._ndblTests__closure10, A._ndblTests__closure9, A._nintTests__closure10, A._nintTests__closure9, A._dblTests__closure4, A._dblTests__closure3, A._dblTests__closure2, A._dblTests__closure1, A._dblTests__closure0, A._dblTests__closure, A._ndblTests__closure4, A._ndblTests__closure3, A._ndblTests__closure2, A._ndblTests__closure1, A._ndblTests__closure0, A._ndblTests__closure, A._nintTests__closure4, A._nintTests__closure3, A._nintTests__closure2, A._nintTests__closure1, A._nintTests__closure0, A._nintTests__closure, A._Features_forEach_$a, A.execute______closure52, A.execute______closure51, A.main_closure4, A.TestContext_test__closure]);
    _inherit(A.CastList, A._CastListBase);
    _inheritMany(A.MapBase, [A.CastMap, A.UnmodifiableMapBase, A.JsLinkedHashMap, A._HashMap]);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A.RuntimeError, A._Error, A.JsonUnsupportedObjectError, A.AssertionError, A.ArgumentError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError]);
    _inherit(A.UnmodifiableListBase, A.ListBase);
    _inheritMany(A.UnmodifiableListBase, [A.CodeUnits, A.UnmodifiableListView]);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.EmptyIterable, A.LinkedHashMapKeysIterable, A.LinkedHashMapValuesIterable, A.LinkedHashMapEntriesIterable, A._HashMapKeyIterable, A._MapBaseValueIterable]);
    _inheritMany(A.ListIterable, [A.SubListIterable, A.MappedListIterable, A._ListIndicesIterable, A.ReversedListIterable, A.ListQueue, A._GeneratorIterable]);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inherit(A.EfficientLengthTakeIterable, A.TakeIterable);
    _inherit(A.EfficientLengthSkipIterable, A.SkipIterable);
    _inherit(A.EfficientLengthFollowedByIterable, A.FollowedByIterable);
    _inherit(A.ListMapView, A.UnmodifiableMapBase);
    _inherit(A._Record2, A._Record);
    _inheritMany(A._Record2, [A._Record_2_digits_ex78ception, A._Record_2_errors_success, A._Record_2_label_tests, A._Record_2_lazy_ref]);
    _inherit(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A.MapView);
    _inherit(A.UnmodifiableMapView, A._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(A.ConstantMapView, A.UnmodifiableMapView);
    _inheritMany(A.ConstantMap, [A.ConstantStringMap, A.GeneralConstantMap]);
    _inheritMany(A.SetBase, [A.ConstantSet, A._SetBase, A._UnionSet_SetBase_UnmodifiableSetMixin]);
    _inherit(A.GeneralConstantSet, A.ConstantSet);
    _inheritMany(A.Instantiation, [A.Instantiation1, A.Instantiation2]);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A.JsConstantLinkedHashMap, A.JsLinkedHashMap);
    _inherit(A.NativeArrayBuffer, A.NativeByteBuffer);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfDouble, [A.NativeFloat32List, A.NativeFloat64List]);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8ClampedList, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A.Stream, [A._StreamImpl, A._MultiStream, A._ForwardingStream, A._EventStream]);
    _inherit(A._ControllerStream, A._StreamImpl);
    _inherit(A._BroadcastStream, A._ControllerStream);
    _inheritMany(A._BufferingStreamSubscription, [A._ControllerSubscription, A._ForwardingStreamSubscription]);
    _inherit(A._BroadcastSubscription, A._ControllerSubscription);
    _inheritMany(A._BroadcastStreamController, [A._SyncBroadcastStreamController, A._AsyncBroadcastStreamController]);
    _inheritMany(A._Completer, [A._AsyncCompleter, A._SyncCompleter]);
    _inheritMany(A._StreamController, [A._AsyncStreamController, A._SyncStreamController]);
    _inheritMany(A._DelayedEvent, [A._DelayedData, A._DelayedError]);
    _inherit(A._MultiStreamController, A._AsyncStreamController);
    _inherit(A._MapStream, A._ForwardingStream);
    _inheritMany(A._Zone, [A._CustomZone, A._RootZone]);
    _inheritMany(A._HashMap, [A._IdentityHashMap, A._CustomHashMap]);
    _inheritMany(A._SetBase, [A._HashSet, A._LinkedHashSet]);
    _inherit(A._CustomHashSet, A._HashSet);
    _inheritMany(A.Codec, [A.Encoding, A.Base64Codec, A._FusedCodec, A.JsonCodec]);
    _inheritMany(A.Encoding, [A.AsciiCodec, A.Utf8Codec]);
    _inheritMany(A.Converter, [A._UnicodeSubsetEncoder, A.Base64Encoder, A.JsonEncoder, A.Utf8Encoder, A.Utf8Decoder]);
    _inherit(A.AsciiEncoder, A._UnicodeSubsetEncoder);
    _inherit(A.JsonCyclicError, A.JsonUnsupportedObjectError);
    _inherit(A._JsonStringStringifier, A._JsonStringifier);
    _inherit(A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, A._JsonStringStringifier);
    _inherit(A._JsonStringStringifierPretty, A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A._DataUri, A._Uri);
    _inherit(A.TimeoutCanceledException, A.CanceledException);
    _inheritMany(A.CancelationToken, [A.CancelableToken, A.CompositeToken, A.TimeoutToken, A.SquadronCancelationToken]);
    _inheritMany(A._Enum, [A._Mode, A.Level, A.SquadronPlatformType, A.Compiler, A.Status, A.Result, A.RunMode, A.TestState]);
    _inherit(A.EmptyUnmodifiableSet, A._EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin);
    _inherit(A.QueueList, A._QueueList_Object_ListMixin);
    _inherit(A._CastQueueList, A.QueueList);
    _inherit(A.UnionSet, A._UnionSet_SetBase_UnmodifiableSetMixin);
    _inherit(A.DelegatingSet, A._DelegatingIterableBase);
    _inherit(A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin, A.DelegatingSet);
    _inherit(A.UnmodifiableSetView, A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin);
    _inheritMany(A.LogFilter, [A.DevelopmentFilter, A.ProductionFilter, A._LogAllFilter]);
    _inheritMany(A.Matcher, [A._Empty, A._NotEmpty, A._IsNull, A._IsNotNull, A._IsTrue, A._IsFalse, A.TypeMatcher, A._HasLength, A._Contains, A.CustomMatcher, A._DeepMatcher, A.AsyncMatcher, A._IsNot, A._AllOf, A._AnyOf, A._OrderingMatcher]);
    _inherit(A.FeatureMatcher, A.TypeMatcher);
    _inheritMany(A.FeatureMatcher, [A._IsNaN, A._Predicate, A._StringEqualsMatcher, A._IterableMatcher, A._MatchesRegExp]);
    _inherit(A.Throws, A.AsyncMatcher);
    _inheritMany(A._IterableMatcher, [A._EveryElement, A._UnorderedMatches]);
    _inherit(A._ContainsAll, A._UnorderedMatches);
    _inherit(A.InternalStyle, A.Style);
    _inheritMany(A.InternalStyle, [A.PosixStyle, A.UrlStyle, A.WindowsStyle]);
    _inherit(A._WebForwardChannel, A._WebChannel);
    _inherit(A.EntryPointUri, A._EntryPointUri_Object_Releasable);
    _inherit(A._WebLocalWorker, A.__WebLocalWorker_Object_Releasable);
    _inheritMany(A.Logger, [A.InternalLogger, A.MemoryLogger]);
    _inheritMany(A.LogOutput, [A._NoLogOutput, A.NoOutput]);
    _inheritMany(A.LogPrinter, [A._DummyPrinter, A.EmptyPrinter]);
    _inheritMany(A.Converter0, [A.CastConverter, A.ContextAwareConverter, A.NumConverter]);
    _inheritMany(A.SquadronException, [A.SquadronCanceledException, A.SquadronError, A.WorkerException]);
    _inheritMany(A.SquadronCanceledException, [A.SquadronCanceledExceptions, A.SquadronTimeoutException]);
    _inheritMany(A.SquadronMarshaler, [A.GenericMarshaler, A.CityMarshaler, A.CountryMarshaler, A.FractionMarshaler]);
    _inheritMany(A.WorkerTask, [A.WorkerStreamTask, A.WorkerValueTask]);
    _inherit(A.WorkerPool, A._WorkerPool_Object_Releasable);
    _inherit(A.Worker, A._Worker_Object_Releasable);
    _inherit(A.LocalTest, A.Test);
    _inherit(A.LiveTestController, A.LiveTest);
    _inherit(A._LiveSuite, A.LiveSuite);
    _inherit(A.RunnerSuite, A.Suite);
    _inherit(A._IterableSet_Object_SetMixin_UnmodifiableSetMixin, A._IterableSet_Object_SetMixin);
    _inherit(A.IterableSet, A._IterableSet_Object_SetMixin_UnmodifiableSetMixin);
    _inherit(A._ElementEventStreamImpl, A._EventStream);
    _inheritMany(A.Worker, [A._CacheWorker_Worker_WorkerVersion, A._ErrorWorker_Worker_WorkerVersion, A._InstallableWorker_Worker_WorkerVersion, A._IssuesWorker_Worker_WorkerVersion, A._LocalClientWorker_Worker_WorkerVersion, A._LogWorker_Worker_WorkerVersion, A.MissingWorker, A.NotAWorker, A._PersonWorker_Worker_WorkerVersion, A._PrimeWorker_Worker_WorkerVersion, A._StreamingServiceWorker_Worker_WorkerVersion, A._TestWorker_Worker_WorkerVersion]);
    _inherit(A.CacheWorker, A._CacheWorker_Worker_WorkerVersion);
    _inheritMany(A.WorkerPool, [A._ErrorWorkerPool_WorkerPool_PoolVersion, A._IssuesWorkerPool_WorkerPool_PoolVersion, A._LocalClientWorkerPool_WorkerPool_PoolVersion, A._PrimeWorkerPool_WorkerPool_PoolVersion, A._TestWorkerPool_WorkerPool_PoolVersion]);
    _inherit(A.ErrorWorkerPool, A._ErrorWorkerPool_WorkerPool_PoolVersion);
    _inherit(A.ErrorWorker, A._ErrorWorker_Worker_WorkerVersion);
    _inherit(A.InstallableWorker, A._InstallableWorker_Worker_WorkerVersion);
    _inherit(A.IssuesWorkerPool, A._IssuesWorkerPool_WorkerPool_PoolVersion);
    _inherit(A.IssuesWorker, A._IssuesWorker_Worker_WorkerVersion);
    _inherit(A.LocalClientWorkerPool, A._LocalClientWorkerPool_WorkerPool_PoolVersion);
    _inherit(A.LocalClientWorker, A._LocalClientWorker_Worker_WorkerVersion);
    _inherit(A.LocalService, A._LocalService_Object_SquadronVersion);
    _inherit(A._LocalServiceImpl_LocalService_SquadronVersion, A.LocalService);
    _inherit(A.LocalServiceImpl, A._LocalServiceImpl_LocalService_SquadronVersion);
    _inherit(A.LogWorker, A._LogWorker_Worker_WorkerVersion);
    _inherit(A.PersonMarshaler, A.GenericMarshaler);
    _inherit(A.PersonWorker, A._PersonWorker_Worker_WorkerVersion);
    _inherit(A.PrimeWorkerPool, A._PrimeWorkerPool_WorkerPool_PoolVersion);
    _inherit(A.PrimeWorker, A._PrimeWorker_Worker_WorkerVersion);
    _inherit(A.StreamingServiceWorker, A._StreamingServiceWorker_Worker_WorkerVersion);
    _inherit(A.TestTimeOutException, A.TestException0);
    _inherit(A.TestException, A.WorkerException);
    _inherit(A.TestWorkerPool, A._TestWorkerPool_WorkerPool_PoolVersion);
    _inherit(A.TestWorker, A._TestWorker_Worker_WorkerVersion);
    _inheritMany(A.CustomMatcher, [A.Called, A.Reported]);
    _mixin(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixin(A.__CastListBase__CastIterableBase_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._AsyncStreamController, A._AsyncStreamControllerDispatch);
    _mixin(A._SyncStreamController, A._SyncStreamControllerDispatch);
    _mixin(A.UnmodifiableMapBase, A._UnmodifiableMapMixin);
    _mixin(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._UnmodifiableMapMixin);
    _mixin(A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, A._JsonPrettyPrintMixin);
    _mixin(A._EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin, A.UnmodifiableSetMixin);
    _mixin(A._QueueList_Object_ListMixin, A.ListBase);
    _mixin(A._UnionSet_SetBase_UnmodifiableSetMixin, A.UnmodifiableSetMixin);
    _mixin(A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin, A.UnmodifiableSetMixin);
    _mixin(A._EntryPointUri_Object_Releasable, A.Releasable);
    _mixin(A.__WebLocalWorker_Object_Releasable, A.Releasable);
    _mixin(A._WorkerPool_Object_Releasable, A.Releasable);
    _mixin(A._Worker_Object_Releasable, A.Releasable);
    _mixin(A._IterableSet_Object_SetMixin, A.SetBase);
    _mixin(A._IterableSet_Object_SetMixin_UnmodifiableSetMixin, A.UnmodifiableSetMixin);
    _mixin(A._CacheWorker_Worker_WorkerVersion, A.WorkerVersion);
    _mixin(A._ErrorWorker_Worker_WorkerVersion, A.WorkerVersion);
    _mixin(A._ErrorWorkerPool_WorkerPool_PoolVersion, A.PoolVersion);
    _mixin(A._InstallableWorker_Worker_WorkerVersion, A.WorkerVersion);
    _mixin(A._IssuesWorker_Worker_WorkerVersion, A.WorkerVersion);
    _mixin(A._IssuesWorkerPool_WorkerPool_PoolVersion, A.PoolVersion);
    _mixin(A._LocalClientWorker_Worker_WorkerVersion, A.WorkerVersion);
    _mixin(A._LocalClientWorkerPool_WorkerPool_PoolVersion, A.PoolVersion);
    _mixin(A._LocalService_Object_SquadronVersion, A.SquadronVersion);
    _mixin(A._LocalServiceImpl_LocalService_SquadronVersion, A.SquadronVersion);
    _mixin(A._LogWorker_Worker_WorkerVersion, A.WorkerVersion);
    _mixin(A._PersonWorker_Worker_WorkerVersion, A.WorkerVersion);
    _mixin(A._PrimeWorker_Worker_WorkerVersion, A.WorkerVersion);
    _mixin(A._PrimeWorkerPool_WorkerPool_PoolVersion, A.PoolVersion);
    _mixin(A._StreamingServiceWorker_Worker_WorkerVersion, A.WorkerVersion);
    _mixin(A._TestWorker_Worker_WorkerVersion, A.WorkerVersion);
    _mixin(A._TestWorkerPool_WorkerPool_PoolVersion, A.PoolVersion);
  })();
  var init = {
    G: typeof self != "undefined" ? self : globalThis,
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List", Object: "Object", Map: "Map", JSObject: "JSObject"},
    mangledNames: {},
    types: ["Future<Null>()", "Null()", "~()", "List<double>(List<double>)", "Future<Null>(TestWorkerPool)", "List<double?>(List<double?>)", "List<int?>(List<int?>)", "Future<Null>(TestWorker)", "bool(String)", "double(List<double>)", "int?(List<int?>)", "double?(List<double?>)", "int()", "int?()", "Future<~>()", "int(List<int?>)", "~(@)", "bool(@)", "String()", "Map<String,int>()", "int(List<double>)", "int(List<double?>)", "~(TestContext?)", "bool(Object?)", "Null(JSObject)", "Future<Null>(ErrorWorker)", "Set<int>()", "~(JSObject)", "Iterable<int?>(List<int?>)", "Iterable<double?>(List<double?>)", "double?(Map<String,double?>)", "String(String)", "Object?(Object?)", "Null(@)", "Iterable<double>(List<double>)", "Map<String,double>(Map<String,double>)", "List<int>()", "~(Object?)", "Map<String,int?>(Map<String,int?>)", "int?(Map<String,int?>)", "Map<String,double?>(Map<String,double?>)", "Future<Null>(LocalWorker<LocalServiceImpl>)", "double()", "~([JSObject?])", "Future<Null>(LogWorker)", "bool(ValueTask<@>)", "int(@)", "Future<Null>(PersonWorker)", "bool(List<double>)", "bool(List<int?>)", "~(Description,bool)", "bool(List<double?>)", "Trace()", "Future<Null>(ErrorWorkerPool)", "double(Map<String,double>)", "List<double>()", "double?()", "bool(StreamTask<@>)", "~(Object[StackTrace?])", "Set<double>()", "Frame()", "bool(List<@>)", "Future<Null>(IssuesWorker)", "Future<int>(ErrorWorker)", "~(Object,StackTrace)", "Stream<int>(TestWorker)", "bool(num?)", "bool(Map<String,double>)", "double?(Map<String,double>)", "bool(Map<String,int?>)", "Chain()", "Null(Object,StackTrace)", "~(List<@>)", "~(int)", "TestWorker(ExceptionManager)", "Frame(String)", "bool(Map<String,double?>)", "Set<double?>()", "Person(@)", "Future<Null>(LocalClientWorkerPool)", "Future<int>(TestWorker)", "String(Object?)", "Future<Null>(LocalClientWorker)", "@(@)", "Future<Null>(InstallableWorker)", "bool(String,int?)", "bool(String,double?)", "bool(String,double)", "~(Object?,Object?)", "~(List<double>)", "bool(int?)", "~(List<double?>)", "int(@,@)", "Future<Null>(CacheWorker)", "~(@,@)", "Set<int?>()", "Set<0^>()<Object?>", "Null(@,@)", "List<double?>()", "List<int?>()", "Null(Object)", "~(~())", "bool(Frame)", "Future<@>()", "~(List<int?>)", "~(bool)", "int(Object?)", "~(State)", "Future<Null>(PrimeWorkerPool)", "bool(Object,Object)", "~([Object?])", "~(Timer)", "int(int,WorkerStat)", "int(Frame)", "Metadata(Metadata,Metadata)", "~(PlatformSelector,Metadata)", "~(~)", "~(JSObject?)", "Null(~)", "Future<Null>(NotAWorker)", "bool(Channel)", "~(Object,StackTrace?)", "~(Zone,ZoneDelegate,Zone,String)", "0^()<Object?>", "String(List<double>)", "GroupEntry?(GroupEntry)", "Future<Null>(IssuesWorkerPool)", "~(String)", "Trace(String)", "Object(@)", "~([Future<~>?])", "int(List<int>)", "~(String,int?)", "bool()", "String(List<double?>)", "int(int)", "String(Frame)", "Future<~>(StreamTask<@>)", "Future<@>(Duration)", "int(int,int)", "bool(double?)", "Future<~>(TestWorker)", "double(double,double)", "Null(CanceledException)", "bool(double)", "@()", "~([@])", "@(Map<String,@>)", "String(List<int?>)", "bool(int)", "int(double,double)", "~(double)", "Iterable<double?>(List<double>)", "List<double>(double)", "Iterable<bool>(List<double?>)", "List<double?>(double?)", "double(List<double?>)", "double(double,double?)", "double(double?,double?)", "Iterable<bool>(List<double>)", "~(double?)", "bool/()", "+lazy,ref(LazyInPlaceList<0^>,List<0^>)(List<@>,0^(@))<Object?>", "~(int,@)", "~([Future<@>?])", "OperatingSystem()", "Future<bool?>?()", "~(Message)", "Iterable<bool>(List<int?>)", "List<int?>(int?)", "int(int,int?)", "int(int?,int?)", "~(int?)", "~(AsyncError)", "~(bool?)", "List<0^>(Object?)<Object?>", "~(LiveTest)", "Iterable<0^>(Object?)<Object?>", "+lazy,ref(LazyInPlaceMap<String,0^>,Map<String,0^>)(Map<@,@>,0^(@))<Object?>", "Iterable<String>(Map<String,double>)", "String(MapEntry<String,double>)", "~(RunnerSuite)", "Null(Object?,StackTrace)", "Null(List<~>)", "Map<String?,num?>(Map<String,double>)", "MapEntry<String?,num?>(String,double)", "int(Map<String,double>)", "~(String,double)", "bool(LiveTest)", "double(String,double)", "Future<bool?>()", "Iterable<String>(Map<String,double?>)", "String(MapEntry<String,double?>)", "Metadata(Metadata,BooleanSelector)", "Metadata()", "~(Zone,ZoneDelegate,Zone,Object,StackTrace)", "Map<String?,num?>(Map<String,double?>)", "MapEntry<String?,num?>(String,double?)", "int(Map<String,double?>)", "~(String,double?)", "double(String,double?)", "@(Function)", "Iterable<String>(Map<String,int?>)", "String(MapEntry<String,int?>)", "GroupEntry(GroupEntry)", "Null(@,StackTrace)", "Frame(Frame)", "Map<String?,num?>(Map<String,int?>)", "MapEntry<String?,num?>(String,int?)", "int(Map<String,int?>)", "int(String,int?)", "Frame(String,String)", "Iterable<String>(Object?)", "Map<0^,1^>(Object?)<Object?,Object?>", "~(@,StackTrace)", "String(Trace)", "int(Trace)", "Future<Null>(MissingWorker)", "TestException?(List<@>)", "Future<Null>(StreamingServiceWorker)", "List<Frame>(Trace)", "bool(Trace)", "Trace(Trace)", "bool(Level)", "bool(WorkerTask<@,Worker>)", "Null(Channel)", "Future<Null>(PrimeWorker)", "@(String)", "bool(~)", "List<@>(SquadronCanceledException)", "String(SquadronCanceledException)", "SquadronCanceledException(CanceledException)", "CancelationTokenReference()", "~(WorkerRunner)", "DateTime()", "Future<Fraction>(TestWorker{marshalIn!bool,marshalOut!bool})", "Future<int?>(StreamSubscription<@>)", "~(Object[StackTrace?,int?])", "Stream<List<@>>()", "~(List<@>{force:bool})", "int(WorkerStat)", "bool(TestWorker)", "@(@,String)", "Null(bool)", "String(SquadronException)", "~(_WebChannel)", "~(SquadronException)", "bool(Uri)", "bool(Pattern[int])", "~({runner:SquadronPlatformType?,workers:SquadronPlatformType?})", "String(String?)", "int(+label,tests(String,int),+label,tests(String,int))", "ErrorWorker(ExceptionManager)", "Null(~())", "IssuesWorker(ExceptionManager[Logger?])", "Stream<Map<String,int>>(IssuesWorker)", "Future<ByteBuffer?>(IssuesWorker)", "LocalClientWorker(ExceptionManager)", "Future<String>(LocalClientWorker)", "Future<bool>(LocalClientWorker)", "Stream<Map<String,@>>(LocalClientWorker)", "Future<String>(List<@>)", "String(List<@>)", "Stream<int>(List<@>)", "@(Person)", "PrimeWorker(ExceptionManager)", "Future<bool>(PrimeWorker)", "Stream<int>(PrimeWorker)", "Future<~>(TestResult)", "0&(@,@)", "bool(Pattern)", "CacheWorker()", "InstallableWorker()", "IssuesWorker()", "LocalClientWorker()", "PrimeWorker()", "LogWorker()", "StreamingServiceWorker()", "TestWorker()", "ErrorWorker()", "String(Match)", "String(@)", "String(Object?,int,Set<Object?>,bool)", "Future<bool>(TestWorker)", "String(Object?,Matcher,String?,Map<@,@>,bool)", "Future<Map<BigInt,String>>(TestWorker)", "List<int>(@)", "Fraction(@)", "SquadronPlatformType(@)", "_Mismatch?(Object?,Object?,String,int)", "~(Zone?,ZoneDelegate?,Zone,Object,StackTrace)", "0^(Zone?,ZoneDelegate?,Zone,0^())<Object?>", "0^(Zone?,ZoneDelegate?,Zone,0^(1^),1^)<Object?,Object?>", "0^(Zone?,ZoneDelegate?,Zone,0^(1^,2^),1^,2^)<Object?,Object?,Object?>", "0^()(Zone,ZoneDelegate,Zone,0^())<Object?>", "0^(1^)(Zone,ZoneDelegate,Zone,0^(1^))<Object?,Object?>", "0^(1^,2^)(Zone,ZoneDelegate,Zone,0^(1^,2^))<Object?,Object?,Object?>", "AsyncError?(Zone,ZoneDelegate,Zone,Object,StackTrace?)", "~(Zone?,ZoneDelegate?,Zone,~())", "Timer(Zone,ZoneDelegate,Zone,Duration,~())", "Timer(Zone,ZoneDelegate,Zone,Duration,~(Timer))", "Zone(Zone?,ZoneDelegate?,Zone,ZoneSpecification?,Map<Object?,Object?>?)", "bool(Object?,Object?)", "0^(0^,0^)<num>", "0^(0^)<Object?>", "Matcher(Object?)", "DevelopmentFilter()", "0^(@)<Object?>", "List<0^>(@)<Object?>", "Set<0^>(@)<Object?>", "Map<0^,1^>(@)<Object?,Object?>", "double(@)", "SquadronCanceledException?(List<@>?)", "SquadronCanceledExceptions?(List<@>?)", "SquadronException?(List<@>)", "SquadronTimeoutException?(List<@>?)", "TaskCanceledException?(List<@>?)", "TaskTerminatedException?(List<@>?)", "WorkerException?(List<@>)", "int(PoolWorker<Worker>,PoolWorker<Worker>)", "WorkerStat(PoolWorker<Worker>)", "CanceledException?(CancelationToken)", "~(CanceledException)", "Future<~>([CanceledException?])", "String(CanceledException)", "~(String,int)", "int(num?)", "double(num?)", "Future<@>?()"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti"),
    rttc: {
      "2;digits,exception": (t1, t2) => o => o instanceof A._Record_2_digits_ex78ception && t1._is(o._0) && t2._is(o._1),
      "2;errors,success": (t1, t2) => o => o instanceof A._Record_2_errors_success && t1._is(o._0) && t2._is(o._1),
      "2;label,tests": (t1, t2) => o => o instanceof A._Record_2_label_tests && t1._is(o._0) && t2._is(o._1),
      "2;lazy,ref": (t1, t2) => o => o instanceof A._Record_2_lazy_ref && t1._is(o._0) && t2._is(o._1)
    }
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"JavaScriptFunction":"LegacyJavaScriptObject","PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","NativeSharedArrayBuffer":"NativeByteBuffer","JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"]},"JSBool":{"bool":[],"TrustedGetRuntimeType":[]},"JSNull":{"Null":[],"TrustedGetRuntimeType":[]},"JavaScriptObject":{"JSObject":[]},"LegacyJavaScriptObject":{"JSObject":[]},"JSArraySafeToStringHook":{"SafeToStringHook":[]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[],"Comparable":["num"]},"JSInt":{"double":[],"int":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSNumNotInt":{"double":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSString":{"String":[],"Comparable":["String"],"Pattern":[],"TrustedGetRuntimeType":[]},"_CastIterableBase":{"Iterable":["2"]},"CastIterator":{"Iterator":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_CastListBase":{"ListBase":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"ListBase":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListBase.E":"2","Iterable.E":"2"},"CastSet":{"Set":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"CastMap":{"MapBase":["3","4"],"Map":["3","4"],"MapBase.K":"3","MapBase.V":"4"},"CastQueue":{"Queue":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"LateError":{"Error":[]},"CodeUnits":{"ListBase":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListBase.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2","ListIterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"ExpandIterable":{"Iterable":["2"],"Iterable.E":"2"},"ExpandIterator":{"Iterator":["2"]},"TakeIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthTakeIterable":{"TakeIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"TakeIterator":{"Iterator":["1"]},"TakeWhileIterable":{"Iterable":["1"],"Iterable.E":"1"},"TakeWhileIterator":{"Iterator":["1"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"SkipWhileIterable":{"Iterable":["1"],"Iterable.E":"1"},"SkipWhileIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"FollowedByIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthFollowedByIterable":{"FollowedByIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"FollowedByIterator":{"Iterator":["1"]},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterator":{"Iterator":["1"]},"NonNullsIterable":{"Iterable":["1"],"Iterable.E":"1"},"NonNullsIterator":{"Iterator":["1"]},"UnmodifiableListBase":{"ListBase":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_ListIndicesIterable":{"ListIterable":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"Iterable.E":"int","ListIterable.E":"int"},"ListMapView":{"MapBase":["int","1"],"_UnmodifiableMapMixin":["int","1"],"Map":["int","1"],"MapBase.K":"int","MapBase.V":"1","_UnmodifiableMapMixin.K":"int","_UnmodifiableMapMixin.V":"1"},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"_Record_2_digits_ex78ception":{"_Record2":[],"_Record":[]},"_Record_2_errors_success":{"_Record2":[],"_Record":[]},"_Record_2_label_tests":{"_Record2":[],"_Record":[]},"_Record_2_lazy_ref":{"_Record2":[],"_Record":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"],"_UnmodifiableMapMixin.K":"1","_UnmodifiableMapMixin.V":"2"},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_KeysOrValues":{"Iterable":["1"],"Iterable.E":"1"},"_KeysOrValuesOrElementsIterator":{"Iterator":["1"]},"GeneralConstantMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"ConstantSet":{"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"GeneralConstantSet":{"ConstantSet":["1"],"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"Instantiation":{"Closure":[],"Function":[]},"Instantiation1":{"Closure":[],"Function":[]},"Instantiation2":{"Closure":[],"Function":[]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"NullThrownFromJavaScriptException":{"Exception":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Closure":[],"Function":[]},"Closure2Args":{"Closure":[],"Function":[]},"TearOffClosure":{"Closure":[],"Function":[]},"StaticClosure":{"Closure":[],"Function":[]},"BoundClosure":{"Closure":[],"Function":[]},"RuntimeError":{"Error":[]},"JsLinkedHashMap":{"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"LinkedHashMapKeysIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"LinkedHashMapValuesIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapValueIterator":{"Iterator":["1"]},"LinkedHashMapEntriesIterable":{"EfficientLengthIterable":["MapEntry<1,2>"],"Iterable":["MapEntry<1,2>"],"Iterable.E":"MapEntry<1,2>"},"LinkedHashMapEntryIterator":{"Iterator":["MapEntry<1,2>"]},"JsConstantLinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_Record2":{"_Record":[]},"JSSyntaxRegExp":{"RegExp":[],"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"Iterable":["RegExpMatch"],"Iterable.E":"RegExpMatch"},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"_StringAllMatchesIterator":{"Iterator":["Match"]},"NativeTypedData":{"JSObject":[],"TypedData":[]},"NativeUint32List":{"NativeTypedArrayOfInt":[],"Uint32List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeByteBuffer":{"JSObject":[],"ByteBuffer":[],"TrustedGetRuntimeType":[]},"NativeArrayBuffer":{"NativeByteBuffer":[],"JSObject":[],"ByteBuffer":[],"TrustedGetRuntimeType":[]},"_UnmodifiableNativeByteBufferView":{"ByteBuffer":[]},"NativeByteData":{"NativeTypedData":[],"ByteData":[],"JSObject":[],"TypedData":[],"TrustedGetRuntimeType":[]},"NativeTypedArray":{"NativeTypedData":[],"JavaScriptIndexingBehavior":["1"],"JSObject":[],"TypedData":[]},"NativeTypedArrayOfDouble":{"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"TypedData":[],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"NativeTypedArrayOfDouble":[],"Float32List":[],"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"TypedData":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double","FixedLengthListMixin.E":"double"},"NativeFloat64List":{"NativeTypedArrayOfDouble":[],"Float64List":[],"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"TypedData":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double","FixedLengthListMixin.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"Int16List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"Int32List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"Int8List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"Uint16List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"Uint8ClampedList":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"Uint8List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"NativeTypedData":[],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"_Type":{"Type":[]},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"AsyncError":{"Error":[]},"TimeoutException":{"Exception":[]},"_Future":{"Future":["1"]},"MultiStreamController":{"StreamController":["1"],"Sink":["1"]},"StreamController":{"Sink":["1"]},"_BufferingStreamSubscription":{"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_TimerImpl":{"Timer":[]},"_AsyncAwaitCompleter":{"Completer":["1"]},"_SyncStarIterator":{"Iterator":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"_BroadcastStream":{"_ControllerStream":["1"],"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_BroadcastSubscription":{"_ControllerSubscription":["1"],"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_BroadcastStreamController":{"StreamController":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_Completer":{"Completer":["1"]},"_AsyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_SyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_StreamController":{"StreamController":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncStreamController":{"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncStreamController":{"_SyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_ControllerStream":{"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_ControllerSubscription":{"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_StreamSinkWrapper":{"Sink":["1"]},"_StreamImpl":{"Stream":["1"]},"_DelayedData":{"_DelayedEvent":["1"]},"_DelayedError":{"_DelayedEvent":["@"]},"_DelayedDone":{"_DelayedEvent":["@"]},"_DoneStreamSubscription":{"StreamSubscription":["1"]},"_MultiStream":{"Stream":["1"],"Stream.T":"1"},"_MultiStreamController":{"_AsyncStreamController":["1"],"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"MultiStreamController":["1"],"StreamController":["1"],"Sink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_ForwardingStream":{"Stream":["2"]},"_ForwardingStreamSubscription":{"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"],"_BufferingStreamSubscription.T":"2"},"_MapStream":{"_ForwardingStream":["1","2"],"Stream":["2"],"Stream.T":"2"},"_ZoneSpecification":{"ZoneSpecification":[]},"_ZoneDelegate":{"ZoneDelegate":[]},"_Zone":{"Zone":[]},"_CustomZone":{"_Zone":[],"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_HashMap":{"MapBase":["1","2"],"HashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_IdentityHashMap":{"_HashMap":["1","2"],"MapBase":["1","2"],"HashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_CustomHashMap":{"_HashMap":["1","2"],"MapBase":["1","2"],"HashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_HashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_HashMapKeyIterator":{"Iterator":["1"]},"_HashSet":{"_SetBase":["1"],"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_CustomHashSet":{"_HashSet":["1"],"_SetBase":["1"],"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_HashSetIterator":{"Iterator":["1"]},"_LinkedHashSet":{"_SetBase":["1"],"SetBase":["1"],"LinkedHashSet":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"UnmodifiableListView":{"ListBase":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListBase.E":"1","UnmodifiableListMixin.E":"1"},"ListBase":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"Map":["1","2"]},"UnmodifiableMapBase":{"MapBase":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_MapBaseValueIterable":{"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_MapBaseValueIterator":{"Iterator":["2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"],"_UnmodifiableMapMixin.K":"1","_UnmodifiableMapMixin.V":"2"},"ListQueue":{"Queue":["1"],"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"_ListQueueIterator":{"Iterator":["1"]},"SetBase":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SetBase":{"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"AsciiCodec":{"Codec":["String","List<int>"],"Codec.S":"String"},"_UnicodeSubsetEncoder":{"Converter":["String","List<int>"]},"AsciiEncoder":{"Converter":["String","List<int>"]},"Base64Codec":{"Codec":["List<int>","String"],"Codec.S":"List<int>"},"Base64Encoder":{"Converter":["List<int>","String"]},"_FusedCodec":{"Codec":["1","3"],"Codec.S":"1"},"Encoding":{"Codec":["String","List<int>"]},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"Error":[]},"JsonCodec":{"Codec":["Object?","String"],"Codec.S":"Object?"},"JsonEncoder":{"Converter":["Object?","String"]},"Utf8Codec":{"Codec":["String","List<int>"],"Codec.S":"String"},"Utf8Encoder":{"Converter":["String","List<int>"]},"Utf8Decoder":{"Converter":["List<int>","String"]},"BigInt":{"Comparable":["BigInt"]},"DateTime":{"Comparable":["DateTime"]},"double":{"num":[],"Comparable":["num"]},"Duration":{"Comparable":["Duration"]},"TypeError":{"Error":[]},"int":{"num":[],"Comparable":["num"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExpMatch":{"Match":[]},"Set":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"String":{"Comparable":["String"],"Pattern":[]},"_BigIntImpl":{"BigInt":[],"Comparable":["BigInt"]},"AssertionError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"_Exception":{"Exception":[]},"FormatException":{"Exception":[]},"IntegerDivisionByZeroException":{"Exception":[],"Error":[]},"_GeneratorIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"_StringStackTrace":{"StackTrace":[]},"Runes":{"Iterable":["int"],"Iterable.E":"int"},"RuneIterator":{"Iterator":["int"]},"StringBuffer":{"StringSink":[]},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"Uri":[]},"NullRejectionException":{"Exception":[]},"_JSRandom":{"Random":[]},"_Random":{"Random":[]},"_JSSecureRandom":{"Random":[]},"DelegatingSink":{"Sink":["1"]},"FutureGroup":{"Sink":["Future<1>"]},"StreamGroup":{"Sink":["Stream<1>"]},"All":{"BooleanSelector":[]},"CanceledException":{"Exception":[]},"CanceledExceptions":{"CanceledException":[],"Exception":[]},"TimeoutCanceledException":{"CanceledException":[],"TimeoutException":[],"Exception":[]},"CancelableToken":{"CancelationToken":[]},"CompositeToken":{"CancelationToken":[]},"TimeoutToken":{"CancelationToken":[]},"EmptyUnmodifiableSet":{"UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"QueueList":{"ListBase":["1"],"List":["1"],"Queue":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListBase.E":"1","QueueList.E":"1"},"_CastQueueList":{"QueueList":["2"],"ListBase":["2"],"List":["2"],"Queue":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListBase.E":"2","QueueList.E":"2"},"UnionSet":{"SetBase":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"UnmodifiableSetView":{"_UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin":["1"],"DelegatingSet":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_DelegatingIterableBase":{"Iterable":["1"]},"DelegatingSet":{"Set":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"DevelopmentFilter":{"LogFilter":[]},"ProductionFilter":{"LogFilter":[]},"_Empty":{"Matcher":[]},"_NotEmpty":{"Matcher":[]},"_IsNull":{"Matcher":[]},"_IsNotNull":{"Matcher":[]},"_IsTrue":{"Matcher":[]},"_IsFalse":{"Matcher":[]},"_IsNaN":{"FeatureMatcher":["num"],"TypeMatcher":["num"],"Matcher":[],"TypeMatcher.T":"num","FeatureMatcher.T":"num"},"_HasLength":{"Matcher":[]},"_Contains":{"Matcher":[]},"_Predicate":{"FeatureMatcher":["1"],"TypeMatcher":["1"],"Matcher":[],"TypeMatcher.T":"1","FeatureMatcher.T":"1"},"CustomMatcher":{"Matcher":[]},"StringDescription":{"Description":[]},"_StringEqualsMatcher":{"FeatureMatcher":["String"],"TypeMatcher":["String"],"Matcher":[],"TypeMatcher.T":"String","FeatureMatcher.T":"String"},"_DeepMatcher":{"Matcher":[]},"AsyncMatcher":{"Matcher":[]},"Throws":{"Matcher":[]},"FeatureMatcher":{"TypeMatcher":["1"],"Matcher":[]},"_EveryElement":{"FeatureMatcher":["Iterable<@>"],"TypeMatcher":["Iterable<@>"],"Matcher":[],"TypeMatcher.T":"Iterable<@>","FeatureMatcher.T":"Iterable<@>"},"_IterableMatcher":{"FeatureMatcher":["Iterable<@>"],"TypeMatcher":["Iterable<@>"],"Matcher":[]},"_UnorderedMatches":{"FeatureMatcher":["Iterable<@>"],"TypeMatcher":["Iterable<@>"],"Matcher":[]},"_ContainsAll":{"FeatureMatcher":["Iterable<@>"],"TypeMatcher":["Iterable<@>"],"Matcher":[],"TypeMatcher.T":"Iterable<@>","FeatureMatcher.T":"Iterable<@>"},"_IsNot":{"Matcher":[]},"_AllOf":{"Matcher":[]},"_AnyOf":{"Matcher":[]},"_OrderingMatcher":{"Matcher":[]},"_MatchesRegExp":{"FeatureMatcher":["String"],"TypeMatcher":["String"],"Matcher":[],"TypeMatcher.T":"String","FeatureMatcher.T":"String"},"TypeMatcher":{"Matcher":[],"TypeMatcher.T":"1"},"PathException":{"Exception":[]},"PosixStyle":{"InternalStyle":[]},"UrlStyle":{"InternalStyle":[]},"WindowsStyle":{"InternalStyle":[]},"_WebChannel":{"Channel":[]},"_WebForwardChannel":{"_WebChannel":[],"Channel":[]},"EntryPointUri":{"Releasable":[]},"_WebLocalWorker":{"LocalWorker":["1"],"Releasable":[],"WorkerService":[]},"_WebWorkerChannel":{"WorkerChannel":[]},"DisconnectedChannel":{"Channel":[]},"InternalLogger":{"Logger":[]},"_NoLogOutput":{"LogOutput":[]},"_DummyPrinter":{"LogPrinter":[]},"_LogAllFilter":{"LogFilter":[]},"CastConverter":{"Converter0":[]},"ContextAwareConverter":{"Converter0":[]},"LazyInPlaceList":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"LazyInPlaceMap":{"Map":["1","2"]},"NumConverter":{"Converter0":[]},"SquadronCanceledException":{"SquadronException":[],"CanceledException":[],"Exception":[]},"SquadronCanceledExceptions":{"SquadronCanceledException":[],"CanceledExceptions":[],"SquadronException":[],"CanceledException":[],"Exception":[]},"SquadronError":{"SquadronException":[],"Exception":[]},"SquadronException":{"Exception":[]},"SquadronTimeoutException":{"SquadronCanceledException":[],"TimeoutCanceledException":[],"SquadronException":[],"CanceledException":[],"TimeoutException":[],"Exception":[]},"TaskCanceledException":{"SquadronError":[],"SquadronException":[],"CanceledException":[],"Exception":[]},"TaskTerminatedException":{"SquadronError":[],"SquadronException":[],"CanceledException":[],"Exception":[]},"WorkerException":{"SquadronException":[],"Exception":[]},"WorkerStreamTask":{"WorkerTask":["1","2"],"StreamTask":["1"],"Task":["1"]},"WorkerTask":{"Task":["1"]},"WorkerValueTask":{"WorkerTask":["1","2"],"ValueTask":["1"],"Task":["1"]},"WorkerPool":{"Releasable":[],"WorkerService":[]},"CancelationTokenReference":{"SquadronCancelationToken":[],"CancelationToken":[]},"SquadronCancelationToken":{"CancelationToken":[]},"Worker":{"Releasable":[],"WorkerService":[]},"Chain":{"StackTrace":[]},"LazyChain":{"Chain":[],"StackTrace":[]},"LazyTrace":{"Trace":[],"StackTrace":[]},"Trace":{"StackTrace":[]},"UnparsedFrame":{"Frame":[]},"OutsideTestException":{"Exception":[]},"ClosedException":{"Exception":[]},"DuplicateTestNameException":{"Exception":[]},"Group":{"GroupEntry":[]},"LocalTest":{"Test":[],"GroupEntry":[]},"LiveTestController":{"LiveTest":[]},"Test":{"GroupEntry":[]},"TestFailure":{"Exception":[]},"_LiveSuite":{"LiveSuite":[]},"RunnerSuite":{"Suite":[]},"IterableSet":{"SetBase":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"PrintSink":{"StringSink":[]},"ReleasedException":{"Exception":[]},"_EventStream":{"Stream":["1"],"Stream.T":"1"},"_ElementEventStreamImpl":{"_EventStream":["1"],"Stream":["1"],"Stream.T":"1"},"_EventStreamSubscription":{"StreamSubscription":["1"]},"CacheWorker":{"Worker":[],"Releasable":[],"WorkerService":[]},"ErrorWorkerPool":{"WorkerPool":["ErrorWorker"],"Releasable":[],"WorkerService":[],"WorkerPool.W":"ErrorWorker"},"ErrorWorker":{"Worker":[],"Releasable":[],"WorkerService":[]},"InstallableWorker":{"Worker":[],"Releasable":[],"WorkerService":[]},"IssuesWorkerPool":{"WorkerPool":["IssuesWorker"],"Releasable":[],"WorkerService":[],"WorkerPool.W":"IssuesWorker"},"IssuesWorker":{"Worker":[],"Releasable":[],"WorkerService":[]},"LocalClientWorkerPool":{"WorkerPool":["LocalClientWorker"],"Releasable":[],"WorkerService":[],"WorkerPool.W":"LocalClientWorker"},"LocalClientWorker":{"Worker":[],"Releasable":[],"WorkerService":[]},"LocalService":{"WorkerService":[]},"LocalServiceImpl":{"LocalService":[],"WorkerService":[]},"LogWorker":{"Worker":[],"Releasable":[],"WorkerService":[]},"MemoryLogger":{"Logger":[]},"MissingWorker":{"Worker":[],"Releasable":[],"WorkerService":[]},"NotAWorker":{"Worker":[],"Releasable":[],"WorkerService":[]},"PersonWorker":{"Worker":[],"Releasable":[],"WorkerService":[]},"PrimeWorkerPool":{"WorkerPool":["PrimeWorker"],"Releasable":[],"WorkerService":[],"WorkerPool.W":"PrimeWorker"},"PrimeWorker":{"Worker":[],"Releasable":[],"WorkerService":[]},"StreamingServiceWorker":{"Worker":[],"Releasable":[],"WorkerService":[]},"TestException0":{"Exception":[]},"TestTimeOutException":{"Exception":[]},"TestException":{"WorkerException":[],"SquadronException":[],"Exception":[]},"NoOutput":{"LogOutput":[]},"EmptyPrinter":{"LogPrinter":[]},"TestWorkerPool":{"WorkerPool":["TestWorker"],"Releasable":[],"WorkerService":[],"WorkerPool.W":"TestWorker"},"TestWorker":{"Worker":[],"Releasable":[],"WorkerService":[]},"UnexpectedException":{"Exception":[]},"Called":{"Matcher":[]},"Reported":{"Matcher":[]},"ByteData":{"TypedData":[]},"Int8List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint8ClampedList":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Int16List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint16List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Int32List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint32List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Float32List":{"List":["double"],"EfficientLengthIterable":["double"],"TypedData":[],"Iterable":["double"]},"Float64List":{"List":["double"],"EfficientLengthIterable":["double"],"TypedData":[],"Iterable":["double"]},"LocalWorker":{"Releasable":[],"WorkerService":[]},"StreamTask":{"Task":["1"]},"ValueTask":{"Task":["1"]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"UnmodifiableListBase":1,"__CastListBase__CastIterableBase_ListMixin":2,"NativeTypedArray":1,"_DelayedEvent":1,"UnmodifiableMapBase":2,"_EmptyUnmodifiableSet_IterableBase_UnmodifiableSetMixin":1,"_QueueList_Object_ListMixin":1,"_UnionSet_SetBase_UnmodifiableSetMixin":1,"GenericMarshaler":1,"SquadronMarshaler":2,"_IterableSet_Object_SetMixin":1,"_IterableSet_Object_SetMixin_UnmodifiableSetMixin":1,"PoolVersion":1}'));
  var string$ = {
    x00_____: "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\u03f6\x00\u0404\u03f4 \u03f4\u03f6\u01f6\u01f6\u03f6\u03fc\u01f4\u03ff\u03ff\u0584\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u05d4\u01f4\x00\u01f4\x00\u0504\u05c4\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u0400\x00\u0400\u0200\u03f7\u0200\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u0200\u0200\u0200\u03f7\x00",
    x2d_Intea: "- Integers + integral double (cast conversion)",
    x2d_Inteu: "- Integers + integral double (custom conversion)",
    x2d_Stria: "- String / integers + integral double (cast conversion)",
    x2d_Striu: "- String / integers + integral double (custom conversion)",
    x3d_____: "===== asynchronous gap ===========================\n",
    ABCDEF: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    Cannoteff: "Cannot extract a file path from a URI with a fragment component",
    Cannotefq: "Cannot extract a file path from a URI with a query component",
    Cannoten: "Cannot extract a non-Windows file path from a file URI with an authority",
    Cannotf: "Cannot fire new event. Controller is already firing an event",
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
    matchA: "matchAsync() may only return a String, a Future, or null.",
    max_mu: "max must be in range 0 < max \u2264 2^32, was "
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      $env_1_1_String: findType("@<String>"),
      AsyncError: findType("AsyncError"),
      AsyncMemoizer_void: findType("AsyncMemoizer<~>"),
      Base64Codec: findType("Base64Codec"),
      BigInt: findType("BigInt"),
      BooleanSelector: findType("BooleanSelector"),
      ByteBuffer: findType("ByteBuffer"),
      ByteData: findType("ByteData"),
      CacheStat: findType("CacheStat"),
      CacheWorker: findType("CacheWorker"),
      CancelationToken: findType("CancelationToken"),
      CancelationTokenReference: findType("CancelationTokenReference"),
      CanceledException: findType("CanceledException"),
      CanceledExceptions: findType("CanceledExceptions"),
      Chain: findType("Chain"),
      Channel: findType("Channel"),
      City: findType("City"),
      Comparable_dynamic: findType("Comparable<@>"),
      Completer_PoolResource: findType("Completer<PoolResource>"),
      Completer_nullable_int: findType("Completer<int?>"),
      Country: findType("Country"),
      DateTime: findType("DateTime"),
      Duration: findType("Duration"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Error: findType("Error"),
      ErrorWorker: findType("ErrorWorker"),
      ErrorWorkerPool: findType("ErrorWorkerPool"),
      EventBuffer_List_dynamic: findType("EventBuffer<List<@>>"),
      Exception: findType("Exception"),
      ExceptionManager: findType("ExceptionManager"),
      Float32List: findType("Float32List"),
      Float64List: findType("Float64List"),
      FormatException: findType("FormatException"),
      ForwardCompleter_dynamic: findType("ForwardCompleter<@>"),
      Fraction: findType("Fraction"),
      Frame: findType("Frame"),
      Frame_Function_Frame: findType("Frame(Frame)"),
      Frame_Function_String: findType("Frame(String)"),
      Function: findType("Function"),
      FutureGroup_dynamic: findType("FutureGroup<@>"),
      FutureGroup_void: findType("FutureGroup<~>"),
      FutureOr_String: findType("String/"),
      Future_Null: findType("Future<Null>"),
      Future_RunnerSuite: findType("Future<RunnerSuite>"),
      Future_bool: findType("Future<bool>"),
      Future_nullable_Channel: findType("Future<Channel?>"),
      Future_nullable_bool: findType("Future<bool?>"),
      Future_void: findType("Future<~>"),
      Future_void_Function_StreamTask_dynamic: findType("Future<~>(StreamTask<@>)"),
      GeneralConstantMap_int_double: findType("GeneralConstantMap<int,double>"),
      Group: findType("Group"),
      GroupEntry: findType("GroupEntry"),
      InstallableWorker: findType("InstallableWorker"),
      Instantiation1_double: findType("Instantiation1<double>"),
      Instantiation1_nullable_double: findType("Instantiation1<double?>"),
      Instantiation1_nullable_int: findType("Instantiation1<int?>"),
      Int16List: findType("Int16List"),
      Int32List: findType("Int32List"),
      Int8List: findType("Int8List"),
      IssuesWorker: findType("IssuesWorker"),
      IssuesWorkerPool: findType("IssuesWorkerPool"),
      IterableSet_LiveTest: findType("IterableSet<LiveTest>"),
      Iterable_Record_2_String_label_and_int_tests: findType("Iterable<+label,tests(String,int)>"),
      Iterable_SquadronCanceledException: findType("Iterable<SquadronCanceledException>"),
      Iterable_String: findType("Iterable<String>"),
      Iterable_double: findType("Iterable<double>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      JSArray_AsyncError: findType("JSArray<AsyncError>"),
      JSArray_CancelationToken: findType("JSArray<CancelationToken>"),
      JSArray_Compiler: findType("JSArray<Compiler>"),
      JSArray_Declarer: findType("JSArray<Declarer>"),
      JSArray_Exception: findType("JSArray<Exception>"),
      JSArray_Frame: findType("JSArray<Frame>"),
      JSArray_Future_List_Map_String_dynamic: findType("JSArray<Future<List<Map<String,@>>>>"),
      JSArray_Future_String: findType("JSArray<Future<String>>"),
      JSArray_Future_bool: findType("JSArray<Future<bool>>"),
      JSArray_Future_dynamic: findType("JSArray<Future<@>>"),
      JSArray_Future_nullable_ByteBuffer: findType("JSArray<Future<ByteBuffer?>>"),
      JSArray_Future_void: findType("JSArray<Future<~>>"),
      JSArray_Group: findType("JSArray<Group>"),
      JSArray_GroupEntry: findType("JSArray<GroupEntry>"),
      JSArray_JSObject: findType("JSArray<JSObject>"),
      JSArray_List_dynamic: findType("JSArray<List<@>>"),
      JSArray_Map_String_int: findType("JSArray<Map<String,int>>"),
      JSArray_Matcher: findType("JSArray<Matcher>"),
      JSArray_NativeTypedData: findType("JSArray<NativeTypedData>"),
      JSArray_NativeUint32List: findType("JSArray<NativeUint32List>"),
      JSArray_Object: findType("JSArray<Object>"),
      JSArray_Person: findType("JSArray<Person>"),
      JSArray_PoolWorker_ErrorWorker: findType("JSArray<PoolWorker<ErrorWorker>>"),
      JSArray_PoolWorker_IssuesWorker: findType("JSArray<PoolWorker<IssuesWorker>>"),
      JSArray_PoolWorker_LocalClientWorker: findType("JSArray<PoolWorker<LocalClientWorker>>"),
      JSArray_PoolWorker_PrimeWorker: findType("JSArray<PoolWorker<PrimeWorker>>"),
      JSArray_PoolWorker_TestWorker: findType("JSArray<PoolWorker<TestWorker>>"),
      JSArray_Set_LiveTest: findType("JSArray<Set<LiveTest>>"),
      JSArray_SquadronException: findType("JSArray<SquadronException>"),
      JSArray_StreamController_List_dynamic: findType("JSArray<StreamController<List<@>>>"),
      JSArray_StreamTask_dynamic: findType("JSArray<StreamTask<@>>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_TestResult: findType("JSArray<TestResult>"),
      JSArray_Trace: findType("JSArray<Trace>"),
      JSArray_ValueTask_dynamic: findType("JSArray<ValueTask<@>>"),
      JSArray_WorkerStat: findType("JSArray<WorkerStat>"),
      JSArray_Zone: findType("JSArray<Zone>"),
      JSArray_double: findType("JSArray<double>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_Object: findType("JSArray<Object?>"),
      JSArray_nullable_String: findType("JSArray<String?>"),
      JSArray_nullable_Uri: findType("JSArray<Uri?>"),
      JSArray_nullable_double: findType("JSArray<double?>"),
      JSArray_nullable_int: findType("JSArray<int?>"),
      JSArray_num: findType("JSArray<num>"),
      JSArray_of_String_Function_String: findType("JSArray<String(String)>"),
      JSArray_of_dynamic_Function: findType("JSArray<@()>"),
      JSArray_of_void_Function: findType("JSArray<~()>"),
      JSNull: findType("JSNull"),
      JSObject: findType("JSObject"),
      JavaScriptBigInt: findType("JavaScriptBigInt"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      JsLinkedHashMap_String_double: findType("JsLinkedHashMap<String,double>"),
      JsLinkedHashMap_String_int: findType("JsLinkedHashMap<String,int>"),
      LazyInPlaceList_Person: findType("LazyInPlaceList<Person>"),
      Level: findType("Level"),
      LinkedHashMapEntriesIterable_String_double: findType("LinkedHashMapEntriesIterable<String,double>"),
      LinkedHashMapEntriesIterable_String_int: findType("LinkedHashMapEntriesIterable<String,int>"),
      List_Group: findType("List<Group>"),
      List_List_int: findType("List<List<int>>"),
      List_Map_String_dynamic: findType("List<Map<String,@>>"),
      List_String: findType("List<String>"),
      List_double: findType("List<double>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      List_nullable_BigInt: findType("List<BigInt?>"),
      List_nullable_DateTime: findType("List<DateTime?>"),
      List_nullable_String: findType("List<String?>"),
      List_nullable_bool: findType("List<bool?>"),
      List_nullable_double: findType("List<double?>"),
      List_nullable_int: findType("List<int?>"),
      List_nullable_num: findType("List<num?>"),
      List_of_void_Function: findType("List<~()>"),
      List_void: findType("List<~>"),
      LiveSuiteController: findType("LiveSuiteController"),
      LiveTest: findType("LiveTest"),
      LocalClientWorker: findType("LocalClientWorker"),
      LocalClientWorkerPool: findType("LocalClientWorkerPool"),
      LocalService: findType("LocalService"),
      LocalServiceImpl: findType("LocalServiceImpl"),
      LocalWorker_LocalServiceImpl: findType("LocalWorker<LocalServiceImpl>"),
      LogWorker: findType("LogWorker"),
      MapEntry_String_double: findType("MapEntry<String,double>"),
      MapEntry_dynamic_dynamic: findType("MapEntry<@,@>"),
      MapEntry_of_String_and_nullable_DateTime: findType("MapEntry<String,DateTime?>"),
      MapEntry_of_String_and_nullable_double: findType("MapEntry<String,double?>"),
      MapEntry_of_String_and_nullable_int: findType("MapEntry<String,int?>"),
      MapEntry_of_nullable_String_and_nullable_num: findType("MapEntry<String?,num?>"),
      Map_BigInt_String: findType("Map<BigInt,String>"),
      Map_String_BigInt: findType("Map<String,BigInt>"),
      Map_String_double: findType("Map<String,double>"),
      Map_String_dynamic: findType("Map<String,@>"),
      Map_String_int: findType("Map<String,int>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      Map_of_String_and_nullable_double: findType("Map<String,double?>"),
      Map_of_String_and_nullable_int: findType("Map<String,int?>"),
      Map_of_dynamic_and_nullable_BigInt: findType("Map<@,BigInt?>"),
      Map_of_dynamic_and_nullable_DateTime: findType("Map<@,DateTime?>"),
      Map_of_dynamic_and_nullable_String: findType("Map<@,String?>"),
      Map_of_dynamic_and_nullable_bool: findType("Map<@,bool?>"),
      Map_of_dynamic_and_nullable_num: findType("Map<@,num?>"),
      Map_of_nullable_BigInt_and_dynamic: findType("Map<BigInt?,@>"),
      Map_of_nullable_DateTime_and_dynamic: findType("Map<DateTime?,@>"),
      Map_of_nullable_String_and_dynamic: findType("Map<String?,@>"),
      Map_of_nullable_bool_and_dynamic: findType("Map<bool?,@>"),
      Map_of_nullable_num_and_dynamic: findType("Map<num?,@>"),
      MappedIterable_String_Frame: findType("MappedIterable<String,Frame>"),
      MappedListIterable_Frame_Frame: findType("MappedListIterable<Frame,Frame>"),
      MappedListIterable_SquadronException_String: findType("MappedListIterable<SquadronException,String>"),
      MappedListIterable_String_String: findType("MappedListIterable<String,String>"),
      MappedListIterable_String_Trace: findType("MappedListIterable<String,Trace>"),
      MappedListIterable_String_dynamic: findType("MappedListIterable<String,@>"),
      MappedListIterable_of_StreamTask_dynamic_and_Future_void: findType("MappedListIterable<StreamTask<@>,Future<~>>"),
      Matcher: findType("Matcher"),
      Message: findType("Message"),
      Metadata: findType("Metadata"),
      MissingWorker: findType("MissingWorker"),
      NativeArrayBuffer: findType("NativeArrayBuffer"),
      NativeTypedArrayOfDouble: findType("NativeTypedArrayOfDouble"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeTypedData: findType("NativeTypedData"),
      NativeUint8List: findType("NativeUint8List"),
      NonNullsIterable_Future_void: findType("NonNullsIterable<Future<~>>"),
      NonNullsIterable_Uri: findType("NonNullsIterable<Uri>"),
      NotAWorker: findType("NotAWorker"),
      Null: findType("Null"),
      Null_Function: findType("Null()"),
      Object: findType("Object"),
      Pattern: findType("Pattern"),
      Person: findType("Person"),
      PersonWorker: findType("PersonWorker"),
      PlatformSelector: findType("PlatformSelector"),
      PoolResource: findType("PoolResource"),
      PoolWorker_Worker: findType("PoolWorker<Worker>"),
      PrimeWorker: findType("PrimeWorker"),
      PrimeWorkerPool: findType("PrimeWorkerPool"),
      QueueList_LiveTest: findType("QueueList<LiveTest>"),
      Record: findType("Record"),
      Record_0: findType("+()"),
      Record_2_List_int_digits_and_nullable_Object_exception: findType("+digits,exception(List<int>,Object?)"),
      Record_2_String_label_and_int_tests: findType("+label,tests(String,int)"),
      Record_2_int_errors_and_int_success: findType("+errors,success(int,int)"),
      RegExpMatch: findType("RegExpMatch"),
      ReversedListIterable_Declarer: findType("ReversedListIterable<Declarer>"),
      ReversedListIterable_String: findType("ReversedListIterable<String>"),
      RunnerSuite: findType("RunnerSuite"),
      Set_BigInt: findType("Set<BigInt>"),
      Set_LiveTest: findType("Set<LiveTest>"),
      Set_String: findType("Set<String>"),
      Set_double: findType("Set<double>"),
      Set_dynamic: findType("Set<@>"),
      Set_int: findType("Set<int>"),
      Set_nullable_BigInt: findType("Set<BigInt?>"),
      Set_nullable_DateTime: findType("Set<DateTime?>"),
      Set_nullable_String: findType("Set<String?>"),
      Set_nullable_bool: findType("Set<bool?>"),
      Set_nullable_double: findType("Set<double?>"),
      Set_nullable_int: findType("Set<int?>"),
      Set_nullable_num: findType("Set<num?>"),
      SquadronCancelationToken: findType("SquadronCancelationToken"),
      SquadronCanceledException: findType("SquadronCanceledException"),
      SquadronError: findType("SquadronError"),
      SquadronException: findType("SquadronException"),
      SquadronPlatformType: findType("SquadronPlatformType"),
      StackTrace: findType("StackTrace"),
      State: findType("State"),
      StreamController_List_dynamic: findType("StreamController<List<@>>"),
      StreamController_LiveTest: findType("StreamController<LiveTest>"),
      StreamGroup_LiveTest: findType("StreamGroup<LiveTest>"),
      StreamSubscription_dynamic: findType("StreamSubscription<@>"),
      StreamTask_dynamic: findType("StreamTask<@>"),
      Stream_LiveTest: findType("Stream<LiveTest>"),
      StreamingServiceWorker: findType("StreamingServiceWorker"),
      String: findType("String"),
      String_Function_Match: findType("String(Match)"),
      String_Function_SquadronException: findType("String(SquadronException)"),
      String_Function_String: findType("String(String)"),
      Test: findType("Test"),
      TestResult: findType("TestResult"),
      TestWorker: findType("TestWorker"),
      TestWorkerPool: findType("TestWorkerPool"),
      TimeoutCanceledException: findType("TimeoutCanceledException"),
      TimeoutException: findType("TimeoutException"),
      Timer: findType("Timer"),
      Trace: findType("Trace"),
      Trace_Function_String: findType("Trace(String)"),
      TrustedGetRuntimeType: findType("TrustedGetRuntimeType"),
      TypeError: findType("TypeError"),
      TypeMatcher_BigInt: findType("TypeMatcher<BigInt>"),
      TypeMatcher_CanceledException: findType("TypeMatcher<CanceledException>"),
      TypeMatcher_CanceledExceptions: findType("TypeMatcher<CanceledExceptions>"),
      TypeMatcher_DateTime: findType("TypeMatcher<DateTime>"),
      TypeMatcher_JSObject: findType("TypeMatcher<JSObject>"),
      TypeMatcher_JavaScriptBigInt: findType("TypeMatcher<JavaScriptBigInt>"),
      TypeMatcher_List_Person: findType("TypeMatcher<List<Person>>"),
      TypeMatcher_List_double: findType("TypeMatcher<List<double>>"),
      TypeMatcher_List_dynamic: findType("TypeMatcher<List<@>>"),
      TypeMatcher_List_int: findType("TypeMatcher<List<int>>"),
      TypeMatcher_List_nullable_double: findType("TypeMatcher<List<double?>>"),
      TypeMatcher_List_nullable_int: findType("TypeMatcher<List<int?>>"),
      TypeMatcher_Map_String_int: findType("TypeMatcher<Map<String,int>>"),
      TypeMatcher_Map_dynamic_dynamic: findType("TypeMatcher<Map<@,@>>"),
      TypeMatcher_Map_of_String_and_nullable_int: findType("TypeMatcher<Map<String,int?>>"),
      TypeMatcher_Set_double: findType("TypeMatcher<Set<double>>"),
      TypeMatcher_Set_dynamic: findType("TypeMatcher<Set<@>>"),
      TypeMatcher_Set_int: findType("TypeMatcher<Set<int>>"),
      TypeMatcher_Set_nullable_double: findType("TypeMatcher<Set<double?>>"),
      TypeMatcher_Set_nullable_int: findType("TypeMatcher<Set<int?>>"),
      TypeMatcher_SquadronError: findType("TypeMatcher<SquadronError>"),
      TypeMatcher_String: findType("TypeMatcher<String>"),
      TypeMatcher_TaskCanceledException: findType("TypeMatcher<TaskCanceledException>"),
      TypeMatcher_TestException: findType("TypeMatcher<TestException>"),
      TypeMatcher_TimeoutException: findType("TypeMatcher<TimeoutException>"),
      TypeMatcher_Uint16List: findType("TypeMatcher<Uint16List>"),
      TypeMatcher_WorkerException: findType("TypeMatcher<WorkerException>"),
      TypeMatcher_double: findType("TypeMatcher<double>"),
      TypeMatcher_int: findType("TypeMatcher<int>"),
      TypedData: findType("TypedData"),
      Uint16List: findType("Uint16List"),
      Uint32List: findType("Uint32List"),
      Uint8ClampedList: findType("Uint8ClampedList"),
      Uint8List: findType("Uint8List"),
      UnionSetController_LiveTest: findType("UnionSetController<LiveTest>"),
      UnionSet_LiveTest: findType("UnionSet<LiveTest>"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      UnmodifiableListView_LiveTest: findType("UnmodifiableListView<LiveTest>"),
      UnmodifiableMapView_BooleanSelector_Metadata: findType("UnmodifiableMapView<BooleanSelector,Metadata>"),
      UnmodifiableMapView_PlatformSelector_Metadata: findType("UnmodifiableMapView<PlatformSelector,Metadata>"),
      UnmodifiableSetView_LiveTest: findType("UnmodifiableSetView<LiveTest>"),
      UnmodifiableSetView_String: findType("UnmodifiableSetView<String>"),
      Uri: findType("Uri"),
      ValueTask_dynamic: findType("ValueTask<@>"),
      WhereIterable_Level: findType("WhereIterable<Level>"),
      WhereIterable_List_dynamic: findType("WhereIterable<List<@>>"),
      WhereIterable_StreamTask_dynamic: findType("WhereIterable<StreamTask<@>>"),
      WhereIterable_String: findType("WhereIterable<String>"),
      WhereIterable_ValueTask_dynamic: findType("WhereIterable<ValueTask<@>>"),
      WhereTypeIterable_CanceledException: findType("WhereTypeIterable<CanceledException>"),
      WhereTypeIterable_GroupEntry: findType("WhereTypeIterable<GroupEntry>"),
      WhereTypeIterable_String: findType("WhereTypeIterable<String>"),
      WorkerStat: findType("WorkerStat"),
      WorkerTask_dynamic_Worker: findType("WorkerTask<@,Worker>"),
      Zone: findType("Zone"),
      _AsyncBroadcastStreamController_LiveSuite: findType("_AsyncBroadcastStreamController<LiveSuite>"),
      _AsyncBroadcastStreamController_RunnerSuite: findType("_AsyncBroadcastStreamController<RunnerSuite>"),
      _AsyncBroadcastStreamController_bool: findType("_AsyncBroadcastStreamController<bool>"),
      _AsyncCompleter_CanceledException: findType("_AsyncCompleter<CanceledException>"),
      _AsyncCompleter_List_dynamic: findType("_AsyncCompleter<List<@>>"),
      _AsyncCompleter_List_void: findType("_AsyncCompleter<List<~>>"),
      _AsyncCompleter_PoolResource: findType("_AsyncCompleter<PoolResource>"),
      _AsyncCompleter_SquadronCanceledException: findType("_AsyncCompleter<SquadronCanceledException>"),
      _AsyncCompleter_String: findType("_AsyncCompleter<String>"),
      _AsyncCompleter__WebChannel: findType("_AsyncCompleter<_WebChannel>"),
      _AsyncCompleter_bool: findType("_AsyncCompleter<bool>"),
      _AsyncCompleter_dynamic: findType("_AsyncCompleter<@>"),
      _AsyncCompleter_nullable_int: findType("_AsyncCompleter<int?>"),
      _AsyncCompleter_void: findType("_AsyncCompleter<~>"),
      _BigIntImpl: findType("_BigIntImpl"),
      _ElementEventStreamImpl_JSObject: findType("_ElementEventStreamImpl<JSObject>"),
      _Future_CanceledException: findType("_Future<CanceledException>"),
      _Future_List_dynamic: findType("_Future<List<@>>"),
      _Future_List_void: findType("_Future<List<~>>"),
      _Future_PoolResource: findType("_Future<PoolResource>"),
      _Future_SquadronCanceledException: findType("_Future<SquadronCanceledException>"),
      _Future_String: findType("_Future<String>"),
      _Future__WebChannel: findType("_Future<_WebChannel>"),
      _Future_bool: findType("_Future<bool>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      _Future_nullable_int: findType("_Future<int?>"),
      _Future_void: findType("_Future<~>"),
      _IdentityHashMap_of_nullable_Object_and_nullable_Object: findType("_IdentityHashMap<Object?,Object?>"),
      _Mismatch: findType("_Mismatch"),
      _Predicate_nullable_Object: findType("_Predicate<Object?>"),
      _StreamControllerAddStreamState_nullable_Object: findType("_StreamControllerAddStreamState<Object?>"),
      _StreamIterator_Map_String_int: findType("_StreamIterator<Map<String,int>>"),
      _StreamIterator_int: findType("_StreamIterator<int>"),
      _SyncBroadcastStreamController_AsyncError: findType("_SyncBroadcastStreamController<AsyncError>"),
      _SyncBroadcastStreamController_LiveTest: findType("_SyncBroadcastStreamController<LiveTest>"),
      _SyncBroadcastStreamController_Message: findType("_SyncBroadcastStreamController<Message>"),
      _SyncBroadcastStreamController_State: findType("_SyncBroadcastStreamController<State>"),
      _SyncCompleter_PoolResource: findType("_SyncCompleter<PoolResource>"),
      _SyncStarIterable_Record_2_String_label_and_int_tests: findType("_SyncStarIterable<+label,tests(String,int)>"),
      _WebChannel: findType("_WebChannel"),
      _ZoneFunction_of_A_Function_2_B_and_C_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_and_C_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_2_B_and_C: findType("_ZoneFunction<0^(1^,2^)(Zone,ZoneDelegate,Zone,0^(1^,2^))<Object?,Object?,Object?>>"),
      _ZoneFunction_of_A_Function_B_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_B: findType("_ZoneFunction<0^(1^)(Zone,ZoneDelegate,Zone,0^(1^))<Object?,Object?>>"),
      _ZoneFunction_of_A_Function_Function_A_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function: findType("_ZoneFunction<0^()(Zone,ZoneDelegate,Zone,0^())<Object?>>"),
      _ZoneFunction_of_nullable_AsyncError_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Object_and_nullable_StackTrace: findType("_ZoneFunction<AsyncError?(Zone,ZoneDelegate,Zone,Object,StackTrace?)>"),
      _ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace: findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,Object,StackTrace)>"),
      _ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_String: findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,String)>"),
      bool: findType("bool"),
      bool_Function_Frame: findType("bool(Frame)"),
      bool_Function_Level: findType("bool(Level)"),
      bool_Function_List_dynamic: findType("bool(List<@>)"),
      bool_Function_Never: findType("bool(0&)"),
      bool_Function_Object: findType("bool(Object)"),
      bool_Function_StreamTask_dynamic: findType("bool(StreamTask<@>)"),
      bool_Function_String: findType("bool(String)"),
      bool_Function_ValueTask_dynamic: findType("bool(ValueTask<@>)"),
      bool_Function_nullable_Object: findType("bool(Object?)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_List_dynamic: findType("@(List<@>)"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      dynamic_Function_String: findType("@(String)"),
      int: findType("int"),
      nullable_ByteBuffer: findType("ByteBuffer?"),
      nullable_CanceledException: findType("CanceledException?"),
      nullable_Channel: findType("Channel?"),
      nullable_DateTime: findType("DateTime?"),
      nullable_Declarer: findType("Declarer?"),
      nullable_FutureOr_bool: findType("bool/?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_Future_nullable_bool: findType("Future<bool?>?"),
      nullable_Future_void: findType("Future<~>?"),
      nullable_Group: findType("Group?"),
      nullable_GroupEntry_Function_GroupEntry: findType("GroupEntry?(GroupEntry)"),
      nullable_Invoker: findType("Invoker?"),
      nullable_Iterable_Group: findType("Iterable<Group>?"),
      nullable_JSObject: findType("JSObject?"),
      nullable_List_Person: findType("List<Person>?"),
      nullable_List_dynamic: findType("List<@>?"),
      nullable_LiveTest: findType("LiveTest?"),
      nullable_Logger: findType("Logger?"),
      nullable_Map_PlatformSelector_Metadata: findType("Map<PlatformSelector,Metadata>?"),
      nullable_Map_int_double: findType("Map<int,double>?"),
      nullable_Map_of_int_and_dynamic_Function_List_dynamic: findType("Map<int,@(List<@>)>?"),
      nullable_Map_of_nullable_Object_and_nullable_Object: findType("Map<Object?,Object?>?"),
      nullable_Object: findType("Object?"),
      nullable_Person: findType("Person?"),
      nullable_SquadronCancelationToken: findType("SquadronCancelationToken?"),
      nullable_SquadronException: findType("SquadronException?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_StackTraceFormatter: findType("StackTraceFormatter?"),
      nullable_StackZoneSpecification: findType("StackZoneSpecification?"),
      nullable_StreamSubscription_LiveTest: findType("StreamSubscription<LiveTest>?"),
      nullable_String: findType("String?"),
      nullable_String_Function_Match: findType("String(Match)?"),
      nullable_TestContext: findType("TestContext?"),
      nullable_WorkerChannel: findType("WorkerChannel?"),
      nullable_WorkerException_Function_List_dynamic: findType("WorkerException?(List<@>)"),
      nullable_Zone: findType("Zone?"),
      nullable_ZoneDelegate: findType("ZoneDelegate?"),
      nullable_ZoneSpecification: findType("ZoneSpecification?"),
      nullable__AsyncCounter: findType("_AsyncCounter?"),
      nullable__DelayedEvent_dynamic: findType("_DelayedEvent<@>?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      nullable__Mismatch_Function_4_nullable_Object_and_nullable_Object_and_String_and_int: findType("_Mismatch?(Object?,Object?,String,int)"),
      nullable_bool: findType("bool?"),
      nullable_double: findType("double?"),
      nullable_int: findType("int?"),
      nullable_num: findType("num?"),
      nullable_void_Function: findType("~()?"),
      nullable_void_Function_JSObject: findType("~(JSObject)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_$opt_dynamic: findType("~([@])"),
      void_Function_$opt_void: findType("~([~])"),
      void_Function_Exception: findType("~(Exception)"),
      void_Function_List_dynamic: findType("~(List<@>)"),
      void_Function_Object: findType("~(Object)"),
      void_Function_Object_$opt_nullable_StackTrace: findType("~(Object[StackTrace?])"),
      void_Function_Object_StackTrace: findType("~(Object,StackTrace)"),
      void_Function_SquadronException: findType("~(SquadronException)"),
      void_Function_TestContext: findType("~(TestContext)"),
      void_Function_Timer: findType("~(Timer)"),
      void_Function_WorkerStat_bool: findType("~(WorkerStat,bool)"),
      void_Function_dynamic: findType("~(@)"),
      void_Function_int: findType("~(int)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.NativeByteData_methods = A.NativeByteData.prototype;
    B.NativeFloat32List_methods = A.NativeFloat32List.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.AsciiEncoder_127 = new A.AsciiEncoder(127);
    B.CONSTANT6 = new A.Instantiation1(A.lib_03_converter_test__list_features___nf$closure(), type$.Instantiation1_double);
    B.CONSTANT5 = new A.Instantiation1(A.lib_03_converter_test__list_features___nf$closure(), type$.Instantiation1_nullable_double);
    B.CONSTANT4 = new A.Instantiation1(A.lib_03_converter_test__list_features___nf$closure(), type$.Instantiation1_nullable_int);
    B.CONSTANT3 = new A.Instantiation1(A.lib_03_converter_test__map_features___nf$closure(), type$.Instantiation1_double);
    B.CONSTANT2 = new A.Instantiation1(A.lib_03_converter_test__map_features___nf$closure(), type$.Instantiation1_nullable_double);
    B.CONSTANT1 = new A.Instantiation1(A.lib_03_converter_test__map_features___nf$closure(), type$.Instantiation1_nullable_int);
    B.CONSTANT0 = new A.Instantiation1(A.canceled_exceptions___self$closure(), A.findType("Instantiation1<CanceledException>"));
    B.CONSTANT = new A.Instantiation1(A.math__max$closure(), A.findType("Instantiation1<int>"));
    B.List_empty0 = makeConstList([], type$.JSArray_String);
    B.C_All = new A.All();
    B.C_AsciiCodec = new A.AsciiCodec();
    B.C_Base64Encoder = new A.Base64Encoder();
    B.C_Base64Codec = new A.Base64Codec();
    B.C_CastConverter = new A.CastConverter();
    B.C_CountryMarshaler = new A.CountryMarshaler();
    B.C_CityMarshaler = new A.CityMarshaler();
    B.C_EmptyIterator = new A.EmptyIterator(A.findType("EmptyIterator<0&>"));
    B.C_EmptyUnmodifiableSet = new A.EmptyUnmodifiableSet(A.findType("EmptyUnmodifiableSet<String>"));
    B.C_FractionMarshaler = new A.FractionMarshaler();
    B.C_IntegerDivisionByZeroException = new A.IntegerDivisionByZeroException();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof HTMLElement == "function";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (typeof userAgent != "string") return hooks;
    if (userAgent.indexOf("DumpRenderTree") >= 0) return hooks;
    if (userAgent.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST5 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_JsonCodec = new A.JsonCodec();
    B.C_NumConverter = new A.NumConverter();
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_PersonMarshaler = new A.PersonMarshaler();
    B.C_SentinelValue = new A.SentinelValue();
    B.C_TypeMatcher = new A.TypeMatcher(A.findType("TypeMatcher<Future<@>>"));
    B.C_TypeMatcher0 = new A.TypeMatcher(type$.TypeMatcher_String);
    B.C_Utf8Codec = new A.Utf8Codec();
    B.C_Utf8Encoder = new A.Utf8Encoder();
    B.C__DelayedDone = new A._DelayedDone();
    B.C__Empty = new A._Empty();
    B.C__IsFalse = new A._IsFalse();
    B.C__IsNaN = new A._IsNaN();
    B.C__IsNotNull = new A._IsNotNull();
    B.C__IsNull = new A._IsNull();
    B.C__IsTrue = new A._IsTrue();
    B.C__JSRandom = new A._JSRandom();
    B.C__NotEmpty = new A._NotEmpty();
    B.C__RootZone = new A._RootZone();
    B.Compiler_Dart2Js_dart2js_dart2js = new A.Compiler("Dart2Js", "dart2js", "dart2js");
    B.Compiler_Dart2Wasm_dart2wasm_dart2wasm = new A.Compiler("Dart2Wasm", "dart2wasm", "dart2wasm");
    B.Compiler_Kernel_kernel_kernel = new A.Compiler("Kernel", "kernel", "kernel");
    B.ConcurrencySettings_0_1_50 = new A.ConcurrencySettings(0, 1, 50);
    B.ConcurrencySettings_0_2_50 = new A.ConcurrencySettings(0, 2, 50);
    B.ConcurrencySettings_1_1_1 = new A.ConcurrencySettings(1, 1, 1);
    B.ConcurrencySettings_1_3_1 = new A.ConcurrencySettings(1, 3, 1);
    B.ConcurrencySettings_1_4_50 = new A.ConcurrencySettings(1, 4, 50);
    B.ConcurrencySettings_2_2_2 = new A.ConcurrencySettings(2, 2, 2);
    B.ConcurrencySettings_2_5_3 = new A.ConcurrencySettings(2, 5, 3);
    B.Duration_0 = new A.Duration(0);
    B.Duration_20000 = new A.Duration(20000);
    B.Duration_30000000 = new A.Duration(30000000);
    B.Duration_80000 = new A.Duration(80000);
    B.Fraction_0_0 = new A.Fraction(0, 0);
    B.JsonEncoder_null_null = new A.JsonEncoder(null, null);
    B.Level_0_all = new A.Level(0, "all");
    B.Level_10000_off = new A.Level(10000, "off");
    B.Level_1000_trace = new A.Level(1000, "trace");
    B.Level_2000_debug = new A.Level(2000, "debug");
    B.Level_4000_warning = new A.Level(4000, "warning");
    B.Level_5000_error = new A.Level(5000, "error");
    B.Level_9999_nothing = new A.Level(9999, "nothing");
    B.Compiler_Exe_exe_exe = new A.Compiler("Exe", "exe", "exe");
    B.Compiler_Source_source_source = new A.Compiler("Source", "source", "source");
    B.List_0sp = makeConstList([B.Compiler_Dart2Js_dart2js_dart2js, B.Compiler_Dart2Wasm_dart2wasm_dart2wasm, B.Compiler_Exe_exe_exe, B.Compiler_Kernel_kernel_kernel, B.Compiler_Source_source_source], type$.JSArray_Compiler);
    B.List_4i6 = makeConstList([""], type$.JSArray_String);
    B.List_uk6 = makeConstList([B.Compiler_Kernel_kernel_kernel, B.Compiler_Source_source_source, B.Compiler_Exe_exe_exe], type$.JSArray_Compiler);
    B.Runtime_KAb = new A.Runtime("VM", "vm", true, false, false, B.Compiler_Kernel_kernel_kernel, B.List_uk6);
    B.List_u5u = makeConstList([B.Compiler_Dart2Js_dart2js_dart2js, B.Compiler_Dart2Wasm_dart2wasm_dart2wasm], type$.JSArray_Compiler);
    B.Runtime_fjg = new A.Runtime("Chrome", "chrome", false, true, true, B.Compiler_Dart2Js_dart2js_dart2js, B.List_u5u);
    B.Runtime_tCs = new A.Runtime("Firefox", "firefox", false, true, false, B.Compiler_Dart2Js_dart2js_dart2js, B.List_u5u);
    B.List_Compiler_Dart2Js_dart2js_dart2js = makeConstList([B.Compiler_Dart2Js_dart2js_dart2js], type$.JSArray_Compiler);
    B.Runtime_Fl2 = new A.Runtime("Safari", "safari", false, true, false, B.Compiler_Dart2Js_dart2js_dart2js, B.List_Compiler_Dart2Js_dart2js_dart2js);
    B.Runtime_lnp = new A.Runtime("Microsoft Edge", "edge", false, true, true, B.Compiler_Dart2Js_dart2js_dart2js, B.List_Compiler_Dart2Js_dart2js_dart2js);
    B.Runtime_LvA = new A.Runtime("Node.js", "node", false, false, false, B.Compiler_Dart2Js_dart2js_dart2js, B.List_u5u);
    B.List_X9K = makeConstList([B.Runtime_KAb, B.Runtime_fjg, B.Runtime_tCs, B.Runtime_Fl2, B.Runtime_lnp, B.Runtime_LvA], A.findType("JSArray<Runtime>"));
    B.List_empty = makeConstList([], type$.JSArray_dynamic);
    B.List_empty1 = makeConstList([], A.findType("JSArray<+label,tests(String,int)>"));
    B.TestSuite_execute = new A.TestSuite(A.lib_00_not_a_worker_test__execute$closure());
    B.TestSuite_execute0 = new A.TestSuite(A.lib_00_jsify_dartify_test__execute$closure());
    B.TestSuite_execute1 = new A.TestSuite(A.lib_01_web_worker_test__execute$closure());
    B.TestSuite_execute2 = new A.TestSuite(A.lib_04_worker_test__execute$closure());
    B.TestSuite_execute3 = new A.TestSuite(A.lib_05_worker_errors_test__execute$closure());
    B.TestSuite_execute4 = new A.TestSuite(A.lib_06_worker_streaming_test__execute$closure());
    B.TestSuite_execute5 = new A.TestSuite(A.lib_11_worker_pool_test__execute$closure());
    B.TestSuite_execute6 = new A.TestSuite(A.lib_08_shared_channel_test__execute$closure());
    B.TestSuite_execute7 = new A.TestSuite(A.lib_07_local_worker_test__execute$closure());
    B.TestSuite_execute8 = new A.TestSuite(A.lib_02_logging_test__execute$closure());
    B.TestSuite_execute9 = new A.TestSuite(A.lib_03_converter_test__execute$closure());
    B.TestSuite_execute10 = new A.TestSuite(A.lib_10_marshaler_test__execute$closure());
    B.TestSuite_execute11 = new A.TestSuite(A.lib_09_cancelation_test__execute$closure());
    B.TestSuite_execute12 = new A.TestSuite(A.lib_12_issues_test__execute$closure());
    B.List_ffY = makeConstList([B.TestSuite_execute, B.TestSuite_execute0, B.TestSuite_execute1, B.TestSuite_execute2, B.TestSuite_execute3, B.TestSuite_execute4, B.TestSuite_execute5, B.TestSuite_execute6, B.TestSuite_execute7, B.TestSuite_execute8, B.TestSuite_execute9, B.TestSuite_execute10, B.TestSuite_execute11, B.TestSuite_execute12], A.findType("JSArray<TestSuite>"));
    B.Level_999_verbose = new A.Level(999, "verbose");
    B.Level_3000_info = new A.Level(3000, "info");
    B.Level_5999_wtf = new A.Level(5999, "wtf");
    B.Level_6000_fatal = new A.Level(6000, "fatal");
    B.List_gu1 = makeConstList([B.Level_0_all, B.Level_999_verbose, B.Level_1000_trace, B.Level_2000_debug, B.Level_3000_info, B.Level_4000_warning, B.Level_5000_error, B.Level_5999_wtf, B.Level_6000_fatal, B.Level_9999_nothing, B.Level_10000_off], A.findType("JSArray<Level>"));
    B.OperatingSystem_Windows_windows = new A.OperatingSystem("Windows", "windows");
    B.OperatingSystem_piG = new A.OperatingSystem("OS X", "mac-os");
    B.OperatingSystem_Linux_linux = new A.OperatingSystem("Linux", "linux");
    B.OperatingSystem_Android_android = new A.OperatingSystem("Android", "android");
    B.OperatingSystem_iOS_ios = new A.OperatingSystem("iOS", "ios");
    B.List_qSk = makeConstList([B.OperatingSystem_Windows_windows, B.OperatingSystem_piG, B.OperatingSystem_Linux_linux, B.OperatingSystem_Android_android, B.OperatingSystem_iOS_ios], A.findType("JSArray<OperatingSystem>"));
    B.Object_MIv = {"\n": 0, "\r": 1, "\f": 2, "\b": 3, "\t": 4, "\v": 5, "\x7f": 6};
    B.Map_EU2Kv = new A.ConstantStringMap(B.Object_MIv, ["\\n", "\\r", "\\f", "\\b", "\\t", "\\v", "\\x7F"], A.findType("ConstantStringMap<String,String>"));
    B.Map_JEAD0 = new A.GeneralConstantMap([1, 125], type$.GeneralConstantMap_int_double);
    B.Object_empty = {};
    B.Map_empty0 = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<BooleanSelector,Metadata>"));
    B.Map_empty = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<PlatformSelector,Metadata>"));
    B.Map_empty1 = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<0&,0&>"));
    B.Map_s4j9M = new A.GeneralConstantMap([2, 125], type$.GeneralConstantMap_int_double);
    B.MessageType_print = new A.MessageType("print");
    B.MessageType_skip = new A.MessageType("skip");
    B.OperatingSystem_none_none = new A.OperatingSystem("none", "none");
    B.PlatformSelector_All = new A.PlatformSelector(B.C_All);
    B.Result_0 = new A.Result("success");
    B.Result_1 = new A.Result("skipped");
    B.Result_3 = new A.Result("error");
    B.RunMode_0 = new A.RunMode("discover");
    B.Set_qRjxp = new A.GeneralConstantSet([1000000007, 1000000009, 1000001789, 1000001791, 6643838879, 99999199999, 999999000001, 67280421310721], A.findType("GeneralConstantSet<int>"));
    B.SquadronPlatformType_Dqj = new A.SquadronPlatformType("Web Assembly", "wasm");
    B.SquadronPlatformType_JavaScript_js = new A.SquadronPlatformType("JavaScript", "js");
    B.SquadronPlatformType_Rhi = new A.SquadronPlatformType("Dart VM", "vm");
    B.SquadronPlatformType_Unknown_unknown = new A.SquadronPlatformType("Unknown", "unknown");
    B.Status_0 = new A.Status("pending");
    B.State_Status_0_Result_0 = new A.State(B.Status_0, B.Result_0);
    B.Status_1 = new A.Status("running");
    B.State_Status_1_Result_0 = new A.State(B.Status_1, B.Result_0);
    B.State_Status_1_Result_1 = new A.State(B.Status_1, B.Result_1);
    B.Status_2 = new A.Status("complete");
    B.State_Status_2_Result_1 = new A.State(B.Status_2, B.Result_1);
    B.Result_2 = new A.Result("failure");
    B.State_Status_2_Result_2 = new A.State(B.Status_2, B.Result_2);
    B.State_Status_2_Result_3 = new A.State(B.Status_2, B.Result_3);
    B.Symbol_KFY = new A.Symbol("test.declarer");
    B.Symbol_gK7 = new A.Symbol("test.invoker");
    B.Symbol_runCount = new A.Symbol("runCount");
    B.TestState_1 = new A.TestState("skipped");
    B.TestState_3 = new A.TestState("passed");
    B.TestState_4 = new A.TestState("failed");
    B.Duration_720000000 = new A.Duration(720000000);
    B.Timeout_Duration_720000000_null = new A.Timeout(B.Duration_720000000, null);
    B.Timeout_null_1 = new A.Timeout(null, 1);
    B.Timeout_null_null = new A.Timeout(null, null);
    B.Type_ByteBuffer_rqD = A.typeLiteral("ByteBuffer");
    B.Type_ByteData_9dB = A.typeLiteral("ByteData");
    B.Type_Float32List_9Kz = A.typeLiteral("Float32List");
    B.Type_Float64List_9Kz = A.typeLiteral("Float64List");
    B.Type_Int16List_s5h = A.typeLiteral("Int16List");
    B.Type_Int32List_O8Z = A.typeLiteral("Int32List");
    B.Type_Int8List_rFV = A.typeLiteral("Int8List");
    B.Type_JSObject_ttY = A.typeLiteral("JSObject");
    B.Type_Object_A4p = A.typeLiteral("Object");
    B.Type_Uint16List_kmP = A.typeLiteral("Uint16List");
    B.Type_Uint32List_kmP = A.typeLiteral("Uint32List");
    B.Type_Uint8ClampedList_04U = A.typeLiteral("Uint8ClampedList");
    B.Type_Uint8List_8Eb = A.typeLiteral("Uint8List");
    B.Type_double_JIQ = A.typeLiteral("double");
    B.Type_int_T7V = A.typeLiteral("int");
    B.Utf8Decoder_false = new A.Utf8Decoder(false);
    B._Mode_0 = new A._Mode("any");
    B._Mode_1 = new A._Mode("every");
    B._OrderingMatcher_HCW = new A._OrderingMatcher(0, true, false, false, "a value equal to", true);
    B._OrderingMatcher_PXr = new A._OrderingMatcher(0, true, false, true, "a non-negative value", false);
    B._OrderingMatcher_kMx = new A._OrderingMatcher(0, false, false, true, "a positive value", false);
    B._StreamGroupState_canceled = new A._StreamGroupState("canceled");
    B._StreamGroupState_dormant = new A._StreamGroupState("dormant");
    B._StreamGroupState_listening = new A._StreamGroupState("listening");
    B._StreamGroupState_paused = new A._StreamGroupState("paused");
    B._StringStackTrace_OdL = new A._StringStackTrace("");
    B._ZoneFunction_KjJ = new A._ZoneFunction(B.C__RootZone, A.async___rootHandleUncaughtError$closure(), type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace);
    B._ZoneFunction_PAY = new A._ZoneFunction(B.C__RootZone, A.async___rootCreatePeriodicTimer$closure(), A.findType("_ZoneFunction<Timer(Zone,ZoneDelegate,Zone,Duration,~(Timer))>"));
    B._ZoneFunction_Xkh = new A._ZoneFunction(B.C__RootZone, A.async___rootRegisterUnaryCallback$closure(), type$._ZoneFunction_of_A_Function_B_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_B);
    B._ZoneFunction__RootZone__rootCreateTimer = new A._ZoneFunction(B.C__RootZone, A.async___rootCreateTimer$closure(), A.findType("_ZoneFunction<Timer(Zone,ZoneDelegate,Zone,Duration,~())>"));
    B._ZoneFunction__RootZone__rootErrorCallback = new A._ZoneFunction(B.C__RootZone, A.async___rootErrorCallback$closure(), type$._ZoneFunction_of_nullable_AsyncError_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Object_and_nullable_StackTrace);
    B._ZoneFunction__RootZone__rootFork = new A._ZoneFunction(B.C__RootZone, A.async___rootFork$closure(), A.findType("_ZoneFunction<Zone(Zone,ZoneDelegate,Zone,ZoneSpecification?,Map<Object?,Object?>?)>"));
    B._ZoneFunction__RootZone__rootPrint = new A._ZoneFunction(B.C__RootZone, A.async___rootPrint$closure(), type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_String);
    B._ZoneFunction__RootZone__rootRegisterCallback = new A._ZoneFunction(B.C__RootZone, A.async___rootRegisterCallback$closure(), type$._ZoneFunction_of_A_Function_Function_A_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function);
    B._ZoneFunction__RootZone__rootRun = new A._ZoneFunction(B.C__RootZone, A.async___rootRun$closure(), A.findType("_ZoneFunction<0^(Zone,ZoneDelegate,Zone,0^())<Object?>>"));
    B._ZoneFunction__RootZone__rootRunBinary = new A._ZoneFunction(B.C__RootZone, A.async___rootRunBinary$closure(), A.findType("_ZoneFunction<0^(Zone,ZoneDelegate,Zone,0^(1^,2^),1^,2^)<Object?,Object?,Object?>>"));
    B._ZoneFunction__RootZone__rootRunUnary = new A._ZoneFunction(B.C__RootZone, A.async___rootRunUnary$closure(), A.findType("_ZoneFunction<0^(Zone,ZoneDelegate,Zone,0^(1^),1^)<Object?,Object?>>"));
    B._ZoneFunction__RootZone__rootScheduleMicrotask = new A._ZoneFunction(B.C__RootZone, A.async___rootScheduleMicrotask$closure(), A.findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,~())>"));
    B._ZoneFunction_e9o = new A._ZoneFunction(B.C__RootZone, A.async___rootRegisterBinaryCallback$closure(), type$._ZoneFunction_of_A_Function_2_B_and_C_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_and_C_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_2_B_and_C);
    B._ZoneSpecification_Ipa = new A._ZoneSpecification(null, null, null, null, null, null, null, null, null, null, null, null, null);
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.toStringVisiting = A._setArrayType([], type$.JSArray_Object);
    $.printToZone = null;
    $.Primitives__identityHashCodeProperty = null;
    $.Primitives_timerFrequency = 0;
    $.Primitives_timerTicks = A._js_helper_Primitives_dateNow$closure();
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._Record__computedFieldKeys = A._setArrayType([], A.findType("JSArray<List<Object>?>"));
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._RootZone__rootDelegate = null;
    $._BigIntImpl__lastDividendDigits = null;
    $._BigIntImpl__lastDividendUsed = null;
    $._BigIntImpl__lastDivisorDigits = null;
    $._BigIntImpl__lastDivisorUsed = null;
    $._BigIntImpl____lastQuoRemDigits = A._Cell$named("_lastQuoRemDigits");
    $._BigIntImpl____lastQuoRemUsed = A._Cell$named("_lastQuoRemUsed");
    $._BigIntImpl____lastRemUsed = A._Cell$named("_lastRemUsed");
    $._BigIntImpl____lastRem_nsh = A._Cell$named("_lastRem_nsh");
    $.Uri__cachedBaseString = "";
    $.Uri__cachedBaseUri = null;
    $.Logger__logCallbacks = A.LinkedHashSet_LinkedHashSet$_empty(A.findType("~(LogEvent)"));
    $.Logger__outputCallbacks = A.LinkedHashSet_LinkedHashSet$_empty(A.findType("~(OutputEvent)"));
    $._currentUriBase = null;
    $._current = null;
    $.TokenId__id = 0;
    $.builtinExceptions = A.LinkedHashMap_LinkedHashMap$_literal(["$C", A.squadron_canceled_exception__SquadronCanceledExceptionExt_deserialize$closure(), "$T", A.squadron_timeout_exception__SquadronTimeoutExceptionExt_deserialize$closure(), "$C*", A.squadron_canceled_exceptions__SquadronCanceledExceptionsExt_deserialize$closure(), "$C1", A.task_canceled_exception__TaskCanceledExceptionExt_deserialize$closure(), "$K", A.task_terminated_exception__TaskTerminatedExceptionExt_deserialize$closure(), "$!", A.squadron_error__SquadronErrorImpl_deserialize$closure(), "$#", A.worker_exception__WorkerExceptionImpl_deserialize$closure()], type$.String, A.findType("SquadronException?(List<@>)"));
    $.Squadron__converterChangeHandlers = A.LinkedHashMap_LinkedHashMap$_empty(type$.Object, type$.void_Function);
    $._globalDeclarer = null;
    $._macOSDirectories = A.LinkedHashSet_LinkedHashSet$_literal(["/Applications", "/Library", "/Network", "/System", "/Users"], type$.String);
    $.ReleasableTracker__releasables = A.LinkedHashSet_LinkedHashSet$_empty(A.findType("Releasable"));
    $._listOfInts = A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    $._listOfNullableInts = A._setArrayType([1, 2, null, 4], type$.JSArray_nullable_int);
    $._listOfDoubles = A._setArrayType([1.1, 2.2, 3.3, 3.4], type$.JSArray_double);
    $._listOfNullableDoubles = A._setArrayType([1.1, 2.2, null, 4.4], type$.JSArray_nullable_double);
    $._mapOfInts = A.LinkedHashMap_LinkedHashMap$_literal(["one", 1, "two", 2, "three", 3], type$.String, type$.int);
    $._mapOfNullableInts = A.LinkedHashMap_LinkedHashMap$_literal(["one", 1, "", null, "three", 3], type$.String, type$.nullable_int);
    $._dx0 = A._setArrayType([1.2, 1.3, 1.4, 1.5], type$.JSArray_double);
    $._ix0 = A._setArrayType([12, 13, 14, 15], type$.JSArray_int);
    $._dx = A.LinkedHashMap_LinkedHashMap$_literal(["1dot2", 1.2, "1dot3", 1.3, "1dot4", 1.4, "1dot5", 1.5], type$.String, type$.double);
    $._ix = A.LinkedHashMap_LinkedHashMap$_literal(["twelve", 12, "thirteen", 13, "fourteen", 14, "fifteen", 15], type$.String, type$.int);
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "nullFuture", "$get$nullFuture", () => B.C__RootZone.run$1$1(new A.nullFuture_closure(), type$.Future_void));
    _lazyFinal($, "_safeToStringHooks", "$get$_safeToStringHooks", () => A._setArrayType([new J.JSArraySafeToStringHook()], A.findType("JSArray<SafeToStringHook>")));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "Future__nullFuture", "$get$Future__nullFuture", () => $.$get$nullFuture());
    _lazyFinal($, "Future__falseFuture", "$get$Future__falseFuture", () => A._Future$zoneValue(false, B.C__RootZone, type$.bool));
    _lazyFinal($, "_RootZone__rootMap", "$get$_RootZone__rootMap", () => {
      var t1 = type$.dynamic;
      return A.HashMap_HashMap(null, t1, t1);
    });
    _lazyFinal($, "_Utf8Decoder__reusableBuffer", "$get$_Utf8Decoder__reusableBuffer", () => A.NativeUint8List_NativeUint8List(4096));
    _lazyFinal($, "_Utf8Decoder__decoder", "$get$_Utf8Decoder__decoder", () => new A._Utf8Decoder__decoder_closure().call$0());
    _lazyFinal($, "_Utf8Decoder__decoderNonfatal", "$get$_Utf8Decoder__decoderNonfatal", () => new A._Utf8Decoder__decoderNonfatal_closure().call$0());
    _lazyFinal($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", () => A.NativeInt8List__create1(A._ensureNativeList(A._setArrayType([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], type$.JSArray_int))));
    _lazyFinal($, "_BigIntImpl_zero", "$get$_BigIntImpl_zero", () => A._BigIntImpl__BigIntImpl$_fromInt(0));
    _lazyFinal($, "_BigIntImpl_one", "$get$_BigIntImpl_one", () => A._BigIntImpl__BigIntImpl$_fromInt(1));
    _lazyFinal($, "_BigIntImpl_two", "$get$_BigIntImpl_two", () => A._BigIntImpl__BigIntImpl$_fromInt(2));
    _lazyFinal($, "_BigIntImpl__minusOne", "$get$_BigIntImpl__minusOne", () => $.$get$_BigIntImpl_one().$negate(0));
    _lazyFinal($, "_BigIntImpl__bigInt10000", "$get$_BigIntImpl__bigInt10000", () => A._BigIntImpl__BigIntImpl$_fromInt(10000));
    _lazy($, "_BigIntImpl__parseRE", "$get$_BigIntImpl__parseRE", () => A.RegExp_RegExp("^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$", false, false));
    _lazyFinal($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", () => A.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", true, false));
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_A4p));
    _lazyFinal($, "Stopwatch__frequency", "$get$Stopwatch__frequency", () => {
      A.Primitives_initTicker();
      return $.Primitives_timerFrequency;
    });
    _lazyFinal($, "Random__secureRandom", "$get$Random__secureRandom", () => {
      var t1 = new A._JSSecureRandom(A.NativeByteData_NativeByteData(8));
      t1._JSSecureRandom$0();
      return t1;
    });
    _lazyFinal($, "CancelableToken__canceledFuture", "$get$CancelableToken__canceledFuture", () => A.Future_Future$value(null, type$.dynamic));
    _lazy($, "Logger_defaultFilter", "$get$Logger_defaultFilter", () => new A.Logger_defaultFilter_closure());
    _lazyFinal($, "_dart2DynamicArgs", "$get$_dart2DynamicArgs", () => A.RegExp_RegExp("<dynamic(, dynamic)*>", true, false));
    _lazyFinal($, "_escapeRegExp", "$get$_escapeRegExp", () => A.RegExp_RegExp("[\\x00-\\x07\\x0E-\\x1F" + B.Map_EU2Kv.get$keys().map$1$1(0, A.util___getHexLiteral$closure(), type$.String).join$0(0) + "]", true, false));
    _lazyFinal($, "windows", "$get$windows", () => A.Context_Context($.$get$Style_windows()));
    _lazyFinal($, "context", "$get$context", () => new A.Context($.$get$Style_platform(), null));
    _lazyFinal($, "Style_posix", "$get$Style_posix", () => new A.PosixStyle(A.RegExp_RegExp("/", true, false), A.RegExp_RegExp("[^/]$", true, false), A.RegExp_RegExp("^/", true, false)));
    _lazyFinal($, "Style_windows", "$get$Style_windows", () => new A.WindowsStyle(A.RegExp_RegExp("[/\\\\]", true, false), A.RegExp_RegExp("[^/\\\\]$", true, false), A.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", true, false), A.RegExp_RegExp("^[/\\\\](?![/\\\\])", true, false)));
    _lazyFinal($, "Style_url", "$get$Style_url", () => new A.UrlStyle(A.RegExp_RegExp("/", true, false), A.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", true, false), A.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", true, false), A.RegExp_RegExp("^/", true, false)));
    _lazyFinal($, "Style_platform", "$get$Style_platform", () => A.Style__getPlatformStyle());
    _lazyFinal($, "_$JSDateFunction", "$get$_$JSDateFunction", () => type$.JavaScriptFunction._as(A.JSObjectUnsafeUtilExtension___(A.globalContext(), "Date")));
    _lazyFinal($, "_$JSProps_message", "$get$_$JSProps_message", () => "message");
    _lazyFinal($, "_$JSProps_error", "$get$_$JSProps_error", () => "error");
    _lazyFinal($, "_$JSProps_data", "$get$_$JSProps_data", () => "data");
    _lazyFinal($, "_$JSProps_next", "$get$_$JSProps_next", () => "next");
    _lazyFinal($, "_$JSProps_done", "$get$_$JSProps_done", () => "done");
    _lazyFinal($, "_$JSProps_value", "$get$_$JSProps_value", () => "value");
    _lazyFinal($, "threadId", "$get$threadId", () => "0x" + B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1($.$get$Random__secureRandom().nextInt$1(4294967296), 16), 8, "0"));
    _lazyFinal($, "UriChecker__headers", "$get$UriChecker__headers", () => {
      var t1 = type$.String;
      return A.NullableObjectUtilExtension_jsify(A.LinkedHashMap_LinkedHashMap$_literal(["method", "HEAD"], t1, t1));
    });
    _lazyFinal($, "_latestUPDEpoch", "$get$_latestUPDEpoch", () => {
      var t1 = A.Primitives_valueFromDecomposedDate(2020, 2, 2, 0, 0, 0, 0, 0, true);
      if (t1 == null)
        t1 = 864e14;
      if (t1 === 864e14)
        A.throwExpression(A.ArgumentError$("(2020, 2, 2, 0, 0, 0, 0, 0)", null));
      return new A.DateTime(t1, 0, true);
    });
    _lazyFinal($, "Squadron_platformType", "$get$Squadron_platformType", () => B.SquadronPlatformType_JavaScript_js);
    _lazyFinal($, "Squadron__platformConverter", "$get$Squadron__platformConverter", () => B.SquadronPlatformType_JavaScript_js.get$isJs() ? B.C_CastConverter : B.C_NumConverter);
    _lazy($, "Squadron__converter", "$get$Squadron__converter", () => $.$get$Squadron__platformConverter());
    _lazyFinal($, "CancelationTokenReference_noToken", "$get$CancelationTokenReference_noToken", () => {
      var t1 = new A.CancelationTokenReference("", A.Completer_Completer(type$.SquadronCanceledException), false);
      t1._refCount = 1;
      return t1;
    });
    _lazyFinal($, "_specKey", "$get$_specKey", () => new A.Object());
    _lazyFinal($, "_vmFrame", "$get$_vmFrame", () => A.RegExp_RegExp("^#\\d+\\s+(\\S.*) \\((.+?)((?::\\d+){0,2})\\)$", true, false));
    _lazyFinal($, "_v8JsFrame", "$get$_v8JsFrame", () => A.RegExp_RegExp("^\\s*at (?:(\\S.*?)(?: \\[as [^\\]]+\\])? \\((.*)\\)|(.*))$", true, false));
    _lazyFinal($, "_v8JsUrlLocation", "$get$_v8JsUrlLocation", () => A.RegExp_RegExp("^(.*?):(\\d+)(?::(\\d+))?$|native$", true, false));
    _lazyFinal($, "_v8WasmFrame", "$get$_v8WasmFrame", () => A.RegExp_RegExp("^\\s*at (?:(?<member>.+) )?(?:\\(?(?:(?<uri>\\S+):wasm-function\\[(?<index>\\d+)\\]\\:0x(?<offset>[0-9a-fA-F]+))\\)?)$", true, false));
    _lazyFinal($, "_v8EvalLocation", "$get$_v8EvalLocation", () => A.RegExp_RegExp("^eval at (?:\\S.*?) \\((.*)\\)(?:, .*?:\\d+:\\d+)?$", true, false));
    _lazyFinal($, "_firefoxEvalLocation", "$get$_firefoxEvalLocation", () => A.RegExp_RegExp("(\\S+)@(\\S+) line (\\d+) >.* (Function|eval):\\d+:\\d+", true, false));
    _lazyFinal($, "_firefoxSafariJSFrame", "$get$_firefoxSafariJSFrame", () => A.RegExp_RegExp("^(?:([^@(/]*)(?:\\(.*\\))?((?:/[^/]*)*)(?:\\(.*\\))?@)?(.*?):(\\d*)(?::(\\d*))?$", true, false));
    _lazyFinal($, "_firefoxWasmFrame", "$get$_firefoxWasmFrame", () => A.RegExp_RegExp("^(?<member>.*?)@(?:(?<uri>\\S+).*?:wasm-function\\[(?<index>\\d+)\\]:0x(?<offset>[0-9a-fA-F]+))$", true, false));
    _lazyFinal($, "_safariWasmFrame", "$get$_safariWasmFrame", () => A.RegExp_RegExp("^.*?wasm-function\\[(?<member>.*)\\]@\\[wasm code\\]$", true, false));
    _lazyFinal($, "_friendlyFrame", "$get$_friendlyFrame", () => A.RegExp_RegExp("^(\\S+)(?: (\\d+)(?::(\\d+))?)?\\s+([^\\d].*)$", true, false));
    _lazyFinal($, "_asyncBody", "$get$_asyncBody", () => A.RegExp_RegExp("<(<anonymous closure>|[^>]+)_async_body>", true, false));
    _lazyFinal($, "_initialDot", "$get$_initialDot", () => A.RegExp_RegExp("^\\.", true, false));
    _lazyFinal($, "Frame__uriRegExp", "$get$Frame__uriRegExp", () => A.RegExp_RegExp("^[a-zA-Z][-+.a-zA-Z\\d]*://", true, false));
    _lazyFinal($, "Frame__windowsRegExp", "$get$Frame__windowsRegExp", () => A.RegExp_RegExp("^([a-zA-Z]:[\\\\/]|\\\\\\\\)", true, false));
    _lazyFinal($, "_terseRegExp", "$get$_terseRegExp", () => A.RegExp_RegExp("(-patch)?([/\\\\].*)?$", true, false));
    _lazyFinal($, "_v8Trace", "$get$_v8Trace", () => A.RegExp_RegExp("\\n    ?at ", true, false));
    _lazyFinal($, "_v8TraceLine", "$get$_v8TraceLine", () => A.RegExp_RegExp("    ?at ", true, false));
    _lazyFinal($, "_firefoxEvalTrace", "$get$_firefoxEvalTrace", () => A.RegExp_RegExp("@\\S+ line \\d+ >.* (Function|eval):\\d+:\\d+", true, false));
    _lazyFinal($, "_firefoxSafariTrace", "$get$_firefoxSafariTrace", () => A.RegExp_RegExp("^(([.0-9A-Za-z_$/<]|\\(.*\\))*@)?[^\\s]*:\\d*$", true, true));
    _lazyFinal($, "_friendlyTrace", "$get$_friendlyTrace", () => A.RegExp_RegExp("^[^\\s<][^\\s]*( \\d+(:\\d+)?)?[ \\t]+[^\\s]+$", true, true));
    _lazyFinal($, "vmChainGap", "$get$vmChainGap", () => A.RegExp_RegExp("^<asynchronous suspension>\\n?$", true, true));
    _lazyFinal($, "TestHandle__defaultFormatter", "$get$TestHandle__defaultFormatter", () => {
      var t1 = type$.String;
      return new A.StackTraceFormatter(A.LinkedHashSet_LinkedHashSet$_literal(["matcher", "stream_channel", "test", "test_api"], t1), A.LinkedHashSet_LinkedHashSet$_empty(t1));
    });
    _lazyFinal($, "Metadata_empty", "$get$Metadata_empty", () => {
      var _null = null;
      return A.Metadata$_(_null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    });
    _lazyFinal($, "_universalValidVariables", "$get$_universalValidVariables", () => {
      var _i,
        t1 = A.LinkedHashSet_LinkedHashSet$_literal(["posix", "dart-vm", "browser", "js", "blink", "google", "wasm"], type$.String);
      for (_i = 0; _i < 6; ++_i)
        t1.add$1(0, B.List_X9K[_i].identifier);
      for (_i = 0; _i < 5; ++_i)
        t1.add$1(0, B.List_0sp[_i].identifier);
      for (_i = 0; _i < 5; ++_i)
        t1.add$1(0, B.List_qSk[_i].identifier);
      return t1;
    });
    _lazyFinal($, "_currentKey", "$get$_currentKey", () => new A.Object());
    _lazyFinal($, "anchoredHyphenatedIdentifier", "$get$anchoredHyphenatedIdentifier", () => A.RegExp_RegExp("^[a-zA-Z_-][a-zA-Z0-9_-]*$", true, false));
    _lazyFinal($, "SuiteConfiguration_empty", "$get$SuiteConfiguration_empty", () => {
      var t1, _null = null;
      A.createSentinel();
      A.SuiteConfiguration__list(_null, type$.String);
      A.SuiteConfiguration__list(_null, A.findType("RuntimeSelection"));
      A.SuiteConfiguration__list(_null, A.findType("CompilerSelection"));
      t1 = A.findType("SuiteConfiguration");
      A.SuiteConfiguration__map(_null, type$.BooleanSelector, t1);
      A.SuiteConfiguration__map(_null, type$.PlatformSelector, t1);
      $.$get$Metadata_empty();
      return new A.SuiteConfiguration(_null, _null, _null);
    });
    _lazyFinal($, "currentOSGuess", "$get$currentOSGuess", () => new A.currentOSGuess_closure().call$0());
    _lazyFinal($, "_listOfIntsWithIntegralDouble", "$get$_listOfIntsWithIntegralDouble", () => A._setArrayType([1, 2, 3, 4], type$.JSArray_num));
    _lazyFinal($, "_listOfDoublesWithInt", "$get$_listOfDoublesWithInt", () => A._setArrayType([1.1, 2.2, 3, 4.4], type$.JSArray_num));
    _lazyFinal($, "_mapOfIntsWithIntegralDouble", "$get$_mapOfIntsWithIntegralDouble", () => A.LinkedHashMap_LinkedHashMap$_literal(["one", 1, "two", 2, "three", 3], type$.String, type$.num));
    _lazyFinal($, "_throwsTypeError", "$get$_throwsTypeError", () => {
      var _null = null;
      return A.anyOf(A.failsWith(type$.TypeError), new A._AllOf(A._wrapArgs(A.failsWith(A.findType("WorkerException")), A.anyOf(A.reports("TypeError"), A.reports("not a subtype"), _null), _null, _null, _null, _null, _null)), _null);
    });
    _lazyFinal($, "_isInfinite", "$get$_isInfinite", () => A.anyOf(1 / 0, -1 / 0, null));
    _lazyFinal($, "_dblFeats", "$get$_dblFeats0", () => new A._Features0(A.findType("_Features0<double>")));
    _lazyFinal($, "_dblTests", "$get$_dblTests0", () => {
      var t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17,
        t1 = $.$get$_dblFeats0(),
        t2 = A.findType("bool(List<double>)"),
        t3 = t2._as(t1.get$isEmpty(t1));
      t2 = t2._as(t1.get$isNotEmpty(t1));
      t4 = A.findType("int(List<double>)")._as(t1.get$getLength());
      t5 = A.findType("double(List<double>)");
      t6 = t5._as(t1.get$getSingle());
      t7 = t5._as(t1.get$getFirst());
      t8 = t5._as(t1.get$getLast());
      t9 = A.findType("List<0^>(List<double>)<Object?>")._as(t1.get$cast(t1));
      t10 = type$.nullable_num;
      t11 = A.findType("List<double>(List<double>)");
      t12 = t11._as(t1.get$toList(t1));
      t13 = A.findType("Set<double>(List<double>)")._as(t1.get$toSet(t1));
      t14 = A.findType("Map<int,double>(List<double>)")._as(t1.get$asMap(t1));
      t15 = A.findType("Iterable<double>(List<double>)")._as(t1.get$reversed(t1));
      t16 = A.findType("Iterable<0^>(List<double>)<Object?>")._as(t1.get$whereType(t1));
      t17 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal(["isEmpty", t3, "isNotEmpty", t2, "read length", t4, "decrease length", new A._dblTests_closure26(), "increase length", new A._dblTests_closure27(), "read single", t6, "read first", t7, "read last", t8, "read by index", new A._dblTests_closure28(), "read by index (invalid)", new A._dblTests_closure29(), "set first", new A._dblTests_closure30(), "set last", new A._dblTests_closure31(), "set by index", new A._dblTests_closure32(), "set by index (invalid)", new A._dblTests_closure33(), "elementAt", new A._dblTests_closure34(), "elementAt (invalid)", new A._dblTests_closure35(), "getRange", new A._dblTests_closure36(), "contains", new A._dblTests_closure37(), "contains (miss)", new A._dblTests_closure38(), "find index", new A._dblTests_closure39(), "find index (skip)", new A._dblTests_closure40(), "find index (miss)", new A._dblTests_closure41(), "last index", new A._dblTests_closure42(), "last index (skip)", new A._dblTests_closure43(), "last index (miss)", new A._dblTests_closure44(), "find where", new A._dblTests_closure45(), "find where (skip)", new A._dblTests_closure46(), "find where (miss)", new A._dblTests_closure47(), "last where", new A._dblTests_closure48(), "last where (skip)", new A._dblTests_closure49(), "last where (miss)", new A._dblTests_closure50(), "cast", A.instantiate1(t9, t10), "toList", t12, "subList (all from start)", new A._dblTests_closure51(), "subList (all from mid)", new A._dblTests_closure52(), "subList (all from end)", new A._dblTests_closure53(), "subList (start to end)", new A._dblTests_closure54(), "subList (mid to end)", new A._dblTests_closure55(), "subList (end to end)", new A._dblTests_closure56(), "subList (invalid range)", new A._dblTests_closure57(), "subList (invalid start)", new A._dblTests_closure58(), "subList (invalid end)", new A._dblTests_closure59(), "toSet", t13, "asMap", t14, "reversed", t15, "map", new A._dblTests_closure60(), "expand", new A._dblTests_closure61(), "fold", new A._dblTests_closure62(), "reduce", new A._dblTests_closure63(), "any", new A._dblTests_closure64(), "any (miss)", new A._dblTests_closure65(), "every", new A._dblTests_closure66(), "every (full)", new A._dblTests_closure67(), "skip", new A._dblTests_closure68(), "skip while", new A._dblTests_closure69(), "skip while (miss)", new A._dblTests_closure70(), "take", new A._dblTests_closure71(), "take while", new A._dblTests_closure72(), "take while (miss)", new A._dblTests_closure73(), "where", new A._dblTests_closure74(), "where (miss)", new A._dblTests_closure75(), "where type", A.instantiate1(t16, t10), "where type (miss)", A.instantiate1(t16, t17), "singleWhere", new A._dblTests_closure76(), "singleWhere (match)", new A._dblTests_closure77(), "singleWhere (many)", new A._dblTests_closure78(), "singleWhere (-1 on many)", new A._dblTests_closure79(), "firstWhere", new A._dblTests_closure80(), "firstWhere (match)", new A._dblTests_closure81(), "firstWhere (miss)", new A._dblTests_closure82(), "firstWhere (-1 on miss)", new A._dblTests_closure83(), "lastWhere", new A._dblTests_closure84(), "lastWhere (match)", new A._dblTests_closure85(), "lastWhere (miss)", new A._dblTests_closure86(), "lastWhere (-1 on miss)", new A._dblTests_closure87(), "forEach", new A._dblTests_closure88(), "concat", new A._dblTests_closure89(), "concat (empty)", new A._dblTests_closure90(), "add", new A._dblTests_closure91(), "addAll", new A._dblTests_closure92(), "followedBy", new A._dblTests_closure93(), "fillRange", new A._dblTests_closure94(), "fillRange (all)", new A._dblTests_closure95(), "fillRange (invalid)", new A._dblTests_closure96(), "setAll (start)", new A._dblTests_closure97(), "setAll (mid)", new A._dblTests_closure98(), "setAll (end)", new A._dblTests_closure99(), "setAll (invalid)", new A._dblTests_closure100(), "insert (start)", new A._dblTests_closure101(), "insert (mid)", new A._dblTests_closure102(), "insert (end)", new A._dblTests_closure103(), "insert (invalid)", new A._dblTests_closure104(), "insertAll (start)", new A._dblTests_closure105(), "insertAll (mid)", new A._dblTests_closure106(), "insertAll (end)", new A._dblTests_closure107(), "insertAll (invalid)", new A._dblTests_closure108(), "remove", new A._dblTests_closure109(), "removeAt", new A._dblTests_closure110(), "removeLast", t5._as(t1.get$removeLast(t1)), "removeRange", new A._dblTests_closure111(), "removeWhere", new A._dblTests_closure112(), "retainWhere", new A._dblTests_closure113(), "setRange", new A._dblTests_closure114(), "setRange (skip)", new A._dblTests_closure115(), "replaceRange", new A._dblTests_closure116(), "clear", t11._as(t1.get$clear(t1)), "sort", new A._dblTests_closure117(), "sort (reversed)", new A._dblTests_closure118(), "shuffle", new A._dblTests_closure119(), "toString", A.findType("String(List<double>)")._as(t1.get$getString()), "join", new A._dblTests_closure120(), "join (dollar)", new A._dblTests_closure121()], t17, A.findType("@(List<double>)"));
    });
    _lazyFinal($, "_ndblFeats", "$get$_ndblFeats0", () => new A._Features0(A.findType("_Features0<double?>")));
    _lazyFinal($, "_ndblTests", "$get$_ndblTests0", () => {
      var t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16,
        t1 = $.$get$_ndblFeats0(),
        t2 = A.findType("bool(List<double?>)"),
        t3 = t2._as(t1.get$isEmpty(t1));
      t2 = t2._as(t1.get$isNotEmpty(t1));
      t4 = A.findType("int(List<double?>)")._as(t1.get$getLength());
      t5 = A.findType("double?(List<double?>)");
      t6 = t5._as(t1.get$getSingle());
      t7 = t5._as(t1.get$getFirst());
      t8 = t5._as(t1.get$getLast());
      t9 = A.findType("List<0^>(List<double?>)<Object?>")._as(t1.get$cast(t1));
      t10 = A.findType("List<double?>(List<double?>)");
      t11 = t10._as(t1.get$toList(t1));
      t12 = A.findType("Set<double?>(List<double?>)")._as(t1.get$toSet(t1));
      t13 = A.findType("Map<int,double?>(List<double?>)")._as(t1.get$asMap(t1));
      t14 = A.findType("Iterable<double?>(List<double?>)")._as(t1.get$reversed(t1));
      t15 = A.findType("Iterable<0^>(List<double?>)<Object?>")._as(t1.get$whereType(t1));
      t16 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal(["isEmpty", t3, "isNotEmpty", t2, "read length", t4, "decrease length", new A._ndblTests_closure26(), "increase length", new A._ndblTests_closure27(), "read single", t6, "read first", t7, "read last", t8, "read by index", new A._ndblTests_closure28(), "read by index (invalid)", new A._ndblTests_closure29(), "set first", new A._ndblTests_closure30(), "set last", new A._ndblTests_closure31(), "set by index", new A._ndblTests_closure32(), "set by index (invalid)", new A._ndblTests_closure33(), "elementAt", new A._ndblTests_closure34(), "elementAt (invalid)", new A._ndblTests_closure35(), "getRange", new A._ndblTests_closure36(), "contains", new A._ndblTests_closure37(), "contains (miss)", new A._ndblTests_closure38(), "find index", new A._ndblTests_closure39(), "find index (skip)", new A._ndblTests_closure40(), "find index (miss)", new A._ndblTests_closure41(), "last index", new A._ndblTests_closure42(), "last index (skip)", new A._ndblTests_closure43(), "last index (miss)", new A._ndblTests_closure44(), "find where", new A._ndblTests_closure45(), "find where (skip)", new A._ndblTests_closure46(), "find where (miss)", new A._ndblTests_closure47(), "last where", new A._ndblTests_closure48(), "last where (skip)", new A._ndblTests_closure49(), "last where (miss)", new A._ndblTests_closure50(), "cast", A.instantiate1(t9, type$.nullable_num), "toList", t11, "subList (all from start)", new A._ndblTests_closure51(), "subList (all from mid)", new A._ndblTests_closure52(), "subList (all from end)", new A._ndblTests_closure53(), "subList (start to end)", new A._ndblTests_closure54(), "subList (mid to end)", new A._ndblTests_closure55(), "subList (end to end)", new A._ndblTests_closure56(), "subList (invalid range)", new A._ndblTests_closure57(), "subList (invalid start)", new A._ndblTests_closure58(), "subList (invalid end)", new A._ndblTests_closure59(), "toSet", t12, "asMap", t13, "reversed", t14, "map", new A._ndblTests_closure60(), "expand", new A._ndblTests_closure61(), "fold", new A._ndblTests_closure62(), "reduce", new A._ndblTests_closure63(), "any", new A._ndblTests_closure64(), "any (miss)", new A._ndblTests_closure65(), "every", new A._ndblTests_closure66(), "every (full)", new A._ndblTests_closure67(), "skip", new A._ndblTests_closure68(), "skip while", new A._ndblTests_closure69(), "skip while (miss)", new A._ndblTests_closure70(), "take", new A._ndblTests_closure71(), "take while", new A._ndblTests_closure72(), "take while (miss)", new A._ndblTests_closure73(), "where", new A._ndblTests_closure74(), "where (miss)", new A._ndblTests_closure75(), "where type", A.instantiate1(t15, type$.Null), "where type (miss)", A.instantiate1(t15, t16), "singleWhere", new A._ndblTests_closure76(), "singleWhere (match)", new A._ndblTests_closure77(), "singleWhere (many)", new A._ndblTests_closure78(), "singleWhere (-1 on many)", new A._ndblTests_closure79(), "firstWhere", new A._ndblTests_closure80(), "firstWhere (match)", new A._ndblTests_closure81(), "firstWhere (miss)", new A._ndblTests_closure82(), "firstWhere (-1 on miss)", new A._ndblTests_closure83(), "lastWhere", new A._ndblTests_closure84(), "lastWhere (match)", new A._ndblTests_closure85(), "lastWhere (miss)", new A._ndblTests_closure86(), "lastWhere (-1 on miss)", new A._ndblTests_closure87(), "forEach", new A._ndblTests_closure88(), "concat", new A._ndblTests_closure89(), "concat (empty)", new A._ndblTests_closure90(), "add", new A._ndblTests_closure91(), "addAll", new A._ndblTests_closure92(), "followedBy", new A._ndblTests_closure93(), "fillRange", new A._ndblTests_closure94(), "fillRange (all)", new A._ndblTests_closure95(), "fillRange (invalid)", new A._ndblTests_closure96(), "setAll (start)", new A._ndblTests_closure97(), "setAll (mid)", new A._ndblTests_closure98(), "setAll (end)", new A._ndblTests_closure99(), "setAll (invalid)", new A._ndblTests_closure100(), "insert (start)", new A._ndblTests_closure101(), "insert (mid)", new A._ndblTests_closure102(), "insert (end)", new A._ndblTests_closure103(), "insert (invalid)", new A._ndblTests_closure104(), "insertAll (start)", new A._ndblTests_closure105(), "insertAll (mid)", new A._ndblTests_closure106(), "insertAll (end)", new A._ndblTests_closure107(), "insertAll (invalid)", new A._ndblTests_closure108(), "remove", new A._ndblTests_closure109(), "removeAt", new A._ndblTests_closure110(), "removeLast", t5._as(t1.get$removeLast(t1)), "removeRange", new A._ndblTests_closure111(), "removeWhere", new A._ndblTests_closure112(), "retainWhere", new A._ndblTests_closure113(), "setRange", new A._ndblTests_closure114(), "setRange (skip)", new A._ndblTests_closure115(), "replaceRange", new A._ndblTests_closure116(), "clear", t10._as(t1.get$clear(t1)), "shuffle", new A._ndblTests_closure117(), "toString", A.findType("String(List<double?>)")._as(t1.get$getString()), "join", new A._ndblTests_closure118(), "join (dollar)", new A._ndblTests_closure119()], t16, A.findType("@(List<double?>)"));
    });
    _lazyFinal($, "_nintFeats", "$get$_nintFeats0", () => new A._Features0(A.findType("_Features0<int?>")));
    _lazyFinal($, "_nintTests", "$get$_nintTests0", () => {
      var t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16,
        t1 = $.$get$_nintFeats0(),
        t2 = A.findType("bool(List<int?>)"),
        t3 = t2._as(t1.get$isEmpty(t1));
      t2 = t2._as(t1.get$isNotEmpty(t1));
      t4 = A.findType("int(List<int?>)")._as(t1.get$getLength());
      t5 = A.findType("int?(List<int?>)");
      t6 = t5._as(t1.get$getSingle());
      t7 = t5._as(t1.get$getFirst());
      t8 = t5._as(t1.get$getLast());
      t9 = A.findType("List<0^>(List<int?>)<Object?>")._as(t1.get$cast(t1));
      t10 = A.findType("List<int?>(List<int?>)");
      t11 = t10._as(t1.get$toList(t1));
      t12 = A.findType("Set<int?>(List<int?>)")._as(t1.get$toSet(t1));
      t13 = A.findType("Map<int,int?>(List<int?>)")._as(t1.get$asMap(t1));
      t14 = A.findType("Iterable<int?>(List<int?>)")._as(t1.get$reversed(t1));
      t15 = A.findType("Iterable<0^>(List<int?>)<Object?>")._as(t1.get$whereType(t1));
      t16 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal(["isEmpty", t3, "isNotEmpty", t2, "read length", t4, "decrease length", new A._nintTests_closure26(), "increase length", new A._nintTests_closure27(), "read single", t6, "read first", t7, "read last", t8, "read by index", new A._nintTests_closure28(), "read by index (invalid)", new A._nintTests_closure29(), "set first", new A._nintTests_closure30(), "set last", new A._nintTests_closure31(), "set by index", new A._nintTests_closure32(), "set by index (invalid)", new A._nintTests_closure33(), "elementAt", new A._nintTests_closure34(), "elementAt (invalid)", new A._nintTests_closure35(), "getRange", new A._nintTests_closure36(), "contains", new A._nintTests_closure37(), "contains (miss)", new A._nintTests_closure38(), "find index", new A._nintTests_closure39(), "find index (skip)", new A._nintTests_closure40(), "find index (miss)", new A._nintTests_closure41(), "last index", new A._nintTests_closure42(), "last index (skip)", new A._nintTests_closure43(), "last index (miss)", new A._nintTests_closure44(), "find where", new A._nintTests_closure45(), "find where (skip)", new A._nintTests_closure46(), "find where (miss)", new A._nintTests_closure47(), "last where", new A._nintTests_closure48(), "last where (skip)", new A._nintTests_closure49(), "last where (miss)", new A._nintTests_closure50(), "cast", A.instantiate1(t9, type$.nullable_num), "toList", t11, "subList (all from start)", new A._nintTests_closure51(), "subList (all from mid)", new A._nintTests_closure52(), "subList (all from end)", new A._nintTests_closure53(), "subList (start to end)", new A._nintTests_closure54(), "subList (mid to end)", new A._nintTests_closure55(), "subList (end to end)", new A._nintTests_closure56(), "subList (invalid range)", new A._nintTests_closure57(), "subList (invalid start)", new A._nintTests_closure58(), "subList (invalid end)", new A._nintTests_closure59(), "toSet", t12, "asMap", t13, "reversed", t14, "map", new A._nintTests_closure60(), "expand", new A._nintTests_closure61(), "fold", new A._nintTests_closure62(), "reduce", new A._nintTests_closure63(), "any", new A._nintTests_closure64(), "any (miss)", new A._nintTests_closure65(), "every", new A._nintTests_closure66(), "every (full)", new A._nintTests_closure67(), "skip", new A._nintTests_closure68(), "skip while", new A._nintTests_closure69(), "skip while (miss)", new A._nintTests_closure70(), "take", new A._nintTests_closure71(), "take while", new A._nintTests_closure72(), "take while (miss)", new A._nintTests_closure73(), "where", new A._nintTests_closure74(), "where (miss)", new A._nintTests_closure75(), "where type", A.instantiate1(t15, type$.Null), "where type (miss)", A.instantiate1(t15, t16), "singleWhere", new A._nintTests_closure76(), "singleWhere (match)", new A._nintTests_closure77(), "singleWhere (many)", new A._nintTests_closure78(), "singleWhere (-1 on many)", new A._nintTests_closure79(), "firstWhere", new A._nintTests_closure80(), "firstWhere (match)", new A._nintTests_closure81(), "firstWhere (miss)", new A._nintTests_closure82(), "firstWhere (-1 on miss)", new A._nintTests_closure83(), "lastWhere", new A._nintTests_closure84(), "lastWhere (match)", new A._nintTests_closure85(), "lastWhere (miss)", new A._nintTests_closure86(), "lastWhere (-1 on miss)", new A._nintTests_closure87(), "forEach", new A._nintTests_closure88(), "concat", new A._nintTests_closure89(), "concat (empty)", new A._nintTests_closure90(), "add", new A._nintTests_closure91(), "addAll", new A._nintTests_closure92(), "followedBy", new A._nintTests_closure93(), "fillRange", new A._nintTests_closure94(), "fillRange (all)", new A._nintTests_closure95(), "fillRange (invalid)", new A._nintTests_closure96(), "setAll (start)", new A._nintTests_closure97(), "setAll (mid)", new A._nintTests_closure98(), "setAll (end)", new A._nintTests_closure99(), "setAll (invalid)", new A._nintTests_closure100(), "insert (start)", new A._nintTests_closure101(), "insert (mid)", new A._nintTests_closure102(), "insert (end)", new A._nintTests_closure103(), "insert (invalid)", new A._nintTests_closure104(), "insertAll (start)", new A._nintTests_closure105(), "insertAll (mid)", new A._nintTests_closure106(), "insertAll (end)", new A._nintTests_closure107(), "insertAll (invalid)", new A._nintTests_closure108(), "remove", new A._nintTests_closure109(), "removeAt", new A._nintTests_closure110(), "removeLast", t5._as(t1.get$removeLast(t1)), "removeRange", new A._nintTests_closure111(), "removeWhere", new A._nintTests_closure112(), "retainWhere", new A._nintTests_closure113(), "setRange", new A._nintTests_closure114(), "setRange (skip)", new A._nintTests_closure115(), "replaceRange", new A._nintTests_closure116(), "clear", t10._as(t1.get$clear(t1)), "shuffle", new A._nintTests_closure117(), "toString", A.findType("String(List<int?>)")._as(t1.get$getString()), "join", new A._nintTests_closure118(), "join (dollar)", new A._nintTests_closure119()], t16, A.findType("@(List<int?>)"));
    });
    _lazyFinal($, "_seed", "$get$_seed", () => B.JSInt_methods._tdivFast$1(A.DateTime$now()._core$_value, 1000));
    _lazyFinal($, "_int", "$get$_int0", () => B.C_NumConverter.value$1$0(type$.int));
    _lazyFinal($, "_nint", "$get$_nint0", () => A.Converter_allowNull($.$get$_int0(), type$.int));
    _lazyFinal($, "_dbl", "$get$_dbl0", () => B.C_NumConverter.value$1$0(type$.double));
    _lazyFinal($, "_ndbl", "$get$_ndbl0", () => A.Converter_allowNull($.$get$_dbl0(), type$.double));
    _lazyFinal($, "_dblFeats0", "$get$_dblFeats", () => new A._Features(A.findType("_Features<double>")));
    _lazyFinal($, "_dblTests0", "$get$_dblTests", () => {
      var t1 = $.$get$_dblFeats(),
        t2 = A.findType("bool(Map<String,double>)");
      return A.LinkedHashMap_LinkedHashMap$_literal(["isEmpty", t2._as(t1.get$isEmpty(t1)), "isNotEmpty", t2._as(t1.get$isNotEmpty(t1)), "read length", A.findType("int(Map<String,double>)")._as(t1.get$getLength()), "entries", new A._dblTests_closure(), "keys", A.findType("Iterable<String>(Map<String,double>)")._as(t1.get$keys()), "values", A.findType("Iterable<double>(Map<String,double>)")._as(t1.get$values()), "get key", new A._dblTests_closure0(), "get key (miss)", new A._dblTests_closure1(), "set key", new A._dblTests_closure2(), "set key (new)", new A._dblTests_closure3(), "containsKey", new A._dblTests_closure4(), "containsKey (miss)", new A._dblTests_closure5(), "containsValue", new A._dblTests_closure6(), "containsValue (miss)", new A._dblTests_closure7(), "cast", A.instantiate2(A.findType("Map<0^,1^>(Map<String,double>)<Object?,Object?>")._as(t1.get$cast(t1)), type$.nullable_String, type$.nullable_num), "map", new A._dblTests_closure8(), "forEach", new A._dblTests_closure9(), "addAll", new A._dblTests_closure10(), "addAll (empty)", new A._dblTests_closure11(), "addEntries", new A._dblTests_closure12(), "addEntries (empty)", new A._dblTests_closure13(), "putIfAbsent", new A._dblTests_closure14(), "putIfAbsent (existing)", new A._dblTests_closure15(), "update", new A._dblTests_closure16(), "update (no default)", new A._dblTests_closure17(), "update (miss)", new A._dblTests_closure18(), "update (miss, no default)", new A._dblTests_closure19(), "updateAll", new A._dblTests_closure20(), "remove", new A._dblTests_closure21(), "remove (miss)", new A._dblTests_closure22(), "removeWhere (key)", new A._dblTests_closure23(), "removeWhere (value)", new A._dblTests_closure24(), "removeWhere (miss)", new A._dblTests_closure25(), "clear", A.findType("Map<String,double>(Map<String,double>)")._as(t1.get$clear(t1)), "toString", A.findType("String(Map<String,double>)")._as(t1.get$getString())], type$.String, A.findType("@(Map<String,double>)"));
    });
    _lazyFinal($, "_ndblFeats0", "$get$_ndblFeats", () => new A._Features(A.findType("_Features<double?>")));
    _lazyFinal($, "_ndblTests0", "$get$_ndblTests", () => {
      var t1 = $.$get$_ndblFeats(),
        t2 = A.findType("bool(Map<String,double?>)");
      return A.LinkedHashMap_LinkedHashMap$_literal(["isEmpty", t2._as(t1.get$isEmpty(t1)), "isNotEmpty", t2._as(t1.get$isNotEmpty(t1)), "read length", A.findType("int(Map<String,double?>)")._as(t1.get$getLength()), "entries", new A._ndblTests_closure(), "keys", A.findType("Iterable<String>(Map<String,double?>)")._as(t1.get$keys()), "values", A.findType("Iterable<double?>(Map<String,double?>)")._as(t1.get$values()), "get key", new A._ndblTests_closure0(), "get key (miss)", new A._ndblTests_closure1(), "set key", new A._ndblTests_closure2(), "set key (new)", new A._ndblTests_closure3(), "containsKey", new A._ndblTests_closure4(), "containsKey (miss)", new A._ndblTests_closure5(), "containsValue", new A._ndblTests_closure6(), "containsValue (miss)", new A._ndblTests_closure7(), "cast", A.instantiate2(A.findType("Map<0^,1^>(Map<String,double?>)<Object?,Object?>")._as(t1.get$cast(t1)), type$.nullable_String, type$.nullable_num), "map", new A._ndblTests_closure8(), "forEach", new A._ndblTests_closure9(), "addAll", new A._ndblTests_closure10(), "addAll (empty)", new A._ndblTests_closure11(), "addEntries", new A._ndblTests_closure12(), "addEntries (empty)", new A._ndblTests_closure13(), "putIfAbsent", new A._ndblTests_closure14(), "putIfAbsent (existing)", new A._ndblTests_closure15(), "update", new A._ndblTests_closure16(), "update (no default)", new A._ndblTests_closure17(), "update (miss)", new A._ndblTests_closure18(), "update (miss, no default)", new A._ndblTests_closure19(), "updateAll", new A._ndblTests_closure20(), "remove", new A._ndblTests_closure21(), "remove (miss)", new A._ndblTests_closure22(), "removeWhere (key)", new A._ndblTests_closure23(), "removeWhere (value)", new A._ndblTests_closure24(), "removeWhere (miss)", new A._ndblTests_closure25(), "clear", A.findType("Map<String,double?>(Map<String,double?>)")._as(t1.get$clear(t1)), "toString", A.findType("String(Map<String,double?>)")._as(t1.get$getString())], type$.String, A.findType("@(Map<String,double?>)"));
    });
    _lazyFinal($, "_nintFeats0", "$get$_nintFeats", () => new A._Features(A.findType("_Features<int?>")));
    _lazyFinal($, "_nintTests0", "$get$_nintTests", () => {
      var t1 = $.$get$_nintFeats(),
        t2 = A.findType("bool(Map<String,int?>)");
      return A.LinkedHashMap_LinkedHashMap$_literal(["isEmpty", t2._as(t1.get$isEmpty(t1)), "isNotEmpty", t2._as(t1.get$isNotEmpty(t1)), "read length", A.findType("int(Map<String,int?>)")._as(t1.get$getLength()), "entries", new A._nintTests_closure(), "keys", A.findType("Iterable<String>(Map<String,int?>)")._as(t1.get$keys()), "values", A.findType("Iterable<int?>(Map<String,int?>)")._as(t1.get$values()), "get key", new A._nintTests_closure0(), "get key (miss)", new A._nintTests_closure1(), "set key", new A._nintTests_closure2(), "set key (new)", new A._nintTests_closure3(), "containsKey", new A._nintTests_closure4(), "containsKey (miss)", new A._nintTests_closure5(), "containsValue", new A._nintTests_closure6(), "containsValue (miss)", new A._nintTests_closure7(), "cast", A.instantiate2(A.findType("Map<0^,1^>(Map<String,int?>)<Object?,Object?>")._as(t1.get$cast(t1)), type$.nullable_String, type$.nullable_num), "map", new A._nintTests_closure8(), "forEach", new A._nintTests_closure9(), "addAll", new A._nintTests_closure10(), "addAll (empty)", new A._nintTests_closure11(), "addEntries", new A._nintTests_closure12(), "addEntries (empty)", new A._nintTests_closure13(), "putIfAbsent", new A._nintTests_closure14(), "putIfAbsent (existing)", new A._nintTests_closure15(), "update", new A._nintTests_closure16(), "update (no default)", new A._nintTests_closure17(), "update (miss)", new A._nintTests_closure18(), "update (miss, no default)", new A._nintTests_closure19(), "updateAll", new A._nintTests_closure20(), "remove", new A._nintTests_closure21(), "remove (miss)", new A._nintTests_closure22(), "removeWhere (key)", new A._nintTests_closure23(), "removeWhere (value)", new A._nintTests_closure24(), "removeWhere (miss)", new A._nintTests_closure25(), "clear", A.findType("Map<String,int?>(Map<String,int?>)")._as(t1.get$clear(t1)), "toString", A.findType("String(Map<String,int?>)")._as(t1.get$getString())], type$.String, A.findType("@(Map<String,int?>)"));
    });
    _lazyFinal($, "_dbl0", "$get$_dbl", () => B.C_NumConverter.value$1$0(type$.double));
    _lazyFinal($, "_ndbl0", "$get$_ndbl", () => A.Converter_allowNull($.$get$_dbl(), type$.double));
    _lazyFinal($, "_int0", "$get$_int", () => B.C_NumConverter.value$1$0(type$.int));
    _lazyFinal($, "_nint0", "$get$_nint", () => A.Converter_allowNull($.$get$_int(), type$.int));
    _lazyFinal($, "platform", "$get$platform", () => $.$get$Squadron_platformType());
    _lazyFinal($, "ConsoleToHtml_resetSeq", "$get$ConsoleToHtml_resetSeq", () => A.SequenceReplacement$(A.CodeUnits$("\x1b[0m"), "", null));
    _lazyFinal($, "ConsoleToHtml_boldSeq", "$get$ConsoleToHtml_boldSeq", () => A.SequenceReplacement$(A.CodeUnits$("\x1b[1m"), "<b>", "</b>"));
    _lazyFinal($, "ConsoleToHtml_redSeq", "$get$ConsoleToHtml_redSeq", () => A.SequenceReplacement$(A.CodeUnits$("\x1b[31m"), '<span class="fail">', "</span>"));
    _lazyFinal($, "ConsoleToHtml_greenSeq", "$get$ConsoleToHtml_greenSeq", () => A.SequenceReplacement$(A.CodeUnits$("\x1b[32m"), '<span class="pass">', "</span>"));
    _lazyFinal($, "origin", "$get$origin", () => {
      var t1 = type$.JSObject;
      return A.getProperty(A.getProperty(A.getProperty(A.staticInteropGlobalContext(), "window", t1), "location", t1), "origin", type$.String);
    });
    _lazyFinal($, "unsendable0", "$get$unsendable", () => A._platform_web__unsendable$closure());
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({SharedArrayBuffer: A.NativeByteBuffer, ArrayBuffer: A.NativeArrayBuffer, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Float32Array: A.NativeFloat32List, Float64Array: A.NativeFloat64List, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8ClampedArray: A.NativeUint8ClampedList, CanvasPixelArray: A.NativeUint8ClampedList, Uint8Array: A.NativeUint8List});
    hunkHelpers.setOrUpdateLeafTags({SharedArrayBuffer: true, ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$3$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$2$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$2$0 = function() {
    return this();
  };
  Function.prototype.call$2$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$1$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$3$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$2$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$3$6 = function(a, b, c, d, e, f) {
    return this(a, b, c, d, e, f);
  };
  Function.prototype.call$2$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i) {
        scripts[i].removeEventListener("load", onLoad, false);
      }
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].addEventListener("load", onLoad, false);
    }
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function") {
      dartMainRunner(callMain, []);
    } else {
      callMain([]);
    }
  });
})();

//# sourceMappingURL=console.dart.js.map
