<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2025-09-28" filename="_forward_stream_controller.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.96875" lines-covered="31" lines-valid="32" package="src/_impl/xplat" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import 'dart:async';</code>
        </line>
        <line number="2">
            <code/>
        </line>
        <line number="3">
            <code>import '../../exceptions/squadron_error.dart';</code>
        </line>
        <line number="4">
            <code>import '../../exceptions/squadron_exception.dart';</code>
        </line>
        <line number="5">
            <code/>
        </line>
        <line number="6">
            <code>class ForwardStreamController&lt;T&gt; {</code>
        </line>
        <line hits="10" number="7">
            <code>  ForwardStreamController(</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="8">
            <code>      {void Function()? onListen, FutureOr&lt;void&gt; Function()? onCancel}) {</code>
        </line>
        <line hits="20" number="9">
            <code>    _controller = StreamController(</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line number="10">
            <code>      onListen: onListen,</code>
        </line>
        <line hits="10" number="11">
            <code>      onPause: _pause,</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="12">
            <code>      onResume: _resume,</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="13">
            <code>      onCancel: onCancel,</code>
        </line>
        <line number="14">
            <code>    );</code>
        </line>
        <line number="15">
            <code>  }</code>
        </line>
        <line number="16">
            <code/>
        </line>
        <line number="17">
            <code>  late final StreamController&lt;T&gt; _controller;</code>
        </line>
        <line number="18">
            <code/>
        </line>
        <line hits="30" number="19">
            <code>  Stream&lt;T&gt; get stream =&gt; _controller.stream;</code>
            <hit count="30" name="&lt;unnamed&gt;"/>
        </line>
        <line number="20">
            <code/>
        </line>
        <line hits="30" number="21">
            <code>  Future&lt;void&gt; get done =&gt; _controller.done;</code>
            <hit count="30" name="&lt;unnamed&gt;"/>
        </line>
        <line number="22">
            <code/>
        </line>
        <line number="23">
            <code>  var _closed = false;</code>
        </line>
        <line hits="40" number="24">
            <code>  bool get isClosed =&gt; _closed || _controller.isClosed;</code>
            <hit count="40" name="&lt;unnamed&gt;"/>
        </line>
        <line number="25">
            <code/>
        </line>
        <line number="26">
            <code>  StreamSubscription&lt;T&gt;? _sub;</code>
        </line>
        <line number="27">
            <code/>
        </line>
        <line hits="20" number="28">
            <code>  StreamSubscription&lt;T&gt;? get subscription =&gt; _sub;</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line number="29">
            <code/>
        </line>
        <line hits="10" number="30">
            <code>  void add(T data) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="30" number="31">
            <code>    if (!isClosed) _controller.add(data);</code>
            <hit count="30" name="&lt;unnamed&gt;"/>
        </line>
        <line number="32">
            <code>  }</code>
        </line>
        <line number="33">
            <code/>
        </line>
        <line hits="7" number="34">
            <code>  void addError(SquadronException ex) {</code>
            <hit count="7" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="21" number="35">
            <code>    if (!isClosed) _controller.addError(ex);</code>
            <hit count="21" name="&lt;unnamed&gt;"/>
        </line>
        <line number="36">
            <code>  }</code>
        </line>
        <line number="37">
            <code/>
        </line>
        <line hits="10" number="38">
            <code>  Future&lt;void&gt; close() async {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="39">
            <code>    _closed = true;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="20" number="40">
            <code>    await _sub?.cancel();</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="41">
            <code>    _sub = null;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="20" number="42">
            <code>    _controller.close();</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line number="43">
            <code>  }</code>
        </line>
        <line number="44">
            <code/>
        </line>
        <line number="45">
            <code>  int _pauses = 0;</code>
        </line>
        <line number="46">
            <code/>
        </line>
        <line hits="1" number="47">
            <code>  void _pause() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="48">
            <code>    // per Dart documentation https://api.dart.dev/dart-async/StreamSubscription/pause.html</code>
        </line>
        <line number="49">
            <code>    // If the subscription is paused more than once, an equal number of resumes</code>
        </line>
        <line number="50">
            <code>    // must be performed to resume the stream</code>
        </line>
        <line hits="2" number="51">
            <code>    _pauses++;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="52">
            <code>  }</code>
        </line>
        <line number="53">
            <code/>
        </line>
        <line hits="1" number="54">
            <code>  void _resume() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="55">
            <code>    if (_pauses &gt; 0) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="56">
            <code>      // per Dart documentation https://api.dart.dev/dart-async/StreamSubscription/pause.html</code>
        </line>
        <line number="57">
            <code>      // If the subscription is paused more than once, an equal number of resumes</code>
        </line>
        <line number="58">
            <code>      // must be performed to resume the stream</code>
        </line>
        <line hits="2" number="59">
            <code>      _pauses--;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="60">
            <code>    } else {</code>
        </line>
        <line number="61">
            <code>      // per Dart documentation https://api.dart.dev/dart-async/StreamSubscription/resume.html</code>
        </line>
        <line number="62">
            <code>      // It is safe to resume even when the subscription is not paused, and the</code>
        </line>
        <line number="63">
            <code>      // resume will have no effect.</code>
        </line>
        <line number="64">
            <code>    }</code>
        </line>
        <line number="65">
            <code>  }</code>
        </line>
        <line number="66">
            <code/>
        </line>
        <line hits="10" number="67">
            <code>  void attachSubscription(StreamSubscription&lt;T&gt; sub) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="68">
            <code>    if (_sub != null) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="69">
            <code>      throw SquadronErrorImpl.create(</code>
        </line>
        <line number="70">
            <code>          'Invalid state: a subscription is already attached');</code>
        </line>
        <line number="71">
            <code>    }</code>
        </line>
        <line hits="10" number="72">
            <code>    _sub = sub;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="73">
            <code>    // pass pending pause events on to the subscription</code>
        </line>
        <line hits="20" number="74">
            <code>    while (_pauses &gt; 0) {</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="75">
            <code>      _pauses--;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="76">
            <code>      sub.pause();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="77">
            <code>    }</code>
        </line>
        <line number="78">
            <code>    // have the subscription handle pause/resume events from now on</code>
        </line>
        <line hits="30" number="79">
            <code>    _controller.onPause = sub.pause;</code>
            <hit count="30" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="30" number="80">
            <code>    _controller.onResume = sub.resume;</code>
            <hit count="30" name="&lt;unnamed&gt;"/>
        </line>
        <line number="81">
            <code>    // have the subscription handle the cancel event if the controller doesn't</code>
        </line>
        <line number="82">
            <code>    // handle it already</code>
        </line>
        <line hits="25" number="83">
            <code>    _controller.onCancel ??= sub.cancel;</code>
            <hit count="25" name="&lt;unnamed&gt;"/>
        </line>
        <line number="84">
            <code>  }</code>
        </line>
        <line number="85">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../../../"/>
    <base href="../../../"/>
</coverage>
