<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2025-09-28" filename="_channel.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.8484849" lines-covered="56" lines-valid="66" package="src/_impl/native" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import 'dart:async';</code>
        </line>
        <line number="2">
            <code>import 'dart:convert';</code>
        </line>
        <line number="3">
            <code>import 'dart:isolate' as vm;</code>
        </line>
        <line number="4">
            <code/>
        </line>
        <line number="5">
            <code>import 'package:logger/web.dart';</code>
        </line>
        <line number="6">
            <code>import 'package:meta/meta.dart';</code>
        </line>
        <line number="7">
            <code/>
        </line>
        <line number="8">
            <code>import '../../channel.dart';</code>
        </line>
        <line number="9">
            <code>import '../../exceptions/exception_manager.dart';</code>
        </line>
        <line number="10">
            <code>import '../../exceptions/squadron_error.dart';</code>
        </line>
        <line number="11">
            <code>import '../../exceptions/squadron_exception.dart';</code>
        </line>
        <line number="12">
            <code>import '../../exceptions/task_terminated_exception.dart';</code>
        </line>
        <line number="13">
            <code>import '../../exceptions/worker_exception.dart';</code>
        </line>
        <line number="14">
            <code>import '../../tokens/_squadron_cancelation_token.dart';</code>
        </line>
        <line number="15">
            <code>import '../../worker/worker_request.dart';</code>
        </line>
        <line number="16">
            <code>import '../../worker/worker_response.dart';</code>
        </line>
        <line number="17">
            <code>import '../xplat/_disconnected_channel.dart';</code>
        </line>
        <line number="18">
            <code>import '../xplat/_forward_stream_controller.dart';</code>
        </line>
        <line number="19">
            <code>import '../xplat/_result_stream.dart';</code>
        </line>
        <line number="20">
            <code>import '_typedefs.dart';</code>
        </line>
        <line number="21">
            <code/>
        </line>
        <line number="22">
            <code>part '_channel_forward.dart';</code>
        </line>
        <line number="23">
            <code>part '_channel_impl.dart';</code>
        </line>
        <line number="24">
            <code/>
        </line>
        <line number="25">
            <code>// Stub implementations.</code>
        </line>
        <line number="26">
            <code/>
        </line>
        <line number="27">
            <code>/// Starts an [Isolate] using the [entryPoint] and sends a start</code>
        </line>
        <line number="28">
            <code>/// [WorkerRequest] with [startArguments]. The future completes after the</code>
        </line>
        <line number="29">
            <code>/// worker [Isolate]'s main program has provided the [SendPort] via</code>
        </line>
        <line number="30">
            <code>/// [WorkerChannel.connect].</code>
        </line>
        <line hits="11" number="31">
            <code>Future&lt;Channel&gt; openChannel(</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line number="32">
            <code>  EntryPoint entryPoint,</code>
        </line>
        <line number="33">
            <code>  ExceptionManager exceptionManager,</code>
        </line>
        <line number="34">
            <code>  Logger? logger,</code>
        </line>
        <line number="35">
            <code>  List startArguments,</code>
        </line>
        <line number="36">
            <code>  PlatformThreadHook? hook,</code>
        </line>
        <line number="37">
            <code>) async {</code>
        </line>
        <line hits="11" number="38">
            <code>  final completer = Completer&lt;_VmChannel&gt;();</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line number="39">
            <code>  Channel? channel;</code>
        </line>
        <line number="40">
            <code/>
        </line>
        <line hits="11" number="41">
            <code>  void $failure(Object error, [StackTrace? stackTrace]) {</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11" number="42">
            <code>    if (!completer.isCompleted) {</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="43">
            <code>      completer.completeError(SquadronException.from(error, stackTrace));</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line number="44">
            <code>    }</code>
        </line>
        <line number="45">
            <code>  }</code>
        </line>
        <line number="46">
            <code/>
        </line>
        <line hits="10" number="47">
            <code>  void $success(_VmChannel channel) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="48">
            <code>    if (!completer.isCompleted) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="49">
            <code>      completer.complete(channel);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="50">
            <code>    }</code>
        </line>
        <line number="51">
            <code>  }</code>
        </line>
        <line number="52">
            <code/>
        </line>
        <line hits="11" number="53">
            <code>  final receiver = vm.ReceivePort();</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11" number="54">
            <code>  final exitPort = vm.ReceivePort();</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11" number="55">
            <code>  final errorPort = vm.ReceivePort();</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line number="56">
            <code/>
        </line>
        <line hits="22" number="57">
            <code>  exitPort.listen((message) {</code>
            <hit count="22" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="22" number="58">
            <code>    $failure(SquadronErrorImpl.create('Connection to worker failed'));</code>
            <hit count="22" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="6" number="59">
            <code>    logger?.t('Isolate terminated with message $message.');</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="60">
            <code>    channel?.close();</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11" number="61">
            <code>    receiver.close();</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11" number="62">
            <code>    errorPort.close();</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11" number="63">
            <code>    exitPort.close();</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line number="64">
            <code>  });</code>
        </line>
        <line number="65">
            <code/>
        </line>
        <line hits="11" number="66">
            <code>  errorPort.listen((message) {</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line number="67">
            <code>    SquadronException? error;</code>
        </line>
        <line number="68">
            <code>    try {</code>
        </line>
        <line hits="0" number="69">
            <code>      final data = jsonDecode(message[0]);</code>
        </line>
        <line hits="0" number="70">
            <code>      if (data is List) {</code>
        </line>
        <line hits="0" number="71">
            <code>        error = exceptionManager.deserialize(data.cast&lt;String&gt;());</code>
        </line>
        <line number="72">
            <code>      }</code>
        </line>
        <line number="73">
            <code>    } catch (_) {</code>
        </line>
        <line number="74">
            <code>      // not a String representing a SquadronException</code>
        </line>
        <line number="75">
            <code>    }</code>
        </line>
        <line number="76">
            <code/>
        </line>
        <line hits="0" number="77">
            <code>    error ??= WorkerException(</code>
        </line>
        <line hits="0" number="78">
            <code>      message[0],</code>
        </line>
        <line hits="0" number="79">
            <code>      SquadronException.loadStackTrace(message[1]),</code>
        </line>
        <line number="80">
            <code>    );</code>
        </line>
        <line number="81">
            <code/>
        </line>
        <line hits="0" number="82">
            <code>    logger?.d(() =&gt; 'Unhandled error from Isolate: ${error?.message}.');</code>
        </line>
        <line hits="0" number="83">
            <code>    $failure(error);</code>
        </line>
        <line number="84">
            <code>  });</code>
        </line>
        <line number="85">
            <code/>
        </line>
        <line hits="11" number="86">
            <code>  final disconnected = DisconnectedChannel(exceptionManager, logger);</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line number="87">
            <code/>
        </line>
        <line hits="21" number="88">
            <code>  receiver.listen((message) {</code>
            <hit count="21" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="89">
            <code>    final response = WorkerResponseImpl.from(message);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="90">
            <code>    if (!response.unwrapInPlace(disconnected)) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="91">
            <code>      return;</code>
        </line>
        <line number="92">
            <code>    }</code>
        </line>
        <line number="93">
            <code/>
        </line>
        <line hits="10" number="94">
            <code>    final error = response.error;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="95">
            <code>    if (error != null) {</code>
        </line>
        <line hits="3" number="96">
            <code>      logger?.e(() =&gt; 'Connection to Isolate failed: $error');</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="97">
            <code>      $failure(error);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="98">
            <code>    } else if (response.endOfStream) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="99">
            <code>      logger?.w('Disconnecting from Isolate');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="100">
            <code>      channel?.close();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="101">
            <code>    } else if (!completer.isCompleted) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="102">
            <code>      logger?.t('Connected to Isolate');</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="103">
            <code>      final platformChannel =</code>
        </line>
        <line hits="20" number="104">
            <code>          _VmChannel._(response.result, logger, exceptionManager);</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line number="105">
            <code>      channel = platformChannel;</code>
        </line>
        <line hits="10" number="106">
            <code>      $success(platformChannel);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="107">
            <code>    } else {</code>
        </line>
        <line hits="0" number="108">
            <code>      logger?.e(() =&gt; 'Unexpected response: $response');</code>
        </line>
        <line number="109">
            <code>    }</code>
        </line>
        <line number="110">
            <code>  });</code>
        </line>
        <line number="111">
            <code/>
        </line>
        <line hits="22" number="112">
            <code>  final startRequest = WorkerRequest.start(receiver.sendPort, startArguments);</code>
            <hit count="22" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11" number="113">
            <code>  startRequest.wrapInPlace();</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11" number="114">
            <code>  final isolate = await vm.Isolate.spawn(</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line number="115">
            <code>    entryPoint,</code>
        </line>
        <line number="116">
            <code>    startRequest,</code>
        </line>
        <line number="117">
            <code>    errorsAreFatal: false,</code>
        </line>
        <line hits="11" number="118">
            <code>    onExit: exitPort.sendPort,</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="11" number="119">
            <code>    onError: errorPort.sendPort,</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line number="120">
            <code>  );</code>
        </line>
        <line number="121">
            <code/>
        </line>
        <line number="122">
            <code>  try {</code>
        </line>
        <line hits="11" number="123">
            <code>    final channel = await completer.future;</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="124">
            <code>    channel._thread = isolate;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="125">
            <code>    if (hook != null) {</code>
        </line>
        <line hits="2" number="126">
            <code>      await hook.call(isolate);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="127">
            <code>    }</code>
        </line>
        <line hits="3" number="128">
            <code>    logger?.t('Created Isolate');</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="129">
            <code>    return channel;</code>
        </line>
        <line number="130">
            <code>  } catch (ex) {</code>
        </line>
        <line hits="0" number="131">
            <code>    logger?.e(() =&gt; 'Connection to Isolate failed: $ex');</code>
        </line>
        <line hits="3" number="132">
            <code>    isolate.kill(priority: vm.Isolate.beforeNextEvent);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="133">
            <code>    rethrow;</code>
        </line>
        <line number="134">
            <code>  }</code>
        </line>
        <line number="135">
            <code>}</code>
        </line>
        <line number="136">
            <code/>
        </line>
        <line hits="6" number="137">
            <code>@internal</code>
            <hit count="6" name="&lt;unnamed&gt;"/>
        </line>
        <line number="138">
            <code>int getActiveConnections(Channel channel) =&gt;</code>
        </line>
        <line hits="18" number="139">
            <code>    (channel is _VmChannel) ? channel._activeConnections.length : 0;</code>
            <hit count="18" name="&lt;unnamed&gt;"/>
        </line>
        <line number="140">
            <code/>
        </line>
        <line hits="2" number="141">
            <code>@internal</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="142">
            <code>void terminateChannel(Channel channel, TaskTerminatedException ex) {</code>
        </line>
        <line hits="2" number="143">
            <code>  if (channel is _VmChannel) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="144">
            <code>    channel._thread?.kill(priority: vm.Isolate.immediate);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="145">
            <code>    final pendingConnections = channel._activeConnections;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="146">
            <code>    for (var c in pendingConnections) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="147">
            <code>      c.subscription?.cancel();</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="148">
            <code>      c.addError(ex);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="149">
            <code>      c.close();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="150">
            <code>    }</code>
        </line>
        <line number="151">
            <code>  }</code>
        </line>
        <line number="152">
            <code>}</code>
        </line>
        <line number="153">
            <code/>
        </line>
        <line number="154">
            <code>/// Creates a [_VmChannel] from a [SendPort].</code>
        </line>
        <line hits="3" number="155">
            <code>Channel? deserialize(</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="156">
            <code>  PlatformChannel? channelInfo, [</code>
        </line>
        <line number="157">
            <code>  Logger? logger,</code>
        </line>
        <line number="158">
            <code>  ExceptionManager? exceptionManager,</code>
        </line>
        <line number="159">
            <code>]) =&gt;</code>
        </line>
        <line number="160">
            <code>    (channelInfo == null)</code>
        </line>
        <line number="161">
            <code>        ? null</code>
        </line>
        <line hits="3" number="162">
            <code>        : _VmChannel._(</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="163">
            <code>            channelInfo,</code>
        </line>
        <line number="164">
            <code>            logger,</code>
        </line>
        <line hits="3" number="165">
            <code>            exceptionManager ?? ExceptionManager(),</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="166">
            <code>          );</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../../../"/>
    <base href="../../../"/>
</coverage>
