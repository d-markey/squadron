<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2025-09-28" filename="_channel_impl.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.9027778" lines-covered="65" lines-valid="72" package="src/_impl/native" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>part of '_channel.dart';</code>
        </line>
        <line number="2">
            <code/>
        </line>
        <line number="3">
            <code>/// [Channel] implementation for the Native world.</code>
        </line>
        <line number="4">
            <code>final class _VmChannel implements Channel {</code>
        </line>
        <line hits="10" number="5">
            <code>  _VmChannel._(this._sendPort, this.logger, this.exceptionManager);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="6">
            <code/>
        </line>
        <line number="7">
            <code>  /// [SendPort] to communicate with the [Isolate] if the channel is owned by</code>
        </line>
        <line number="8">
            <code>  /// the worker owner. Otherwise, [SendPort] to return values to the client.</code>
        </line>
        <line number="9">
            <code>  final vm.SendPort _sendPort;</code>
        </line>
        <line number="10">
            <code/>
        </line>
        <line number="11">
            <code>  PlatformThread? _thread;</code>
        </line>
        <line number="12">
            <code>  final _activeConnections = &lt;ForwardStreamController&lt;WorkerResponse&gt;&gt;[];</code>
        </line>
        <line number="13">
            <code/>
        </line>
        <line number="14">
            <code>  @override</code>
        </line>
        <line number="15">
            <code>  final ExceptionManager exceptionManager;</code>
        </line>
        <line number="16">
            <code/>
        </line>
        <line number="17">
            <code>  @override</code>
        </line>
        <line number="18">
            <code>  final Logger? logger;</code>
        </line>
        <line number="19">
            <code/>
        </line>
        <line number="20">
            <code>  bool _closed = false;</code>
        </line>
        <line number="21">
            <code/>
        </line>
        <line number="22">
            <code>  /// [Channel] serialization in Native world returns the [SendPort].</code>
        </line>
        <line hits="3" number="23">
            <code>  @override</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="24">
            <code>  PlatformChannel serialize() =&gt; _sendPort;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="25">
            <code/>
        </line>
        <line number="26">
            <code>  /// [Channel] sharing in JavaScript world returns a [_VmForwardChannel].</code>
        </line>
        <line hits="3" number="27">
            <code>  @override</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="28">
            <code>  Channel share() =&gt; _VmForwardChannel._(</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="12" number="29">
            <code>      _sendPort, vm.ReceivePort(), logger, exceptionManager);</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line number="30">
            <code/>
        </line>
        <line hits="10" number="31">
            <code>  void _postRequest(WorkerRequest req, {bool force = false}) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="32">
            <code>    if (_closed &amp;&amp; !force) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="33">
            <code>      throw SquadronErrorImpl.create('Channel is closed');</code>
        </line>
        <line number="34">
            <code>    }</code>
        </line>
        <line number="35">
            <code>    try {</code>
        </line>
        <line hits="12" number="36">
            <code>      req.cancelToken?.ensureStarted();</code>
            <hit count="12" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="30" number="37">
            <code>      _sendPort.send(req.wrapInPlace());</code>
            <hit count="30" name="&lt;unnamed&gt;"/>
        </line>
        <line number="38">
            <code>    } catch (ex, st) {</code>
        </line>
        <line hits="1" number="39">
            <code>      logger?.e(() =&gt; 'Failed to post request $req: $ex');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="40">
            <code>      throw SquadronErrorImpl.create('Failed to post request: $ex', st);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="41">
            <code>    }</code>
        </line>
        <line number="42">
            <code>  }</code>
        </line>
        <line number="43">
            <code/>
        </line>
        <line number="44">
            <code>  /// Sends a termination [WorkerRequest] to the [vm.Isolate].</code>
        </line>
        <line hits="10" number="45">
            <code>  @override</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="46">
            <code>  FutureOr&lt;void&gt; close() {</code>
        </line>
        <line hits="10" number="47">
            <code>    if (!_closed) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="20" number="48">
            <code>      _postRequest(WorkerRequest.stop());</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="49">
            <code>      _closed = true;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="50">
            <code>    }</code>
        </line>
        <line number="51">
            <code>  }</code>
        </line>
        <line number="52">
            <code/>
        </line>
        <line number="53">
            <code>  /// Sends a close stream [WorkerRequest] to the [vm.Isolate].</code>
        </line>
        <line hits="4" number="54">
            <code>  @override</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="55">
            <code>  FutureOr&lt;void&gt; cancelStream(int streamId) {</code>
        </line>
        <line hits="8" number="56">
            <code>    _postRequest(WorkerRequest.cancelStream(streamId), force: true);</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line number="57">
            <code>  }</code>
        </line>
        <line number="58">
            <code/>
        </line>
        <line number="59">
            <code>  /// Sends a cancel token [WorkerRequest] to the [vm.Isolate].</code>
        </line>
        <line hits="2" number="60">
            <code>  @override</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="61">
            <code>  FutureOr&lt;void&gt; cancelToken(SquadronCancelationToken? token) {</code>
        </line>
        <line number="62">
            <code>    if (token != null) {</code>
        </line>
        <line hits="4" number="63">
            <code>      _postRequest(WorkerRequest.cancel(token), force: true);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="64">
            <code>    }</code>
        </line>
        <line number="65">
            <code>  }</code>
        </line>
        <line number="66">
            <code/>
        </line>
        <line hits="10" number="67">
            <code>  void _enter(ForwardStreamController&lt;WorkerResponse&gt; controller) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="20" number="68">
            <code>    _activeConnections.add(controller);</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line number="69">
            <code>  }</code>
        </line>
        <line number="70">
            <code/>
        </line>
        <line hits="10" number="71">
            <code>  void _leave(ForwardStreamController&lt;WorkerResponse&gt; controller) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="20" number="72">
            <code>    _activeConnections.remove(controller);</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="73">
            <code>    controller.close();</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="74">
            <code>  }</code>
        </line>
        <line number="75">
            <code/>
        </line>
        <line hits="10" number="76">
            <code>  Stream&lt;dynamic&gt; _getResponseStream(</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="77">
            <code>    vm.ReceivePort port,</code>
        </line>
        <line number="78">
            <code>    WorkerRequest req,</code>
        </line>
        <line number="79">
            <code>    void Function(WorkerRequest) post, {</code>
        </line>
        <line number="80">
            <code>    required bool streaming,</code>
        </line>
        <line number="81">
            <code>  }) {</code>
        </line>
        <line hits="10" number="82">
            <code>    final command = req.command;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="83">
            <code/>
        </line>
        <line number="84">
            <code>    // send the request, return a stream of responses</code>
        </line>
        <line hits="10" number="85">
            <code>    Stream&lt;WorkerResponse&gt; $sendRequest() {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="86">
            <code>      late final ForwardStreamController&lt;WorkerResponse&gt; controller;</code>
        </line>
        <line number="87">
            <code/>
        </line>
        <line hits="10" number="88">
            <code>      void $forwardMessage(WorkerResponse msg) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="20" number="89">
            <code>        if (!controller.isClosed) controller.add(msg);</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line number="90">
            <code>      }</code>
        </line>
        <line number="91">
            <code/>
        </line>
        <line hits="1" number="92">
            <code>      void $forwardError(Object error, [StackTrace? st]) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="93">
            <code>        if (!controller.isClosed) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="94">
            <code>          controller.addError(SquadronException.from(error, st, command));</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="95">
            <code>        }</code>
        </line>
        <line number="96">
            <code>      }</code>
        </line>
        <line number="97">
            <code/>
        </line>
        <line hits="0" number="98">
            <code>      void $done() {</code>
        </line>
        <line hits="0" number="99">
            <code>        _leave(controller);</code>
        </line>
        <line number="100">
            <code>      }</code>
        </line>
        <line number="101">
            <code/>
        </line>
        <line hits="20" number="102">
            <code>      controller = ForwardStreamController(onListen: () {</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line number="103">
            <code>        // do nothing if the controller is closed already</code>
        </line>
        <line hits="10" number="104">
            <code>        if (controller.isClosed) return;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="105">
            <code/>
        </line>
        <line number="106">
            <code>        // bind the controller</code>
        </line>
        <line hits="30" number="107">
            <code>        controller.attachSubscription(port.cast&lt;WorkerResponse&gt;().listen(</code>
            <hit count="30" name="&lt;unnamed&gt;"/>
        </line>
        <line number="108">
            <code>              $forwardMessage,</code>
        </line>
        <line number="109">
            <code>              onError: $forwardError,</code>
        </line>
        <line number="110">
            <code>              onDone: $done,</code>
        </line>
        <line number="111">
            <code>              cancelOnError: false,</code>
        </line>
        <line number="112">
            <code>            ));</code>
        </line>
        <line number="113">
            <code/>
        </line>
        <line number="114">
            <code>        // send the request</code>
        </line>
        <line number="115">
            <code>        try {</code>
        </line>
        <line hits="10" number="116">
            <code>          _enter(controller);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="117">
            <code>          post(req);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="118">
            <code>        } catch (ex, st) {</code>
        </line>
        <line hits="1" number="119">
            <code>          $forwardError(ex, st);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="120">
            <code>          _leave(controller);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="121">
            <code>        }</code>
        </line>
        <line hits="10" number="122">
            <code>      }, onCancel: () {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="123">
            <code>        _leave(controller);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="124">
            <code>      });</code>
        </line>
        <line hits="10" number="125">
            <code>      return controller.stream;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="126">
            <code>    }</code>
        </line>
        <line number="127">
            <code/>
        </line>
        <line number="128">
            <code>    // return a stream of decoded responses</code>
        </line>
        <line hits="10" number="129">
            <code>    final res = ResultStream(this, req, $sendRequest, streaming);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="50" number="130">
            <code>    res.done.whenComplete(() =&gt; port.close()).ignore();</code>
            <hit count="50" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="131">
            <code>    return res.stream;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="132">
            <code>  }</code>
        </line>
        <line number="133">
            <code/>
        </line>
        <line number="134">
            <code>  /// creates a [ReceivePort] and a [WorkerRequest] and sends it to the</code>
        </line>
        <line number="135">
            <code>  /// [Isolate]. This method expects a single value from the [Isolate]</code>
        </line>
        <line hits="10" number="136">
            <code>  @override</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="137">
            <code>  Future&lt;dynamic&gt; sendRequest(</code>
        </line>
        <line number="138">
            <code>    int command,</code>
        </line>
        <line number="139">
            <code>    List args, {</code>
        </line>
        <line number="140">
            <code>    SquadronCancelationToken? token,</code>
        </line>
        <line number="141">
            <code>    bool inspectRequest = false,</code>
        </line>
        <line number="142">
            <code>    bool inspectResponse = false,</code>
        </line>
        <line number="143">
            <code>  }) {</code>
        </line>
        <line hits="10" number="144">
            <code>    final completer = Completer();</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="145">
            <code>    late final StreamSubscription sub;</code>
        </line>
        <line number="146">
            <code/>
        </line>
        <line hits="10" number="147">
            <code>    void $success(dynamic data) async {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="148">
            <code>      await sub.cancel();</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="20" number="149">
            <code>      if (!completer.isCompleted) completer.complete(data);</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line number="150">
            <code>    }</code>
        </line>
        <line number="151">
            <code/>
        </line>
        <line hits="4" number="152">
            <code>    void $fail(Object ex, [StackTrace? st]) async {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="153">
            <code>      await sub.cancel();</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="8" number="154">
            <code>      if (!completer.isCompleted) completer.completeError(ex, st);</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line number="155">
            <code>    }</code>
        </line>
        <line number="156">
            <code/>
        </line>
        <line hits="0" number="157">
            <code>    void $done() async {</code>
        </line>
        <line hits="0" number="158">
            <code>      await sub.cancel();</code>
        </line>
        <line hits="0" number="159">
            <code>      if (!completer.isCompleted) {</code>
        </line>
        <line hits="0" number="160">
            <code>        $fail(WorkerException('No response from worker', null, command));</code>
        </line>
        <line number="161">
            <code>      }</code>
        </line>
        <line number="162">
            <code>    }</code>
        </line>
        <line number="163">
            <code/>
        </line>
        <line hits="10" number="164">
            <code>    final receiver = vm.ReceivePort();</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="165">
            <code>    final req = WorkerRequest.userCommand(</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="166">
            <code>        receiver.sendPort, command, args, token, inspectResponse);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="20" number="167">
            <code>    sub = _getResponseStream(receiver, req, _postRequest, streaming: false)</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="168">
            <code>        .listen($success, onError: $fail, onDone: $done);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="169">
            <code>    return completer.future;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="170">
            <code>  }</code>
        </line>
        <line number="171">
            <code/>
        </line>
        <line number="172">
            <code>  /// Creates a [ReceivePort] and a [WorkerRequest] and sends it to the</code>
        </line>
        <line number="173">
            <code>  /// [Isolate]. This method expects a stream of values from the [Isolate].</code>
        </line>
        <line number="174">
            <code>  /// The [Isolate] must send a [WorkerResponse.endOfStream] to close the</code>
        </line>
        <line number="175">
            <code>  /// [Stream].</code>
        </line>
        <line hits="5" number="176">
            <code>  @override</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line number="177">
            <code>  Stream&lt;dynamic&gt; sendStreamingRequest(</code>
        </line>
        <line number="178">
            <code>    int command,</code>
        </line>
        <line number="179">
            <code>    List args, {</code>
        </line>
        <line number="180">
            <code>    SquadronCancelationToken? token,</code>
        </line>
        <line number="181">
            <code>    bool inspectRequest = false,</code>
        </line>
        <line number="182">
            <code>    bool inspectResponse = false,</code>
        </line>
        <line number="183">
            <code>  }) {</code>
        </line>
        <line hits="5" number="184">
            <code>    final receiver = vm.ReceivePort();</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5" number="185">
            <code>    final req = WorkerRequest.userCommand(</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5" number="186">
            <code>        receiver.sendPort, command, args, token, inspectResponse);</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="187">
            <code>    return _getResponseStream(receiver, req, _postRequest, streaming: true);</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="188">
            <code>  }</code>
        </line>
        <line number="189">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../../../"/>
    <base href="../../../"/>
</coverage>
