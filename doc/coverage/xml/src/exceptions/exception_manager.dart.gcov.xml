<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2025-09-28" filename="exception_manager.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.7368421" lines-covered="14" lines-valid="19" package="src/exceptions" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import '_builtin_exceptions.dart';</code>
        </line>
        <line number="2">
            <code>import 'squadron_error.dart';</code>
        </line>
        <line number="3">
            <code>import 'squadron_exception.dart';</code>
        </line>
        <line number="4">
            <code>import 'worker_exception.dart';</code>
        </line>
        <line number="5">
            <code/>
        </line>
        <line number="6">
            <code>typedef WorkerExceptionDeserializer = WorkerException? Function(List props);</code>
        </line>
        <line number="7">
            <code/>
        </line>
        <line number="8">
            <code>class ExceptionManager {</code>
        </line>
        <line hits="11" number="9">
            <code>  ExceptionManager();</code>
            <hit count="11" name="&lt;unnamed&gt;"/>
        </line>
        <line number="10">
            <code/>
        </line>
        <line number="11">
            <code>  final _deserializers = Map.from(builtinExceptions);</code>
        </line>
        <line number="12">
            <code/>
        </line>
        <line number="13">
            <code>  /// Registers a deserializer for a custom [WorkerException]. If the deserializer is</code>
        </line>
        <line number="14">
            <code>  /// already registered, registering it again will have no effect.</code>
        </line>
        <line hits="2" number="15">
            <code>  void register(</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="16">
            <code>      String exceptionTypeId, WorkerExceptionDeserializer deserializer) {</code>
        </line>
        <line hits="4" number="17">
            <code>    if (builtinExceptions.containsKey(exceptionTypeId)) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="18">
            <code>      throw SquadronErrorImpl.create(</code>
        </line>
        <line hits="0" number="19">
            <code>        'Invalid exception type ID: $exceptionTypeId is reserved.',</code>
        </line>
        <line number="20">
            <code>      );</code>
        </line>
        <line number="21">
            <code>    }</code>
        </line>
        <line hits="4" number="22">
            <code>    _deserializers[exceptionTypeId] = deserializer;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="23">
            <code>  }</code>
        </line>
        <line number="24">
            <code/>
        </line>
        <line number="25">
            <code>  /// Unregisters a deserializer that was previously registered, does nothing otherwise.</code>
        </line>
        <line number="26">
            <code>  /// Please note that for a deregistration to have an effect, the exact same instance that</code>
        </line>
        <line number="27">
            <code>  /// was provided to [register] must be provided to this method; avoid passing lambdas,</code>
        </line>
        <line number="28">
            <code>  /// prefer passing static methods or top-level functions instead.</code>
        </line>
        <line hits="2" number="29">
            <code>  void unregister(String exceptionTypeId) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="30">
            <code>    if (builtinExceptions.containsKey(exceptionTypeId)) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="31">
            <code>      throw SquadronErrorImpl.create(</code>
        </line>
        <line hits="0" number="32">
            <code>        'Invalid exception type ID: $exceptionTypeId is reserved.',</code>
        </line>
        <line number="33">
            <code>      );</code>
        </line>
        <line number="34">
            <code>    }</code>
        </line>
        <line hits="4" number="35">
            <code>    _deserializers.remove(exceptionTypeId);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="36">
            <code>  }</code>
        </line>
        <line number="37">
            <code/>
        </line>
        <line number="38">
            <code>  /// Deserializes a [List] that was produced by [serialize].</code>
        </line>
        <line hits="10" number="39">
            <code>  SquadronException? deserialize(List? data) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5" number="40">
            <code>    if (data == null || data.isEmpty) {</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line number="41">
            <code>      return null;</code>
        </line>
        <line number="42">
            <code>    }</code>
        </line>
        <line number="43">
            <code>    try {</code>
        </line>
        <line hits="5" number="44">
            <code>      final exceptionType = data[0];</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="45">
            <code>      final deserializer = _deserializers[exceptionType];</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="5" number="46">
            <code>      return deserializer?.call(data) ??</code>
            <hit count="5" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="47">
            <code>          WorkerException(</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="48">
            <code>            'Failed to deserialize exception information for $exceptionType',</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="49">
            <code>          );</code>
        </line>
        <line number="50">
            <code>    } catch (ex, st) {</code>
        </line>
        <line hits="0" number="51">
            <code>      return SquadronException.from(ex, st);</code>
        </line>
        <line number="52">
            <code>    }</code>
        </line>
        <line number="53">
            <code>  }</code>
        </line>
        <line number="54">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
