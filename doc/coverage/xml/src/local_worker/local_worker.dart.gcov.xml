<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2025-09-28" filename="local_worker.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.71428573" lines-covered="5" lines-valid="7" package="src/local_worker" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import 'dart:async';</code>
        </line>
        <line number="2">
            <code/>
        </line>
        <line number="3">
            <code>import 'package:using/using.dart';</code>
        </line>
        <line number="4">
            <code/>
        </line>
        <line number="5">
            <code>import '../../squadron.dart';</code>
        </line>
        <line number="6">
            <code>import '../_impl/xplat/_local_worker.dart'</code>
        </line>
        <line number="7">
            <code>    if (dart.library.io) '../_impl/native/_local_worker.dart'</code>
        </line>
        <line number="8">
            <code>    if (dart.library.html) '../_impl/web/_local_worker.dart'</code>
        </line>
        <line number="9">
            <code>    if (dart.library.js) '../_impl/web/_local_worker.dart'</code>
        </line>
        <line number="10">
            <code>    if (dart.library.js_interop) '../_impl/web/_local_worker.dart' as impl;</code>
        </line>
        <line number="11">
            <code/>
        </line>
        <line number="12">
            <code>/// Base local worker class.</code>
        </line>
        <line number="13">
            <code>///</code>
        </line>
        <line number="14">
            <code>/// Local workers are similar to other Workers except that they run in the</code>
        </line>
        <line number="15">
            <code>/// context of the current thread. They do not create any platform thread</code>
        </line>
        <line number="16">
            <code>/// (such as Isolate or Web Worker) but they provide a [channel] that can be</code>
        </line>
        <line number="17">
            <code>/// shared with other workers to support communication between threads. One</code>
        </line>
        <line number="18">
            <code>/// interesting use-case is accessing UI components or platform plugins in</code>
        </line>
        <line number="19">
            <code>/// Flutter, where only code running in the main thread is allowed access to</code>
        </line>
        <line number="20">
            <code>/// such features. Creating a [LocalWorker] in the main application and sharing</code>
        </line>
        <line number="21">
            <code>/// its [channel] with other workers enables providing access to Flutter</code>
        </line>
        <line number="22">
            <code>/// features.</code>
        </line>
        <line number="23">
            <code>///</code>
        </line>
        <line number="24">
            <code>/// Local workers wrap around a [WorkerService]. Messages sent to the local</code>
        </line>
        <line number="25">
            <code>/// worker are deserialized as [WorkerRequest]s and dispatched to a handler</code>
        </line>
        <line number="26">
            <code>/// defined in the [_service]'s [WorkerService.operations] map according to the</code>
        </line>
        <line number="27">
            <code>/// [WorkerRequest.command].</code>
        </line>
        <line number="28">
            <code>abstract interface class LocalWorker&lt;W&gt;</code>
        </line>
        <line number="29">
            <code>    with Releasable</code>
        </line>
        <line number="30">
            <code>    implements WorkerService, IWorker {</code>
        </line>
        <line hits="1" number="31">
            <code>  factory LocalWorker.create(W service,</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="32">
            <code>      [OperationsMap? operations, ExceptionManager? exceptionManager]) {</code>
        </line>
        <line number="33">
            <code>    if (operations == null) {</code>
        </line>
        <line hits="1" number="34">
            <code>      if (service is WorkerService) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="35">
            <code>        operations = service.operations;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="36">
            <code>      } else {</code>
        </line>
        <line hits="0" number="37">
            <code>        throw ArgumentError(</code>
        </line>
        <line hits="0" number="38">
            <code>          'The operations map must be provided because $W does not implement $WorkerService',</code>
        </line>
        <line number="39">
            <code>          'operations',</code>
        </line>
        <line number="40">
            <code>        );</code>
        </line>
        <line number="41">
            <code>      }</code>
        </line>
        <line number="42">
            <code>    }</code>
        </line>
        <line hits="1" number="43">
            <code>    return impl.createLocalWorker&lt;W&gt;(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="44">
            <code>      service,</code>
        </line>
        <line number="45">
            <code>      operations,</code>
        </line>
        <line hits="1" number="46">
            <code>      exceptionManager ?? ExceptionManager(),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="47">
            <code>    );</code>
        </line>
        <line number="48">
            <code>  }</code>
        </line>
        <line number="49">
            <code/>
        </line>
        <line number="50">
            <code>  W get service;</code>
        </line>
        <line number="51">
            <code/>
        </line>
        <line number="52">
            <code>  @override</code>
        </line>
        <line number="53">
            <code>  ExceptionManager get exceptionManager;</code>
        </line>
        <line number="54">
            <code/>
        </line>
        <line number="55">
            <code>  /// The local worker's [Channel].</code>
        </line>
        <line number="56">
            <code>  Channel? get channel;</code>
        </line>
        <line number="57">
            <code/>
        </line>
        <line number="58">
            <code>  /// Starts the local worker.</code>
        </line>
        <line number="59">
            <code>  @override</code>
        </line>
        <line number="60">
            <code>  FutureOr&lt;void&gt; start();</code>
        </line>
        <line number="61">
            <code/>
        </line>
        <line number="62">
            <code>  /// Stops the local worker.</code>
        </line>
        <line number="63">
            <code>  @override</code>
        </line>
        <line number="64">
            <code>  void stop();</code>
        </line>
        <line number="65">
            <code/>
        </line>
        <line number="66">
            <code>  /// Terminates the local worker.</code>
        </line>
        <line number="67">
            <code>  @override</code>
        </line>
        <line number="68">
            <code>  void terminate([TaskTerminatedException? ex]);</code>
        </line>
        <line number="69">
            <code/>
        </line>
        <line number="70">
            <code>  /// Forward to underlying service.</code>
        </line>
        <line number="71">
            <code>  @override</code>
        </line>
        <line number="72">
            <code>  OperationsMap get operations;</code>
        </line>
        <line number="73">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
