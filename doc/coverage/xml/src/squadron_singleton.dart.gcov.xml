<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2025-09-28" filename="squadron_singleton.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.8947368" lines-covered="17" lines-valid="19" package="src" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import '_impl/xplat/_platform.dart'</code>
        </line>
        <line number="2">
            <code>    if (dart.library.io) '_impl/native/_platform.dart'</code>
        </line>
        <line number="3">
            <code>    if (dart.library.html) '_impl/web/_platform.dart'</code>
        </line>
        <line number="4">
            <code>    if (dart.library.js) '_impl/web/_platform.dart'</code>
        </line>
        <line number="5">
            <code>    if (dart.library.js_interop) '_impl/web/_platform.dart' as impl;</code>
        </line>
        <line number="6">
            <code>import 'converters/converter.dart';</code>
        </line>
        <line number="7">
            <code/>
        </line>
        <line hits="2" number="8">
            <code>String get threadId =&gt; impl.threadId;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="9">
            <code/>
        </line>
        <line number="10">
            <code>class Squadron {</code>
        </line>
        <line hits="0" number="11">
            <code>  Squadron._();</code>
        </line>
        <line number="12">
            <code/>
        </line>
        <line number="13">
            <code>  /// Gets the current platform type.</code>
        </line>
        <line hits="36" number="14">
            <code>  static final platformType = impl.getPlatformType();</code>
            <hit count="36" name="&lt;unnamed&gt;"/>
        </line>
        <line number="15">
            <code/>
        </line>
        <line number="16">
            <code>  /// Parse [url] and returns the corresponding [Uri].</code>
        </line>
        <line number="17">
            <code>  ///</code>
        </line>
        <line number="18">
            <code>  /// On Web platforms, a leading '~' character will be replaced with the</code>
        </line>
        <line number="19">
            <code>  /// current page's root URL. E.g. '~/workers' from '/path/to/index.html'</code>
        </line>
        <line number="20">
            <code>  /// will return '/path/to/workers'.</code>
        </line>
        <line hits="0" number="21">
            <code>  static Uri uri(String url) =&gt; impl.mapUrl(url);</code>
        </line>
        <line number="22">
            <code/>
        </line>
        <line hits="8" number="23">
            <code>  static final identical = impl.isSameInstance;</code>
            <hit count="8" name="&lt;unnamed&gt;"/>
        </line>
        <line number="24">
            <code/>
        </line>
        <line hits="30" number="25">
            <code>  static final _platformConverter = impl.getPlatformConverter();</code>
            <hit count="30" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="30" number="26">
            <code>  static Converter _converter = _platformConverter;</code>
            <hit count="30" name="&lt;unnamed&gt;"/>
        </line>
        <line number="27">
            <code/>
        </line>
        <line number="28">
            <code>  /// Gets the current converter.</code>
        </line>
        <line hits="20" number="29">
            <code>  static Converter get converter =&gt; _converter;</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line number="30">
            <code/>
        </line>
        <line number="31">
            <code>  /// Sets the current converter. If [value] is `null`, the default converter</code>
        </line>
        <line number="32">
            <code>  /// will be restored. If the converter was updated, handlers registered with</code>
        </line>
        <line number="33">
            <code>  /// [onConverterChanged] will be notified of the change.</code>
        </line>
        <line hits="1" number="34">
            <code>  static set converter(Converter? value) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="35">
            <code>    value ??= _platformConverter;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="36">
            <code>    if (_converter != value) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="37">
            <code>      _converter = value;</code>
        </line>
        <line hits="3" number="38">
            <code>      for (var handler in _converterChangeHandlers.values) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="39">
            <code>        try {</code>
        </line>
        <line hits="1" number="40">
            <code>          handler();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="41">
            <code>        } catch (_) {</code>
        </line>
        <line number="42">
            <code>          // ignore</code>
        </line>
        <line number="43">
            <code>        }</code>
        </line>
        <line number="44">
            <code>      }</code>
        </line>
        <line number="45">
            <code>    }</code>
        </line>
        <line number="46">
            <code>  }</code>
        </line>
        <line number="47">
            <code/>
        </line>
        <line hits="3" number="48">
            <code>  static final _converterChangeHandlers = &lt;Object, void Function()&gt;{};</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="49">
            <code/>
        </line>
        <line number="50">
            <code>  /// Registers a callback that will be called whenever `converter` is changed.</code>
        </line>
        <line number="51">
            <code>  /// Returns an object that can be used to unregister the callback by passing</code>
        </line>
        <line number="52">
            <code>  /// it to [unregisterConverterChanged].</code>
        </line>
        <line hits="1" number="53">
            <code>  static Object onConverterChanged(void Function() handler) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="54">
            <code>    final key = Object();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="55">
            <code>    _converterChangeHandlers[key] = handler;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="56">
            <code>    return key;</code>
        </line>
        <line number="57">
            <code>  }</code>
        </line>
        <line number="58">
            <code/>
        </line>
        <line number="59">
            <code>  /// Unregisters a callback that was registered with [onConverterChanged].</code>
        </line>
        <line hits="1" number="60">
            <code>  static void unregisterConverterChanged(Object key) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="61">
            <code>    _converterChangeHandlers.remove(key);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="62">
            <code>  }</code>
        </line>
        <line number="63">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
