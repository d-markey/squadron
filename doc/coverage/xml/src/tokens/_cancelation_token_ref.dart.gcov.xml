<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2025-09-28" filename="_cancelation_token_ref.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.51428574" lines-covered="18" lines-valid="35" package="src/tokens" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import 'dart:async';</code>
        </line>
        <line number="2">
            <code/>
        </line>
        <line number="3">
            <code>import 'package:cancelation_token/cancelation_token.dart';</code>
        </line>
        <line number="4">
            <code/>
        </line>
        <line number="5">
            <code>import '../exceptions/squadron_canceled_exception.dart';</code>
        </line>
        <line number="6">
            <code>import '../exceptions/squadron_error.dart';</code>
        </line>
        <line number="7">
            <code>import '../worker/worker_request.dart';</code>
        </line>
        <line number="8">
            <code>import '_squadron_cancelation_token.dart';</code>
        </line>
        <line number="9">
            <code/>
        </line>
        <line number="10">
            <code>/// Cancelation token reference. This special cancelation token is managed by the [WorkerMonitor] and is used to</code>
        </line>
        <line number="11">
            <code>/// mirror cancelation tokens presented to Squadron by callers of a worker service. When a [WorkerRequest] is</code>
        </line>
        <line number="12">
            <code>/// handled by the platform worker and that request is associated with a cancelation request, the [WorkerMonitor]</code>
        </line>
        <line number="13">
            <code>/// will override the request's cancelation token with a [CancelationTokenReference]. The same cancelation may</code>
        </line>
        <line number="14">
            <code>/// be used for several service calls, so the [WorkerMonitor] keeps a map of [CancelationTokenReference] and a</code>
        </line>
        <line number="15">
            <code>/// reference count that is incremented for each [WorkerRequest] having the same cancelation token and decremented</code>
        </line>
        <line number="16">
            <code>/// when processing is finished. When the reference count drops to 0 and the cancelation token was not canceled,</code>
        </line>
        <line number="17">
            <code>/// the [CancelationTokenReference] is removed from the map.</code>
        </line>
        <line number="18">
            <code>///</code>
        </line>
        <line number="19">
            <code>/// When a caller cancels a token, a cancelation notification is sent to all workers in the pool and the</code>
        </line>
        <line number="20">
            <code>/// corresponding [CancelationTokenReference] will be canceled. Services executing in the context of a platform</code>
        </line>
        <line number="21">
            <code>/// worker will be able to inspect the token's status to interrupt processing gracefully. If the token's status is</code>
        </line>
        <line number="22">
            <code>/// not inspected, processing will continue in platform workers, but will be interrupted on caller-side with a</code>
        </line>
        <line number="23">
            <code>/// [CanceledException].</code>
        </line>
        <line number="24">
            <code>class CancelationTokenReference implements SquadronCancelationToken {</code>
        </line>
        <line hits="10" number="25">
            <code>  CancelationTokenReference._noToken()</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="26">
            <code>      : _hasRef = false,</code>
        </line>
        <line number="27">
            <code>        id = '' {</code>
        </line>
        <line hits="10" number="28">
            <code>    _refCount = 1;</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line number="29">
            <code>  }</code>
        </line>
        <line number="30">
            <code/>
        </line>
        <line number="31">
            <code>  @override</code>
        </line>
        <line number="32">
            <code>  final String id;</code>
        </line>
        <line number="33">
            <code/>
        </line>
        <line number="34">
            <code>  /// Singleton token reference instance for requests containing no token.</code>
        </line>
        <line hits="30" number="35">
            <code>  static final noToken = CancelationTokenReference._noToken();</code>
            <hit count="30" name="&lt;unnamed&gt;"/>
        </line>
        <line number="36">
            <code/>
        </line>
        <line number="37">
            <code>  /// Creates a new token reference for [id].</code>
        </line>
        <line hits="2" number="38">
            <code>  CancelationTokenReference(this.id) : _hasRef = true;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="39">
            <code/>
        </line>
        <line hits="0" number="40">
            <code>  @override</code>
        </line>
        <line hits="0" number="41">
            <code>  SquadronCanceledException? get exception =&gt; _exception;</code>
        </line>
        <line number="42">
            <code>  SquadronCanceledException? _exception;</code>
        </line>
        <line number="43">
            <code/>
        </line>
        <line hits="0" number="44">
            <code>  @override</code>
        </line>
        <line hits="0" number="45">
            <code>  bool get isCanceled =&gt; (_exception != null);</code>
        </line>
        <line number="46">
            <code/>
        </line>
        <line hits="0" number="47">
            <code>  @override</code>
        </line>
        <line hits="0" number="48">
            <code>  Future&lt;CanceledException&gt; get onCanceled =&gt; _completer.future;</code>
        </line>
        <line number="49">
            <code>  final _completer = Completer&lt;SquadronCanceledException&gt;();</code>
        </line>
        <line number="50">
            <code/>
        </line>
        <line number="51">
            <code>  /// Whether this token reference instance has a reference. A token reference</code>
        </line>
        <line number="52">
            <code>  /// without a reference does nothing.</code>
        </line>
        <line number="53">
            <code>  final bool _hasRef;</code>
        </line>
        <line number="54">
            <code/>
        </line>
        <line number="55">
            <code>  /// Reference counter.</code>
        </line>
        <line hits="20" number="56">
            <code>  int get refCount =&gt; _refCount;</code>
            <hit count="20" name="&lt;unnamed&gt;"/>
        </line>
        <line number="57">
            <code>  int _refCount = 0;</code>
        </line>
        <line number="58">
            <code/>
        </line>
        <line number="59">
            <code>  /// Use this token reference for [request]. Increments the internal reference</code>
        </line>
        <line number="60">
            <code>  /// counter and overrides [WorkerRequest.cancelToken] with this token.</code>
        </line>
        <line hits="10" number="61">
            <code>  void usedBy(WorkerRequest request) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="62">
            <code>    if (_hasRef) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="63">
            <code>      _refCount++;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="64">
            <code>      request.overrideCancelToken(this);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="65">
            <code>    } else if (request.cancelToken != null) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="66">
            <code>      throw SquadronErrorImpl.create('Token reference mismatch');</code>
        </line>
        <line number="67">
            <code>    }</code>
        </line>
        <line number="68">
            <code>  }</code>
        </line>
        <line number="69">
            <code/>
        </line>
        <line number="70">
            <code>  /// Release this token reference. Decrements the internal reference counter.</code>
        </line>
        <line hits="10" number="71">
            <code>  void release() {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="10" number="72">
            <code>    if (_hasRef) {</code>
            <hit count="10" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="73">
            <code>      _refCount--;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="74">
            <code>    }</code>
        </line>
        <line number="75">
            <code>  }</code>
        </line>
        <line number="76">
            <code/>
        </line>
        <line hits="2" number="77">
            <code>  void update(SquadronCancelationToken token) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="78">
            <code>    final ex = token.exception;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="79">
            <code>    if (ex != null &amp;&amp; !_completer.isCompleted) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="80">
            <code>      _exception = ex;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="81">
            <code>      _completer.complete(ex);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="82">
            <code>    }</code>
        </line>
        <line number="83">
            <code>  }</code>
        </line>
        <line number="84">
            <code/>
        </line>
        <line hits="0" number="85">
            <code>  @override</code>
        </line>
        <line number="86">
            <code>  void ensureStarted() {/* nothing to do */}</code>
        </line>
        <line number="87">
            <code/>
        </line>
        <line hits="0" number="88">
            <code>  @override</code>
        </line>
        <line number="89">
            <code>  void throwIfCanceled() {</code>
        </line>
        <line hits="0" number="90">
            <code>    if (_exception != null) {</code>
        </line>
        <line hits="0" number="91">
            <code>      throw _exception!;</code>
        </line>
        <line number="92">
            <code>    }</code>
        </line>
        <line number="93">
            <code>  }</code>
        </line>
        <line number="94">
            <code/>
        </line>
        <line hits="0" number="95">
            <code>  @override</code>
        </line>
        <line hits="0" number="96">
            <code>  Future&lt;void&gt; refreshAndThrowIfCanceled() =&gt; Future(throwIfCanceled);</code>
        </line>
        <line number="97">
            <code/>
        </line>
        <line hits="0" number="98">
            <code>  @override</code>
        </line>
        <line number="99">
            <code>  // no native cancelation token in workers</code>
        </line>
        <line hits="0" number="100">
            <code>  CancelationToken? get token =&gt; throw UnimplementedError();</code>
        </line>
        <line number="101">
            <code/>
        </line>
        <line hits="0" number="102">
            <code>  @override</code>
        </line>
        <line number="103">
            <code>  // serialization of token references</code>
        </line>
        <line hits="0" number="104">
            <code>  List serialize() =&gt; throw UnimplementedError();</code>
        </line>
        <line number="105">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
