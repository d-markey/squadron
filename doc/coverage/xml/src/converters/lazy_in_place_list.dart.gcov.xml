<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2025-09-28" filename="lazy_in_place_list.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.99590164" lines-covered="243" lines-valid="244" package="src/converters" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import 'dart:math' as math;</code>
        </line>
        <line number="2">
            <code/>
        </line>
        <line number="3">
            <code>import 'package:meta/meta.dart';</code>
        </line>
        <line number="4">
            <code/>
        </line>
        <line number="5">
            <code>import '../typedefs.dart';</code>
        </line>
        <line number="6">
            <code/>
        </line>
        <line number="7">
            <code>/// Wraps a `List&lt;dynamic&gt;` and a `Cast&lt;E&gt;` converter. Items in the list</code>
        </line>
        <line number="8">
            <code>/// are converted to `E` on demand i.e. when they are read by the program.</code>
        </line>
        <line number="9">
            <code>/// Conversion occurs only once for each item and the original `dynamic` item</code>
        </line>
        <line number="10">
            <code>/// is replaced with the conversion result.</code>
        </line>
        <line number="11">
            <code>@internal</code>
        </line>
        <line number="12">
            <code>class LazyInPlaceList&lt;E&gt; implements List&lt;E&gt; {</code>
        </line>
        <line hits="2" number="13">
            <code>  LazyInPlaceList(this._data, this._cast);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="14">
            <code/>
        </line>
        <line number="15">
            <code>  final List&lt;dynamic&gt; _data;</code>
        </line>
        <line number="16">
            <code>  final Cast&lt;E&gt; _cast;</code>
        </line>
        <line number="17">
            <code/>
        </line>
        <line hits="1" number="18">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="19">
            <code>  E get first =&gt; _get(0);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="20">
            <code/>
        </line>
        <line hits="1" number="21">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="22">
            <code>  set first(E value) =&gt; _data[0] = value;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="23">
            <code/>
        </line>
        <line hits="1" number="24">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="25">
            <code>  bool get isEmpty =&gt; _data.isEmpty;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="26">
            <code/>
        </line>
        <line hits="1" number="27">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="28">
            <code>  bool get isNotEmpty =&gt; _data.isNotEmpty;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="29">
            <code/>
        </line>
        <line hits="1" number="30">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="31">
            <code>  Iterator&lt;E&gt; get iterator =&gt; _iterate().iterator;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="32">
            <code/>
        </line>
        <line hits="1" number="33">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="34">
            <code>  E get last =&gt; _get(length - 1);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="35">
            <code/>
        </line>
        <line hits="1" number="36">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="37">
            <code>  set last(E value) =&gt; _data[length - 1] = value;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="38">
            <code/>
        </line>
        <line hits="2" number="39">
            <code>  @override</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="40">
            <code>  int get length =&gt; _data.length;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="41">
            <code/>
        </line>
        <line hits="1" number="42">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="43">
            <code>  set length(int value) {</code>
        </line>
        <line hits="2" number="44">
            <code>    if (value &gt; length) null as E;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="45">
            <code>    _data.length = value;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="46">
            <code>  }</code>
        </line>
        <line number="47">
            <code/>
        </line>
        <line hits="1" number="48">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="49">
            <code>  Iterable&lt;E&gt; get reversed sync* {</code>
        </line>
        <line hits="4" number="50">
            <code>    for (var i = length - 1; i &gt;= 0; i--) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="51">
            <code>      yield _get(i);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="52">
            <code>    }</code>
        </line>
        <line number="53">
            <code>  }</code>
        </line>
        <line number="54">
            <code/>
        </line>
        <line hits="1" number="55">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="56">
            <code>  E get single {</code>
        </line>
        <line hits="1" number="57">
            <code>    if (isEmpty) throw _ListError.noElement();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="58">
            <code>    if (length &gt; 1) throw _ListError.tooMany();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="0" number="59">
            <code>    return _get(0);</code>
        </line>
        <line number="60">
            <code>  }</code>
        </line>
        <line number="61">
            <code/>
        </line>
        <line hits="1" number="62">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="63">
            <code>  List&lt;E&gt; operator +(List&lt;E&gt; other) {</code>
        </line>
        <line hits="3" number="64">
            <code>    final l = length, tl = l + other.length;</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="65">
            <code>    if (tl == l) return toList();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="66">
            <code>    final r = List&lt;E&gt;.filled(tl, other[0]);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="67">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="68">
            <code>      r[i] = _get(i);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="69">
            <code>    }</code>
        </line>
        <line hits="1" number="70">
            <code>    r.setRange(l, tl, other);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="71">
            <code>    return r;</code>
        </line>
        <line number="72">
            <code>  }</code>
        </line>
        <line number="73">
            <code/>
        </line>
        <line hits="2" number="74">
            <code>  @override</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="75">
            <code>  E operator [](int index) =&gt; _get(index);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="76">
            <code/>
        </line>
        <line hits="1" number="77">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="78">
            <code>  void operator []=(int index, E value) =&gt; _data[index] = value;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="79">
            <code/>
        </line>
        <line hits="1" number="80">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="81">
            <code>  void add(E value) =&gt; _data.add(value);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="82">
            <code/>
        </line>
        <line hits="1" number="83">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="84">
            <code>  void addAll(Iterable&lt;E&gt; iterable) =&gt; _data.addAll(iterable);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="85">
            <code/>
        </line>
        <line hits="2" number="86">
            <code>  @override</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="87">
            <code>  bool any(bool Function(E element) test) {</code>
        </line>
        <line hits="2" number="88">
            <code>    final l = length;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="89">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="90">
            <code>      if (test(_get(i))) return true;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="91">
            <code>    }</code>
        </line>
        <line number="92">
            <code>    return false;</code>
        </line>
        <line number="93">
            <code>  }</code>
        </line>
        <line number="94">
            <code/>
        </line>
        <line hits="1" number="95">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="96">
            <code>  Map&lt;int, E&gt; asMap() {</code>
        </line>
        <line hits="2" number="97">
            <code>    final r = &lt;int, E&gt;{}, l = length;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="98">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="99">
            <code>      r[i] = _get(i);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="100">
            <code>    }</code>
        </line>
        <line number="101">
            <code>    return r;</code>
        </line>
        <line number="102">
            <code>  }</code>
        </line>
        <line number="103">
            <code/>
        </line>
        <line hits="1" number="104">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="105">
            <code>  List&lt;R&gt; cast&lt;R&gt;() =&gt; _forceCast().cast&lt;R&gt;();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="106">
            <code/>
        </line>
        <line hits="1" number="107">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="108">
            <code>  void clear() =&gt; _data.clear();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="109">
            <code/>
        </line>
        <line hits="2" number="110">
            <code>  @override</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="111">
            <code>  bool contains(Object? element) {</code>
        </line>
        <line hits="2" number="112">
            <code>    final l = length;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="113">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="114">
            <code>      if (element == _get(i)) return true;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="115">
            <code>    }</code>
        </line>
        <line number="116">
            <code>    return false;</code>
        </line>
        <line number="117">
            <code>  }</code>
        </line>
        <line number="118">
            <code/>
        </line>
        <line hits="1" number="119">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="120">
            <code>  E elementAt(int index) =&gt; _get(index);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="121">
            <code/>
        </line>
        <line hits="1" number="122">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="123">
            <code>  bool every(bool Function(E element) test) {</code>
        </line>
        <line hits="1" number="124">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="125">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="126">
            <code>      if (!test(_get(i))) return false;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="127">
            <code>    }</code>
        </line>
        <line number="128">
            <code>    return true;</code>
        </line>
        <line number="129">
            <code>  }</code>
        </line>
        <line number="130">
            <code/>
        </line>
        <line hits="1" number="131">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="132">
            <code>  Iterable&lt;U&gt; expand&lt;U&gt;(Iterable&lt;U&gt; Function(E element) toElements) sync* {</code>
        </line>
        <line hits="1" number="133">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="134">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="135">
            <code>      yield* toElements(_get(i));</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="136">
            <code>    }</code>
        </line>
        <line number="137">
            <code>  }</code>
        </line>
        <line number="138">
            <code/>
        </line>
        <line hits="1" number="139">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="140">
            <code>  void fillRange(int start, int end, [E? fillValue]) =&gt;</code>
        </line>
        <line hits="2" number="141">
            <code>      _data.fillRange(start, end, fillValue);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="142">
            <code/>
        </line>
        <line hits="1" number="143">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="144">
            <code>  E firstWhere(bool Function(E element) test, {E Function()? orElse}) {</code>
        </line>
        <line hits="1" number="145">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="146">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="147">
            <code>      final v = _get(i);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="148">
            <code>      if (test(v)) return v;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="149">
            <code>    }</code>
        </line>
        <line hits="1" number="150">
            <code>    if (orElse != null) return orElse();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="151">
            <code>    throw _ListError.noElement();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="152">
            <code>  }</code>
        </line>
        <line number="153">
            <code/>
        </line>
        <line hits="1" number="154">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="155">
            <code>  U fold&lt;U&gt;(U initialValue, U Function(U previousValue, E element) combine) {</code>
        </line>
        <line hits="1" number="156">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="157">
            <code>    U res = initialValue;</code>
        </line>
        <line hits="2" number="158">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="159">
            <code>      res = combine(res, _get(i));</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="160">
            <code>    }</code>
        </line>
        <line number="161">
            <code>    return res;</code>
        </line>
        <line number="162">
            <code>  }</code>
        </line>
        <line number="163">
            <code/>
        </line>
        <line hits="1" number="164">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="165">
            <code>  Iterable&lt;E&gt; followedBy(Iterable&lt;E&gt; other) sync* {</code>
        </line>
        <line hits="1" number="166">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="167">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="168">
            <code>      yield _get(i);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="169">
            <code>    }</code>
        </line>
        <line number="170">
            <code>    yield* other;</code>
        </line>
        <line number="171">
            <code>  }</code>
        </line>
        <line number="172">
            <code/>
        </line>
        <line hits="1" number="173">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="174">
            <code>  void forEach(void Function(E element) action) {</code>
        </line>
        <line hits="1" number="175">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="176">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="177">
            <code>      action(_get(i));</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="178">
            <code>    }</code>
        </line>
        <line number="179">
            <code>  }</code>
        </line>
        <line number="180">
            <code/>
        </line>
        <line hits="1" number="181">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="182">
            <code>  Iterable&lt;E&gt; getRange(int start, int end) sync* {</code>
        </line>
        <line hits="2" number="183">
            <code>    RangeError.checkValidRange(start, end, length);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="184">
            <code>    for (var i = start; i &lt; end; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="185">
            <code>      yield _get(i);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="186">
            <code>    }</code>
        </line>
        <line number="187">
            <code>  }</code>
        </line>
        <line number="188">
            <code/>
        </line>
        <line hits="1" number="189">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="190">
            <code>  int indexOf(E element, [int start = 0]) {</code>
        </line>
        <line hits="1" number="191">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="192">
            <code>    for (var i = start; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="193">
            <code>      if (_get(i) == element) return i;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="194">
            <code>    }</code>
        </line>
        <line hits="1" number="195">
            <code>    return -1;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="196">
            <code>  }</code>
        </line>
        <line number="197">
            <code/>
        </line>
        <line hits="1" number="198">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="199">
            <code>  int indexWhere(bool Function(E element) test, [int start = 0]) {</code>
        </line>
        <line hits="1" number="200">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="201">
            <code>    for (var i = start; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="202">
            <code>      if (test(_get(i))) return i;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="203">
            <code>    }</code>
        </line>
        <line hits="1" number="204">
            <code>    return -1;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="205">
            <code>  }</code>
        </line>
        <line number="206">
            <code/>
        </line>
        <line hits="1" number="207">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="208">
            <code>  void insert(int index, E element) =&gt; _data.insert(index, element);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="209">
            <code/>
        </line>
        <line hits="1" number="210">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="211">
            <code>  void insertAll(int index, Iterable&lt;E&gt; iterable) =&gt;</code>
        </line>
        <line hits="2" number="212">
            <code>      _data.insertAll(index, iterable);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="213">
            <code/>
        </line>
        <line hits="1" number="214">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="215">
            <code>  String join([String separator = ""]) {</code>
        </line>
        <line hits="1" number="216">
            <code>    final buffer = StringBuffer();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="217">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="218">
            <code>    if (l &gt; 0) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="219">
            <code>      buffer.write(_get(0).toString());</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="220">
            <code>      for (var i = 1; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="221">
            <code>        buffer.write(separator);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="222">
            <code>        buffer.write(_get(i).toString());</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="223">
            <code>      }</code>
        </line>
        <line number="224">
            <code>    }</code>
        </line>
        <line hits="1" number="225">
            <code>    return buffer.toString();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="226">
            <code>  }</code>
        </line>
        <line number="227">
            <code/>
        </line>
        <line hits="1" number="228">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="229">
            <code>  int lastIndexOf(E element, [int? start]) {</code>
        </line>
        <line hits="4" number="230">
            <code>    for (var i = start ?? (length - 1); i &gt;= 0; i--) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="231">
            <code>      if (element == _get(i)) return i;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="232">
            <code>    }</code>
        </line>
        <line hits="1" number="233">
            <code>    return -1;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="234">
            <code>  }</code>
        </line>
        <line number="235">
            <code/>
        </line>
        <line hits="1" number="236">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="237">
            <code>  int lastIndexWhere(bool Function(E element) test, [int? start]) {</code>
        </line>
        <line hits="4" number="238">
            <code>    for (var i = start ?? (length - 1); i &gt;= 0; i--) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="239">
            <code>      if (test(_get(i))) return i;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="240">
            <code>    }</code>
        </line>
        <line hits="1" number="241">
            <code>    return -1;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="242">
            <code>  }</code>
        </line>
        <line number="243">
            <code/>
        </line>
        <line hits="1" number="244">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="245">
            <code>  E lastWhere(bool Function(E element) test, {E Function()? orElse}) {</code>
        </line>
        <line hits="4" number="246">
            <code>    for (var i = length - 1; i &gt;= 0; i--) {</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="247">
            <code>      final v = _get(i);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="248">
            <code>      if (test(v)) return v;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="249">
            <code>    }</code>
        </line>
        <line hits="1" number="250">
            <code>    if (orElse != null) return orElse();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="251">
            <code>    throw _ListError.noElement();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="252">
            <code>  }</code>
        </line>
        <line number="253">
            <code/>
        </line>
        <line hits="1" number="254">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="255">
            <code>  Iterable&lt;U&gt; map&lt;U&gt;(U Function(E e) toElement) sync* {</code>
        </line>
        <line hits="1" number="256">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="257">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="258">
            <code>      yield toElement(_get(i));</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="259">
            <code>    }</code>
        </line>
        <line number="260">
            <code>  }</code>
        </line>
        <line number="261">
            <code/>
        </line>
        <line hits="1" number="262">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="263">
            <code>  E reduce(E Function(E value, E element) combine) {</code>
        </line>
        <line hits="1" number="264">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="265">
            <code>    if (l == 0) throw _ListError.noElement();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="266">
            <code>    E res = _get(0);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="267">
            <code>    for (var i = 1; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="268">
            <code>      res = combine(res, _get(i));</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="269">
            <code>    }</code>
        </line>
        <line number="270">
            <code>    return res;</code>
        </line>
        <line number="271">
            <code>  }</code>
        </line>
        <line number="272">
            <code/>
        </line>
        <line hits="1" number="273">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="274">
            <code>  bool remove(Object? value) =&gt; _data.remove(value);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="275">
            <code/>
        </line>
        <line hits="1" number="276">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="277">
            <code>  E removeAt(int index) {</code>
        </line>
        <line hits="1" number="278">
            <code>    final v = _get(index);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="279">
            <code>    _data.removeAt(index);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="280">
            <code>    return v;</code>
        </line>
        <line number="281">
            <code>  }</code>
        </line>
        <line number="282">
            <code/>
        </line>
        <line hits="1" number="283">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="284">
            <code>  E removeLast() {</code>
        </line>
        <line hits="3" number="285">
            <code>    final v = _get(length - 1);</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="286">
            <code>    _data.removeLast();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="287">
            <code>    return v;</code>
        </line>
        <line number="288">
            <code>  }</code>
        </line>
        <line number="289">
            <code/>
        </line>
        <line hits="1" number="290">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="291">
            <code>  void removeRange(int start, int end) =&gt; _data.removeRange(start, end);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="292">
            <code/>
        </line>
        <line hits="1" number="293">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="294">
            <code>  void removeWhere(bool Function(E element) test) {</code>
        </line>
        <line hits="2" number="295">
            <code>    var i = length - 1;</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="296">
            <code>    while (i &gt;= 0) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="297">
            <code>      if (test(_get(i))) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="298">
            <code>        final e = i + 1;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="299">
            <code>        i--;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="300">
            <code>        while (i &gt;= 0 &amp;&amp; test(_get(i))) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="301">
            <code>          i--;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="302">
            <code>        }</code>
        </line>
        <line hits="2" number="303">
            <code>        removeRange(i + 1, e);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="304">
            <code>      } else {</code>
        </line>
        <line hits="1" number="305">
            <code>        i--;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="306">
            <code>      }</code>
        </line>
        <line number="307">
            <code>    }</code>
        </line>
        <line number="308">
            <code>  }</code>
        </line>
        <line number="309">
            <code/>
        </line>
        <line hits="1" number="310">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="311">
            <code>  void replaceRange(int start, int end, Iterable&lt;E&gt; replacements) =&gt;</code>
        </line>
        <line hits="2" number="312">
            <code>      _data.replaceRange(start, end, replacements);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="313">
            <code/>
        </line>
        <line hits="1" number="314">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="315">
            <code>  void retainWhere(bool Function(E element) test) =&gt;</code>
        </line>
        <line hits="3" number="316">
            <code>      removeWhere((e) =&gt; !test(e));</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="317">
            <code/>
        </line>
        <line hits="1" number="318">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="319">
            <code>  void setAll(int index, Iterable&lt;E&gt; iterable) =&gt; _data.setAll(index, iterable);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="320">
            <code/>
        </line>
        <line hits="1" number="321">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="322">
            <code>  void setRange(int start, int end, Iterable&lt;E&gt; iterable,</code>
        </line>
        <line number="323">
            <code>          [int skipCount = 0]) =&gt;</code>
        </line>
        <line hits="2" number="324">
            <code>      _data.setRange(start, end, iterable, skipCount);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="325">
            <code/>
        </line>
        <line hits="1" number="326">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="327">
            <code>  void shuffle([math.Random? random]) =&gt; _data.shuffle(random);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="328">
            <code/>
        </line>
        <line hits="1" number="329">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="330">
            <code>  E singleWhere(bool Function(E element) test, {E Function()? orElse}) {</code>
        </line>
        <line number="331">
            <code>    late E res;</code>
        </line>
        <line hits="1" number="332">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="333">
            <code>    var found = false;</code>
        </line>
        <line hits="2" number="334">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="335">
            <code>      final v = _get(i);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="336">
            <code>      if (test(v)) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="337">
            <code>        if (found) throw _ListError.tooMany();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="338">
            <code>        found = true;</code>
        </line>
        <line number="339">
            <code>        res = v;</code>
        </line>
        <line number="340">
            <code>      }</code>
        </line>
        <line number="341">
            <code>    }</code>
        </line>
        <line number="342">
            <code>    if (found) return res;</code>
        </line>
        <line hits="1" number="343">
            <code>    if (orElse != null) return orElse();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="344">
            <code>    throw _ListError.noElement();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="345">
            <code>  }</code>
        </line>
        <line number="346">
            <code/>
        </line>
        <line hits="1" number="347">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="348">
            <code>  Iterable&lt;E&gt; skip(int count) sync* {</code>
        </line>
        <line hits="1" number="349">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="350">
            <code>    for (var i = count; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="351">
            <code>      yield _get(i);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="352">
            <code>    }</code>
        </line>
        <line number="353">
            <code>  }</code>
        </line>
        <line number="354">
            <code/>
        </line>
        <line hits="1" number="355">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="356">
            <code>  Iterable&lt;E&gt; skipWhile(bool Function(E value) test) sync* {</code>
        </line>
        <line number="357">
            <code>    var i = 0;</code>
        </line>
        <line hits="1" number="358">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="359">
            <code>    while (i &lt; l &amp;&amp; test(_get(i))) {</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="360">
            <code>      i++;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="361">
            <code>    }</code>
        </line>
        <line hits="1" number="362">
            <code>    while (i &lt; l) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="363">
            <code>      yield _get(i);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="364">
            <code>      i++;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="365">
            <code>    }</code>
        </line>
        <line number="366">
            <code>  }</code>
        </line>
        <line number="367">
            <code/>
        </line>
        <line hits="1" number="368">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="369">
            <code>  void sort([int Function(E a, E b)? compare]) {</code>
        </line>
        <line hits="1" number="370">
            <code>    _forceCast();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="371">
            <code>    if (compare == null) {</code>
        </line>
        <line hits="2" number="372">
            <code>      final d = _data.cast&lt;E&gt;();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="373">
            <code>      d.sort();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="374">
            <code>    } else {</code>
        </line>
        <line hits="4" number="375">
            <code>      _data.sort((a, b) =&gt; compare(a as E, b as E));</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="376">
            <code>    }</code>
        </line>
        <line number="377">
            <code>  }</code>
        </line>
        <line number="378">
            <code/>
        </line>
        <line hits="1" number="379">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="380">
            <code>  List&lt;E&gt; sublist(int start, [int? end]) =&gt;</code>
        </line>
        <line hits="3" number="381">
            <code>      getRange(start, end ?? length).toList();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="382">
            <code/>
        </line>
        <line hits="1" number="383">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="384">
            <code>  Iterable&lt;E&gt; take(int count) sync* {</code>
        </line>
        <line hits="2" number="385">
            <code>    final c = math.min(count, length);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="386">
            <code>    for (var i = 0; i &lt; c; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="387">
            <code>      yield _get(i);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="388">
            <code>    }</code>
        </line>
        <line number="389">
            <code>  }</code>
        </line>
        <line number="390">
            <code/>
        </line>
        <line hits="1" number="391">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="392">
            <code>  Iterable&lt;E&gt; takeWhile(bool Function(E value) test) sync* {</code>
        </line>
        <line hits="1" number="393">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="394">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="395">
            <code>      final v = _get(i);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="396">
            <code>      if (!test(v)) break;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="397">
            <code>      yield v;</code>
        </line>
        <line number="398">
            <code>    }</code>
        </line>
        <line number="399">
            <code>  }</code>
        </line>
        <line number="400">
            <code/>
        </line>
        <line hits="1" number="401">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="402">
            <code>  List&lt;E&gt; toList({bool growable = true}) {</code>
        </line>
        <line hits="1" number="403">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="404">
            <code>    if (l == 0) return growable ? [] : const [];</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="405">
            <code>    final res = List.filled(l, _get(0), growable: growable);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="406">
            <code>    for (var i = 1; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="407">
            <code>      res[i] = _get(i);</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="408">
            <code>    }</code>
        </line>
        <line number="409">
            <code>    return res;</code>
        </line>
        <line number="410">
            <code>  }</code>
        </line>
        <line number="411">
            <code/>
        </line>
        <line hits="1" number="412">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="413">
            <code>  Set&lt;E&gt; toSet() {</code>
        </line>
        <line hits="1" number="414">
            <code>    final s = &lt;E&gt;{}, l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="415">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="416">
            <code>      s.add(_get(i));</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="417">
            <code>    }</code>
        </line>
        <line number="418">
            <code>    return s;</code>
        </line>
        <line number="419">
            <code>  }</code>
        </line>
        <line number="420">
            <code/>
        </line>
        <line hits="1" number="421">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="422">
            <code>  String toString() {</code>
        </line>
        <line hits="1" number="423">
            <code>    _forceCast();</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="424">
            <code>    return _data.toString();</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="425">
            <code>  }</code>
        </line>
        <line number="426">
            <code/>
        </line>
        <line hits="1" number="427">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="428">
            <code>  Iterable&lt;E&gt; where(bool Function(E element) test) sync* {</code>
        </line>
        <line hits="1" number="429">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="430">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="431">
            <code>      final v = _get(i);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="432">
            <code>      if (test(v)) yield v;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="433">
            <code>    }</code>
        </line>
        <line number="434">
            <code>  }</code>
        </line>
        <line number="435">
            <code/>
        </line>
        <line hits="1" number="436">
            <code>  @override</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="437">
            <code>  Iterable&lt;U&gt; whereType&lt;U&gt;() sync* {</code>
        </line>
        <line hits="1" number="438">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="439">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="440">
            <code>      final v = _get(i);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="441">
            <code>      if (v is U) yield v;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="442">
            <code>    }</code>
        </line>
        <line number="443">
            <code>  }</code>
        </line>
        <line number="444">
            <code/>
        </line>
        <line hits="1" number="445">
            <code>  List&lt;dynamic&gt; _forceCast() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="446">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="447">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="448">
            <code>      _get(i);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="449">
            <code>    }</code>
        </line>
        <line hits="1" number="450">
            <code>    return _data;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="451">
            <code>  }</code>
        </line>
        <line number="452">
            <code/>
        </line>
        <line hits="2" number="453">
            <code>  E _get(int idx) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="454">
            <code>    dynamic v = _data[idx];</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="455">
            <code>    if (v != null &amp;&amp; v is! E) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="456">
            <code>      v = _cast(v);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="457">
            <code>      _data[idx] = v;</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="458">
            <code>    }</code>
        </line>
        <line number="459">
            <code>    return v;</code>
        </line>
        <line number="460">
            <code>  }</code>
        </line>
        <line number="461">
            <code/>
        </line>
        <line hits="1" number="462">
            <code>  Iterable&lt;E&gt; _iterate() sync* {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="463">
            <code>    final l = length;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="464">
            <code>    for (var i = 0; i &lt; l; i++) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="465">
            <code>      yield _get(i);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="466">
            <code>    }</code>
        </line>
        <line number="467">
            <code>  }</code>
        </line>
        <line number="468">
            <code>}</code>
        </line>
        <line number="469">
            <code/>
        </line>
        <line number="470">
            <code>// copied from dart-sdk\lib\internal\iterable.dart</code>
        </line>
        <line number="471">
            <code>sealed class _ListError {</code>
        </line>
        <line hits="2" number="472">
            <code>  static StateError noElement() =&gt; StateError("No element");</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="2" number="473">
            <code>  static StateError tooMany() =&gt; StateError("Too many elements");</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="474">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../../"/>
    <base href="../../"/>
</coverage>
